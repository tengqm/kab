description: |
  RawExtension is used to hold extensions in external versions.
  To use this, make a field which has `RawExtension` as its type in your external, versioned struct,
  and `Object` in your internal struct. You also need to register your various plugin types.

  ```
  // Internal package:
  type MyAPIObject struct {
    runtime.TypeMeta `json:",inline"`
    MyPlugin runtime.Object `json:"myPlugin"`
  }

  type PluginA struct {
    AOption string `json:"aOption"`
  }

  // External package:\ntype MyAPIObject
  struct {
    runtime.TypeMeta `json:",inline"`
    MyPlugin runtime.RawExtension `json:"myPlugin"`
  }
  type PluginA struct {
    AOption string `json:"aOption"`
  }
  ```

  On the wire, the JSON will look something like this:

  ```
  {
    "kind": "MyAPIObject",
    "apiVersion": "v1",
    "myPlugin": {
      "kind": "PluginA",
      "aOption": "foo",
    },
  }
  ```

  Decode first uses JSON or YAML to unmarshal the serialized data into your external object.
  That causes the raw JSON to be stored, but not unpacked.
  The next step is to copy (using `pkg/conversion`) into the internal struct.
  The `runtime` package's `DefaultScheme` has conversion functions installed which will unpack the JSON
  stored in `RawExtension`, turning it into the correct object type, and storing it in the `Object`.
x-kab-description-zh: |
  RawExtension 被用来在外部版本中保存扩展信息。
  要使用 `RawExtension`，先要在你的外部版本化结构中添加一个类型为 `RawExtension` 的字段，
  之后在你的内部结构中添加 `Object`。你还需要注册插件的类型。

  ```
  // 内部包：
  type MyAPIObject struct {
    runtime.TypeMeta `json:",inline"`
    MyPlugin runtime.Object `json:"myPlugin"`
  }

  type PluginA struct {
    AOption string `json:"aOption"`
  }

  // 外部包：
  type MyAPIObject struct {
    runtime.TypeMeta `json:",inline"`
    MyPlugin runtime.RawExtension `json:"myPlugin"`
  }
  type PluginA struct {
    AOption string `json:"aOption"`
  }
  ```

  数据被传输时，JSON 的样子如下：

  ```
  {
    "kind": "MyAPIObject",
    "apiVersion": "v1",
    "myPlugin": {
      "kind": "PluginA",
      "aOption": "foo",
    },
  }
  ```

  解码逻辑会首先使用 JSON 或者 YAML 来将序列化的数据解包到外部对象中。
  解包的结果是原始的 JSON 数据被保存起来，但没有进一步解析。
  下一步是使用 `pkg/converion` 将数据复制到内部结构中。
  `runtime` 包的 `DefaultScheme` 中包含转换函数，可以将 `RawExtension` 中保存的 JSON 数据解析出来，
  并将其转换为正确的对象类型，保存到 `Object` 中。
type: object

