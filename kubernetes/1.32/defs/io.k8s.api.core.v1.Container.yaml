description: A container to run within a Pod.
x-kab-description-zh: Pod 中运行的一个容器。
properties:
  args:
    description: |
      Arguments to the `command`.
      The container image's `CMD` is used if this is not provided.
      Variable references `$(VAR_NAME)` are expanded using the container's environment.
      If a variable cannot be resolved, the reference in the input string will be unchanged.
      Double dollar (`$$`) are reduced to a single dollar (`$`), 
      which allows for escabing the `$(VAR_NAME)` syntax: i.e.
      `"$$(VAR_NAME)"` will produce the string literal `"$(VAR_NAME)"`.
      Escaped references will never be expanded, regardless of whether the variable exists or not.
      Cannot be updated.
    x-kab-description-zh: |
      为 `command` 命令提供的参数列表。如果没有设置此字段，则使用容器镜像中的 `CMD` 值。
      `args` 中可以通过语法 `"$(VAR_NAME)"` 引用环境变量，但只能使用容器内部的环境变量。
      如果所给的环境变量无法解析，变量引用不会被处理。可以使用 `"$$"` 来对 `"$"` 进行转义，
      从而可以对 `"$(VAR_NAME)"` 这种语法进行转义。例如，`"$$(VAR_NAME)"` 会被转义为
      `"$(VAR_NAME)"`。被转义后的引用不会再被展开，无论对应的环境变量是否存在。
      此字段只能在创建时设置，不能更新。
    items:
      type: string
    type: array
    x-kubernetes-list-type: atomic
  command:
    description: |
      Entrypoint array. The container image's `ENTRYPOINT` is used if this is not provided.
      The command is **NOT** executed within a shell.
      Variable references `"$(VAR_NAME)"` are expanded using the container's environment.
      If a variable cannot be resolved, the reference in the input string will be unchanged.
      Double dollars (`"$$"`) are reduced to a single dollar (`"$"`), which allows for
      escaping the `"$(VAR_NAME)"` syntax: i.e. the `"$(VAR_NAME)"` will produce the string literal
      `"$(VAR_NAME)"`.
      Escaped references will never be expanded, regardless of whether the variable exists or not.
      Cannot be updated.
    x-kab-description-zh: |
      描述容器入口点的数组。如果没有提供 `command`，则使用镜像中的 `ENTRYPOINT` 设置。
      这里所给的命令不会在一个 Shell 中执行。类似 `$(VAR_NAME)` 这类环境变量会使用容器的环境变量值展开。
      如果所引用的变量无法被解析，则对应的引用字符串不会被处理。可以使用 `$$` 来对 `$` 进行转义，
      从而可以对 `$(VAR_NAME)` 这种语法进行转义。例如，`$$(VAR_NAME)` 会被转义为
      `$(VAR_NAME)`。被转义后的引用不会再被展开，无论对应的环境变量是否存在。
      此字段只能在创建时设置，不能更新。
    items:
      type: string
    type: array
    x-kubernetes-list-type: atomic
  env:
    description: |
      List of environment variables to set in the container. Cannot be updated.
    x-kab-description-zh: |
      需要为容器设置的环境变量。只能创建时设置，不能更新。
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.EnvVar'
    type: array
    x-kubernetes-list-map-keys:
      - name
    x-kubernetes-list-type: map
    x-kubernetes-patch-merge-key: name
    x-kubernetes-patch-strategy: merge
  envFrom:
    description: |
      List of sources to populate environment variables in the container.
      The keys defined within a source must be a valid DNS subdomain name.
      They must consist of alphanumeric characters, `'.'`, `'-'`, or `'_'`.
      They cannot start with `".."` or a digit. They cannot be `"."` or `".."`.
      All invalid keys will be reported as an event when the container is starting.
      When a key exists in multiple sources, the value associated with the last source
      will take precedence.
      Values defined by an `env` with a duplicate key will take precedence.
      Cannot be updated.
    x-kab-description-zh: |
      此字段为一个列表，给出一组来源，用来为容器设置环境变量。
      每个来源定义所使用的键名必须是合法的 DNS 子域名，其中只能包含字母、数字以及
      `'.'`、`'-'` 或者 `'_'`。键名不能以 `".."` 或者数字开头，也不可以是 `"."` 或者 `".."`。
      对于所有的非法键名，在容器启动时都会以事件形式形成报告。如果某个键名在多个来源中同时存在，
      优先选择最后一个来源中的键值。如果 `env` 中存在重名的键名，以 `env` 中的定义为准。
      此字段不可更新。
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.EnvFromSource'
    type: array
    x-kubernetes-list-type: map
  image:
    description: |
      Container image name. The special value `""` is reserved to allow higher level
      config management to default or override container images in workload
      controllers like Deployments and StatefulSets.
    x-kab-description-zh: |
      容器镜像名称。允许使用空字符串（`""`）。空字符串用来预留给上层的配置管理工具设置默认值，
      或者在类似 Deployment、StatefulSet 这类工作负载控制器中重载容器镜像名称。
    type: string
  imagePullPolicy:
    description: |
      Image pull policy. Defaults to `"Always"` if the `":latest"` tag is specified,
      or `"IfNotPresent"` otherwise. Possible enum values:

      - `"Always"` means that kubelet always attempts to pull the latest image.
        Container will fail if the pull fails.
      - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk.
        Container will fail if the image isn't present and the pull fails.
      - `"Never"` means that kubelet never pulls an image, but only uses a local image.
        Container will fail if the image isn't present.

      Cannot be updated. 
    x-kab-description-zh: |
      镜像拉取策略设置。如果使用了标签为 `":latest"` 的镜像，则默认值为 `"Always"`，
      否则默认值为 `"IfNotPresent"`。合法的取值包括：

      - `"Always"`：意味着 kubelet 总会尝试去拉取最新的镜像。如果镜像拉取不成功，则容器也会失败。
      - `"IfNotPresent"`：kubelet 会在磁盘上不存在镜像时才拉取镜像。当镜像不存在并且拉取操作失败时，容器也失败。
      - `"Never"`：kubelet 不会发起镜像拉取操作，只使用本地已存在的镜像。如果镜像不存在则容器会失败。

      此字段不可更新。
    enum:
      - Always
      - IfNotPresent
      - Never
    type: string
  lifecycle:
    $ref: '#/definitions/io.k8s.api.core.v1.Lifecycle'
    description: |
      Actions that the management system should take in response to container lifecycle events.
      This cannot be specified on an init container. Cannot be updated.
    x-kab-description-zh: |
      设置发生容器生命周期事件时管理系统需要采取的动作。这一字段不能用于 Init 容器。
      此字段不支持更新。
  livenessProbe:
    $ref: '#/definitions/io.k8s.api.core.v1.Probe'
    description: |
      Periodic probe of container liveness. Container will be restarted if the probe fails.
      Can be null. It cannot be used on an init container. Cannot be updated.
    x-kab-description-zh: |
      周期性探测容器存活态的探针。如果此探针失败，容器会被重启。此字段不适用于 Init 容器。
      此字段可以不设置。此字段不支持更新。
  name:
    description: |
      Name of the container. Each container in a Pod must have a unique name (DNS_LABEL).
      Cannot be updated.
    x-kab-description-zh: |
      容器的名称。Pod 中的每个容器都应该设置一个与众不同的名称，且名称要符合 DNS 标签格式要求。
      此字段不可更新。
    minLength: 1
    type: string
  ports:
    description: |
      List of ports to expose from the container.
      Not specifying a port here DOES NOT prevent that port from being exposed.
      Any port which is listening on the default "0.0.0.0" address inside a container
      will be accessible from the network.
      Modifying this array with strategic merge patch may corrupt the data.
      Cannot be updated.
    x-kab-description-zh: 
      容器要向外公开的端口列表。需要注意，即使这里不包含某个端口，并不意味着对应的端口不能被公开。
      容器内所有在 `"0.0.0.0"` 上监听的端口都可以在网络上被访问到。
      通过策略性合并的补丁策略来更改此字段时，可能会导致配置数据被破坏。
      此字段不支持更新。
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.ContainerPort'
    type: array
    x-kubernetes-list-map-keys:
      - containerPort
      - protocol
    x-kubernetes-list-type: map
    x-kubernetes-patch-merge-key: containerPort
    x-kubernetes-patch-strategy: merge
  readinessProbe:
    $ref: '#/definitions/io.k8s.api.core.v1.Probe'
    description: |
      Periodic probe of container service readiness.
      Container will be removed from Service endpoints if the probe fails.
      This cannot be used against an init container.
      Cannot be updated.
    x-kab-description-zh: |
      用来检查容器就绪态的周期性探针。如果探针失败，则容器会被从对应的 Service 端点列表中去除。
      此字段不适用于 Init 容器。此字段不可更新。
  resizePolicy:
    description: |
      Resources resize policy for the container. The `resourceName` must be unique across the array.
    x-kab-description-zh: |
      容器的资源大小重设策略。列表中的各个条目的 `resourceName` 不可重复。
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.ContainerResizePolicy'
    type: array
    x-kubernetes-list-type: atomic
  resources:
    $ref: '#/definitions/io.k8s.api.core.v1.ResourceRequirements'
    description: Resources required by this container. Cannot be updated.
    x-kab-description-zh: 此容器的资源请求与限制设置。不可更新。
  restartPolicy:
    description: |
      This defines the restart behavior of individual containers in a Pod.
      This field may only be set for init containers, and the only allowed value is `"Always"`.
      For non-init containers or when this field is not specified, the restart behavior is defined
      by the Pod's restart policy and the container type.
      Setting the `restartPolicy` to `"Always"` for an init container will have the following effect:
      the init container will be continually restarted on exit until all regular containers have
      terminated. Once all regular containers have completed, all init containers with restartPolicy
      `"Always"` will be shut down.
      This lifecycle differs from normal init containers and is often referred to as a \"sidecar\"
      container. Although this init container still starts in the init container sequence,
      it does not wait for the container to complete before proceeding to the next init container.
      Instead, the next init container starts immediately after this init container is started,
      or after any `startupProbe` has successfully completed.
    x-kab-description-zh: |
      此字段用来设置 Pod 中各个容器的重启策略。这个字段只能应用在初始化容器（Init Container）之上，
      并且合法的取值只能是 `"Always"`。
      对于非初始化容器以及未设置 `restartPolicy` 的初始化容器，其重启策略是由 Pod 和容器类型来决定的。
      将初始化容器的 `restartPolicy` 设置为 `"Always"` 会有以下效果：
      这些初始化容器在退出之后会被持续重启，知道所有常规容器都已经结束为止。
      当所有常规容器都已经结束退出时，`restartPolicy` 设置为 `"Always"` 的初始容器也会被停止。
      这一生命周期行为与普通的初始化容器不同，通常被称作**边车（Sidecar）容器**。
      尽管这类边车容器也是在初始化容器序列中被启动，但它们不会等待前面的容器结束才启动。
      各个边车容器是相继启动的。边车容器可以等待前序容器的 `startupProbe` 成功再启动。
    enum:
      - Always
    type: string
  securityContext:
    $ref: '#/definitions/io.k8s.api.core.v1.SecurityContext'
    description: |
      The security options the container should be run with.
      If set, the fields of `securityContext` override the equivalent fields of Pod `securityContext`.
    x-kab-description-zh: |
      容器运行的安全选项。如果设置了这个字段，则其中的设置值会重载 Pod 层面的 `securityContext` 设置。
  startupProbe:
    $ref: '#/definitions/io.k8s.api.core.v1.Probe'
    description:
      This probe indicates that the Pod has been successfully initialized.
      If specified, no other probes are executed until this probe completes successfully.
      If this probe fails, the Pod will be restarted, just as if the `livenessProbe` failed.
      This can be used to provide different probe parameters at the beginning of a Pod's lifecycle,
      when it might take a long time to load data or warm a cache, than during steady-state operation.
      This cannot be set on an init container.
      This cannot be updated. The `successThreshold`, if specified, must be 1.
    x-kab-description-zh: |
      此探针表明容器已经被成功地初始化了。如果设置了此字段，则只有等此探针成功结束之后，才会运行其他探针。
      如果此探针执行失败，则 Pod 会被重启，就像 `livenessProbe` 探针失败一样。
      此字段可用来在 Pod 的生命周期开始时，执行一些不同的探测逻辑。
      例如 Pod 可能需要较长的时间来加载数据或者初始化数据缓存。
      此字段不适用于初始化容器。
      一旦设置之后，不能更新。
      其中的 `successThreshold`，如果设置了，只能是 1。
  stdin:
    default: false
    description: |
      Whether this container should allocate a buffer for stdin in the container runtime.
      If this is not set, reads from stdin in the container will always result in EOF.
      This is a variable for interactive containers.
      It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.
    x-kab-description-zh: |
      用来指示容器是否要从容器运行时那里分配用于标准输入的缓冲区。
      若未设置此字段，则容器内读取标准输入时总会读到 EOF。
      此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
    type: boolean
  stdinOnce:
    default: false
    description: |
      Whether the container runtime should close the stdin channel after it has been opened by a single
      `attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions.
      If `stdinOnce` is set to `true`, stdin is opened on container start,
      is empty until the first client attaches to stdin, and then remains open and accepts data
      until the client disconnects, at which time stdin is closed and remains closed until
      the container is restarted.
      If this flag is false, a container processes that reads from stdin will never receive an EOF.

      This is a variable for interactive containers.
      It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.
    x-kab-description-zh: |
      指示容器运行时是否应该在为某个 `attach` 操作打开标准输入通道之后将其关闭。
      当 `stdin` 设置为 `true` 时，标准输入的数据流会一直被打开，可用于多个 `attach` 会话。
      若 `stdinOnce` 被设置为 `true`, 容器启动时标准输入是打开状态的，在第一个客户端挂接到标准输入之前保持为空。
      接下来一直保持打开状态，接收客户端的数据，直到客户端断开链接。
      此后，标准输入通道一直处于关闭状态，直到容器被再次重启为止。
      当 `stdinOnce` 为 `false` 时，从标准输入读数据的容器进程不会收到 EOF。
      此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
    type: boolean
  terminationMessagePath:
    default: /dev/termination-log
    description: |
      The mount path in the container's filesystem for a termination log file.
      The container's termination message will be written into this file.
      Message written is intended to be brief final status, such as an assertion failure message.
      Will be truncated by the node if greater than 4096 bytes.
      The total message length across all containers will be limited to 12kb.
      Cannot be updated.
    x-kab-description-zh: |
      给出容器文件系统中的一个挂载路径，用于存放终止日志（Termination Log）文件。
      容器的终止消息会被写到这个文件中。
      写入到这里的消息通常是比较简单的状态描述，例如某种断言失败消息。
      如果消息文字大于 4096 字节，则节点会将其截断。所有容器的终止消息的长度不能超过 12 KB。
      此字段不支持更新。
    type: string
  terminationMessagePolicy:
    default: File
    description: |
      This attribute indicates how the termination message should be populated.
      Possible enum values:
      - `"FallbackToLogsOnError"` will read the most recent contents of the container logs for
        the container status message when the container exits with an error and the
        `terminationMessagePath` has no contents.
        The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
      - `"File"` is the default behavior and will use the contents of `terminationMessagePath` file
        to populate the container status message on both success and failure.
        Cannot be updated.
    x-kab-description-zh: |
      此属性用来标明如何填充终止消息。可选的枚举值包括：

      - `"FallbackToLogsOnError"`：当容器以出错状态结束且 `terminationMessagePath`
        中没有内容时，读取容器日志的最新内容，作为容器的状态消息。日志输出限制为 2048
        字节或者 80 行，取其中较小者。
      - `"File"\`：默认行为，使用 `terminationMessagePath` 所设置文件的内容来填充容器状态消息，
        无论容器是否以成功状态结束。

      此字段不能更新。
    enum:
      - FallbackToLogsOnError
      - File
    type: string
  tty:
    default: false
    description: |
      Whether this container should allocate a TTY for itself.
      When this is set to `true`, the `stdin` attribute has to be `true` as well.
      This is a variable for interactive containers.
      It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.
    x-kab-description-zh: |
      设置此容器是否需要为自己分配一个 TTY 终端。字段设置为 `true` 时，`stdin` 属性也必须为 `true`。
      此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
    type: boolean
  volumeDevices:
    description: The list of block devices to be used by the container.
    x-kab-description-zh: 容器所使用的块设备列表。
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.VolumeDevice'
    type: array
    x-kubernetes-list-map-keys:
      - devicePath
    x-kubernetes-list-type: map
    x-kubernetes-patch-merge-key: devicePath
    x-kubernetes-patch-strategy: merge
  volumeMounts:
    description: Pod volumes to mount into the container's filesystem. Cannot be updated.
    x-kab-description-zh: 要挂载到容器内文件系统中的 Pod 层定义的卷。不支持更新。
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.VolumeMount'
    type: array
    x-kubernetes-list-map-keys:
      - mountPath
    x-kubernetes-list-type: map
    x-kubernetes-patch-merge-key: mountPath
    x-kubernetes-patch-strategy: merge
  workingDir:
    description: |
      Container's working directory. If not specified, the container runtime's default will be used,
      which might be configured in the container image. Cannot be updated.
    x-kab-description-zh: |
      容器的工作目录。如果未设置，将使用容器运行时所给的默认值。
      这一默认值可能会根据容器镜像的配置来设定。
      不支持更新。
    type: string
required:
  - image
  - name
type: object

