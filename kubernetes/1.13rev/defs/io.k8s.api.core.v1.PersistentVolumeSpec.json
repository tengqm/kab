{
  "description": "The specification of a persistent volume. One and only one volume type can be specified. The volume source cannot be updated once created.",
  "properties": {
    "accessModes": {
      "description": "The ways the volume can be mounted.",
      "items": {
        "type": "string",
        "enum": [
          "ReadOnlyMany",
          "ReadWriteMany",
          "ReadWriteOnce"
        ]
      },
      "type": "array"
    },
    "awsElasticBlockStore": {
      "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
      "description": "An AWS disk resource that is attached to a kubelet's host machine and then exposed to the pod."
    },
    "azureDisk": {
      "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
      "description": "An Azure data disk mounted on the node and bind mounted to the pod."
    },
    "azureFile": {
      "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource",
      "description": "An Azure file service mounted on the node and bind mounted to the pod."
    },
    "capacity": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
      },
      "description": "A description of the persistent volume's resources and capacity. The capacity can only contain '`storage`'.",
      "type": "object"
    },
    "cephfs": {
      "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource",
      "description": "A Ceph FS mounted on the node that shares a pod's lifetime"
    },
    "cinder": {
      "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource",
      "description": "A cinder volume attached and mounted on node."
    },
    "claimRef": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
      "description": "Part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.volumeName is the authoritative bind between PV and PVC."
    },
    "csi": {
      "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource",
      "description": "Storage that is handled by an external CSI driver."
    },
    "fc": {
      "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
      "description": "A fibre channel resource that is attached to a node and then exposed to the pod."
    },
    "flexVolume": {
      "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource",
      "description": "A generic volume resource that is provisioned/attached using an exec-based plugin."
    },
    "flocker": {
      "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
      "description": "A flocker volume attached to a node and exposed to the pod for its usage."
    },
    "gcePersistentDisk": {
      "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
      "description": "A GCE disk resource that is attached to a node and then exposed to the pod."
    },
    "glusterfs": {
      "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource",
      "description": "A Glusterfs volume that is attached to a node and exposed to the pod."
    },
    "hostPath": {
      "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
      "description": "A directory on the node. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster."
    },
    "iscsi": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource",
      "description": "An ISCSI disk that is attached to a node and then exposed to the pod."
    },
    "local": {
      "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource",
      "description": "Directly-attached storage with node affinity"
    },
    "mountOptions": {
      "description": "A list of mount options. Not validated - mount will simply fail if one is invalid.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "nfs": {
      "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
      "description": "An NFS mount on the node."
    },
    "nodeAffinity": {
      "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity",
      "description": "Constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume. This can be updated if not set yet."
    },
    "persistentVolumeReclaimPolicy": {
      "description": "What happens to a persistent volume when released from its claim. Valid options are '`Retain`' (default for manually created PersistentVolumes), '`Delete`' (default for dynamically provisioned PersistentVolumes), and '`Recycle`' (deprecated). '`Recycle`' must be supported by the volume plugin underlying this PersistentVolume. Hostpath volume mounts of '`/`' cannot be used with the `Recycle` policy.",
      "enum": [
        "Delete",
        "Recycle",
        "Retain"
      ],
      "type": "string"
    },
    "photonPersistentDisk": {
      "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
      "description": "A PhotonController persistent disk attached and mounted on the node"
    },
    "portworxVolume": {
      "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
      "description": "A portworx volume attached and mounted on the node"
    },
    "quobyte": {
      "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
      "description": "A quobyte mount on the node that shares a pod's lifetime"
    },
    "rbd": {
      "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource",
      "description": "A Rados Block Device mounted on the node that shares a pod's lifetime"
    },
    "scaleIO": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource",
      "description": "A ScaleIO persistent volume attached and mounted on the nodes."
    },
    "storageClassName": {
      "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
      "type": "string"
    },
    "storageos": {
      "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource",
      "description": "A StorageOS volume that is attached to the node and mounted into the pod"
    },
    "volumeMode": {
      "default": "Filesystem",
      "description": "This defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. This cannot be updated.",
      "enum": [
        "device",
        "filesystem"
      ],
      "type": "string"
    },
    "vsphereVolume": {
      "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
      "description": "A vSphere volume attached and mounted on the node"
    }
  },
  "required": [
    "accessModes",
    "capacity"
  ],
  "type": "object"
}
