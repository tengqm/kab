{
  "info": {
    "title": "Kubernetes",
    "version": "v1.16.0"
  },
  "swagger": "2.0",
  "definitions": {
    ".k8s.api.apps.v1.Deployment.GET": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.GET",
          "description": "Specification of the desired behavior of the Deployment."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus",
          "description": "Most recently observed status of the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list is supported by the API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the `failurePolicy`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig",
          "description": "Information for communicating with the hook."
        },
        "failurePolicy": {
          "default": "Fail",
          "description": "How unrecognized errors from the admission endpoint are handled",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Equivalent",
          "description": "How the 'rules' list is used to match incoming requests. '`Exact`' means matching a request only if it exactly matches a specified rule. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', but `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would not be sent to the webhook. '`Equivalent`' means matching a request if modifies a resource listed in `rules`, even via another API group or version. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', and `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would be converted to 'apps/v1' and sent to the webhook.",
          "enum": [
            "Exact",
            "Equivalent"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., '`imagepolicy.kubernetes.io`', where '`imagepolicy`' is the name of the webhook, and '`kubernetes.io`' is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace to the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with 'runlevel' of '`0`' or '`1`';  you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [\"0\", \"1\"]}]}`. If instead you want to only run the webhook on any objects whose namespace is associated with the `environment` of '`prod`' or '`staging`', you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"environment\", \"operator\": \"In\", \"values\": [\"prod\", \"staging\"]}]}`. Default to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "reinvocationPolicy": {
          "default": "Never",
          "description": "This indicates whether this webhook should be called multiple times as part of a single admission evaluation. '`Never`' means the webhook will not be called more than once in a single admission evaluation. '`IfNeeded`' means the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: the number of additional invocations is not guaranteed to be exactly one. If additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. Webhooks that use this option may be reordered to minimize the number of additional invocations. To validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.",
          "enum": [
            "IfNeeded",
            "Never"
          ],
          "type": "string"
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ entry defined in the `rules`. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "description": "Whether this webhook has side effects. Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone.",
          "enum": [
            "None",
            "NoneOnDryRun"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 10,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList": {
      "description": "A list of MutatingWebhookConfiguration.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of MutatingWebhookConfiguration.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
      "description": "A tuple of operations and resources. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "The API groups the resources belong to. '`*`' is the wildcard for all groups. If '`*`' is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "apiVersions": {
          "description": "The API versions the resources belong to. '`*`' means all versions. If '`*`' is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "operations": {
          "description": "The operations the admission hook cares about. '`*`' means all operations. If '`*`' is present, the length of the slice must be one.",
          "items": {
            "enum": [
              "*",
              "CREATE",
              "UPDATE",
              "DELETE",
              "CONNECT"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. For example: '`pods`' means pods. '`pods/log`' means the `log` subresource of pods. '`*`' means all resources, but not subresources. '`pods/*`' means all subresources of pods. '`*/scale`' means all scale subresources. '`*/*`' means all resources and their subresources. If a wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "scope": {
          "default": "*",
          "description": "The scope of this rule. '`Cluster`' means that only cluster-scoped resources will match this rule. '`Namespaced`' means that only namespaced resources will match this rule. '`*`' means that there are no scope restrictions. Subresources match the scope of their parent resource.",
          "enum": [
            "Cluster",
            "Namespaced",
            "*"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroups",
        "apiVersions",
        "operations",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "description": "ServiceReference holds a reference to Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "type": "string"
        },
        "path": {
          "description": "An optional URL path which will be sent in any request to this Service.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the service that hosting webhook",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig",
          "description": "Information for communicating with the webhook."
        },
        "failurePolicy": {
          "default": "Fail",
          "description": "How unrecognized errors from the admission endpoint are handled.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Equivalent",
          "description": "How the `rules` list is used to match incoming requests. '`Exact`' means matching a request only if it exactly matches a specified rule. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', but `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would not be sent to the webhook. '`Equivalent`' means matching a request if modifies a resource listed in `rules`, even via another API group or version. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', and `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would be converted to 'apps/v1' and sent to the webhook.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., imagepolicy.kubernetes.io, where \"imagepolicy\" is the name of the webhook, and kubernetes.io is the name of the organization. Required.",
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace and the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with 'runlevel' of '`0`' or '`1`';  you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [\"0\", \"1\"]}]}`. If instead you want to only run the webhook on any objects whose namespace is associated with the 'environment' of '`prod`' or '`staging`', you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"environment\", \"operator\": \"In\", \"values\":[\"prod\", \"staging\"]}]}`. Default to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ entry defined in the `rules`. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "description": "Whether this webhook has side effects. Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the `dryRun` attribute will be auto-rejected if they match a webhook with `sideEffects` of '`Unknown`' or '`Some`'.",
          "enum": [
            "None",
            "NoneOnDryRun"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 10,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig",
        "sideEffects",
        "admissionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList": {
      "description": "A list of ValidatingWebhookConfiguration.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of ValidatingWebhookConfiguration.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "description": "The information for making a TLS connection with the webhook. Either `service` or `url` must be specified.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference",
          "description": "A reference to the Service for this webhook. If the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "The location of the webhook in standard URL form ('`scheme://host:port/path`'). The `host` should not refer to a service running in the cluster; use the `service` field instead. The `host` might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be '`https`'. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. '`user:password@`' is not allowed. Fragments ('`#...`') and query parameters ('`?...`') are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "default": [
            "v1beta1"
          ],
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list is supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the `failurePolicy`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig",
          "description": "Information for communicating with the hook."
        },
        "failurePolicy": {
          "default": "Ignore",
          "description": "How unrecognized errors from the admission endpoint are handled",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Exact",
          "description": "How the 'rules' list is used to match incoming requests. '`Exact`' means matching a request only if it exactly matches a specified rule. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', but `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would not be sent to the webhook. '`Equivalent`' means matching a request if modifies a resource listed in `rules`, even via another API group or version. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', and `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would be converted to 'apps/v1' and sent to the webhook.",
          "enum": [
            "Exact",
            "Equivalent"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., '`imagepolicy.kubernetes.io`', where '`imagepolicy`' is the name of the webhook, and '`kubernetes.io`' is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace to the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with 'runlevel' of '`0`' or '`1`';  you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [\"0\", \"1\"]}]}`. If instead you want to only run the webhook on any objects whose namespace is associated with the `environment` of '`prod`' or '`staging`', you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"environment\", \"operator\": \"In\", \"values\": [\"prod\", \"staging\"]}]}`. Default to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "reinvocationPolicy": {
          "default": "Never",
          "description": "This indicates whether this webhook should be called multiple times as part of a single admission evaluation. '`Never`' means the webhook will not be called more than once in a single admission evaluation. '`IfNeeded`' means the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call. Webhooks that specify this option *must* be idempotent, able to process objects they previously admitted. Note: the number of additional invocations is not guaranteed to be exactly one. If additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. Webhooks that use this option may be reordered to minimize the number of additional invocations. To validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.",
          "enum": [
            "IfNeeded",
            "Never"
          ],
          "type": "string"
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ entry defined in the `rules`. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "default": "Unknown",
          "description": "Whether this webhook has any side effects. Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the `dryRun` attribute will be auto-rejected if they match a webhook with `sideEffects` of '`Unknown`' or '`Some`'.",
          "enum": [
            "None",
            "NoneOnDryRun",
            "Some",
            "Unknown"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 30,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET": {
      "description": "MutatingWebhookConfiguration describes the configuration of an admission webhook that accepts or rejects and may change an object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.UPDATE": {
      "description": "MutatingWebhookConfiguration describes the configuration of an admission webhook that accepts or rejects and may change an object. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 MutatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList": {
      "description": "A collection of MutatingWebhookConfiguration.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of MutatingWebhookConfiguration.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.RuleWithOperations": {
      "description": "A tuple of operations and resources. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "The API groups the resources belong to. '`*`' is the wildcard for all groups. If '`*`' is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "apiVersions": {
          "description": "The API versions the resources belong to. '`*`' means all versions. If '`*`' is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "operations": {
          "description": "The operations the admission hook cares about. '`*`' means all operations. If '`*`' is present, the length of the slice must be one.",
          "items": {
            "enum": [
              "*",
              "CREATE",
              "UPDATE",
              "DELETE",
              "CONNECT"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. For example: '`pods`' means pods. '`pods/log`' means the `log` subresource of pods. '`*`' means all resources, but not subresources. '`pods/*`' means all subresources of pods. '`*/scale`' means all scale subresources. '`*/*`' means all resources and their subresources. If a wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "scope": {
          "default": "*",
          "description": "The scope of this rule. '`Cluster`' means that only cluster-scoped resources will match this rule. '`Namespaced`' means that only namespaced resources will match this rule. '`*`' means that there are no scope restrictions. Subresources match the scope of their parent resource.",
          "enum": [
            "Cluster",
            "Namespaced",
            "*"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroups",
        "apiVersions",
        "operations",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ServiceReference": {
      "description": "A reference to Service object",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service.",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An URL path which will be sent in any request to this service. '`/`' and '' are always valid paths. '`//`' is invalid. The path has start with a '`/`'. The trailing '`/`' will be ignored. Each path segment must be a valid DNS subdomain.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the service that hosting webhook.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "default": [
            "v1beta1"
          ],
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig",
          "description": "Information for communicating with the webhook."
        },
        "failurePolicy": {
          "default": "Ignore",
          "description": "How unrecognized errors from the admission endpoint are handled.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Exact",
          "description": "How the `rules` list is used to match incoming requests. '`Exact`' means matching a request only if it exactly matches a specified rule. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', but `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would not be sent to the webhook. '`Equivalent`' means matching a request if modifies a resource listed in `rules`, even via another API group or version. For example, if deployments can be modified via 'apps/v1', 'apps/v1beta1', and 'extensions/v1beta1', and `rules` only included '`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`', a request to 'apps/v1beta1' or 'extensions/v1beta1' would be converted to 'apps/v1' and sent to the webhook.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., '`imagepolicy.kubernetes.io`', where '`imagepolicy`' is the name of the webhook, and '`kubernetes.io`' is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace and the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with 'runlevel' of '`0`' or '`1`';  you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"runlevel\", \"operator\": \"NotIn\", \"values\": [\"0\", \"1\"]}]}`. If instead you want to only run the webhook on any objects whose namespace is associated with the 'environment' of '`prod`' or '`staging`', you will set the selector as follows: `\"namespaceSelector\": {\"matchExpressions\": [{\"key\": \"environment\", \"operator\": \"In\", \"values\":[\"prod\", \"staging\"]}]}`. Default to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches _any_ entry defined in the `rules`. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "default": "Unknown",
          "description": "Whether this webhook has any side effects. Webhooks with side effects MUST implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the `dryRun` attribute will be auto-rejected if they match a webhook with `sideEffects` of '`Unknown`' or '`Some`'.",
          "enum": [
            "None",
            "NoneOnDryRun",
            "Some",
            "Unknown"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 30,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it. Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.  Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.  Deprecated in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "Webhooks is a list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList": {
      "description": "A list of ValidatingWebhookConfiguration.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ValidatingWebhookConfiguration.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig": {
      "description": "The information for making a TLS connection with the webhook. Either `service` or `url` must be specified.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ServiceReference",
          "description": "A reference to the Service for this webhook. If the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "The location of the webhook in standard URL form ('`scheme://host:port/path`'). The `host` should not refer to a service running in the cluster; use the `service` field instead. The `host` might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using `localhost` or `127.0.0.1` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be '`https`'. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. '`user:password@`' is not allowed. Fragments ('`#...`') and query parameters ('`?...`') are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.ControllerRevision.CREATE": {
      "description": "An immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validating all requests that attempt to mutate the `data` field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "The serialized representation of the state. This cannot be updated."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevision"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "revision": {
          "description": "The revision of the state represented by `data`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "revision",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevision.GET": {
      "description": "An immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validating all requests that attempt to mutate the `data` field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "The serialized representation of the state. This cannot be updated."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevision"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "revision": {
          "description": "The revision of the state represented by `data`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "revision",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevision.UPDATE": {
      "description": "An immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a ControllerRevision has been successfully created, it can not be updated. The API Server will fail validating all requests that attempt to mutate the `data` field. ControllerRevisions may, however, be deleted. Note that, due to its use by both the DaemonSet and StatefulSet controllers for update and rollback, this object is beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "The serialized representation of the state. This cannot be updated."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevision"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "revision": {
          "description": "The revision of the state represented by `data`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "revision",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevisionList": {
      "description": "A resource containing a list of ControllerRevision objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of ControllerRevisions",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevisionList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard List metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevisionList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet.CREATE": {
      "description": "The configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.CREATE",
          "description": "The desired behavior of this daemon set."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet.GET": {
      "description": "The configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.GET",
          "description": "The desired behavior of this daemon set."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus",
          "description": "The current status of this daemon set. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet.UPDATE": {
      "description": "The configuration of a daemon set.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.GET",
          "description": "The desired behavior of this daemon set."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus",
          "description": "The current status of this daemon set. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSetCondition": {
      "description": "DaemonSetCondition describes the state of a DaemonSet at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetList": {
      "description": "A list of daemon sets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of daemon sets.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSetSpec.CREATE": {
      "description": "The specification of a daemon set.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means the pods will be considered available as soon as it is ready).",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified)."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet pods with new pods."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetSpec.GET": {
      "description": "The specification of a daemon set.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means the pods will be considered available as soon as it is ready).",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified)."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet pods with new pods."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetSpec.UPDATE": {
      "description": "The specification of a daemon set.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "The minimum number of seconds for which a newly created DaemonSet pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means the pods will be considered available as soon as it is ready).",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified. Defaults to 10.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that are managed by the daemon set. Must match in order to be controlled. It must match the pod template's labels."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "An object that describes the pod that will be created. The DaemonSet will create exactly one copy of this pod on every node that matches the template's node selector (or on every node if no node selector is specified)."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet pods with new pods."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetStatus": {
      "description": "DaemonSetStatus represents the current status of a daemon set. More info: https://kubernetes.io/docs/concepts/workloads/controllers/daemonset/",
      "properties": {
        "collisionCount": {
          "description": "Count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ControllerRevision.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "Represents the latest available observations of a DaemonSet's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon pod and are supposed to run the daemon pod.",
          "format": "int32",
          "type": "integer"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon pod (including nodes correctly running the daemon pod).",
          "format": "int32",
          "type": "integer"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "format": "int32",
          "type": "integer"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon pod, but are not supposed to run the daemon pod.",
          "format": "int32",
          "type": "integer"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
          "format": "int32",
          "type": "integer"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon pod and have none of the daemon pod running and available (ready for at least spec.minReadySeconds)",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the daemon set controller.",
          "format": "int64",
          "type": "integer"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon pod",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currentNumberScheduled",
        "numberMisscheduled",
        "desiredNumberScheduled",
        "numberReady"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "description": "The update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet",
          "description": "Rolling update configuration parameters. Present only if `type` is set to '`RollingUpdate`'. This is required for rolling update."
        },
        "type": {
          "default": "RollingUpdate",
          "description": "Type of daemon set update.",
          "enum": [
            "OnDelete",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.Deployment.CREATE": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.CREATE",
          "description": "Specification of the desired behavior of the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.Deployment.GET": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.CREATE",
          "description": "Specification of the desired behavior of the Deployment."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus",
          "description": "The current information/status for the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.Deployment.UPDATE": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.UPDATE",
          "description": "Specification of the desired behavior of the Deployment."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus",
          "description": "The current information/status for the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DeploymentCondition": {
      "description": "The state of a Deployment at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time this condition was updated."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of Deployment condition.",
          "enum": [
            "Available",
            "Progressing",
            "ReplicaFailure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentList": {
      "description": "A list of Deployments.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of Deployments.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DeploymentList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DeploymentSpec.CREATE": {
      "description": "The specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the Deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "default": 600,
          "description": "The maximum time in seconds for a Deployment to make progress before it is considered to be failed. The Deployment controller will continue to process failed Deployments and a condition with a `ProgressDeadlineExceeded` reason will be surfaced in the Deployment Status. Note that progress will not be estimated during the time a Deployment is paused. The value must be greater than the `minReadySeconds`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "Number of desired Pods. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for Pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this Deployment. It must match the Pod template's labels. The `matchLabels` and `matchExpressions` cannot be both empty."
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "A template describes the pods that will be created."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentSpec.GET": {
      "description": "The specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available.",
          "format": "int32",
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the Deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "default": 600,
          "description": "The maximum time in seconds for a Deployment to make progress before it is considered to be failed. The Deployment controller will continue to process failed Deployments and a condition with a `ProgressDeadlineExceeded` reason will be surfaced in the Deployment Status. Note that progress will not be estimated during the time a Deployment is paused.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "Number of desired Pods. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for Pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this Deployment. It must match the Pod template's labels."
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "A template describes the pods that will be created."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentSpec.UPDATE": {
      "description": "The specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available.",
          "format": "int32",
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the Deployment is paused.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "default": 600,
          "description": "The maximum time in seconds for a Deployment to make progress before it is considered to be failed. The Deployment controller will continue to process failed Deployments and a condition with a `ProgressDeadlineExceeded` reason will be surfaced in the Deployment Status. Note that progress will not be estimated during the time a Deployment is paused.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "Number of desired Pods. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for Pods. Existing ReplicaSets whose pods are selected by this will be the ones affected by this Deployment. It must match the Pod template's labels."
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use to replace existing pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "A template describes the pods that will be created."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStatus": {
      "description": "The most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available pods (ready for at least `minReadySeconds`) targeted by this deployment. No greater than the desired replicas or the ready replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet. When updated, this value cannot be decremented.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "conditions": {
          "description": "The latest available observations of a deployment's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the deployment controller.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "readyReplicas": {
          "description": "Total number of ready pods targeted by this deployment. This cannot be greater than the desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "description": "Total number of non-terminated pods targeted by this deployment (their labels match the selector).",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable pods targeted by this deployment. This is the total number of pods that are still required for the deployment to have 100% available capacity. They may either be pods that are running but not yet available or pods that still have not been created.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated pods targeted by this deployment that have the desired template spec. Must be less than the desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "description": "This specifies how to replace existing pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment",
          "description": "Rolling update configuration parameters. This is required when `type` is '`RollingUpdate`'. When `type` is `Recreate`, this field is disallowed."
        },
        "type": {
          "default": "RollingUpdate",
          "description": "Type of update strategy",
          "enum": [
            "Recreate",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSet.CREATE": {
      "description": "A ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.CREATE",
          "description": "The specification of the desired behavior of the ReplicaSet."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSet.GET": {
      "description": "A ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata. If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.GET",
          "description": "The specification of the desired behavior of the ReplicaSet."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus",
          "description": "The most recently observed status of the ReplicaSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSet.UPDATE": {
      "description": "A ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. If the Labels of a ReplicaSet are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.UPDATE",
          "description": "The specification of the desired behavior of the ReplicaSet."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus",
          "description": "The most recently observed status of the ReplicaSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSetCondition": {
      "description": "The state of a replica set at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of replica set condition.",
          "enum": [
            "ReplicaFailure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetList": {
      "description": "A list of ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of ReplicaSets.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec.CREATE": {
      "description": "The specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Default valuee 0 means pods will be considered available as soon as they are ready",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. Empty selector is invalid."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "The object that describes the pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec.GET": {
      "description": "The specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Default valuee 0 means pods will be considered available as soon as they are ready",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. Empty selector is invalid."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object that describes the pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec.UPDATE": {
      "description": "The specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. Default valuee 0 means pods will be considered available as soon as they are ready",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over pods that should match the replica count. Label keys and values that must match in order to be controlled by this replica set. It must match the pod template's labels. Empty selector is invalid."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "The object that describes the pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetStatus": {
      "description": "The current status of a ReplicaSet.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least `minReadySeconds`) for this replica set.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "The latest available observations of a replica set's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replicaset.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The generation of the most recently observed ReplicaSet.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replica set.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "The most recently oberved number of replicas.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of daemon set rolling update.",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": 1,
          "description": "The maximum number of DaemonSet pods that can be unavailable during the update. Value can be an absolute number or a percentage of total number of DaemonSet pods at the start of the update. Absolute number is calculated from percentage by rounding up. This cannot be 0. Example: when this is set to 30%, at most 30% of the total number of nodes that should be running the daemon pod (i.e. `status.desiredNumberScheduled`) can have their pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet pods and then brings up new DaemonSet pods in their place. Once the new pods are available, it then proceeds onto other DaemonSet pods, thus ensuring that at least 70% of original number of DaemonSet pods are available at all times during the update."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update for a deployment.",
      "properties": {
        "maxSurge": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of pods that can be scheduled above the desired number of pods. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). This can not be 0 if `maxUnavailable` is 0. Absolute number is calculated from percentage by rounding up. Defaults to `25%`. Example: when this is set to 30%, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new pods do not exceed 130% of desired pods. Once old pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of pods running at any time during the update is at most 130% of desired pods."
        },
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The maximum number of pods that can be unavailable during the update. Value can be an absolute number (ex: 5) or a percentage of desired pods (ex: 10%). Absolute number is calculated from percentage by rounding down. This can not be 0 if `maxSurge` is 0. Defaults to `25%`. Example: when this is set to 30%, the old ReplicaSet can be scaled down to 70% of desired pods immediately when the rolling update starts. Once new pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of pods available at all times during the update is at least 70% of desired pods. This value cannot be more than 100%."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "description": "Used to communicate parameter for '`RollingUpdate`' strategy.",
      "properties": {
        "partition": {
          "default": 0,
          "description": "The ordinal at which the StatefulSet should be partitioned.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSet.CREATE": {
      "description": "A set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.CREATE",
          "description": "The desired identities of pods in this set."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus",
          "description": "The current status of Pods in this StatefulSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSet.GET": {
      "description": "A set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.GET",
          "description": "The desired identities of pods in this set."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus",
          "description": "The current status of Pods in this StatefulSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSet.UPDATE": {
      "description": "A set of pods with consistent identities. Identities are defined as: - Network: A single stable DNS and hostname. - Storage: As many VolumeClaims as requested. The StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.UPDATE",
          "description": "The desired identities of pods in this set."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus",
          "description": "The current status of Pods in this StatefulSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSetCondition": {
      "description": "The state of a StatefulSet at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of StatefulSet condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetList": {
      "description": "A list of StatefulSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSetSpec.CREATE": {
      "description": "The specification of a StatefulSet.",
      "properties": {
        "podManagementPolicy": {
          "default": "OrderedReady",
          "description": "This controls how Pods are created during initial scale up, when replacing Pods on nodes, or when scaling down. The default policy is '`OrderedReady`', where Pods are created in increasing order and the controller will wait until each Pod is ready before continuing. When scaling down, the Pods are removed in the opposite order. The alternative policy is '`Parallel`' which will create Pods in parallel to match the desired scale without waiting, and on scale down will delete all Pods at once. Cannot be updated.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "default": 1,
          "description": "The desired number of replicas of the given `template`. These are replicas in the sense that they are instantiations of the same `template`, but individual replicas also have a consistent identity.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied spec version. Cannot be updated.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the replica count. It must match the Pod template's labels. Cannot be updated."
        },
        "serviceName": {
          "description": "The name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: `pod-specific-string.serviceName.default.svc.cluster.local` where '`pod-specific-string`' is managed by the StatefulSet controller. Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object describes the Pod that will be created if insufficient replicas are detected. Each Pod stamped out by the StatefulSet will fulfill this `template`, but have a unique identity from the rest of the StatefulSet."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "The update strategy that will be employed to update Pods in the StatefulSet when a revision is made to `template`."
        },
        "volumeClaimTemplates": {
          "description": "A list of claims that Pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a Pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        }
      },
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetSpec.GET": {
      "description": "The specification of a StatefulSet.",
      "properties": {
        "podManagementPolicy": {
          "default": "OrderedReady",
          "description": "This controls how Pods are created during initial scale up, when replacing Pods on nodes, or when scaling down. The default policy is '`OrderedReady`', where Pods are created in increasing order and the controller will wait until each Pod is ready before continuing. When scaling down, the Pods are removed in the opposite order. The alternative policy is '`Parallel`' which will create Pods in parallel to match the desired scale without waiting, and on scale down will delete all Pods at once. Cannot be updated.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "default": 1,
          "description": "The desired number of replicas of the given `template`. These are replicas in the sense that they are instantiations of the same `template`, but individual replicas also have a consistent identity.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied spec version. Cannot be updated.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the replica count. It must match the Pod template's labels. Cannot be updated."
        },
        "serviceName": {
          "description": "The name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: `pod-specific-string.serviceName.default.svc.cluster.local` where '`pod-specific-string`' is managed by the StatefulSet controller. Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object describes the Pod that will be created if insufficient replicas are detected. Each Pod stamped out by the StatefulSet will fulfill this `template`, but have a unique identity from the rest of the StatefulSet."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "The update strategy that will be employed to update Pods in the StatefulSet when a revision is made to `template`."
        },
        "volumeClaimTemplates": {
          "description": "A list of claims that Pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a Pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        }
      },
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetSpec.UPDATE": {
      "description": "The specification of a StatefulSet.",
      "properties": {
        "podManagementPolicy": {
          "default": "OrderedReady",
          "description": "This controls how Pods are created during initial scale up, when replacing Pods on nodes, or when scaling down. The default policy is '`OrderedReady`', where Pods are created in increasing order and the controller will wait until each Pod is ready before continuing. When scaling down, the Pods are removed in the opposite order. The alternative policy is '`Parallel`' which will create Pods in parallel to match the desired scale without waiting, and on scale down will delete all Pods at once. Cannot be updated.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "default": 1,
          "description": "The desired number of replicas of the given `template`. These are replicas in the sense that they are instantiations of the same `template`, but individual replicas also have a consistent identity.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied spec version. Cannot be updated.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the replica count. It must match the Pod template's labels. Cannot be updated."
        },
        "serviceName": {
          "description": "The name of the service that governs this StatefulSet. This service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: `pod-specific-string.serviceName.default.svc.cluster.local` where '`pod-specific-string`' is managed by the StatefulSet controller. Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object describes the Pod that will be created if insufficient replicas are detected. Each Pod stamped out by the StatefulSet will fulfill this `template`, but have a unique identity from the rest of the StatefulSet."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "The update strategy that will be employed to update Pods in the StatefulSet when a revision is made to `template`."
        },
        "volumeClaimTemplates": {
          "description": "A list of claims that Pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a Pod. Every claim in this list must have at least one matching (by name) volumeMount in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        }
      },
      "required": [
        "selector",
        "template",
        "serviceName"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetStatus": {
      "description": "The current state of a StatefulSet.",
      "properties": {
        "collisionCount": {
          "description": "The count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest controller revision. When updated, this field cannot be decremented.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "conditions": {
          "description": "The latest available observations of a statefulset's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "The number of Pods created by the StatefulSet controller from the StatefulSet version indicated by `currentRevision`. Cannot be greater than `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "currentRevision": {
          "description": "If not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,`currentReplicas`).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "The most recent generation observed for this StatefulSet. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of Pods created by the StatefulSet controller that have a '`Ready`' condition. Cannot be greater than `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "description": "The number of Pods created by the StatefulSet controller.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "updateRevision": {
          "description": "If not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [`replicas-updatedReplicas`,`replicas`)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "The number of Pods created by the StatefulSet controller from the StatefulSet version indicated by `updateRevision`. Cannot be greater than `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "description": "The strategy that the StatefulSet controller will use to perform updates. It includes any additional parameters necessary to perform the update for the indicated strategy.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy",
          "description": "Used to communicate parameters when `type` is '`RollingUpdate`'. This field is required for '`RollingUpdate`' type of update strategy. It cannot be specified when `type` is '`OnDelete`'."
        },
        "type": {
          "default": "RollingUpdate",
          "description": "Type of the update strategy. '`RollingUpdate`' means that the update will be applied to all Pods with respect to the StatefulSet ordering constraints. New Pods will be created froom the `updateRevision`. '`OnDelete`' triggers the legacy behavior. Version tracking and ordered rolling restarts are disabled. Pods are recreated from the StatefulSet's spec when they are manually deleted, using the version specified in `currentRevision`.",
          "enum": [
            "OnDelete",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.auditregistration.v1alpha1.AuditSink.CREATE": {
      "description": "A cluster level audit sink",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "auditregistration.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "AuditSink"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSinkSpec",
          "description": "The audit configuration"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.auditregistration.v1alpha1.AuditSink.GET": {
      "description": "A cluster level audit sink",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "auditregistration.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "AuditSink"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSinkSpec",
          "description": "The audit configuration"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.auditregistration.v1alpha1.AuditSink.UPDATE": {
      "description": "A cluster level audit sink",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "auditregistration.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "AuditSink"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSinkSpec",
          "description": "The audit configuration"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.auditregistration.v1alpha1.AuditSinkList": {
      "description": "A list of AuditSink objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "auditregistration.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of AuditSink objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "AuditSinkList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSinkList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.auditregistration.v1alpha1.AuditSinkSpec": {
      "description": "The spec for the AuditSink",
      "properties": {
        "policy": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.Policy",
          "description": "The policy for selecting which events should be sent to the webhook"
        },
        "webhook": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.Webhook",
          "description": "Webhook to send events"
        }
      },
      "required": [
        "policy",
        "webhook"
      ],
      "type": "object"
    },
    "io.k8s.api.auditregistration.v1alpha1.Policy": {
      "description": "The configuration of how audit events are logged",
      "properties": {
        "level": {
          "description": "The Level that all requests are recorded at.",
          "enum": [
            "Metadata",
            "None",
            "Request",
            "RequestResponse"
          ],
          "minLength": 1,
          "type": "string"
        },
        "stages": {
          "description": "A list of stages for which events are created.",
          "items": {
            "enum": [
              "RequestReceived",
              "ResponseStarted",
              "ResponseComplete",
              "Panic"
            ],
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "level"
      ],
      "type": "object"
    },
    "io.k8s.api.auditregistration.v1alpha1.ServiceReference": {
      "description": "A reference to Service object",
      "properties": {
        "name": {
          "description": "The name of the service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An optional URL path which will be sent in any request to this service.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the service that hosting webhook.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.auditregistration.v1alpha1.Webhook": {
      "description": "The configuration of the audit webhook",
      "properties": {
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.WebhookClientConfig",
          "description": "The connection parameters for the webhook"
        },
        "throttle": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.WebhookThrottleConfig",
          "description": "The options for throttling the webhook"
        }
      },
      "required": [
        "clientConfig"
      ],
      "type": "object"
    },
    "io.k8s.api.auditregistration.v1alpha1.WebhookClientConfig": {
      "description": "The information for connecting to a webhook. Exactly one of `service` and `url` should be specified.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.ServiceReference",
          "description": "A reference to the service for this webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`."
        },
        "url": {
          "description": "The location of the webhook, in standard URL form ('`scheme://host:port/path`'). Exactly one of `url` or `service` must be specified. The `host` should not refer to a service running in the cluster; use the `service` field instead. The host might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using '`localhost`' or '`127.0.0.1`' as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be '`https`'. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. '`user:password@`' is not allowed. Fragments ('`#...`') and query parameters ('`?...`') are not allowed either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.auditregistration.v1alpha1.WebhookThrottleConfig": {
      "description": "The configuration for throttling events",
      "properties": {
        "burst": {
          "default": 15,
          "description": "The maximum number of events sent per second",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "qps": {
          "default": 10,
          "description": "The maximum number of batches per second",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.BoundObjectReference": {
      "description": "A reference to an object that a token is bound to.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod",
            "Secret"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenRequest.CREATE": {
      "description": "TokenRequest requests a token for a given service account.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenRequest.GET": {
      "description": "TokenRequest requests a token for a given service account.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenRequestSpec": {
      "description": "Client provided parameters for a token request.",
      "properties": {
        "audiences": {
          "description": "The intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of `audiences` of the token, and otherwise should reject the token. A token issued for multiple `audiences` may be used to authenticate against any of the `audiences` listed but implies a high degree of trust between the target audiences.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "boundObjectRef": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.BoundObjectReference",
          "description": "A reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. The API server's `TokenReview` endpoint will validate the `boundObjectRef`, but other `audiences` may not. Keep `expirationSeconds` small if you want prompt revocation."
        },
        "expirationSeconds": {
          "description": "The requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the `expirationTimestamp` field in a response.",
          "format": "int64",
          "maximum": 4294967295,
          "minimum": 600,
          "type": "integer"
        }
      },
      "required": [
        "audiences"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenRequestStatus": {
      "description": "The result of a token request.",
      "properties": {
        "expirationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time of expiration of the returned token."
        },
        "token": {
          "description": "The opaque bearer token.",
          "type": "string"
        }
      },
      "required": [
        "token",
        "expirationTimestamp"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenReview.CREATE": {
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus",
          "description": "Indicates whether the request can be authenticated; filled in by the server."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenReview.GET": {
      "description": "TokenReview attempts to authenticate a token to a known user. Note: TokenReview requests may be cached by the webhook token authenticator plugin in the kube-apiserver.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus",
          "description": "Indicates whether the request can be authenticated; filled in by the server."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenReviewSpec": {
      "description": "A description of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "A list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the audiences in this list. If no audiences are provided, the `audiences` will default to the audiences of the Kubernetes apiserver.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "token": {
          "description": "The opaque bearer token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenReviewStatus": {
      "description": "The result of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "Audience identifiers chosen by the authenticator that are compatible with both the TokenReview and token. An identifier is any identifier in the intersection of the TokenReviewSpec `audiences` and the token's `audiences`. A client of the TokenReview API that sets the `spec.audiences` field should validate that a compatible audience identifier is returned in the `status.audiences` field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty `status.audiences` field where `status.authenticated` is '`true`', the token is valid against the audience of the Kubernetes API server.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "authenticated": {
          "description": "This indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "This indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "The UserInfo associated with the provided token."
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "Information about a user",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different `uid`.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview.CREATE": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LocalSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated. `spec.namespace` must be equal to the namespace you made the request against. If empty, it is defaulted."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LocalSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated. `spec.namespace` must be equal to the namespace you made the request against. If empty, it is defaulted."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "The authorization attributes available for non-resource requests",
      "properties": {
        "path": {
          "description": "The URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "The standard HTTP verb",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.NonResourceRule": {
      "description": "Information that describes a rule for the non-resource",
      "properties": {
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards ('`*`') are allowed, but only as the full, final step in the path. '`*`' means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of HTTP API verbs, like: `get`, `post`, `put`, `delete`, `patch`, `head`, `options`. '`*`' means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "The authorization attributes available for resource requests",
      "properties": {
        "group": {
          "description": "The API group of the `resource`. '`*`' means all.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource being requested for a '`get`' request or deleted for a '`delete`' request. '' (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces. Empty string ('') is defaulted for LocalSubjectAccessReviews. Value should be empty string ('') for cluster-scoped resources. Empty string ('') means 'all' for namespace scoped resources from a SubjectAccessReview or SelfSubjectAccessReview",
          "type": "string"
        },
        "resource": {
          "description": "One of the existing resource types. '`*`' means all.",
          "type": "string"
        },
        "subresource": {
          "description": "One of the existing resource types. '' means none.",
          "type": "string"
        },
        "verb": {
          "description": "A kubernetes resource API verb, like: `get`, `list`, `watch`, `create`, `update`, `delete`, `proxy`. '`*`' means all.",
          "type": "string"
        },
        "version": {
          "description": "The API version of the `resource`. '`*`' means all.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceRule": {
      "description": "The list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "properties": {
        "apiGroups": {
          "description": "The name of the APIGroup that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. '`*`' means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "An optional whitelist of names that the rule applies to. An empty set means that everything is allowed. '`*`' means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. '`*`' means all in the specified apiGroups. '`*/foo`' represents the subresource '`foo`' for all resources in the specified `apiGroups`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of kubernetes resource API verbs, like: `get`, `list`, `watch`, `create`, `update`, `delete`, `proxy`. '`*`' means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview.CREATE": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a `spec.namespace` means 'in all namespaces'. Self is a special case, because users should always be able to check whether they can perform an action",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec",
          "description": "Information about the request being evaluated.  user and groups must be empty"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a `spec.namespace` means 'in all namespaces'. Self is a special case, because users should always be able to check whether they can perform an action",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec",
          "description": "Information about the request being evaluated.  user and groups must be empty"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec": {
      "description": "A description of the access request. Exactly one of `resourceAttributes` and `nonResourceAttributes` must be set",
      "properties": {
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "Information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "Information for a resource access request"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview.CREATE": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. `SubjectAccessReview`, and `LocalAccessReview` are the correct way to defer authorization decisions to the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectRulesReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec",
          "description": "Information about the request being evaluated."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should NOT Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. `SubjectAccessReview`, and `LocalAccessReview` are the correct way to defer authorization decisions to the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectRulesReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec",
          "description": "Information about the request being evaluated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus",
          "description": "Status is filled in by the server and indicates the set of actions a user can perform."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for",
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview.CREATE": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview.GET": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewSpec": {
      "description": "A description of the access request. Exactly one of `resourceAttributes` and `nonResourceAttributes` must be set",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "This contains some extra information about the user, returned from the authenticator. Since that is input to the authorizer it needs a reflection here.",
          "type": "object"
        },
        "groups": {
          "description": "The groups for testing. At least one of `user` or `groups` must be specified.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "Information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "Information for a resource access request"
        },
        "uid": {
          "description": "UID of the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "The user for testing. At least one of `user` or `groups` must be specified. If you specify `user` but not `groups`, then is it interpreted as 'What if User were not a member of any groups'",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewStatus": {
      "description": "Status of authorization test request.",
      "properties": {
        "allowed": {
          "description": "Flag indicating whethre the action would be allowed.",
          "type": "boolean"
        },
        "denied": {
          "description": "Flag indicating whether the action would be denied. If both `allowed` is `false` and `denied` is `false`, then the authorizer has no opinion on whether to authorize the action. `denied` may not be `true` if `allowed` is `true`.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "An indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "This indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "The result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list it's safe to assume the subject has that permission, even if that list is incomplete.",
      "properties": {
        "evaluationError": {
          "description": "This can appear in combination with `resourceRules` or `nonResourceRules`. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that `resourceRules` and/or `nonResourceRules` may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "This indicates that the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "The list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceRule"
          },
          "type": "array"
        },
        "resourceRules": {
          "description": "The list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceRule"
          },
          "type": "array"
        }
      },
      "required": [
        "resourceRules",
        "nonResourceRules",
        "incomplete"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "description": "Information for identifying the referred resource.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. The value cannot be '`.`' or '`..`', and it can not contain '`/`' or '`%`'.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.CREATE": {
      "description": "The configuration for a horizontal pod autoscaler (HPA).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behaviour of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET": {
      "description": "The configuration for a horizontal pod autoscaler (HPA).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behaviour of the autoscaler"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus",
          "description": "Current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE": {
      "description": "The configuration for a horizontal pod autoscaler (HPA).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behaviour of the autoscaler"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus",
          "description": "Current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
      "description": "List of horizontal pod autoscaler objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of horizontal pod autoscaler objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscalerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "description": "The specification of a horizontal pod autoscaler (HPA).",
      "properties": {
        "maxReplicas": {
          "description": "Upper limit for the number of pods that can be set by the autoscaler; cannot be smaller than `minReplicas`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "minReplicas": {
          "default": 1,
          "description": "The lower limit for the number of replicas to which the autoscaler can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate `HPAScaleToZero` is enabled and at least one '`Object`' or '`External`' metric is configured. Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference",
          "description": "Reference to scaled resource; horizontal pod autoscaler will learn the current resource consumption and will set the desired number of pods by using its Scale subresource."
        },
        "targetCPUUtilizationPercentage": {
          "description": "Target average CPU utilization (represented as a percentage of requested CPU) over all the Pods; if not specified the default autoscaling policy will be used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
      "description": "Current status of a horizontal pod autoscaler",
      "properties": {
        "currentCPUUtilizationPercentage": {
          "description": "Current average CPU utilization over all Pods, represented as a percentage of requested CPU, e.g. 70 means that an average pod is using now 70% of its requested CPU.",
          "format": "int32",
          "type": "integer"
        },
        "currentReplicas": {
          "description": "Current number of replicas of pods managed by this autoscaler.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "desiredReplicas": {
          "description": "Desired number of replicas of pods managed by this autoscaler.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "lastScaleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the HorizontalPodAutoscaler scaled the number of Pods; used by the autoscaler to control how often the number of pods is changed."
        },
        "observedGeneration": {
          "description": "Most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "currentReplicas",
        "desiredReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.Scale.GET": {
      "description": "The scale for a resource.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Scale"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec",
          "description": "Defines the behavior of the scale."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus",
          "description": "Current status of the scale. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.Scale.UPDATE": {
      "description": "The scale for a resource.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Scale"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec",
          "description": "Defines the behavior of the scale."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.ScaleSpec": {
      "description": "The attributes of a scale subresource.",
      "properties": {
        "replicas": {
          "description": "desired number of instances for the scaled object.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.ScaleStatus": {
      "description": "ScaleStatus represents the current status of a scale subresource.",
      "properties": {
        "replicas": {
          "description": "actual number of observed instances of the scaled object.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "description": "Label query over pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax.",
          "type": "string"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference": {
      "description": "Information for identifying a referenced resource.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. The kind cannot be '`.`' or '`..`' and it cannot contain '`/`' or '`%`'.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ExternalMetricSource": {
      "description": "A metric not associated with any Kubernetes object.",
      "properties": {
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given metric"
        }
      },
      "required": [
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus": {
      "description": "The current value of a global metric which is not associated with any Kubernetes object.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given metric"
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        }
      },
      "required": [
        "metric",
        "current"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.CREATE": {
      "description": "The configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
          "description": "The specification for the behaviour of the autoscaler."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus",
          "description": "The current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET": {
      "description": "The configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
          "description": "The specification for the behaviour of the autoscaler."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus",
          "description": "The current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.UPDATE": {
      "description": "The configuration for a horizontal pod autoscaler, which automatically manages the replica count of any resource implementing the scale subresource based on the metrics specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
          "description": "The specification for the behaviour of the autoscaler."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus",
          "description": "The current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition": {
      "description": "The state of a HorizontalPodAutoscaler at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another"
        },
        "message": {
          "description": "A human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of the current condition",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList": {
      "description": "A collection of horizontal pod autoscaler objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of HorizontalPodAutoscaler objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscalerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec": {
      "description": "The desired functionality of the HorizontalPodAutoscaler.",
      "properties": {
        "maxReplicas": {
          "description": "The upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less than `minReplicas`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "metrics": {
          "description": "The specifications to use for calculating the desired replica count. The maximum value across all metrics will be used. The desired replica count is calculated by multiplying the ratio between the `target` value and the `current` value by the current number of pods.  Ergo, metrics used must decrease as the pod count is increased, and vice-versa. See the individual metric source types for more information about how each `type` of metric must respond. If not set, the default `metrics` will be set to `80%` of average CPU utilization.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricSpec"
          },
          "type": "array"
        },
        "minReplicas": {
          "default": 1,
          "description": "The lower limit for the number of replicas to which the autoscaler can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate `HPAScaleToZero` is enabled and at least one '`Object`' or '`External`' metric is configured. Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
          "description": "This points to the target resource to scale, and is used to identify the Pods for which metrics should be collected, as well as to actually change the replica count."
        }
      },
      "required": [
        "scaleTargetRef",
        "maxReplicas"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus": {
      "description": "The current status of a horizontal pod autoscaler.",
      "properties": {
        "conditions": {
          "description": "The set of conditions required for this autoscaler to scale its target. It indicates whether or not those conditions are met.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
          },
          "type": "array"
        },
        "currentMetrics": {
          "description": "The last read state of the metrics used by this autoscaler.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricStatus"
          },
          "type": "array"
        },
        "currentReplicas": {
          "description": "The current number of replicas of Pods managed by this autoscaler, as last seen by the autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "desiredReplicas": {
          "description": "The desired number of replicas of Pods managed by this autoscaler, as last calculated by the autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "lastScaleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the HorizontalPodAutoscaler scaled the number of pods, used by the autoscaler to control how often the number of pods is changed."
        },
        "observedGeneration": {
          "description": "The most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "currentReplicas",
        "desiredReplicas",
        "conditions"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricIdentifier": {
      "description": "The name and optionally the selector for a metric",
      "properties": {
        "name": {
          "description": "The name of the given metric. The name cannot be '`.`' or '`..`' and it cannot contain '`/`' or '`%`'.",
          "minLength": 1,
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The string-encoded form of a standard kubernetes label selector for the given metric. When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the `name` will be used to gather metrics."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricSpec": {
      "description": "This specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "properties": {
        "external": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ExternalMetricSource",
          "description": "Reference to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information from outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ObjectMetricSource",
          "description": "Reference to a metric describing a single kubernetes object (for example, hits-per-second on an Ingress object)."
        },
        "pods": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.PodsMetricSource",
          "description": "Reference to a metric describing each Pod in the current scale target (for example, transactions-processed-per-second). The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ResourceMetricSource",
          "description": "Reference  to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes describing each Pod in the current scale target (e.g. CPU or memory). Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `pods` source."
        },
        "type": {
          "description": "The type of metric source. When specified, the corresponding field must be set and only that field can be set.",
          "enum": [
            "External",
            "Object",
            "Pods",
            "Resource"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricStatus": {
      "description": "The last-read state of a single metric.",
      "properties": {
        "external": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus",
          "description": "This refers to a global metric that is not associated with any Kubernetes object."
        },
        "object": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus",
          "description": "This refers to a metric describing a single kubernetes object."
        },
        "pods": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.PodsMetricStatus",
          "description": "This refers to a metric describing each Pod in the current scale target. The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus",
          "description": "This refers to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes describing each Pod in the current scale target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the '`pods`' source."
        },
        "type": {
          "description": "The type of metric source.",
          "enum": [
            "Object",
            "Pods",
            "Resource"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricTarget": {
      "description": "The target value, average value, or average utilization of a specific metric. For '`Object`' type of metrics, one of `value` and `averageValue` must be specified. For '`External`' type of metrics, one and only one of `value` or `averageValue` must be set. For '`Pod`' type of metrics, `averageValue` must be set. For '`Resource`' type of metrics, either `averageUtilization` or `averageValue` should be specified but not both.",
      "properties": {
        "averageUtilization": {
          "description": "Target value of the average of the resource metric across all relevant Pods, represented as a percentage of the requested value of the resource for the Pods. Currently only valid for '`Resource`' metric source type",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "averageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the average of the metric across all relevant Pods. The value must be positive if specified."
        },
        "type": {
          "description": "Type of the metric value.",
          "enum": [
            "AverageValue",
            "Utilization",
            "Value"
          ],
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the metric (as a quantity). The value must be positive if specified."
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricValueStatus": {
      "description": "The current value for a metric",
      "properties": {
        "averageUtilization": {
          "description": "The current value of the average of the resource metric across all relevant Pods, represented as a percentage of the requested value of the resource for the Pods.",
          "format": "int32",
          "type": "integer"
        },
        "averageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the average of the metric across all relevant Pods (as a quantity)"
        },
        "value": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the metric (as a quantity)."
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ObjectMetricSource": {
      "description": "A metric on a Kubernetes object.",
      "properties": {
        "describedObject": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
          "description": "The reference to the object to be evaluated."
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by `name` and `selector`."
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given `metric`."
        }
      },
      "required": [
        "describedObject",
        "target",
        "metric"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus": {
      "description": "The current value of a metric describing a kubernetes object.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given metric"
        },
        "describedObject": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        }
      },
      "required": [
        "metric",
        "current",
        "describedObject"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.PodsMetricSource": {
      "description": "A metric describing each Pod in the current scale target. The values will be averaged together before being compared to the target value.",
      "properties": {
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given metric"
        }
      },
      "required": [
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.PodsMetricStatus": {
      "description": "The current value of a metric describing each Pod in the current scale target.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given metric"
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        }
      },
      "required": [
        "metric",
        "current"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ResourceMetricSource": {
      "description": "A resource metric describing each Pod in the current scale target. The resource is known to Kubernetes as it can be specified in `requests` and `limits`. The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the '`pods`' source.  Only one `target` type should be set.",
      "properties": {
        "name": {
          "description": "The name of the resource in question.",
          "minLength": 1,
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given metric"
        }
      },
      "required": [
        "name",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus": {
      "description": "The current value of a resource metric known to Kubernetes, as specified in `requests` and `limits`, describing each Pod in the current scale target.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given metric"
        },
        "name": {
          "description": "The name of the resource in question.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "current"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.Job.CREATE": {
      "description": "The configuration of a Job.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Job"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE",
          "description": "Specification of the desired behavior of a Job"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus",
          "description": "Current status of a Job"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.Job.GET": {
      "description": "The configuration of a Job.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Job"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.GET",
          "description": "Specification of the desired behavior of a Job"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus",
          "description": "Current status of a Job"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.Job.UPDATE": {
      "description": "The configuration of a Job.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Job"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.UPDATE",
          "description": "Specification of the desired behavior of a Job"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus",
          "description": "Current status of a Job"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.JobCondition": {
      "description": "JobCondition describes current state of a job.",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition was checked."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of job condition",
          "enum": [
            "Compelte",
            "Failed"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobList": {
      "description": "A collection of Jobs.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of Jobs.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "JobList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "JobList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.JobSpec.CREATE": {
      "description": "This describes how the Job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "The duration in seconds relative to the `startTime` that the Job may be active before the system tries to terminate it.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "backoffLimit": {
          "default": 6,
          "description": "The number of retries before marking this Job failed",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completions": {
          "description": "The desired number of successfully finished Pods the Job should be run with.  Setting to nil means that the success of any Pod signals the success of all Pods, and allows `parallelism` to have any positive value. Setting to 1 means that `parallelism` is limited to 1 and the success of that Pod signals the success of the Job. This field cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "manualSelector": {
          "description": "This controls the generation of Pod labels and Pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When `false` or unset, the system pick labels unique to this Job and appends those labels to the pod template. When `true`, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other Jobs to not function correctly. However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.",
          "type": "boolean"
        },
        "parallelism": {
          "description": "The maximum desired number of Pods the Job should run at any given time. The actual number of Pods running in steady state will be less than this number when `((.spec.completions - .status.successful) < .spec.parallelism)`, i.e. when the work left to do is less than max `parallelism`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the Pod count. Normally, the system sets this field for you. The selector must match the labels defined on the Pod template. This field cannot be updated."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "Describes the Pod that will be created when executing a Job. This field cannot be updated."
        },
        "ttlSecondsAfterFinished": {
          "description": "This limits the lifetime of a Job that has finished execution (either '`Complete`' or '`Failed`'). If this field is set, the specified seconds after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the `TTLAfterFinished` feature.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobSpec.GET": {
      "description": "This describes how the Job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "The duration in seconds relative to the `startTime` that the Job may be active before the system tries to terminate it.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "backoffLimit": {
          "default": 6,
          "description": "The number of retries before marking this Job failed",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completions": {
          "description": "The desired number of successfully finished Pods the Job should be run with.  Setting to nil means that the success of any Pod signals the success of all Pods, and allows `parallelism` to have any positive value. Setting to 1 means that `parallelism` is limited to 1 and the success of that Pod signals the success of the Job. This field cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "manualSelector": {
          "description": "This controls the generation of Pod labels and Pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When `false` or unset, the system pick labels unique to this Job and appends those labels to the pod template. When `true`, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other Jobs to not function correctly. However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.",
          "type": "boolean"
        },
        "parallelism": {
          "description": "The maximum desired number of Pods the Job should run at any given time. The actual number of Pods running in steady state will be less than this number when `((.spec.completions - .status.successful) < .spec.parallelism)`, i.e. when the work left to do is less than max `parallelism`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the Pod count. Normally, the system sets this field for you. The selector must match the labels defined on the Pod template. This field cannot be updated."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "Describes the Pod that will be created when executing a Job. This field cannot be updated."
        },
        "ttlSecondsAfterFinished": {
          "description": "This limits the lifetime of a Job that has finished execution (either '`Complete`' or '`Failed`'). If this field is set, the specified seconds after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the `TTLAfterFinished` feature.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobSpec.UPDATE": {
      "description": "This describes how the Job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "The duration in seconds relative to the `startTime` that the Job may be active before the system tries to terminate it.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "backoffLimit": {
          "default": 6,
          "description": "The number of retries before marking this Job failed",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completions": {
          "description": "The desired number of successfully finished Pods the Job should be run with.  Setting to nil means that the success of any Pod signals the success of all Pods, and allows `parallelism` to have any positive value. Setting to 1 means that `parallelism` is limited to 1 and the success of that Pod signals the success of the Job. This field cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "manualSelector": {
          "description": "This controls the generation of Pod labels and Pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When `false` or unset, the system pick labels unique to this Job and appends those labels to the pod template. When `true`, the user is responsible for picking unique labels and specifying the selector.  Failure to pick a unique label may cause this and other Jobs to not function correctly. However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.",
          "type": "boolean"
        },
        "parallelism": {
          "description": "The maximum desired number of Pods the Job should run at any given time. The actual number of Pods running in steady state will be less than this number when `((.spec.completions - .status.successful) < .spec.parallelism)`, i.e. when the work left to do is less than max `parallelism`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the Pod count. Normally, the system sets this field for you. The selector must match the labels defined on the Pod template. This field cannot be updated."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "Describes the Pod that will be created when executing a Job. This field cannot be updated."
        },
        "ttlSecondsAfterFinished": {
          "description": "This limits the lifetime of a Job that has finished execution (either '`Complete`' or '`Failed`'). If this field is set, the specified seconds after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the `TTLAfterFinished` feature.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobStatus": {
      "description": "The current status of a Job.",
      "properties": {
        "active": {
          "description": "The number of actively running Pods.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time when the Job was completed. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC."
        },
        "conditions": {
          "description": "The latest available observations of an object's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.JobCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "failed": {
          "description": "The number of Pods which reached phase '`Failed`'.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time when the Job was acknowledged by the controller. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC."
        },
        "succeeded": {
          "description": "The number of Pods which reached phase '`Succeeded`'.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1beta1.CronJob.CREATE": {
      "description": "The configuration of a single CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The `name` can be at most 52 characters long because the CronJob controller will append a 11-character suffix to the name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus",
          "description": "Current status of the CronJob."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJob.GET": {
      "description": "The configuration of a single CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus",
          "description": "Current status of the CronJob."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJob.UPDATE": {
      "description": "The configuration of a single CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus",
          "description": "Current status of the CronJob."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJobList": {
      "description": "A collection of cron jobs.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CronJobs.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJobList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJobList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJobSpec": {
      "description": "Specification detailing how the job execution will look like and when it will actually run.",
      "properties": {
        "concurrencyPolicy": {
          "default": "Allow",
          "description": "Specifies how to treat concurrent executions of a Job. '`Allow`' means allowing CronJobs to run concurrently. '`Forbid`' means forbiding concurrent runs, skipping next run if previous run hasn't finished yet. '`Replace`' means cancelling currently running job and replaces it with a new one.",
          "enum": [
            "Allow",
            "Forbid",
            "Replace"
          ],
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "default": 1,
          "description": "The number of failed jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "jobTemplate": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.JobTemplateSpec",
          "description": "Specifies the job that will be created when executing a CronJob."
        },
        "schedule": {
          "description": "The schedule in Cron format,",
          "minLength": 1,
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the job if it misses scheduled time for any reason. Missed jobs executions will be counted as failed ones.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "default": 3,
          "description": "The number of successful jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "suspend": {
          "default": false,
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.",
          "type": "boolean"
        }
      },
      "required": [
        "schedule",
        "jobTemplate"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1beta1.CronJobStatus": {
      "description": "CronJobStatus represents the current state of a cron job.",
      "properties": {
        "active": {
          "description": "A list of pointers to currently running jobs.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array"
        },
        "lastScheduleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Information when was the last time the job was successfully scheduled."
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1beta1.JobTemplateSpec": {
      "description": "The data the job should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE",
          "description": "Specification of the desired behavior of the job. The `selector` will be auto-generated so must not be specified. The `manualSelector` can be either nil or set to `false`."
        }
      },
      "type": "object"
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest.CREATE": {
      "description": "A certificate signing request",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus",
          "description": "Derived information about the request."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET": {
      "description": "A certificate signing request",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus",
          "description": "Derived information about the request."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest.UPDATE": {
      "description": "A certificate signing request",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus",
          "description": "Derived information about the request."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition": {
      "properties": {
        "lastUpdateTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Timestamp of the last update to this condition"
        },
        "message": {
          "description": "Human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "Brief reason for the request state",
          "type": "string"
        },
        "type": {
          "description": "Request approval state",
          "enum": [
            "Approved",
            "Denied"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList": {
      "description": "A collection of CertificateSigningRequest objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CertificateSigningRequest objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequestList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequestList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec": {
      "description": "This information is immutable after the request is created. Only the `request` and `usages` fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Extra information about the requesting user.",
          "type": "object"
        },
        "groups": {
          "description": "Group information about the requesting user.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "request": {
          "description": "Base64-encoded PKCS#10 CSR data. The block should be either null or '`CERTIFICATE REQUEST`', and the content must be a X509 certificate request",
          "format": "byte",
          "minLength": 1,
          "type": "string"
        },
        "uid": {
          "description": "UID information about the requesting user.",
          "type": "string"
        },
        "usages": {
          "description": "A set of usage contexts the key will be valid for.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "username": {
          "description": "Information about the requesting user.",
          "type": "string"
        }
      },
      "required": [
        "request",
        "usages"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus": {
      "properties": {
        "certificate": {
          "description": "If request was approved, the controller will place the issued certificate here.",
          "format": "byte",
          "type": "string"
        },
        "conditions": {
          "description": "Conditions applied to the request, such as approval or denial.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.coordination.v1.Lease.CREATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. Name must be valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.Lease.GET": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.Lease.UPDATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. Name must be valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.LeaseList": {
      "description": "A collection of Lease objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of schema objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LeaseList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "LeaseList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.LeaseSpec": {
      "description": "The specification of a Lease.",
      "properties": {
        "acquireTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current Lease was acquired."
        },
        "holderIdentity": {
          "description": "The identity of the holder of a current Lease.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "A duration that candidates for a Lease need to wait to force acquire it. This is measure against time of last observed `renewTime`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "leaseTransitions": {
          "description": "The number of transitions of a Lease between holders.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "renewTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "A time when the current holder of a lease has last updated the Lease."
        }
      },
      "type": "object"
    },
    "io.k8s.api.coordination.v1beta1.Lease.CREATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec",
          "description": "Specification of the Lease."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.Lease.GET": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec",
          "description": "Specification of the Lease."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.Lease.UPDATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec",
          "description": "Specification of the Lease."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.LeaseList": {
      "description": "A collection of Lease objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Lease objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LeaseList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "LeaseList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.LeaseSpec": {
      "description": "The specification of a Lease.",
      "properties": {
        "acquireTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current lease was acquired."
        },
        "holderIdentity": {
          "description": "The identity of the holder of a current Lease.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "A duration that candidates for a Lease need to wait to force acquire it. This is measure against time of last observed `renewTime`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "leaseTransitions": {
          "description": "The number of transitions of a Lease between holders.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "renewTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current holder of a Lease has last updated the Lease."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "A persistent disk resource in AWS. An AWS EBS disk must exist before being mounted to a container. The disk must also be in the same AWS zone as the node. An AWS EBS disk can only be mounted as '`ReadWriteOnce`'. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\".",
          "type": "string"
        },
        "partition": {
          "description": "The partition to mount in the volume. If omitted, the default is to mount by volume name. Examples: For volume '`/dev/sda1`', you specify the partition as '`1`'. Similarly, the volume partition for '`/dev/sda`' is '`0`' (or you can leave the property empty).",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "readOnly": {
          "default": false,
          "description": "Specify `true` to force and set the `ReadOnly` property in volume mounts to true.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID of the persistent disk resource in AWS EBS volume.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "A group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
          "description": "Node affinity scheduling rules for the pod."
        },
        "podAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
          "description": "Pod affinity scheduling rules (e.g. co-locate this pod in the same node, zone, etc. as some other pod(s))."
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
          "description": "Pod anti-affinity scheduling rules (e.g. avoid putting this pod in the same node, zone, etc. as some other pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AttachedVolume": {
      "description": "A volume attached to the node",
      "properties": {
        "devicePath": {
          "description": "The device path where the volume should be available",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the attached volume",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "An Azure data disk mounted on the node and bind mount to the pod.",
      "properties": {
        "cachingMode": {
          "description": "Host caching mode.",
          "enum": [
            "None",
            "ReadOnly",
            "ReadWrite"
          ],
          "type": "string"
        },
        "diskName": {
          "description": "The name of the data disk in the blob storage",
          "minLength": 1,
          "type": "string"
        },
        "diskURI": {
          "description": "The URI of the data disk in the blob storage",
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "kind": {
          "default": "Shared",
          "description": "A string value representing the REST resource",
          "enum": [
            "Dedicated",
            "Managed",
            "Shared"
          ],
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mouned in read-only mode.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "description": "An Azure File service mounted on the node and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of Secret that contains Azure storage account name and key",
          "minLength": 1,
          "type": "string"
        },
        "secretNamespace": {
          "description": "Namespace of the Secret that contains the Azure storage account name and key. Default is the same as the Pod. Empty string is not allowed.",
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod.",
      "properties": {
        "readOnly": {
          "default": false,
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretName": {
          "description": "the name of secret that contains Azure Storage Account Name and Key",
          "minLength": 1,
          "type": "string"
        },
        "shareName": {
          "description": "Share Name",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Binding": {
      "description": "Binding ties a Pod to a node.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Binding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The target node that you want to bind to the Pod. The kind if provided must be 'Node' and the name must be provided."
        }
      },
      "required": [
        "target",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "description": "A storage that is managed by an external CSI volume driver",
      "properties": {
        "controllerExpandSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `ControllerExpandVolume` call. This is an alpha field and requires enabling `ExpandCSIVolumes` feature gate. This field may be empty if no Secret is required. If the Secret object contains more than one Secret, all Secrets are passed."
        },
        "controllerPublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `ControllerPublishVolume` and `ControllerUnpublishVolume` calls. This field may be empty if no Secret is required. If the Secret object contains more than one secret, all secrets are passed. When specified, both `name` and `namespace` field cannot be empty. The field can be updated if current value is nil."
        },
        "driver": {
          "description": "The name of the driver to use for this volume.",
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `NodePublishVolume` and `NodeUnpublishVolume` calls. This field may be empty if no Secret is required. If the Secret object contains more than one secret, all secrets are passed. When specified, both `name` and `namespace` fields should be specified."
        },
        "nodeStageSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `NodeStageVolume`, `NodeStageVolume` and `NodeUnstageVolume` calls. This field may be empty if no Secret is required. If the Secret object contains more than one secret, all secrets are passed. When specified, both `name` and `namespace` fields have to be provided."
        },
        "readOnly": {
          "default": false,
          "description": "The value to pass to `ControllerPublishVolumeRequest`.",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Attributes of the volume to publish.",
          "type": "object"
        },
        "volumeHandle": {
          "description": "The unique volume name returned by the CSI volume plugin's `CreateVolume`. Used as reference to the volume on all subsequent calls.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "driver",
        "volumeHandle"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "description": "The source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "The name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Ex. 'ext4', 'xfs', 'ntfs'. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "A reference to the Secret containing sensitive information to be passed to the CSI driver to complete the CSI `NodePublishVolume` and `NodeUnpublishVolume` calls. If the Secret object contains more than one Secret, all Secret references are passed."
        },
        "readOnly": {
          "default": false,
          "description": "This indicates a read-only configuration for the volume.",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Added capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Removed capabilities",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "description": "A Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "A collection of Ceph monitors",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "default": "/",
          "description": "Path to use as the mounted root, rather than the full Ceph tree.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the filesystem to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretFile": {
          "default": "/etc/ceph/user.secret",
          "description": "The path to key ring for User.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "The reference to the authentication secret for user, default is empty."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name.",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph Filesystem mount that lasts the lifetime of a pod Cephfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "Required: Monitors is a collection of Ceph monitors More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "path": {
          "default": "/",
          "description": "Optional: Used as the mounted root, rather than the full Ceph tree, default is /",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "boolean"
        },
        "secretFile": {
          "default": "/etc/ceph/user.secret",
          "description": "Optional: SecretFile is the path to key ring for User, default is /etc/ceph/user.secret More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Optional: SecretRef is reference to the authentication secret for User, default is empty. More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it"
        },
        "user": {
          "default": "admin",
          "description": "Optional: User is the rados user name, default is admin More info: https://releases.k8s.io/HEAD/examples/volumes/cephfs/README.md#how-to-use-it",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "description": "An existing Cinder volume resource in Openstack. The volume must also be in the same region as the node. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only model.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Reference to a Secret object containing parameters used to connect to OpenStack. Both `namespace` and `name` must be specified in the object."
        },
        "volumeID": {
          "description": "Identifier for Cinder volume.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Optional: Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts. More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Optional: points to a secret object containing parameters used to connect to OpenStack."
        },
        "volumeID": {
          "description": "volume id used to identify the volume in cinder More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "description": "The configuration for client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "default": 10800,
          "description": "The session sticky time in seconds for client IP based session affinity.",
          "format": "int32",
          "maximum": 86400,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "timeoutSeconds"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ComponentCondition": {
      "description": "Information about the condition of a component.",
      "properties": {
        "error": {
          "description": "Condition error code for a component. For example, a health check error code.",
          "type": "string"
        },
        "message": {
          "description": "Message about the condition for a component. For example, information about a health check.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition for a component.",
          "enum": [
            "True",
            "False",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "default": "Healthy",
          "description": "Type of condition for a component.",
          "enum": [
            "Healthy"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ComponentStatus": {
      "description": "The cluster validation information.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "conditions": {
          "description": "List of component conditions observed",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ComponentStatus"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ComponentStatusList": {
      "description": "Status of all conditions for system components",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of ComponentStatus objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ComponentStatusList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatusList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMap.CREATE": {
      "description": "ConfigMap holds configuration data for pods to consume. The total size of data and binaryData must be less than 1 MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMap"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name of a ConfigMap must be a valid DNS subdomain."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMap.GET": {
      "description": "ConfigMap holds configuration data for pods to consume.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "BinaryData contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. BinaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in BinaryData must not overlap with the ones in the Data field, this is enforced during validation process. Using this field will require 1.10+ apiserver and kubelet.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Data contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the BinaryData field. The keys stored in Data must not overlap with the keys in the BinaryData field, this is enforced during validation process.",
          "type": "object"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMap"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMap.UPDATE": {
      "description": "Patch data for ConfigMap",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The binaryData field contains the binary data. Each key must consist of alphanumeric characters, '-', '_' or '.'. binaryData can contain byte sequences that are not in the UTF-8 range. The keys stored in binaryData must not overlap with the ones in the data field.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The data field contains the configuration data. Each key must consist of alphanumeric characters, '-', '_' or '.'. Values with non-UTF-8 byte sequences must use the binaryData field. The keys stored in data must not overlap with the keys in the binaryData field.",
          "type": "object"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Metadata for patch operation"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource selects a ConfigMap to populate the environment variables with. The contents of the target ConfigMap's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "description": "The key to select. It must consist of alphanumeric characters, '-', '_' or '.'. It cannot be '.' or '..' or prefixed with '..'.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. It must be a valid DNS subdomain.",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapList": {
      "description": "ConfigMapList is a resource containing a list of ConfigMap objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "Items is the list of ConfigMaps.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMapList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMapList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "description": "The information to reference a ConfigMap as a config source for the Node.",
      "properties": {
        "kubeletConfigKey": {
          "description": "The key of the referenced ConfigMap that corresponds to the kubelet configuration structure.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced ConfigMap.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced ConfigMap.",
          "minLength": 1,
          "type": "string"
        },
        "resourceVersion": {
          "description": "Resource version of the referenced ConfigMap. This field is forbidden in node.spec, and required in node.status.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referenced ConfigMap. This field is forbidden in node.spec, and required in node.status.",
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name",
        "kubeletConfigKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume. The contents of the target ConfigMap's data field will be presented in a projected volume as files using the keys in the data field as the file names, unless the items element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume.\n\nThe contents of the target ConfigMap's Data field will be presented in a volume as files using the keys in the Data field as the file names, unless the items element is populated with specific mappings of keys to paths. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "description": "Optional: mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or it's keys must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A single application container that you want to run within a pod.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's CMD is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's ENTRYPOINT is used if this is not provided. Variable references $(VAR_NAME) are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an Env with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Docker image name. The special value `' '` can be used for some advanced use cases.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. Defaults to '`Always`' if '`:latest`' tag is specified, or '`IfNotPresent`' otherwise. Cannot be updated.",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. This cannot be specified on an init container. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Can be NULL. It cannot be used on an init container. Cannot be updated. "
        },
        "name": {
          "description": "Name of the container. Each container in a pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here DOES NOT prevent that port from being exposed. Any port which is listening on the default '0.0.0.0' address inside a container will be accessible from the network. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from service endpoints if the probe fails. This cannot be used against an init container. Cannot be updated."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources required by this container. Cannot be updated."
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Security options the pod should run with."
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "This indicates that the Pod has been successfully initialized. If specified, no other probes are executed until this completes successfully. If this probe fails, the Pod will be restarted, just as if the `livenessProbe` failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be set on an init container. This cannot be updated. The `successThreshold`, if specified, must be 1. This is an alpha feature enabled by the `StartupProbe` feature flag."
        },
        "stdin": {
          "default": false,
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.",
          "type": "boolean"
        },
        "stdinOnce": {
          "default": false,
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single attach. When stdin is true the stdin stream will remain open across multiple attach sessions. If stdinOnce is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "default": "/dev/termination-log",
          "description": "Path at which the file to which the container's termination message will be written is mounted into the container's filesystem. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "default": "File",
          "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Cannot be updated.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "default": false,
          "description": "Whether this container should allocate a TTY for itself, also requires 'stdin' to be true.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "volumeDevices is the list of block devices to be used by the container. This is a beta feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerImage": {
      "description": "Describe a container image",
      "properties": {
        "names": {
          "description": "Names by which this image is known.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sizeBytes": {
          "description": "The size of the image in bytes.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "names"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "A network port in a container.",
      "properties": {
        "containerPort": {
          "description": "Port to expose on the pod's IP address. This must be a valid port number between 1 and 65535.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Port to expose on the host. If specified, this must be a valid port number between 1 and 65535. If hostNetwork is specified, this must match containerPort. Most containers do not need this. The (protocol, hostIP, hostPort) tunple for all containers must be unique in a Pod.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "description": "Name for the port that can be referred to by services. If specified, the name must be unique within the pod. The port name can be no more than 15 characters long and it can only contain only [-a-z0-9] and must contain at least one letter [a-z]. It must not start or end with a hyphen, nor contain adjacent hyphens.",
          "maxLength": 15,
          "type": "string"
        },
        "protocol": {
          "default": "TCP",
          "description": "Protocol for port.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "containerPort",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "A possible state of container. Only one of its members may be specified. If none of them is specified, the default one is '`waiting`'.",
      "properties": {
        "running": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning",
          "description": "Details about a running container"
        },
        "terminated": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated",
          "description": "Details about a terminated container"
        },
        "waiting": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting",
          "description": "Details about a waiting container"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "A running state of a container.",
      "properties": {
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container was last (re-)started"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "A terminated state of a container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format '`docker://<container_id>`'",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "finishedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the container last terminated"
        },
        "message": {
          "description": "Message regarding the last termination of the container",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason from the last termination of the container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the container",
          "format": "int32",
          "type": "integer"
        },
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which previous execution of the container started"
        }
      },
      "required": [
        "exitCode"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "A waiting state of a container.",
      "properties": {
        "message": {
          "description": "Message regarding why the container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason the container is not yet running.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "The details for the current status of a container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format '`docker://<container_id>`'.",
          "type": "string"
        },
        "image": {
          "description": "The name of the image the container is running.",
          "type": "string"
        },
        "imageID": {
          "description": "ID of the container's image.",
          "type": "string"
        },
        "lastState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's last termination condition."
        },
        "name": {
          "description": "The name for the container which is unique in a pod. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Specifies whether the container has passed its readiness probe.",
          "type": "boolean"
        },
        "restartCount": {
          "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "format": "int32",
          "type": "integer"
        },
        "started": {
          "description": "Specifies whether the container has passed its startup probe. Initialized as false, becomes true after startupProbe is considered successful. Resets to false when the container is restarted, or if kubelet loses state temporarily. Is always true when no `startupProbe` is defined.",
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's current condition."
        }
      },
      "required": [
        "name",
        "ready",
        "restartCount",
        "image",
        "imageID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DaemonEndpoint": {
      "description": "Information about a single Daemon endpoint.",
      "properties": {
        "Port": {
          "description": "Port number of the given endpoint.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "description": "Represents downward API info for projecting into a projected volume. Note that this is identical to a downwardAPI volume source without the default mode.",
      "properties": {
        "items": {
          "description": "Items is a list of DownwardAPIVolume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "description": "DownwardAPIVolumeFile represents information to create the file containing the pod field",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: only annotations, labels, name and namespace are supported."
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "path": {
          "description": "Path is  the relative path name of the file to be created. Must not be absolute or contain the '..' path. Must be utf-8 encoded. The first item of the relative path must not start with '..'",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, requests.cpu and requests.memory) are currently supported."
        }
      },
      "required": [
        "fieldRef",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "DownwardAPIVolumeSource represents a volume containing downward API info. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "default": 420,
          "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "items": {
          "description": "Items is a list of downward API volume file",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "default": "",
          "description": "What type of storage medium should back this directory. The default is \"\" which means to use the node's default medium. Must be an empty string (default) or Memory. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir",
          "enum": [
            "",
            "Memory"
          ],
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for memory medium. The maximum usage on memory medium EmptyDir would be the minimum value between the SizeLimit specified here and the sum of memory limits of all containers in a pod. The default is nil which means that the limit is undefined. More info: http://kubernetes.io/docs/user-guide/volumes#emptydir"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointAddress": {
      "description": "An object that describes single IP address.",
      "properties": {
        "hostname": {
          "description": "The hostname of this endpoint. Must be valid DNS-1123 label if specified.",
          "type": "string"
        },
        "ip": {
          "description": "The IP of this endpoint. May not be unspecified (0.0.0.0), loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast (224.0.0.0/24). IPv6 is accepted but not fully supported on all platforms. Certain kubernetes components, like kube-proxy, are not IPv6 ready.",
          "type": "string"
        },
        "nodeName": {
          "description": "Node hosting this endpoint. This can be used to determine endpoints local to a node. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "targetRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Reference to object providing the endpoint."
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointPort": {
      "description": "An object that describes a single port.",
      "properties": {
        "name": {
          "description": "The name of this port. This must match the `name` field in the corresponding Service port. Must be a valid DNS-1123 label. Optional only if one port is defined, otherwise it is required.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointSubset": {
      "description": "A group of addresses with a common set of ports. The expanded set of endpoints is the cartesian product of addresses and ports. Either 'addresses' or 'notReadyAddresses' should be specified.",
      "properties": {
        "addresses": {
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          },
          "type": "array"
        },
        "notReadyAddresses": {
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          },
          "type": "array"
        },
        "ports": {
          "description": "Port numbers available on the related IP addresses.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointPort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Endpoints.CREATE": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. ",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Endpoints"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both addresses and notReadyAddresses in the same subset.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Endpoints.GET": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. ",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Endpoints"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset. Sets of addresses and ports that comprise a service.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Endpoints.UPDATE": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. ",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Endpoints"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all subsets. Addresses are placed into subsets according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both Addresses and NotReadyAddresses in the same subset.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EndpointsList": {
      "description": "A list of endpoints.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointsList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EndpointsList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the source of a set of ConfigMaps",
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
          "description": "The ConfigMap to select from"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap. Must be a C_IDENTIFIER.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
          "description": "The Secret to select from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "An environment variable present in a Container.",
      "properties": {
        "name": {
          "description": "Name of the environment variable. It cannot be '.', '..', and it cannot start with '..'.",
          "minLength": 1,
          "pattern": "[-._a-zA-Z][-._a-zA-Z0-9]*",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Variable references $(VAR_NAME) are expanded using the previous defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The $(VAR_NAME) syntax can be escaped with a double $$, ie: $$(VAR_NAME). Escaped references will never be expanded, regardless of whether the variable exists or not.",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if `value` is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "A source for the value of an EnvVar. One and only one of the sources can be specified.",
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the pod: supports metadata.name, metadata.namespace, metadata.labels, metadata.annotations, metadata.uid, spec.host, spec.nodeName, spec.restartPolicy, spec.schedulerName, spec.serviceAccountName, status.phase, status.hostIP, status.podIP, status.podIPs."
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources limits and requests (limits.cpu, limits.memory, limits.ephemeral-storage, requests.cpu, requests.memory and requests.ephemeral-storage) are currently supported."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a secret in the pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralContainer": {
      "description": "A container that may be added temporarily to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. If an ephemeral container causes a Pod to exceed its resource allocation, the Pod may be evicted. Ephemeral containers may not be added by directly updating the Pod spec. They must be added via the Pod's `ephemeralcontainers` subresource, and they will appear in the Pod spec once added. This is an alpha feature enabled by the `EphemeralContainers` feature flag.",
      "properties": {
        "args": {
          "description": "Arguments to the entrypoint. The docker image's `CMD` is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, ie: '`$$(VAR_NAME)`'. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's `ENTRYPOINT` is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, ie: '`$$(VAR_NAME)`'. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a C_IDENTIFIER. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an `env` with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Docker image name.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. Defaults to '`Always`' if '`:latest`' tag is specified, or '`IfNotPresent`' otherwise. Cannot be updated.",
          "enum": [
            "Always",
            "Never",
            "IfNotPresent"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS label. This name must be unique among all containers, init containers and ephemeral containers.",
          "minLength": 1,
          "type": "string"
        },
        "stdin": {
          "default": false,
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.",
          "type": "boolean"
        },
        "stdinOnce": {
          "default": false,
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single `attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions. If `stdinOnce` is set to true, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the container from the containing Pod that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of the target container. If not set then the ephemeral container is run in whatever namespaces that are shared for the Pod. Note that the container runtime must support this feature.",
          "type": "string"
        },
        "terminationMessagePath": {
          "default": "/dev/termination-log",
          "description": "File path to which the container's termination message will be written. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Defaults to /dev/termination-log. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "default": "File",
          "description": "Indicate how the termination message should be populated. '`File`' will use the contents of `terminationMessagePath` to populate the container status message on both success and failure. '`FallbackToLogsOnError`' will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Cannot be updated.",
          "enum": [
            "File",
            "FallbackToLogsOnError"
          ],
          "type": "string"
        },
        "tty": {
          "default": false,
          "description": "Whether this container should allocate a TTY for itself, also requires `stdin` to be true.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "The list of block devices to be used by the container. This is a beta feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Event.CREATE": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about. The namespace must match that of the event."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Event.GET": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about. The namespace must match that of the event."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Event.UPDATE": {
      "description": "Event is a report of an event somewhere in the cluster.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the Regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in TypeMeta.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about. The namespace must match that of the event."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `kubernetes.io/kubelet`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `kubelet-xyzf`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event (Normal, Warning), new types could be added in the future",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventList": {
      "description": "EventList is a list of events.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of events",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EventList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time of the last occurrence observed"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EventSource": {
      "description": "EventSource contains information for an event.",
      "properties": {
        "component": {
          "description": "Component from which the event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the event is generated.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "This describes a 'run in container' action.",
      "properties": {
        "command": {
          "description": "The command line to execute inside the container, the working directory for the command  is root ('/') in the container. The command is simply exec'd, it is not run inside a shell, so traditional shell instructions ('|', etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "A Fibre Channel volume to mount. Fibre Channel volumes can only be mounted as `ReadWriteOnce`. Fibre Channel volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "lun": {
          "description": "FC target LUN number",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mouned in read-only mode",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "FC target worldwide names (WWNs)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "FC volume world wide identifiers (WWIDs). Either WWIDs or combination of `targetWWNs` and `lun` must be set, but not both.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "description": "A generic persistent volume resource that is provisioned/attached using an exec-based plugin.",
      "properties": {
        "driver": {
          "description": "The name of the driver to use.",
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Extra command options if any. If the key contains '`/`', the subsring before '`/`' is treated as the namespace. The namespace must not have suffix like '`k8s.io`' or '`kubernetes.io`' which are reserved.",
          "type": "object"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "Driver is the name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default filesystem depends on FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Extra command options if any.",
          "type": "object"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "A reference to the secret object containing sensitive information to pass to the plugin scripts. This may be empty if no secret object is specified. If the secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "A Flocker volume mounted by the Flocker agent. One and only one of datasetName and datasetUUID should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "Name of the dataset stored as metadata -> name on the dataset for Flocker, should be considered as deprecated. The name cannot contain '`/`' if specified.",
          "type": "string"
        },
        "datasetUUID": {
          "description": "The unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "A Persistent Disk resource in Google Compute Engine (GCE). A GCE PD must exist before being mounted to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as '`ReadWriteOnce`' or '`ReadOnlyMany`'. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: 'ext4', 'xfs', 'ntfs'.",
          "type": "string"
        },
        "partition": {
          "description": "The partition to mount in the volume. If omitted, the default is to mount by volume name. Examples: For volume '`/dev/sda1`', you specify the partition as '`1`'. Similarly, the volume partition for '`/dev/sda`' is '`0`' (or you can leave the property empty).",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "pdName": {
          "description": "Unique name of the PD resource in GCE.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the ReadOnly setting in volume mounts.",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "Represents a volume that is populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling. GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container.",
      "properties": {
        "directory": {
          "description": "Target directory name. Must not contain or start with '..'.  If '.' is supplied, the volume directory will be the git repository.  Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "Repository URL",
          "minLength": 1,
          "type": "string"
        },
        "revision": {
          "description": "Commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "description": "A Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "The endpoint name that details the Glusterfs topology.",
          "minLength": 1,
          "type": "string"
        },
        "endpointsNamespace": {
          "description": "The namespace that contains the Glusterfs endpoint. This field defaults to the same namespace as the bound PVC.",
          "type": "string"
        },
        "path": {
          "description": "The Glusterfs volume path.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the Glusterfs volume to be mounted with read-only permissions.",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "EndpointsName is the endpoint name that details Glusterfs topology. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "Path is the Glusterfs volume path. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "ReadOnly here will force the Glusterfs volume to be mounted with read-only permissions. Defaults to false. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md#create-a-pod",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "This describes an action based on HTTP GET requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP. You probably want to set 'Host' in httpHeaders instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "minLength": 1,
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "default": "HTTP",
          "description": "Scheme to use for connecting to the host.",
          "enum": [
            "HTTP",
            "HTTPS"
          ],
          "type": "string"
        }
      },
      "required": [
        "path",
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "description": "A custom header to be used in HTTP probes",
      "properties": {
        "name": {
          "description": "The header field name. A valid name consists of alphanumeric characters or `-`.",
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Handler": {
      "description": "Handler defines a specific action that should be taken. One and only one type of actions can be specified per handler.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "This specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "This specifies the HTTP request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "This specifies an action involving a TCP port. TCP hooks not yet supported"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "The mapping between an IP and some hostnames.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the IP address. Each value must be a valid DNS subdomain. Qiming wonders if this can be an empty array.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "description": "IP address of the host file entry. This value must be a valid IP address.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "A host path mapped into a pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "Path of the directory on the host. If the path is a symlink, it will follow the link to the real path. It cannot contain any backsteps (`..`). ",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type for HostPath Volume.",
          "enum": [
            "",
            "BlockDevice",
            "CharDevice",
            "Directory",
            "DirectoryOrCreate",
            "File",
            "FileOrCreate",
            "Socket"
          ],
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "description": "An ISCSI disk. ISCSI volumes can only be mounted as `ReadWriteOnce`. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system.",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If `initiatorName` is specified with `iscsiInterface` simultaneously, new iSCSI interface `<volume name>:<target portal>` will be created for the connection. The length of the interface string cannot exceed 64 characters.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name (IQN). The name must have prefix '`iqn`' or '`eui`' or '`naa`'.",
          "minLength": 1,
          "type": "string"
        },
        "iscsiInterface": {
          "default": "default",
          "description": "iSCSI interface name that uses an iSCSI transport.",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI target LUN number.",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "portals": {
          "description": "iSCSI target portal list. The portal is either an IP or `ip_addr:port` if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "default": false,
          "description": "Force the the volume to be mounted in ready-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "CHAP secret for iSCSI target and initiator authentication. If `chapAuthSession` or `chapAuthDiscovery` is specified, this field cannot be empty."
        },
        "targetPortal": {
          "description": "iSCSI target portal. The portal is either an IP or `ip_addr:port` if the port is other than default (typically TCP ports 860 and 3260).",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "Represents an ISCSI disk. ISCSI volumes can only be mounted as read/write once. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "whether support iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "whether support iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Examples: \"ext4\", \"xfs\", \"ntfs\". Implicitly inferred to be \"ext4\" if unspecified. More info: https://kubernetes.io/docs/concepts/storage/volumes#iscsi",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If initiatorName is specified with iscsiInterface simultaneously, new iSCSI interface <target portal>:<volume name> will be created for the connection.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name.",
          "minLength": 1,
          "type": "string"
        },
        "iscsiInterface": {
          "default": "default",
          "description": "iSCSI Interface Name that uses an iSCSI transport. Defaults to 'default' (tcp).",
          "type": "string"
        },
        "lun": {
          "description": "iSCSI Target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "iSCSI Target Portal List. The portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "default": false,
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "CHAP Secret for iSCSI target and initiator authentication"
        },
        "targetPortal": {
          "description": "iSCSI Target Portal. The Portal is either an IP or ip_addr:port if the port is other than default (typically TCP ports 860 and 3260).",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "targetPortal",
        "iqn",
        "lun"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a string key to a path within a volume.",
      "properties": {
        "key": {
          "description": "The key to project.",
          "minLength": 1,
          "type": "string"
        },
        "mode": {
          "description": "Optional: mode bits to use on this file, must be a value between 0 and 0777. If not specified, the volume defaultMode will be used. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "path": {
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element '..'. May not start with the string '..'.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For `postStart` and `preStop`, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
          "description": "postStart is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes."
        },
        "preStop": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
          "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRange.CREATE": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRange.GET": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits enforced."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRange.UPDATE": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a Namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeItem": {
      "description": "An item that specifies a min/max usage limit for any resource that matches on kind. For each item, the resource name has to follow some rules.",
      "properties": {
        "default": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Default resource requirement limit value by resource name if resource limit is omitted.",
          "type": "object"
        },
        "defaultRequest": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The default resource requirement request value by resource name if resource request is omitted.",
          "type": "object"
        },
        "max": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Max usage constraints on this kind by resource name.",
          "type": "object"
        },
        "maxLimitRequestRatio": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "If specified, the named resource must have a request and limit that are both non-zero where limit divided by request is less than or equal to the enumerated value; this represents the max burst for the named resource.",
          "type": "object"
        },
        "min": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Min usage constraints on this kind by resource name.",
          "type": "object"
        },
        "type": {
          "description": "Type of resource that this limit applies to. This has to be a qualified name of resource or a standard limit type, i.e. one of 'Pod', 'Container' and 'PersistentVolumeClaim'. The type value must be unique in the limits list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRangeList": {
      "description": "A list of LimitRange items.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of LimitRange objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRangeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRangeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "description": "The spec defines a min/max usage limit for resources that match on kind.",
      "properties": {
        "limits": {
          "description": "Limits is the list of limit range items that are enforced.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
          },
          "type": "array"
        }
      },
      "required": [
        "limits"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "description": "The status of a load-balancer ingress point: traffic intended for the service should be sent to an ingress point.",
      "properties": {
        "hostname": {
          "description": "The `hostname` is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "The `ip` is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers)",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "description": "The status of a load-balancer.",
      "properties": {
        "ingress": {
          "description": "A list containing ingress points for the load-balancer. Traffic intended for the service should be sent to these ingress points.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "Information for locating an object in the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "description": "A directly-attached storage with node affinity",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. It applies only when the `path` is a block device. Must be a filesystem type supported by the host operating system. The default value is to auto-select a fileystem if unspecified.",
          "type": "string"
        },
        "path": {
          "description": "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...). There can be no '`..`' in the path.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "An NFS mount that lasts the lifetime of a pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "Path as exported by the NFS server. This must be an absolute path.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the NFS export to be mounted with read-only permissions.",
          "type": "boolean"
        },
        "server": {
          "description": "The hostname or IP address of the NFS server.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "server",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Namespace.CREATE": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Namespace"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus",
          "description": "Status describes the current status of a Namespace."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Namespace.GET": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Namespace"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus",
          "description": "Status describes the current status of a Namespace."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Namespace.UPDATE": {
      "description": "Namespace provides a scope for Names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Namespace"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus",
          "description": "Status describes the current status of a Namespace."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NamespaceCondition": {
      "description": "Details about state of namespace.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
        },
        "message": {
          "type": "string"
        },
        "reason": {
          "type": "string"
        },
        "status": {
          "description": "Status of the condition, one of True, False, Unknown.",
          "enum": [
            "True",
            "False",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of namespace controller condition.",
          "enum": [
            "NamespaceDeletionDiscoveryFailure",
            "NamespaceDeletionContentFailure",
            "NamespaceDeletionGroupVersionParsingFailure"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceList": {
      "description": "NamespaceList is a list of Namespaces.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Namespace objects in the list",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NamespaceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NamespaceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes on a Namespace.",
      "properties": {
        "finalizers": {
          "description": "Finalizers is an opaque list of values that must be empty to permanently remove object from storage.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceStatus": {
      "description": "Information about the current status of a Namespace.",
      "properties": {
        "conditions": {
          "description": "The latest available observations of a namespace's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "The current lifecycle phase of the namespace.",
          "enum": [
            "Active",
            "Terminating"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Node.CREATE": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a node."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus",
          "description": "Most recently observed status of the node."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Node.GET": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a node."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus",
          "description": "Most recently observed status of the node."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Node.PATCH": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.PATCH",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a node."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus",
          "description": "Most recently observed status of the node."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Node.UPDATE": {
      "description": "Node is a worker node in Kubernetes. Each node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a node."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus",
          "description": "Most recently observed status of the node."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NodeAddress": {
      "description": "Information for the node's address.",
      "properties": {
        "address": {
          "description": "The node address.",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Node address type.",
          "enum": [
            "ExternalIP",
            "Hostname",
            "InternalIP",
            "ExternalDNS",
            "InternalDNS"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "address"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "A group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node matches the corresponding matchExpressions; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "The value is a node selector type. If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to an update), the system may or may not try to eventually evict the pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeCondition": {
      "description": "Condition information for a node.",
      "properties": {
        "lastHeartbeatTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we got an update on a given condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "(brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of node condition.",
          "enum": [
            "Ready",
            "MemoryPressure",
            "DiskPressure",
            "NetworkUnavailable"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeConfigSource": {
      "description": "A source of node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource",
          "description": "A reference to a Node's ConfigMap"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeConfigStatus": {
      "description": "The status of the config assigned by node.spec.configSource.",
      "properties": {
        "active": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "The checkpointed config the node is actively using. This represents either the current version of the `assigned` config, or the current `lastKnownGood` config, depending on whether attempting to use the `assigned` config results in an `error`."
        },
        "assigned": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "This reports the checkpointed config the node will try to use. When `node.spec.configSource` is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in `assigned`. The `assigned` only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the `assigned` config the `active` config by loading and validating the checkpointed payload identified by `assigned`."
        },
        "error": {
          "description": "This describes any problems in reconciling the `spec.configSource` to the `active` config. Errors may occur, for example, attempting to checkpoint `spec.configSource` to the local `assigned` record, attempting to checkpoint the payload associated with `spec.configSource`, attempting to load or validate the `assigned` config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to `lastKnownGood`, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to `lastKnownGood`. In the latter case, it is usually possible to resolve the error by fixing the config assigned in `spec.configSource`. You can find additional information for debugging by searching the error message in the Kubelet log. `error` is a human-readable description of the error state; machines can check whether or not `error` is empty, but should not rely on the stability of the `error` text across Kubelet versions.",
          "type": "string"
        },
        "lastKnownGood": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "This reports the checkpointed config the node will fall back to when it encounters an error attempting to use the `assigned` config. The `assigned` config becomes the `lastKnownGood` config when the node determines that the `assigned` config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of `assigned` config is updated. If the `assigned` config is `active` at the end of this period, it becomes the `lastKnownGood`. Note that if `spec.configSource` is reset to nil (use local defaults), the `lastKnownGood` is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeDaemonEndpoints": {
      "description": "Ports opened by daemons running on the Node.",
      "properties": {
        "kubeletEndpoint": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DaemonEndpoint",
          "description": "Endpoint on which Kubelet is listening."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeList": {
      "description": "NodeList is the whole list of all Nodes which have been registered with master.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of nodes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NodeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NodeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "The union of the OR'ed results of one or more label queries over a set of nodes.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "A list of node selector terms. The terms are OR'ed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "minLength": 1,
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. Valid operators are '`In`', '`NotIn`', '`Exists`', '`DoesNotExist`'. '`Gt`', and '`Lt`'.",
          "enum": [
            "DoesNotExist",
            "Exists",
            "Gt",
            "In",
            "Lt",
            "NotIn"
          ],
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is `In` or `NotIn`, the values array must be non-empty. If the operator is `Exists` or `DoesNotExist`, the `values` array must be empty. If the operator is `Gt` or `Lt`, the `values` array must have a single element, which will be interpreted as an integer. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A node selection term. A null or empty term matches no objects. The requirements in the term are AND'ed.",
      "properties": {
        "matchExpressions": {
          "description": "A list of node selector based on node's labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of node selector based on node's fields.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSpec": {
      "description": "The attributes that a node is created with.",
      "properties": {
        "configSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "If specified, the source to get node configuration from. The DynamicKubeletConfig feature gate must be enabled for the Kubelet to use this field"
        },
        "podCIDR": {
          "description": "PodCIDR represents the pod IP range assigned to the node.",
          "type": "string"
        },
        "podCIDRs": {
          "description": "The IP ranges assigned to the Node for usage by Pods on that Node. If this field is specified, the 0th entry must match the `podCIDR` field. It may contain at most 1 value for each of IPv4 and IPv6.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "providerID": {
          "description": "ID of the node assigned by the cloud provider in the format: <ProviderName>://<ProviderSpecificNodeID>",
          "type": "string"
        },
        "taints": {
          "description": "If specified, the node's taints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
          },
          "type": "array"
        },
        "unschedulable": {
          "default": false,
          "description": "Unschedulable controls node schedulability of new pods. By default, node is schedulable.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeStatus": {
      "description": "Information about the current status of a node.",
      "properties": {
        "addresses": {
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available. Note: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeAddress"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "allocatable": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The node resources that are available for scheduling. Defaults to `capacity'.",
          "type": "object"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The total resources of a node.",
          "type": "object"
        },
        "conditions": {
          "description": "An array of current observed node conditions.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigStatus",
          "description": "Status of the config assigned to the node via the dynamic Kubelet config feature."
        },
        "daemonEndpoints": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints",
          "description": "Endpoints of daemons running on the Node."
        },
        "images": {
          "description": "List of container images on this node",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerImage"
          },
          "type": "array"
        },
        "nodeInfo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo",
          "description": "Set of ids/uuids to uniquely identify the node."
        },
        "phase": {
          "description": "The recently observed lifecycle phase of the node. The field is never populated, and now is deprecated.",
          "type": "string"
        },
        "volumesAttached": {
          "description": "List of volumes that are attached to the node.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.AttachedVolume"
          },
          "type": "array"
        },
        "volumesInUse": {
          "description": "List of attachable volumes in use (mounted) by the node.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSystemInfo": {
      "description": "A set of IDs/UUIDs to uniquely identify the node.",
      "properties": {
        "architecture": {
          "description": "The architecture reported by the node",
          "minLength": 1,
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID reported by the node.",
          "minLength": 1,
          "type": "string"
        },
        "containerRuntimeVersion": {
          "description": "Container runtime version as reported by the node through runtime remote API (e.g. '`docker://1.5.0`').",
          "minLength": 1,
          "type": "string"
        },
        "kernelVersion": {
          "description": "Kernel version as reported by the node from 'uname -r' (e.g. '`3.16.0-0.bpo.4-amd64`').",
          "minLength": 1,
          "type": "string"
        },
        "kubeProxyVersion": {
          "description": "kube-proxy version reported by the node.",
          "minLength": 1,
          "type": "string"
        },
        "kubeletVersion": {
          "description": "kubelet version reported by the node.",
          "minLength": 1,
          "type": "string"
        },
        "machineID": {
          "description": "Machine ID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from man(5) machine-id",
          "minLength": 1,
          "type": "string"
        },
        "operatingSystem": {
          "description": "The operating system reported by the node",
          "minLength": 1,
          "type": "string"
        },
        "osImage": {
          "description": "OS image reported by the node from /etc/os-release (e.g. '`Debian GNU/Linux 7 (wheezy)`').",
          "minLength": 1,
          "type": "string"
        },
        "systemUUID": {
          "description": "System UUID reported by the node. For unique machine identification, machineID is preferred. This field is specific to Red Hat hosts.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "machineID",
        "systemUUID",
        "bootID",
        "kernelVersion",
        "osImage",
        "containerRuntimeVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "operatingSystem",
        "architecture"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "This selects an APIVersioned field of an object.",
      "properties": {
        "apiVersion": {
          "default": "v1",
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "fieldPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as desiredState.manifest.containers[2]. For example, if the object reference is to a container within a pod, this would take on a value like: \"spec.containers{name}\" (where \"name\" refers to the name of the container) or if no container name is specified \"spec.containers[2]\" (container 2 in this pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referent.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific resourceVersion to which this reference is made, if any.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolume.CREATE": {
      "description": "A storage resource provisioned by an administrator.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "The specification of a persistent volume owned by the cluster."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolume.GET": {
      "description": "A storage resource provisioned by an administrator.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "The specification of a persistent volume owned by the cluster."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus",
          "description": "The current information/status for the persistent volume."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolume.UPDATE": {
      "description": "A storage resource provisioned by an administrator.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "The specification of a persistent volume owned by the cluster."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim.CREATE": {
      "description": "A user's request for and claim to a persistent volume.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec.CREATE",
          "description": "The desired characteristics of a persistent volume."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim.GET": {
      "description": "A user's request for and claim to a persistent volume.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec.GET",
          "description": "The desired characteristics of a persistent volume."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus",
          "description": "The current information/status of a persistent volume claim."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE": {
      "description": "A user's request for and claim to a persistent volume.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec.UPDATE",
          "description": "The desired characteristics of a persistent volume."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "description": "Detailed state of a PVC",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports '`ResizeStarted`' that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "enum": [
            "Resizing",
            "FileSystemResizePending"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "description": "A list of PersistentVolumeClaim items.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of persistent volume claims",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaimList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaimList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec.CREATE": {
      "description": "The common attributes and the provider-specific attributes of storage devices",
      "properties": {
        "accessModes": {
          "description": "The desired access modes of the volume",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "This field requires the VolumeSnapshotDataSource feature gate to be enabled. Currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. The data source must come from either `PersistentVolumeClaim` of 'core'(``) group, or `VolumeSnapshort` of `snapshot.storage.k8s.io` group."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "The minimum resources the volume should have. The `requests.storage` must be specified."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over volumes to be considered for binding."
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. The name must be a valid DNS subdomain.",
          "type": "string"
        },
        "volumeMode": {
          "default": "filesystem",
          "description": "Type of volume required by the claim.",
          "enum": [
            "block",
            "filesytem"
          ],
          "type": "string"
        },
        "volumeName": {
          "description": "The binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "required": [
        "accessModes"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec.GET": {
      "description": "The common attributes and the provider-specific attributes of storage devices",
      "properties": {
        "accessModes": {
          "description": "The desired access modes of the volume",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "This field requires the VolumeSnapshotDataSource feature gate to be enabled. Currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. The data source must come from either `PersistentVolumeClaim` of 'core'(``) group, or `VolumeSnapshort` of `snapshot.storage.k8s.io` group."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "The minimum resources the volume should have. The `requests.storage` must be specified."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over volumes to be considered for binding."
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. The name must be a valid DNS subdomain.",
          "type": "string"
        },
        "volumeMode": {
          "default": "filesystem",
          "description": "Type of volume required by the claim.",
          "enum": [
            "block",
            "filesytem"
          ],
          "type": "string"
        },
        "volumeName": {
          "description": "The binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "required": [
        "accessModes"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec.UPDATE": {
      "description": "The common attributes and the provider-specific attributes of storage devices",
      "properties": {
        "accessModes": {
          "description": "The desired access modes of the volume",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "This field requires the VolumeSnapshotDataSource feature gate to be enabled. Currently VolumeSnapshot is the only supported data source. If the provisioner can support VolumeSnapshot data source, it will create a new volume and data will be restored to the volume at the same time. If the provisioner does not support VolumeSnapshot data source, volume will not be created and the failure will be reported as an event. The data source must come from either `PersistentVolumeClaim` of 'core'(``) group, or `VolumeSnapshort` of `snapshot.storage.k8s.io` group."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "The minimum resources the volume should have. The `requests.storage` must be specified."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over volumes to be considered for binding."
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. The name must be a valid DNS subdomain.",
          "type": "string"
        },
        "volumeMode": {
          "default": "filesystem",
          "description": "Type of volume required by the claim.",
          "enum": [
            "block",
            "filesytem"
          ],
          "type": "string"
        },
        "volumeName": {
          "description": "The binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "required": [
        "accessModes"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "description": "The current status of a persistent volume claim.",
      "properties": {
        "accessModes": {
          "description": "The actual access modes the volume backing the PVC has.",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The actual resources of the underlying volume.",
          "type": "object"
        },
        "conditions": {
          "description": "Current condition of persistent volume claim. If underlying persistent volume is being resized then the `condition` will be set to '`ResizeStarted`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "The current phase of PersistentVolumeClaim.",
          "enum": [
            "Pending",
            "Bound",
            "Lost"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "ClaimName is the name of a PersistentVolumeClaim in the same namespace as the pod using this volume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "description": "A list of PersistentVolume items",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of persistent volumes",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "description": "The specification of a persistent volume. One and only one volume type can be specified. The volume source cannot be updated once created.",
      "properties": {
        "accessModes": {
          "description": "The ways the volume can be mounted.",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "An AWS disk resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "An Azure data disk mounted on the node and bind mounted to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource",
          "description": "An Azure file service mounted on the node and bind mounted to the pod."
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "A description of the persistent volume's resources and capacity. The capacity can only contain '`storage`'.",
          "type": "object"
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource",
          "description": "A Ceph FS mounted on the node that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource",
          "description": "A cinder volume attached and mounted on node."
        },
        "claimRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Part of a bi-directional binding between PersistentVolume and PersistentVolumeClaim. Expected to be non-nil when bound. claim.volumeName is the authoritative bind between PV and PVC."
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource",
          "description": "Storage that is handled by an external CSI driver."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "A fibre channel resource that is attached to a node and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource",
          "description": "A generic volume resource that is provisioned/attached using an exec-based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "A flocker volume attached to a node and exposed to the pod for its usage."
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "A GCE disk resource that is attached to a node and then exposed to the pod."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource",
          "description": "A Glusterfs volume that is attached to a node and exposed to the pod."
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "A directory on the node. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster."
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource",
          "description": "An ISCSI disk that is attached to a node and then exposed to the pod."
        },
        "local": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource",
          "description": "Directly-attached storage with node affinity"
        },
        "mountOptions": {
          "description": "A list of mount options. Not validated - mount will simply fail if one is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "An NFS mount on the node."
        },
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity",
          "description": "Constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of pods that use this volume. This can be updated if not set yet."
        },
        "persistentVolumeReclaimPolicy": {
          "description": "What happens to a persistent volume when released from its claim. Valid options are '`Retain`' (default for manually created PersistentVolumes), '`Delete`' (default for dynamically provisioned PersistentVolumes), and '`Recycle`' (deprecated). '`Recycle`' must be supported by the volume plugin underlying this PersistentVolume. Hostpath volume mounts of '`/`' cannot be used with the `Recycle` policy.",
          "enum": [
            "Delete",
            "Recycle",
            "Retain"
          ],
          "type": "string"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "A PhotonController persistent disk attached and mounted on the node"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "A portworx volume attached and mounted on the node"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "A quobyte mount on the node that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource",
          "description": "A Rados Block Device mounted on the node that shares a pod's lifetime"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource",
          "description": "A ScaleIO persistent volume attached and mounted on the nodes."
        },
        "storageClassName": {
          "description": "Name of StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass.",
          "type": "string"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource",
          "description": "A StorageOS volume that is attached to the node and mounted into the pod"
        },
        "volumeMode": {
          "default": "Filesystem",
          "description": "This defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. This cannot be updated.",
          "enum": [
            "device",
            "filesystem"
          ],
          "type": "string"
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "A vSphere volume attached and mounted on the node"
        }
      },
      "required": [
        "accessModes",
        "capacity"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "description": "The current status of a persistent volume.",
      "properties": {
        "message": {
          "description": "A human-readable message indicating details about why the volume is in this state.",
          "type": "string"
        },
        "phase": {
          "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim.",
          "enum": [
            "Available",
            "Bound",
            "Failed",
            "Released",
            "Pending"
          ],
          "type": "string"
        },
        "reason": {
          "description": "Reason is a brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "A Photon controller persistent disk resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "pdID": {
          "description": "ID that identifies Photon controller persistent disk",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Pod.CREATE": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto nodes.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.CREATE",
          "description": "Specification of the desired behavior of the pod."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Pod.GET": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto nodes.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.GET",
          "description": "Specification of the desired behavior of the pod."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus",
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Pod.UPDATE": {
      "description": "Pod is a collection of containers that can run on a host. This resource is created by clients and scheduled onto nodes.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.UPDATE",
          "description": "Specification of the desired behavior of the pod."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "A group of inter-pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "A set of pods (namely those matching the labelSelector relative to the given namespace(s)) that this pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key <topologyKey> matches that of any node on which a pod of the set of pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of pods."
        },
        "namespaces": {
          "description": "Which namespaces the labelSelector applies to (matches against); null or empty list means \"this pod's namespace\"",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This pod should be co-located (affinity) or not co-located (anti-affinity) with the pods matching the labelSelector in the specified namespaces, where co-located is defined as running on a node whose value of the label with key topologyKey matches that of any node on which any of the selected pods is running. Empty topologyKey is not allowed.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "A group of inter-pod anti affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of weights, i.e. for each node that meets all of the scheduling requirements (resource request, requiredDuringScheduling anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding \"weight\" to the sum if the node has pods which matches the corresponding podAffinityTerm; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during pod execution (e.g. due to a pod label update), the system may or may not try to eventually evict the pod from its node. When there are multiple elements, the lists of nodes corresponding to each podAffinityTerm are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "The details for the current condition of this pod.",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.",
          "enum": [
            "ContainersReady",
            "Initialized",
            "PodScheduled",
            "Ready",
            "Unschedulable"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "The DNS parameters of a pod in addition to those generated from dnsPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base nameservers generated from dnsPolicy. Duplicated nameservers will be removed. When dnsPolicy is set to 'None', there must be at least one name server specified here. Each item must be a valid IP address.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "maxItems": 3,
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from dnsPolicy. Duplicated entries will be removed. Resolution options given in options will override those that appear in the base dnsPolicy.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for host-name lookup. This will be appended to the base search paths generated from dnsPolicy. Duplicated search paths will be removed. The search list, when joined using ' ', cannot exceed 256 characters. It is okay for an item to have a trailing '.'. Every item must be a valid DNS subdomain name.",
          "items": {
            "type": "string"
          },
          "maxItems": 6,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "This defines a DNS resolver option for a pod.",
      "properties": {
        "name": {
          "description": "Name of the host entry",
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodIP": {
      "description": "IP address information.",
      "properties": {
        "ip": {
          "description": "An IP address (IPv4 or IPv6) assigned to the Pod, routable at least within the cluster.",
          "type": "string"
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodList": {
      "description": "A list of Pods.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "This contains the reference to a pod condition",
      "properties": {
        "conditionType": {
          "description": "This refers to a condition in the pod's condition list with matching type. Its value must be a qualified name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "conditionType"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "Pod-level security attributes and common container settings. Some fields are also present in container.securityContext. Field values of container.securityContext take precedence over field values of pod.securityContext.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod: 1. The owning GID will be the FSGroup; 2. The setgid bit is set (new files created in the volume will be owned by FSGroup); 3. The permission bits are OR'd with 'rw-rw----'; If unset, the Kubelet will not modify the ownership and permissions of any volume.",
          "format": "int64",
          "type": "integer"
        },
        "runAsGroup": {
          "description": "The group ID (GID) to run the entry point of the container process. Uses runtime default if unset. May also be set in container.securityContext.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in container.securityContext.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The user ID (UID) to run the entry point of the container process. Defaults to user specified in image metadata if unspecified. May also be set in container.securityContext.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in container.securityContext."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "A list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. The name of each item must be unique in the array.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": " The Windows specific settings applied to all containers. If unspecified, the options within a container's `securityContext` will be used."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec.CREATE": {
      "description": "The description of a pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Duration in seconds the pod may be active on the node relative to startTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer. This is not supported in Deployment/ReplicaSet/DaemonSet/StatefulSet.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on dnsPolicy. If `dnsPolicy` is set to 'None', this must be provided."
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Set DNS policy for the pod. DNS parameters given in dnsConfig will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to '`ClusterFirstWithHostNet`'. If `dnsPolicy` is set to '`None`', `dnsConfig` must be specified.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "This flag indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links.",
          "type": "boolean"
        },
        "hostAliases": {
          "description": "A list of hosts and IPs that will be injected into the pod's hosts file. This is only valid for non-hostNetwork pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "default": false,
          "description": "Use the host's ipc namespace.",
          "type": "boolean"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
          "type": "boolean"
        },
        "hostPID": {
          "default": false,
          "description": "Use the host's pid namespace.",
          "type": "boolean"
        },
        "hostname": {
          "description": "The hostname of the Pod. The value must be a valid DNS label. If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "A list of references to secrets in the same namespace for pulling container images used by this Pod. If specified, these secrets will be passed to individual puller implementations. For example, in the case of docker, only DockerConfig type secrets are honored.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its `restartPolicy`. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes or Startup probes. The resource requirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or regular containers. Init containers cannot currently be added or removed. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A selector which must match a node's labels for the pod to be scheduled on that node.",
          "type": "object"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The resource overhead associated with running a `Pod` for a given `RuntimeClass`. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod spec, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the `PodOverhead` feature.",
          "type": "object"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "The pod's priority class. The value must be a valid DNS subdomain. The value '`system-node-critical`' and '`system-cluster-critical`' are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to 'True'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "default": "Always",
          "description": "Restart policy for all containers within the pod. For Deployment, DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be '`Always`'. For Job, the `restartPolicy` must be '`OnFailure`' or '`Never`'.",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "This refers to a RuntimeClass object in the 'node.k8s.io' group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the 'legacy' RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value must be a valid DNS subdomain. This is a beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccountName": {
          "description": "The name of the ServiceAccount to use to run this pod. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "shareProcessNamespace": {
          "default": false,
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set. This field is beta-level and may be disabled with the `PodShareProcessNamespace` feature.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>`. If not specified, the pod will not have a domain name at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "The pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. This field is alpha-level and is only honored by clusters that enables the `EvenPodsSpread` feature. All items in the list are AND'ed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec.GET": {
      "description": "The description of a pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Duration in seconds the pod may be active on the node relative to startTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on dnsPolicy. If `dnsPolicy` is set to 'None', this must be provided."
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Set DNS policy for the pod. DNS parameters given in dnsConfig will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to '`ClusterFirstWithHostNet`'. If `dnsPolicy` is set to '`None`', `dnsConfig` must be specified.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "This flag indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers to run in this Pod. Ephemeral containers may be run in an existing Pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a Pod, and it cannot be modified by updating the Pod spec. In order to add an ephemeral container to an existing Pod, use the Pod's `ephemeralcontainers` subresource. This field is alpha-level and is only honored by servers that enable the `EphemeralContainers` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "A list of hosts and IPs that will be injected into the pod's hosts file. This is only valid for non-hostNetwork pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "default": false,
          "description": "Use the host's ipc namespace.",
          "type": "boolean"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
          "type": "boolean"
        },
        "hostPID": {
          "default": false,
          "description": "Use the host's pid namespace.",
          "type": "boolean"
        },
        "hostname": {
          "description": "The hostname of the Pod. The value must be a valid DNS label. If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "A list of references to secrets in the same namespace for pulling container images used by this Pod. If specified, these secrets will be passed to individual puller implementations. For example, in the case of docker, only DockerConfig type secrets are honored.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its restartPolicy. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes, or Startup probes. The resource requirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or regular containers. Init containers cannot currently be added or removed. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A selector which must match a node's labels for the pod to be scheduled on that node.",
          "type": "object"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The resource overhead associated with running a `Pod` for a given `RuntimeClass`. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod spec, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the `PodOverhead` feature.",
          "type": "object"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "The pod's priority class. The value must be a valid DNS subdomain. The value '`system-node-critical`' and '`system-cluster-critical`' are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to 'True'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "default": "Always",
          "description": "Restart policy for all containers within the pod.",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "This refers to a RuntimeClass object in the 'node.k8s.io' group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the 'legacy' RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value, if specified, must be a valid DNS subdomain. This is a beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccountName": {
          "description": "The name of the ServiceAccount to use to run this pod. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "shareProcessNamespace": {
          "default": false,
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set. This field is beta-level and may be disabled with the `PodShareProcessNamespace` feature.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>`. If not specified, the pod will not have a domain name at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "The pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. This field is alpha-level and is only honored by clusters that enables the `EvenPodsSpread` feature. All items in the list are AND'ed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec.UPDATE": {
      "description": "The description of a pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Duration in seconds the pod may be active on the node relative to startTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer. This is not supported in Deployment/ReplicaSet/DaemonSet/StatefulSet.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on dnsPolicy. If `dnsPolicy` is set to 'None', this must be provided."
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Set DNS policy for the pod. DNS parameters given in dnsConfig will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to '`ClusterFirstWithHostNet`'. If `dnsPolicy` is set to '`None`', `dnsConfig` must be specified.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "This flag indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links.",
          "type": "boolean"
        },
        "hostAliases": {
          "description": "A list of hosts and IPs that will be injected into the pod's hosts file. This is only valid for non-hostNetwork pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "default": false,
          "description": "Use the host's ipc namespace.",
          "type": "boolean"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
          "type": "boolean"
        },
        "hostPID": {
          "default": false,
          "description": "Use the host's pid namespace.",
          "type": "boolean"
        },
        "hostname": {
          "description": "The hostname of the Pod. The value must be a valid DNS label. If not specified, the pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "A list of references to secrets in the same namespace for pulling container images used by this Pod. If specified, these secrets will be passed to individual puller implementations. For example, in the case of docker, only DockerConfig type secrets are honored.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its `restartPolicy`. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes or Startup probes. The resource requirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or regular containers. Init containers cannot currently be added or removed. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A selector which must match a node's labels for the pod to be scheduled on that node.",
          "type": "object"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The resource overhead associated with running a `Pod` for a given `RuntimeClass`. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod spec, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the `PodOverhead` feature.",
          "type": "object"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "The pod's priority class. The value must be a valid DNS subdomain. The value '`system-node-critical`' and '`system-cluster-critical`' are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to 'True'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "default": "Always",
          "description": "Restart policy for all containers within the pod. For Deployment, DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be '`Always`'. For Job, the `restartPolicy` must be '`OnFailure`' or '`Never`'.",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "This refers to a RuntimeClass object in the 'node.k8s.io' group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the 'legacy' RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value, if specified, must be a valid DNS subdomain. This is a beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
        },
        "serviceAccountName": {
          "description": "The name of the ServiceAccount to use to run this pod. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "shareProcessNamespace": {
          "default": false,
          "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set. This field is beta-level and may be disabled with the `PodShareProcessNamespace` feature.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>`. If not specified, the pod will not have a domain name at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
          "format": "int64",
          "type": "integer"
        },
        "tolerations": {
          "description": "The pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. This field is alpha-level and is only honored by clusters that enables the `EvenPodsSpread` feature. All items in the list are AND'ed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers belonging to the pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodStatus": {
      "description": "Information about the status of a pod. Status may trail the actual state of a system, especially if the node that hosts the pod cannot contact the control plane.",
      "properties": {
        "conditions": {
          "description": "Current service state of Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "ephemeralContainerStatuses": {
          "description": "Status for any ephemeral containers that have run in this Pod. This field is alpha-level and is only populated by servers that enable the `EphemeralContainers` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "hostIP": {
          "description": "IP address of the host to which the pod is assigned. Empty if not yet scheduled.",
          "type": "string"
        },
        "initContainerStatuses": {
          "description": "The list has one entry per init container in the manifest. The most recent successful init container will have `ready` = '`true`', the most recently started container will have `startTime` set.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "message": {
          "description": "A human readable message indicating details about why the pod is in this condition.",
          "type": "string"
        },
        "nominatedNodeName": {
          "description": "nominatedNodeName is set only when this pod preempts other pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the pod will be scheduled on this node. Scheduler may decide to place the pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority pod that is created after preemption. As a result, this field may be different than spec.nodeName when the pod is scheduled.",
          "type": "string"
        },
        "phase": {
          "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The `conditions` array, the `reason` and `message` fields, and the individual `containerStatuses` arrays contain more details about the pod's status. Possible phase values: `Pending`: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. `Running`: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. `Succeeded`: All containers in the pod have terminated in success, and will not be restarted. `Failed`: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. `Unknown`: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.",
          "enum": [
            "Failed",
            "Pending",
            "Running",
            "Succeeded",
            "Unknown"
          ],
          "type": "string"
        },
        "podIP": {
          "description": "IP address allocated to the Pod. Routable at least within the cluster. Empty if not yet allocated.",
          "type": "string"
        },
        "podIPs": {
          "description": "The IP addresses allocated to the Pod. If this field is specified, the 0th entry must match the `podIP` field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodIP"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "qosClass": {
          "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements",
          "enum": [
            "Guaranteed",
            "Burstable",
            "BestEffort"
          ],
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the pod is in this state. e.g. '`Evicted`'",
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "RFC 3339 date and time at which the object was acknowledged by the Kubelet. This is before the Kubelet pulled the container image(s) for the pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplate.CREATE": {
      "description": "A template for creating copies of a predefined pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplate"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "Template defines the pods that will be created from this pod template."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplate.GET": {
      "description": "A template for creating copies of a predefined pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplate"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "Template defines the pods that will be created from this pod template."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplate.UPDATE": {
      "description": "A template for creating copies of a predefined pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplate"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "Template defines the pods that will be created from this pod template."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplateList": {
      "description": "A list of PodTemplates.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of pod templates",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplateList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplateList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplateSpec.CREATE": {
      "description": "The data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.CREATE",
          "description": "Specification of the desired behavior of the pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplateSpec.GET": {
      "description": "The data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.GET",
          "description": "Specification of the desired behavior of the pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplateSpec.UPDATE": {
      "description": "The data a pod should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.UPDATE",
          "description": "Specification of the desired behavior of the pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "A Portworx volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "The filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID that identifies a Portworx volume",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty term matches all objects with implicit weight 0 (i.e. it's a no-op). A null term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding preference.",
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "weight",
        "preference"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "A health check to be performed against a container to determine whether it is alive or ready to receive traffic.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "This specifies the action to take."
        },
        "failureThreshold": {
          "default": 3,
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "This specifies the HTTP GET request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "periodSeconds": {
          "default": 10,
          "description": "How often (in seconds) to perform the probe.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "successThreshold": {
          "default": 1,
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup probes.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
        },
        "timeoutSeconds": {
          "default": 1,
          "description": "Number of seconds after which the probe times out.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "Represents a projected volume source",
      "properties": {
        "defaultMode": {
          "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "sources": {
          "description": "list of volume projections",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "sources"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "A Quobyte mount that lasts the lifetime of a pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "Group to map volume access to. Default is no group",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the Quobyte volume to be mounted with read-only permissions.",
          "type": "boolean"
        },
        "registry": {
          "description": "A single or multiple Quobyte registry services which act as the central registries for volumes, specified as a string as '`host:port`' pair (multiple entries are separated with commas).",
          "minLength": 1,
          "type": "string"
        },
        "tenant": {
          "description": "Tenant owning the given Quobyte volume in the backend. This is used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "maxLength": 64,
          "type": "string"
        },
        "user": {
          "description": "User to map volume access to. Defaults to serivceaccount user",
          "type": "string"
        },
        "volume": {
          "description": "A string that references the name of an existing Quobyte volume.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "description": "A Rados Block Device (RBD) mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume to mount. Tip: Ensure that the filesystem type is supported by the host operating system.",
          "type": "string"
        },
        "image": {
          "description": "The rados image name.",
          "minLength": 1,
          "type": "string"
        },
        "keyring": {
          "default": "/etc/ceph/keyring",
          "description": "The path to key ring for RBDUser.",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "default": "rbd",
          "description": "The rados pool name.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the disk to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "The name of the authentication secret for RBDUser. If provided overrides `keyring`."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name.",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device mount that lasts the lifetime of a pod. RBD volumes support ownership management and SELinux relabeling. More info: https://kubernetes.io/docs/concepts/storage/volumes#rbd, https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md#how-to-use-it",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume that you want to mount. Tip: Ensure that the filesystem type is supported by the host operating system. Implicitly inferred to be 'ext4' if unspecified.",
          "type": "string"
        },
        "image": {
          "description": "The rados image name",
          "minLength": 1,
          "type": "string"
        },
        "keyring": {
          "default": "/etc/ceph/keyring",
          "description": "Keyring is the path to key ring for RBDUser.",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "pool": {
          "default": "rbd",
          "description": "The rados pool name.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef is name of the authentication secret for RBDUser. If provided overrides keyring."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name",
          "type": "string"
        }
      },
      "required": [
        "monitors",
        "image"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationController.CREATE": {
      "description": "The configuration of a replication controller.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. If the labels of a ReplicationController are empty, they are defaulted to that of the Pod(s) the replication controller manages. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.CREATE",
          "description": "The specification of the desired behavior of the replication controller."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus",
          "description": "The most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationController.GET": {
      "description": "The configuration of a replication controller.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.GET",
          "description": "The specification of the desired behavior of the replication controller."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus",
          "description": "The most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationController.UPDATE": {
      "description": "The configuration of a replication controller.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. If the labels of a ReplicationController are empty, they are defaulted to that of the Pod(s) the replication controller manages. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.UPDATE",
          "description": "The specification of the desired behavior of the replication controller."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus",
          "description": "The most recently observed status of the replication controller. This data may be out of date by some window of time. Populated by the system. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "description": "The state of a replication controller at a certain point.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of replication controller condition.",
          "enum": [
            "ReplicaFailure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "description": "A collection of replication controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of replication controllers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationControllerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationControllerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec.CREATE": {
      "description": "The specification of a replication controller.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. The default value 0 meands a pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Label keys and values for pods that must match in order to be controlled by this replication controller. If selector is empty, it defaults to the labels present on the Pod template. If selector is not empty, it must match the labels defined for the pod template.",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "The object that describes the pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec.GET": {
      "description": "The specification of a replication controller.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. The default value 0 meands a pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Label keys and values for pods that must match in order to be controlled by this replication controller. If selector is empty, it defaults to the labels present on the Pod template. If selector is not empty, it must match the labels defined for the pod template.",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object that describes the pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec.UPDATE": {
      "description": "The specification of a replication controller.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created pod should be ready without any of its container crashing, for it to be considered available. The default value 0 meands a pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Label keys and values for pods that must match in order to be controlled by this replication controller. If selector is empty, it defaults to the labels present on the Pod template. If selector is not empty, it must match the labels defined for the pod template.",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "The object that describes the pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "description": "The current status of a replication controller.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least `minReadySeconds`) for this replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "The latest available observations of a replication controller's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of pods that have labels matching the labels of the pod template of the replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The generation of the most recently observed replication controller.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this replication controller.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "The most recently oberved number of replicas.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (cpu, memory) and their output format",
      "properties": {
        "containerName": {
          "description": "Container name: required for volumes, optional for env vars",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "default": "1",
          "description": "Specifies the output format of the exposed resources. For CPU, it can be '1m' or '1'; for memory or ephemeral-storage, it can be one of 1, 1k, 1M, 1G, 1T, 1P, 1E, 1Ki, 1Mi, 1Gi, 1Ti, 1Pi, 1Ei; for '"
        },
        "resource": {
          "description": "Resource to select. It can be 'limits.cpu', 'requests.cpu', 'limits.memory', 'requests.memory', 'limits.ephemeral-storage', 'requests.ephemeral-storage', ",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuota.CREATE": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuota"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Status defines the actual enforced quota and its current usage."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuota.GET": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuota"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Status defines the actual enforced quota and its current usage."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuota.UPDATE": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuota"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "Status defines the actual enforced quota and its current usage. This field will be copied from the existing object when updating."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuotaList": {
      "description": "A list of ResourceQuota items.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ResourceQuota objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuotaList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuotaList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "The desired hard limits to enforce as quota.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The set of desired hard limits for each named resource. The resource name must be a standard resource type or fully qualified name. All quantity values must be non-negative. For integer resources, the value cannot contain milli-value.",
          "type": "object"
        },
        "scopeSelector": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector",
          "description": "A collection of filters like scopes for matching objects tracked by a quota but expressed using ScopeSelectorOperator in combination with possible values. For a resource to match, both scopes AND scopeSelector (if specified) must match."
        },
        "scopes": {
          "description": "A collection of filters that for matching objects tracked by a quota. An empty list matches all objects. For a resource to match, both scopes AND scopeSelector (if specified) must match. For standard resources, when scopes contain Terminating, NotTerminating, NotBestEffort or PriorityClass, the resource in hard can be one of 'cpu', 'memory', 'limits.cpu', 'limits.memory', 'requests.cpu', 'requests.memory' or 'pods'. When scopes contain BestEffort, the resource name in hard can only be 'pods'. 'Terminating' conflicts with 'NonTerminating' and 'BestEffort' conflicts with 'NotBestEffort'. This field is immutable so cannot be updated.",
          "items": {
            "enum": [
              "Terminating",
              "NotTerminating",
              "BestEffort",
              "NotBestEffort",
              "PriorityClass"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "The enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The set of enforced hard limits for each named resource. The resource names and values must follow some constraints.",
          "type": "object"
        },
        "used": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The current observed total usage of the resource in the namespace. The resource names and values have to follow some constraints.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "The resource requirements. Resources can be 'cpu', 'memory', 'ephemeral-storage' or prefixed with 'hugepages-'. Resource names prefixed with 'kubernetes.io/' are valid but reserved by Kubernetes. Extended resources can be specified if the name follows the standard: not prefixed with 'requests.'; can form quota if prefixed with 'requests.'. When hugepages resource is specified in requests of limits, CPU or memory resource must be specified in limits or requests.  If `requests` is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. For native resources other than huge pages, overcommit is allowed, the requests value must be lower or equal to that of the limits. For other resources, overcommit is disallowed, their limits must be set and the requests must equal to the limits.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The maximum amount of compute resources allowed.",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The minimum amount of compute resources required.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "The labels to be applied to the container",
      "properties": {
        "level": {
          "description": "The SELinux level label that applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "A SELinux role label that applies to the container.",
          "type": "string"
        },
        "type": {
          "description": "A SELinux type label that applies to the container.",
          "type": "string"
        },
        "user": {
          "description": "A SELinux user label that applies to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "description": "A persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "default": "xfs",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "minLength": 1,
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO protection domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Reference to the Secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "default": false,
          "description": "Flag to enable/disable SSL communication with Gateway",
          "type": "boolean"
        },
        "storageMode": {
          "default": "ThinProvisioned",
          "description": "Indicates whether the storage for a volume should be '`ThickProvisioned`' or '`ThinProvisioned`'.",
          "enum": [
            "ThickProvisioned",
            "ThinProvisioned"
          ],
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO storage pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "minLength": 1,
          "type": "string"
        },
        "volumeName": {
          "description": "The name of an existing volume in the ScaleIO system that is associated with this volume source.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "secretRef",
        "system",
        "volumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "default": "xfs",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API Gateway.",
          "minLength": 1,
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef references to the secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "default": false,
          "description": "Flag to enable/disable SSL communication with Gateway",
          "type": "boolean"
        },
        "storageMode": {
          "default": "ThinProvisioned",
          "description": "Indicates whether the storage for a volume should be ThickProvisioned or ThinProvisioned.",
          "enum": [
            "ThickProvisioned",
            "ThinProvisioned"
          ],
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "minLength": 1,
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "system",
        "secretRef"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "The AND of all the selectors represented by the matchExpressions selectors. This currently only used in ResourceQuota.",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by scope of the resources. Note that the 'BestEffort' and 'NotBestEffort' scopes conflicts with each other, and the 'Terminating' and the 'NotTerminating' scopes conflict with each other.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A selector that contains values, a scope name, and an operator that relates the scope name and values. This is currently only used in ResourceQuota.",
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. When scope is one of 'Terminating', 'NotTerminating', 'BestEffort', 'NotBestEffort', the operator can only be 'Exists'.",
          "enum": [
            "DoesNotExist",
            "Exists",
            "In",
            "NotIn"
          ],
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.",
          "enum": [
            "Terminating",
            "NotTerminating",
            "BestEffort",
            "NotBestEffort",
            "PriorityClass"
          ],
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "scopeName",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Secret.CREATE": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the data or stringData field must be less than 1MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. Note that some secret types may have additional requirements on the annotations."
        },
        "stringData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object"
        },
        "type": {
          "default": "Opaque",
          "description": "Used to facilitate programmatic handling of secret data.",
          "enum": [
            "Opaque",
            "kubernetes.io/service-account-token",
            "kubernetes.io/dockercfg",
            "kubernetes.io/dockerconfigjson",
            "kubernetes.io/basic-auth",
            "kubernetes.io/ssh-auth",
            "kubernetes.io/tls",
            "bootstrap.kubernetes.io/token"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Secret.GET": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the data field must be less than 1MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "Data contains the secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "type": {
          "default": "Opaque",
          "description": "Used to facilitate programmatic handling of secret data.",
          "enum": [
            "Opaque",
            "kubernetes.io/service-account-token",
            "kubernetes.io/dockercfg",
            "kubernetes.io/dockerconfigjson",
            "kubernetes.io/basic-auth",
            "kubernetes.io/ssh-auth",
            "kubernetes.io/tls",
            "bootstrap.kubernetes.io/token"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Secret.UPDATE": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the data or stringData field must be less than 1MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The secret data. Each key must consist of alphanumeric characters, '-', '_' or '.'. The serialized form of the secret data is a base64 encoded string, representing the arbitrary (possibly non-string) data value here. Described in https://tools.ietf.org/html/rfc4648#section-4",
          "type": "object"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. Note that some secret types may have additional requirements on the annotations."
        },
        "stringData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "stringData allows specifying non-binary secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the data field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object"
        },
        "type": {
          "default": "Opaque",
          "description": "Used to facilitate programmatic handling of secret data. This has to match the current type.",
          "enum": [
            "Opaque",
            "kubernetes.io/service-account-token",
            "kubernetes.io/dockercfg",
            "kubernetes.io/dockerconfigjson",
            "kubernetes.io/basic-auth",
            "kubernetes.io/ssh-auth",
            "kubernetes.io/tls",
            "bootstrap.kubernetes.io/token"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource selects a Secret to populate the environment variables with. The contents of the target Secret's Data field will represent the key-value pairs as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referent. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "description": "The key of the secret to select from. It must consist of alphanumeric characters, '.', '-' or '-'. It cannot be '.', '..' or start with '..'.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or it's key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretList": {
      "description": "SecretList is a list of Secret.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "Items is a list of secret objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SecretList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecretList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a secret into a projected volume. The contents of the target Secret's Data field will be presented in a projected volume as files using the keys in the Data field as the file names. Note that this is identical to a secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referent",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretReference": {
      "description": "SecretReference represents a Secret Reference. It has enough information to retrieve secret in any namespace",
      "properties": {
        "name": {
          "description": "Name is unique within a namespace to reference a secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within which the secret name must be unique.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume. The contents of the target Secret's Data field will be presented in a volume as files using the keys in the Data field as the file names. Secret volumes support ownership management and SELinux relabeling. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret",
      "properties": {
        "defaultMode": {
          "default": 420,
          "description": "Mode bits to use on created files by default. Must be a value between 0 and 0777. Defaults to 0644. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like fsGroup, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the Data field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the '..' path or start with '..'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "optional": {
          "description": "Specify whether the Secret or it's keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the secret in the pod's namespace to use.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "The security configuration that is applied to a container. Some fields are present in both securityContext and podSecurityContext. When both are set, the values in securityContext take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. allowPrivilegeEscalation is always true when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN. If `privileged` is set to True, this cannot be False.",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
          "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime."
        },
        "privileged": {
          "default": false,
          "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. The cluster policy 'allowPrivileged' must be set to True to allow privileged containers.",
          "type": "boolean"
        },
        "procMount": {
          "description": "procMount denotes the type of proc mount to use for the containers. The default is 'Default', which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
          "enum": [
            "Default",
            "Unmasked"
          ],
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "default": false,
          "description": "Whether this container has a read-only root filesystem.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The group ID (GID) to run the entry point of the container process. Uses runtime default if unset. May also be set in PodSecurityContext. The value must be within the scope of a 32-bit non-negative integer.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in PodSecurityContext.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext. The value must be within the scope of a 32-bit non-negative integer.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext."
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "Windows security options."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Service.CREATE": {
      "description": "A named abstraction of software service consisting of local port that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The service name must be valid DNS label. The annotation `service.beta.kubernetes.io/load-balancer-source-ranges` can be set to specify the ingress range allowed. The value should e a comma separated list of CIRDs. Default value is `0.0.0.0/0` which allows full access. Not all cloud-providers support this annotation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec.CREATE",
          "description": "Spec defines the behavior of a service."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Service.GET": {
      "description": "A named abstraction of software service consisting of local port that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec.GET",
          "description": "Spec defines the behavior of a service."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus",
          "description": "Most recently observed status of the service."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Service.UPDATE": {
      "description": "A named abstraction of software service consisting of local port that the proxy listens on, and the selector that determines which pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec.UPDATE",
          "description": "Spec defines the behavior of a service."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount.CREATE": {
      "description": "A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for an identity, a principal that can be authenticated and authorized and a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "A list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "secrets": {
          "description": "A list of secrets allowed to be used by pods running using this ServiceAccount.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount.GET": {
      "description": "A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for an identity, a principal that can be authenticated and authorized and a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "A list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "secrets": {
          "description": "A list of secrets allowed to be used by pods running using this ServiceAccount.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount.UPDATE": {
      "description": "A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for an identity, a principal that can be authenticated and authorized and a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicates whether pods running as this service account should have an API token automatically mounted. Can be overridden at the pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "A list of references to secrets in the same namespace to use for pulling any images in pods that reference this ServiceAccount. ImagePullSecrets are distinct from Secrets because Secrets can be mounted in the pod, but ImagePullSecrets are only accessed by the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "secrets": {
          "description": "A list of secrets allowed to be used by pods running using this ServiceAccount.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountList": {
      "description": "A list of ServiceAccount objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of ServiceAccounts.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccountList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccountList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection represents a projected service account token volume. This projection can be used to insert a service account token into the pods runtime filesystem for use against APIs (Kubernetes API Server or otherwise).",
      "properties": {
        "audience": {
          "description": "Audience is the intended audience of the token. A recipient of a token must identify itself with an identifier specified in the audience of the token, and otherwise should reject the token. The audience defaults to the identifier of the apiserver.",
          "type": "string"
        },
        "expirationSeconds": {
          "default": 3600,
          "description": "The requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live or if the token is older than 24 hours.Defaults to 1 hour and must be at least 10 minutes.",
          "format": "int64",
          "minimum": 600,
          "type": "integer"
        },
        "path": {
          "description": "Path is the path relative to the mount point of the file to project the token into.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceList": {
      "description": "A list of services.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of services",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServicePort": {
      "description": "Information on service's port.",
      "properties": {
        "name": {
          "description": "The name of this port within the service. This must be a DNS label. All ports within a service spec must have unique names. When considering the endpoints for a Service, this must match the `name` field in EndpointPort objects. Optional if only one `ports` is defined on this service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this service is exposed when `type` is '`NodePort`' or '`LoadBalancer'`. Default is to auto-allocate a port if the type of this service requires one. If explicitly specified, no duplicate node port number is allowed. The system will attempt to allocate the specified port to the service if it is not in use or else creation of the service will fail. For `ClusterIP` type of service, this field cannot be used.",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "description": "The port that will be exposed by this service. The value cannot be the port number used by kubelet. The (port, protocol) tuple must be unique in the array.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The protocol for this port. When service type is '`LoadBalancer`', all ports must have the same protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. If it is a string, it must be not empty and no more than 15 characters. It must contain only alphanumeric characters and hyphens. Port name will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the `port` field is used (an identity map). This field is ignored for services with `clusterIP` set to '`None`', and should be omitted or set equal to the `port` field."
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec.CREATE": {
      "description": "The attributes that a user creates on a service.",
      "properties": {
        "clusterIP": {
          "description": "The IP address of the service and is usually assigned randomly. If an IP address is specified manually and the IP is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field cannot be changed through updates. Valid values are '`None`', empty string (''), or a valid IP address. '`None`' can be specified for headless services when proxying is not required. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. The value must be empty string if `type` is '`ExternalName`'. The value cannot be '`None`' for  `LoadBalancer` or `NodePort` type of services.",
          "type": "string"
        },
        "externalIPs": {
          "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. The IP address provided cannot be '`0.0.0.0`' or loopback addresses ('`127.0.0.0/8`') or link-local addresses ('`169.254.0.0/16`' or '`244.0.0.0/24`').",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "description": "The external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123), a valid DNS subdomain and requires `type` to be '`ExternalName`'. Having a trailing dot is acceptable.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "This denotes if this service desires to route external traffic to node-local or cluster-wide endpoints. '`Local`' preserves the client source IP and avoids a second hop for `LoadBalancer` and `Nodeport` type of services, but risks potentially imbalanced traffic spreading. '`Cluster`' obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "enum": [
            "Cluster",
            "Local"
          ],
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "The healthcheck node port for the service. If not specified, it is created by the service API backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when `type` is set to '`LoadBalancer`' and `externalTrafficPolicy` is set to '`Local`'.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "ipFamily": {
          "description": "Whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6). If a specific IP family is requested, the `clusterIP` field will be allocated from that family, if it is available in the cluster. If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (`loadBalancerIP`, `loadBalancerSourceRanges`, `externalIPs`) and controllers which allocate external load-balancers should use the same IP family. Endpoints for this Service will be of this family. This field is immutable after creation. Assigning a `serviceIPFamily` not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during `clusterIP` assignment. If the `IPv6DualStack` feature flag is enabled, this field is required.",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to `LoadBalancer` type of services. A load balancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "Only applies to `LoadBalancer` type of services. If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. Every entry must be a valid CIDR expression. This field will be ignored if the cloud-provider does not support the feature.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service. Required when service is not headless service and it is not of type `ExternalName`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "default": false,
          "description": "When set to true, indicates that DNS implementations must publish the `notReadyAddresses` of subsets for the endpoints associated with the service. The primary use case for setting this field is to use a StatefulSet's headless service to propagate SRV records for its pods without respect to their readiness for purpose of peer discovery.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Service traffic will be routed to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. Ignored if `type` is '`ExternalName`'.",
          "type": "object"
        },
        "sessionAffinity": {
          "default": "None",
          "description": "Used to maintain session affinity. Setting this to '`ClientIP`' enables client IP based session affinity.",
          "enum": [
            "ClientIP",
            "None"
          ],
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
          "description": "The configurations of session affinity. It is required when `sessionAffinity` is set to '`ClientIP`' and it cannot be set when `sessionAffinity` is set to '`None`'."
        },
        "type": {
          "default": "ClusterIP",
          "description": "This field determines how the service is exposed. '`ExternalName`' maps to the specified `externalName`. '`ClusterIP`' allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If `clusterIP` is '`None`', no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. '`NodePort`' builds on '`ClusterIP`' and allocates a port on every node which routes to the cluster IP. '`LoadBalancer`' builds on '`NodePort`' and creates an external load-balancer (if supported in the current cloud) which routes to the cluster IP.",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec.GET": {
      "description": "The attributes that a user creates on a service.",
      "properties": {
        "clusterIP": {
          "description": "The IP address of the service and is usually assigned randomly by the master. If an address is specified manually and is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field can not be changed through updates. Valid values are '`None`', empty string (''), or a valid IP address. '`None`' can be specified for headless services when proxying is not required. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. Ignored if type is '`ExternalName`'.",
          "type": "string"
        },
        "externalIPs": {
          "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "description": "The external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be '`ExternalName`'.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "This denotes if this service desires to route external traffic to node-local or cluster-wide endpoints. '`Local`' preserves the client source IP and avoids a second hop for `LoadBalancer` and `Nodeport` type of services, but risks potentially imbalanced traffic spreading. '`Cluster`' obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "enum": [
            "Cluster",
            "Local"
          ],
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "The healthcheck nodePort for the service. If not specified, it is created by the service API backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when `type` is set to '`LoadBalancer`' and `externalTrafficPolicy` is set to '`Local`'.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "ipFamily": {
          "description": "Whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6). If a specific IP family is requested, the `clusterIP` field will be allocated from that family, if it is available in the cluster. If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (`loadBalancerIP`, `loadBalancerSourceRanges`, `externalIPs`) and controllers which allocate external load-balancers should use the same IP family. Endpoints for this Service will be of this family. This field is immutable after creation. Assigning a `serviceIPFamily` not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during `clusterIP` assignment. If the `IPv6DualStack` feature flag is enabled, this field is required.",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to `LoadBalancer` type of services. A load balancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "default": false,
          "description": "When set to true, indicates that DNS implementations must publish the `notReadyAddresses` of subsets for the endpoints associated with the service. The primary use case for setting this field is to use a StatefulSet's headless service to propagate SRV records for its pods without respect to their readiness for purpose of peer discovery.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Service traffic will be routed to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. Ignored if `type` is '`ExternalName`'.",
          "type": "object"
        },
        "sessionAffinity": {
          "default": "None",
          "description": "Used to maintain session affinity. Setting this to 'ClientIP' enables client IP based session affinity.",
          "enum": [
            "ClientIP",
            "None"
          ],
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
          "description": "The configurations of session affinity."
        },
        "type": {
          "default": "ClusterIP",
          "description": "This field determines how the service is exposed. '`ExternalName`' maps to the specified `externalName`. '`ClusterIP`' allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If `clusterIP` is '`None`', no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. '`NodePort`' builds on '`ClusterIP`' and allocates a port on every node which routes to the cluster IP. '`LoadBalancer`' builds on '`NodePort`' and creates an external load-balancer (if supported in the current cloud) which routes to the cluster IP.",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec.UPDATE": {
      "description": "The attributes that a user creates on a service.",
      "properties": {
        "externalIPs": {
          "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "description": "The external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123) and requires `type` to be '`ExternalName`'.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "This denotes if this service desires to route external traffic to node-local or cluster-wide endpoints. '`Local`' preserves the client source IP and avoids a second hop for `LoadBalancer` and `Nodeport` type of services, but risks potentially imbalanced traffic spreading. '`Cluster`' obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
          "enum": [
            "Cluster",
            "Local"
          ],
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "The healthcheck nodePort for the service. If not specified, it is created by the service API backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when `type` is set to '`LoadBalancer`' and `externalTrafficPolicy` is set to '`Local`'.",
          "format": "int32",
          "type": "integer"
        },
        "ipFamily": {
          "description": "Whether this Service has a preference for a particular IP family (e.g. IPv4 vs. IPv6). If a specific IP family is requested, the `clusterIP` field will be allocated from that family, if it is available in the cluster. If no IP family is requested, the cluster's primary IP family will be used. Other IP fields (`loadBalancerIP`, `loadBalancerSourceRanges`, `externalIPs`) and controllers which allocate external load-balancers should use the same IP family. Endpoints for this Service will be of this family. This field is immutable after creation. Assigning a `serviceIPFamily` not available in the cluster (e.g. IPv6 in IPv4 only cluster) is an error condition and will fail during `clusterIP` assignment. If the `IPv6DualStack` feature flag is enabled, this field is required.",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to `LoadBalancer` type of services. A load balancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ports": {
          "description": "The list of ports that are exposed by this service.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "default": false,
          "description": "When set to true, indicates that DNS implementations must publish the `notReadyAddresses` of subsets for the endpoints associated with the service. The primary use case for setting this field is to use a StatefulSet's headless service to propagate SRV records for its pods without respect to their readiness for purpose of peer discovery.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Service traffic will be routed to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. Ignored if `type` is '`ExternalName`'.",
          "type": "object"
        },
        "sessionAffinity": {
          "default": "None",
          "description": "Used to maintain session affinity. Setting this to 'ClientIP' enables client IP based session affinity.",
          "enum": [
            "ClientIP",
            "None"
          ],
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
          "description": "The configurations of session affinity."
        },
        "type": {
          "default": "ClusterIP",
          "description": "This field determines how the service is exposed. '`ExternalName`' maps to the specified `externalName`. '`ClusterIP`' allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If `clusterIP` is '`None`', no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. '`NodePort`' builds on '`ClusterIP`' and allocates a port on every node which routes to the cluster IP. '`LoadBalancer`' builds on '`NodePort`' and creates an external load-balancer (if supported in the current cloud) which routes to the cluster IP.",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "The current status of a service.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "The current status of the load-balancer, if one is present."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "description": "The configuration of session affinity.",
      "properties": {
        "clientIP": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig",
          "description": "The configuration for Client IP based session affinity."
        }
      },
      "required": [
        "clientIP"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "description": "A StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Referende to a Secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. When specified, the `name` and `namespace` fields cannot be empty."
        },
        "volumeName": {
          "description": "The human-readable name of the StorageOS volume. Volume names are only unique within a namespace.",
          "minLength": 1,
          "type": "string"
        },
        "volumeNamespace": {
          "description": "The scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set `volumeName` to any name to override the default behaviour. Set to '`default`' if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "required": [
        "volumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "Represents a StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Implicitly inferred to be 'ext4' if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to false (read/write). ReadOnly here will force the ReadOnly setting in VolumeMounts.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef specifies the secret to use for obtaining the StorageOS API credentials.  If not specified, default values will be attempted."
        },
        "volumeName": {
          "description": "VolumeName is the human-readable name of the StorageOS volume.  Volume names are only unique within a namespace.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "VolumeNamespace specifies the scope of the volume within StorageOS.  If no namespace is specified then the Pod's namespace will be used.  This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set VolumeName to any name to override the default behaviour. Set to 'default' if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "A kernel parameter to set",
      "properties": {
        "name": {
          "description": "Name of a property to set. The name contains several segments separated with dots which each segment can contain alphanumeric characters, '-' and '_'. '-' and '_' cannot appear at the start or end, though.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the pod IP.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the 'effect' on any pod that does not tolerate the Taint.",
      "properties": {
        "effect": {
          "description": "The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "description": "The taint key to be applied to a node.",
          "minLength": 1,
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "TimeAdded represents the time at which the taint was added. It is only written for NoExecute taints."
        },
        "value": {
          "description": "The taint value corresponding to the taint key.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "key",
        "effect",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "This toleration is attached to a pod that tolerates any taint that matches the triple (`key`,`value`,`effect`) using the matching operator `operator`.",
      "properties": {
        "effect": {
          "description": "The taint effect to match. Empty ('') means matching all taint effects.",
          "enum": [
            "",
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "description": "The taint key that the toleration applies to. If the `key` is empty, `operator` must be '`Exists`'; this combination means to match all values and all keys. If it is not empty, it must be a valid label name.",
          "type": "string"
        },
        "operator": {
          "default": "Equal",
          "description": "A key's relationship to the value. The value `Exists` is equivalent to wildcard for `value`, it means a pod can tolerate all taints of a particular category, so the `value` field must be empty. An empty `operator` is equivalent to '`Equal`'.",
          "enum": [
            "Equal",
            "Exists"
          ],
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "The period of time the toleration tolerates the taint. When this field is set, the `effect` must be '`NoExecute`'. By default, it is not set, which means tolerating the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "The taint value the toleration matches to. If the operator is `Exists`, the value should be empty (''), otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "description": "A topology selector requirement is a selector that matches given label. This is an alpha feature and may change in the future.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "key",
        "values"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "description": "A topology selector term represents the result of label queries. A null or empty term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an alpha feature and may change in the future.",
      "properties": {
        "matchLabelExpressions": {
          "description": "A list of topology selector requirements by labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "description": "How to spread matching Pods among the given topology.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector used to find matching Pods. Pods that match this label selector are counted to determine the number of Pods in their corresponding topology domain."
        },
        "maxSkew": {
          "default": 1,
          "description": "The degree to which Pods may be unevenly distributed. It's the maximum permitted difference between the number of matching Pods in any two topology domains of a given topology type. For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as '1/1/0'. If `maxSkew` is 1, incoming Pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1 would make the actual skew (2-0) on zone1 violate `maxSkew(1)`. If `maxSkew` is 2, incoming Pod can be scheduled onto any zone.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "topologyKey": {
          "description": "The key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each 'key, value' as a bucket, and try to put balanced number of Pods into each bucket.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "default": "DoNotSchedule",
          "description": "This indicates how to deal with a Pod if it doesn't satisfy the spread constraint. '`DoNotSchedule`' tells the scheduler not to schedule it, '`ScheduleAnyway`' tells the scheduler to still schedule it. It's considered as 'Unsatisfiable' if and only if placing incoming Pod on any topology violates 'MaxSkew'. For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as '3/1/1'. If `whenUnsatisfiable` is set to '`DoNotSchedule`', incoming Pod can only be scheduled to zone2 or zone3. In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced.",
          "enum": [
            "DoNotSchedule",
            "ScheduleAnyway"
          ],
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "Information for locating the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "The group for the resource being referenced. If not specified, the specified `kind` must be in the `core` API group.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name of resource being referenced",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a pod that may be accessed by any container in the pod.",
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "AWSElasticBlockStore represents an AWS Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#awselasticblockstore"
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "AzureDisk represents an Azure Data Disk mount on the host and bind mount to the pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
          "description": "AzureFile represents an Azure File Service mount on the host and bind mount to the pod."
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
          "description": "CephFS represents a Ceph FS mount on the host that shares a pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
          "description": "Cinder represents a cinder volume attached and mounted on kubelets host machine More info: https://releases.k8s.io/HEAD/examples/mysql-cinder-pd/README.md"
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
          "description": "ConfigMap represents a configMap that should populate this volume"
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
          "description": "CSI (Container Storage Interface) represents storage that is handled by an external CSI driver (Alpha feature)."
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
          "description": "DownwardAPI represents downward API about the pod that should populate this volume"
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "EmptyDir represents a temporary directory that shares a pod's lifetime. More info: https://kubernetes.io/docs/concepts/storage/volumes#emptydir"
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "FC represents a Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
          "description": "FlexVolume represents a generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "Flocker represents a Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running"
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "GCEPersistentDisk represents a GCE Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://kubernetes.io/docs/concepts/storage/volumes#gcepersistentdisk"
        },
        "gitRepo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
          "description": "GitRepo represents a git repository at a particular revision. DEPRECATED: GitRepo is deprecated. To provision a container with a git repo, mount an EmptyDir into an InitContainer that clones the repo using git, then mount the EmptyDir into the Pod's container."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
          "description": "Glusterfs represents a Glusterfs mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/glusterfs/README.md"
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "HostPath represents a pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this. More info: https://kubernetes.io/docs/concepts/storage/volumes#hostpath"
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
          "description": "ISCSI represents an ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the pod. More info: https://releases.k8s.io/HEAD/examples/volumes/iscsi/README.md"
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the pod. More info: https://kubernetes.io/docs/concepts/overview/working-with-objects/names/#names",
          "minLength": 1,
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "NFS represents an NFS mount on the host that shares a pod's lifetime More info: https://kubernetes.io/docs/concepts/storage/volumes#nfs"
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
          "description": "PersistentVolumeClaimVolumeSource represents a reference to a PersistentVolumeClaim in the same namespace. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#persistentvolumeclaims"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "PhotonPersistentDisk represents a PhotonController persistent disk attached and mounted on kubelets host machine"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "PortworxVolume represents a portworx volume attached and mounted on kubelets host machine"
        },
        "projected": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
          "description": "Items for all in one resources secrets, configmaps, and downward API"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "Quobyte represents a Quobyte mount on the host that shares a pod's lifetime"
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
          "description": "RBD represents a Rados Block Device mount on the host that shares a pod's lifetime. More info: https://releases.k8s.io/HEAD/examples/volumes/rbd/README.md"
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
          "description": "ScaleIO represents a ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
          "description": "Secret represents a secret that should populate this volume. More info: https://kubernetes.io/docs/concepts/storage/volumes#secret"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
          "description": "StorageOS represents a StorageOS volume attached and mounted on Kubernetes nodes."
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "VsphereVolume represents a vSphere volume attached and mounted on kubelets host machine"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "volumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "description": "devicePath is the path inside of the container that the device will be mapped to. The path must be unique inside a container. The path cannot contain '..' in it. It cannot overlap with volumeMounts.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "name must match the name of a persistentVolumeClaim in the pod. It must be unique in the scope of the container. It cannot overlap with volumeMounts.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "devicePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "A mounting of a volume within a container.",
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted.  Must not contain ':'. The mounting point must be unique in the container and it cannot overlap with those of the volumeDevices.",
          "minLength": 1,
          "type": "string"
        },
        "mountPropagation": {
          "default": "None",
          "description": "mountPropagation determines how mounts are propagated from the host to container and the other way around. When not set, None is used. Bidirectional mount propagation is only available to privileged containers. This field is beta in 1.10.",
          "enum": [
            "Bidirectional",
            "HostToContainer",
            "None"
          ],
          "type": "string"
        },
        "name": {
          "description": "This must match the name of a volume. The name cannot overlap with that of volumeDevices.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Mounted read-only if true, read-write otherwise (false or unspecified). Defaults to false.",
          "type": "boolean"
        },
        "subPath": {
          "default": "",
          "description": "Path within the volume from which the container's volume should be mounted. Default value '' means the volume's root. This path cannot contain '..' or prefixed with '/'. In future, a 'subPathExpr' property is added as well which is mutual exclusive to subPath.",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to `subPath` but environment variable references `$(VAR_NAME)` are expanded using the container's environment. Defaults to '' (volume's root). `subPathExpr` and `subPath` are mutually exclusive. The path must be relative path and it cannot contain '`..`' or prefix with '`..`'. This field is beta in 1.15.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "mountPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "description": "The constraints that limit what nodes this volume can be accessed from.",
      "properties": {
        "required": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "This specifies the hard constraints that nodes must meet."
        }
      },
      "required": [
        "required"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Projection that may be projected along with other supported volume types",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
          "description": "information about the configMap data to project"
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
          "description": "information about the downwardAPI data to project"
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
          "description": "information about the secret data to project"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
          "description": "information about the serviceAccountToken data to project"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "A vSphere volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "Storage Policy Based Management (SPBM) profile ID associated with the `storagePolicyName`.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "Storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "Path that identifies vSphere volume VMDK",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The weights of all of the matched terms are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
          "description": "Required. A pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding term, in the range 1-100.",
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "podAffinityTerm",
        "weight"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "description": "Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "The contents of the GMSA credential spec inlined by the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa). It is named by the `gmsaCredentialSpecName` field. This field is alpha-level and is only honored by servers that enable the `WindowsGMSA` feature flag.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "The name of the GMSA credential spec to use. This field is alpha-level and is only honored by servers that enable the `WindowsGMSA` feature flag.",
          "type": "string"
        },
        "runAsUserName": {
          "description": "The Windows user name to run the entrypoint of the container. Defaults to the `user` specified in image metadata if unspecified. May also be set in `podSecurityContext`. If set in both `securityContext` and `podSecurityContext`, the value specified in `securityContext` takes precedence. This field is alpha-level and it is only honored by servers that enable the `WindowsRunAsUserName` feature flag.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1alpha1.Endpoint": {
      "description": "A logical backend implementing a Service.",
      "properties": {
        "addresses": {
          "description": "Addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice `addressType` field. This allows for cases like dual-stack (IPv4 and IPv6) networking. Consumers (e.g. `kube-proxy`) must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.",
          "items": {
            "type": "string"
          },
          "maxItems": 100,
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "conditions": {
          "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointConditions",
          "description": "Information about the current status of the Endpoint."
        },
        "hostname": {
          "description": "The hostname of this endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same `hostname` should be considered fungible (e.g. multiple A values in DNS). Must be a valid DNS label (RFC 1123).",
          "type": "string"
        },
        "targetRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "A reference to a Kubernetes object that represents this endpoint."
        },
        "topology": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Arbitrary topology information associated with the endpoint. These key/value pairs must conform with the label format. Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys. '`kubernetes.io/hostname`' indicates the hostname of the node where the endpoint is located. This should match the corresponding node label. '`topology.kubernetes.io/zone`' indicates the zone where the endpoint is located. This should match the corresponding node label. '`topology.kubernetes.io/region`' indicates the region where the endpoint is located. This should match the corresponding node label.",
          "type": "object"
        }
      },
      "required": [
        "addresses"
      ],
      "type": "object"
    },
    "io.k8s.api.discovery.v1alpha1.EndpointConditions": {
      "description": "The current condition of an endpoint.",
      "properties": {
        "ready": {
          "description": "This indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A nil value indicates an unknown state. In most cases consumers should interpret this unknown state as ready.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1alpha1.EndpointPort": {
      "description": "A port used by an EndpointSlice",
      "properties": {
        "name": {
          "default": "",
          "description": "The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Kubernetes Service, this corresponds to the `Service.ports[].name`. Name must either be an empty string or pass IANA_SVC_NAME validation which means it must be no more than 15 characters long; it may contain only '`[-a-z0-9]`'; it must contain at least one letter '`[a-z]`';  it must not start or end with a hyphen, nor contain adjacent hyphens.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The IP protocol for this port.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1alpha1.EndpointSlice.CREATE": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a Service. For a given Service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of Endpoints.",
      "properties": {
        "addressType": {
          "default": "IP",
          "description": "The type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This cannot be updated.",
          "enum": [
            "IP"
          ],
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "endpoints": {
          "description": "A list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.Endpoint"
          },
          "maxItems": 1000,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSlice"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "ports": {
          "description": "The list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates 'all ports'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointPort"
          },
          "maxItems": 100,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "addressType",
        "apiVersion",
        "endpoints",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.discovery.v1alpha1.EndpointSlice.GET": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a Service. For a given Service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of Endpoints.",
      "properties": {
        "addressType": {
          "default": "IP",
          "description": "The type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This cannot be updated.",
          "enum": [
            "IP"
          ],
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "endpoints": {
          "description": "A list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.Endpoint"
          },
          "maxItems": 1000,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSlice"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "ports": {
          "description": "The list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates 'all ports'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointPort"
          },
          "maxItems": 100,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "addressType",
        "apiVersion",
        "endpoints",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.discovery.v1alpha1.EndpointSlice.UPDATE": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a Service. For a given Service there may be multiple EndpointSlice objects, selected by labels, which must be joined to produce the full set of Endpoints.",
      "properties": {
        "addressType": {
          "default": "IP",
          "description": "The type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This cannot be updated.",
          "enum": [
            "IP"
          ],
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "endpoints": {
          "description": "A list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.Endpoint"
          },
          "maxItems": 1000,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSlice"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "ports": {
          "description": "The list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When ports is empty, it indicates that there are no defined ports. When a port is defined with a nil port value, it indicates 'all ports'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointPort"
          },
          "maxItems": 100,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "addressType",
        "apiVersion",
        "endpoints",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.discovery.v1alpha1.EndpointSliceList": {
      "description": "A list of endpoint slices",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of endpoint slices",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSliceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "items"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSliceList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.Event.CREATE": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximal length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken.",
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object the reporting controller implements."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingController": {
          "description": "Name of the controller that emitted this Event.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "Type of this event.",
          "type": "string"
        }
      },
      "required": [
        "eventTime",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.Event.GET": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximal length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken.",
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object the reporting controller implements."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingController": {
          "description": "Name of the controller that emitted this Event.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "Type of this event.",
          "type": "string"
        }
      },
      "required": [
        "eventTime",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.Event.UPDATE": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the regarding object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "Deprecated field assuring backward compatibility with core.v1 Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximal length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken.",
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object the reporting controller implements."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingController": {
          "description": "Name of the controller that emitted this Event.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries",
          "description": "Data about the Event series this event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "Type of this event.",
          "type": "string"
        }
      },
      "required": [
        "eventTime",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.EventList": {
      "description": "A collection of Event objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of schema objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EventList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "EventList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.EventSeries": {
      "description": "EventSeries contain information on series of events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when last Event from the series was seen before last heartbeat."
        }
      },
      "required": [
        "count",
        "lastObservedTime"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IPBlock": {
      "description": "A particular CIDR (Ex. '`192.168.1.1/24`') that is allowed to the Pods matched by a NetworkPolicySpec's `podSelector`. The `except` entry describes CIDRs that should not be included within this rule.",
      "properties": {
        "cidr": {
          "description": "CIDR is a string representing the IP Block",
          "minLength": 1,
          "type": "string"
        },
        "except": {
          "description": "A slice of CIDRs that should not be included within an IP Block. Except values will be rejected if they are outside the `cidr` range",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "cidr"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicy.CREATE": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "Specification of the desired behavior for this NetworkPolicy."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicy.GET": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "Specification of the desired behavior for this NetworkPolicy."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicy.UPDATE": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "Specification of the desired behavior for this NetworkPolicy."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "description": "A set of traffic that is allowed out of Pods matched by a NetworkPolicySpec's `podSelector`. The traffic must match both `ports` and `to`. This type is beta-level in 1.8",
      "properties": {
        "ports": {
          "description": "List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          },
          "type": "array"
        },
        "to": {
          "description": "List of destinations for outgoing traffic of Pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "description": "A particular set of traffic that is allowed to the Pods matched by a NetworkPolicy's `podSelector`. The traffic must match both `ports` and `from`.",
      "properties": {
        "from": {
          "description": "List of sources which should be able to access the Pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the from list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          },
          "type": "array"
        },
        "ports": {
          "description": "List of ports which should be made accessible on the Pods selected for this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyList": {
      "description": "A collection of NetworkPolicy objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of schema objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicyList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicyList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "description": "A peer to allow traffic from. Only certain combinations of fields are allowed",
      "properties": {
        "ipBlock": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock",
          "description": "This defines a policy on a particular IPBlock. If this field is set then neither of the other fields can be set."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces. If `podSelector` is also set, then the NetworkPolicyPeer as a whole selects the Pods matching `podSelector` in the namespaces selected by `namespaceSelector`. Otherwise it selects all Pods in the namespaces selected by `namespaceSelector`."
        },
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all pods. If `namespaceSelector` is also set, then the NetworkPolicyPeer as a whole selects the Pods matching `podSelector` in the namespaces selected by `namespaceSelector`. Otherwise it selects the Pods matching `podSelector` in the policy's own namespace."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "description": "A port to allow traffic on",
      "properties": {
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The port on the given protocol. This can either be a numerical or named port on a Pod. If this field is not provided, this matches all port names and numbers."
        },
        "protocol": {
          "default": "TCP",
          "description": "The protocol which traffic must match.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "description": "The specification of a NetworkPolicy",
      "properties": {
        "egress": {
          "description": "List of egress rules to be applied to the selected Pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the Pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose `podSelector` matches the Pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the Pods it selects are isolated by default). This field is beta-level in 1.8",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          },
          "type": "array"
        },
        "ingress": {
          "description": "List of ingress rules to be applied to the selected Pods. Traffic is allowed to a Pod if there are no NetworkPolicies selecting the Pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the Pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose `podSelector` matches the Pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the Pods it selects are isolated by default)",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          },
          "type": "array"
        },
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selects the Pods to which this NetworkPolicy object applies. The array of `ingress` rules is applied to any Pods selected by this field. Multiple network policies can select the same set of Pods. In this case, the `ingress` rules for each are combined additively. An empty podSelector matches all Pods in this namespace."
        },
        "policyTypes": {
          "description": "List of rule types that the NetworkPolicy relates to. If this field is not specified, it will default based on the existence of `ingress` or `egress` rules; policies that contain an `egress` section are assumed to affect `egress`, and all policies (whether or not they contain an `ingress` section) are assumed to affect `ingress`. If you want to write an egress-only policy, you must explicitly set `policyTypes` to ['`Egress`']. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a `policyTypes` value that include '`Egress`' (since such a policy would not include an `egress` section and would otherwise default to just ['`Ingress`' ]). This field is beta-level in 1.8",
          "items": {
            "enum": [
              "Egress",
              "Ingress"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "podSelector"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.HTTPIngressPath": {
      "description": "A path regex with a backend. Incoming URLs matching the `path` are forwarded to the `backend`.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend",
          "description": "The referenced service endpoint to which the traffic will be forwarded to."
        },
        "path": {
          "description": "An extended POSIX regex (as defined by IEEE Std 1003.1) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional 'path' part of a URL as defined by RFC 3986. Paths must begin with a '`/`'. If unspecified, the `path` defaults to a catch all sending traffic to the backend.",
          "type": "string"
        }
      },
      "required": [
        "backend"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.HTTPIngressRuleValue": {
      "description": "A list of HTTPselectors pointing to backends.",
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressPath"
          },
          "type": "array"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.Ingress.CREATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus",
          "description": "The current state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.Ingress.GET": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus",
          "description": "The current state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.Ingress.UPDATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable urls, load balance traffic, terminate SSL, offer name based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus",
          "description": "The current state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressBackend": {
      "description": "Information about the service serving the backend for a given Ingress.",
      "properties": {
        "serviceName": {
          "description": "The name of the referenced service.",
          "type": "string"
        },
        "servicePort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The port of the referenced service."
        }
      },
      "required": [
        "serviceName",
        "servicePort"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressList": {
      "description": "A collection of Ingress.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Ingress.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressRule": {
      "description": "A rule mapping the paths under a specified host to the related backend services. Incoming requests are first evaluated for a `host` match, then routed to the backend associated with the matching `http` backend.",
      "properties": {
        "host": {
          "description": "A fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the 'host' part of the URI as defined in the RFC: 1. IPs are not allowed. Currently an entry in the `http` list can only apply to the IP in the `spec` of the parent Ingress. 2. The '`:`' delimiter is not respected because ports are not allowed. The port of an Ingress is implicitly 80 for HTTP and 443 for HTTPS. Incoming requests are matched against the `host` before the `http`. If the `host` is unspecified, the Ingress routes all traffic based on the specified `http` backend. The `host` string can contain '`*`'.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressSpec": {
      "description": "The desired state of the Ingress. At least one of `backend` or `rules` must be specified.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend",
          "description": "A default backend capable of servicing requests that don't match any rule. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default."
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressRule"
          },
          "type": "array"
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressTLS"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressStatus": {
      "description": "The current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "The current status of the load-balancer."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressTLS": {
      "description": "The transport layer security associated with an Ingress.",
      "properties": {
        "hosts": {
          "description": "A list of hosts included in the TLS certificate. The values in this list must match the name/s used in the TLS Secret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretName": {
          "description": "The name of the Secret used to terminate SSL traffic on 443. Field is left optional to allow SSL routing based on SNI hostname alone. If the SNI host in a listener conflicts with the '`Host`' header field used by an entry in the `rules` list, the SNI host is used for termination and value of the '`Host`' header is used for routing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1beta1.Overhead": {
      "description": "The resource overhead associated with running a Pod.",
      "properties": {
        "podFixed": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The fixed resource overhead associated with running a Pod.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1beta1.RuntimeClass.CREATE": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the Pod spec. The kubelet is responsible for resolving the name reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "handler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called 'runc' might specify that the `runc` OCI runtime will be used to run the containers. The `handler` must conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given `RuntimeClass`. This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the `PodOverhead` feature."
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "handler",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClass.GET": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the Pod spec. The kubelet is responsible for resolving the name reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "handler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given `RuntimeClass`. This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the `PodOverhead` feature."
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "handler",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClass.UPDATE": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are (currently) manually defined by a user or cluster provisioner, and referenced in the Pod spec. The kubelet is responsible for resolving the name reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "handler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called 'runc' might specify that the `runc` OCI runtime will be used to run the containers. The `handler` must conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given `RuntimeClass`. This field is alpha-level as of Kubernetes v1.15, and is only honored by servers that enable the `PodOverhead` feature."
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If scheduling is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "handler",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClassList": {
      "description": "A collection of RuntimeClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RuntimeClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.Scheduling": {
      "description": "The scheduling constraints for nodes supporting a RuntimeClass.",
      "properties": {
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels that must present on nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a node matched by this selector. The RuntimeClass `nodeSelector` is merged with a Pod's existing `nodeSelector`. Any conflicts will cause the Pod to be rejected in admission.",
          "type": "object"
        },
        "tolerations": {
          "description": "The tolerations are appended (excluding duplicates) to Pods running with this RuntimeClass during admission, effectively unioning the set of nodes tolerated by the Pod and the RuntimeClass. Duplications in the list is treated as invalid.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.AllowedCSIDriver": {
      "description": "An inline CSI Driver that is allowed to be used.",
      "properties": {
        "name": {
          "description": "The registered name of the CSI driver",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.AllowedFlexVolume": {
      "description": "A single FlexVolume that is allowed to be used.",
      "properties": {
        "driver": {
          "description": "The name of a FlexVolume driver",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.AllowedHostPath": {
      "description": "The host volume conditions that will be enabled by a policy for Pods to use. It requires the path prefix to be defined.",
      "properties": {
        "pathPrefix": {
          "description": "The path prefix that the host volume must match. It does not support '`*`' and it can not contain '`..`'. Trailing slashes are trimmed when validating the path prefix. Examples: '`/foo`' would allow '`/foo`', '`/foo/`' and '`/foo/bar`'. '`/foo`' would not allow '`/food`' or '`/etc/foo`'.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "description": "When set to true, will allow host volumes matching the `pathPrefix` only if all volume mounts are read-only.",
          "type": "boolean"
        }
      },
      "required": [
        "pathPrefix"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.Eviction": {
      "description": "Eviction evicts a pod from its node subject to certain policies and safety constraints. This is a subresource of Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "deleteOptions": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions",
          "description": "DeleteOptions may be provided"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Eviction"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "ObjectMeta describes the pod that is being evicted."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "Eviction",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.FSGroupStrategyOptions": {
      "description": "The type and options related to fs group to use in security context.",
      "properties": {
        "ranges": {
          "description": "The allowed ranges of fs groups. If you would like to force a single fs group then supply a single range with the same `start` and `end`. This is required when `rule` is set to '`MustRunAs`'. Each item in the list must be a supported FS type or '`*`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate what fsGroup is used in the SecurityContext.",
          "enum": [
            "MayRunAs",
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.HostPortRange": {
      "description": "HostPortRange defines a range of host ports that will be enabled by a policy for pods to use.  It requires both the start and end to be defined.",
      "properties": {
        "max": {
          "description": "The end of the range, inclusive.",
          "format": "int32",
          "type": "integer"
        },
        "min": {
          "description": "The start of the range, inclusive.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "min",
        "max"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.IDRange": {
      "description": "The allowed range of IDs.",
      "properties": {
        "max": {
          "description": "The end of the range, inclusive. Cannot be less than `min`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "min": {
          "description": "The start of the range, inclusive. Cannot be greater than `max`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "min",
        "max"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget.CREATE": {
      "description": "An object to define the max disruption that can be caused to a collection of pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudget"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET": {
      "description": "An object to define the max disruption that can be caused to a collection of pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudget"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus",
          "description": "Most recently observed status of the PodDisruptionBudget."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget.UPDATE": {
      "description": "An object to define the max disruption that can be caused to a collection of pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudget"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus",
          "description": "Most recently observed status of the PodDisruptionBudget."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList": {
      "description": "A collection of PodDisruptionBudgets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PodDisruptionBudget objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudgetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudgetList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec": {
      "description": "Specification for a PodDisruptionBudget.",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "An eviction is allowed if at most `maxUnavailable` Pods selected by `selector` are unavailable after the eviction, i.e. even in absence of the evicted Pod. The valid value is an integer or a percentage string. A percentage value can be no more than '`100%`'. One can prevent all voluntary evictions by specifying `0`. This is a mutually exclusive setting with `minAvailable`."
        },
        "minAvailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "An eviction is allowed if at least `minAvailable` Pods selected by `selector` will still be available after the eviction, i.e. even in the absence of the evicted Pod. The valid value is an integer or a percentage string. A percentage can be no more than '`100%`'. You can prevent all voluntary evictions by specifying '`100%`'."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label query over Pods whose evictions are managed by the disruption budget."
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus": {
      "description": "Information about the status of a PodDisruptionBudget. Status may trail the actual state of a system.",
      "properties": {
        "currentHealthy": {
          "description": "current number of healthy Pods",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "desiredHealthy": {
          "description": "minimum desired number of healthy Pods",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "disruptedPods": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          },
          "description": "Information about Pods whose eviction was processed by the API server but has not yet been observed by the PodDisruptionBudget controller. A Pod will be in this map from the time when the API server processed the eviction request to the time when the Pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the Pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a Pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with Pod deletions.",
          "type": "object"
        },
        "disruptionsAllowed": {
          "description": "Number of pod disruptions that are currently allowed.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "expectedPods": {
          "description": "Total number of pods counted by this disruption budget",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "observedGeneration": {
          "description": "Most recent generation observed when updating this status field. `disruptionsAllowed` and other status informatio is valid only if `observedGeneration` equals to PDB's object `generation`.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "disruptionsAllowed",
        "currentHealthy",
        "desiredHealthy",
        "expectedPods"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy.CREATE": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the security context that will be applied to a Pod and container.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata. User can specify the default AppArmor profile to use, if allowed, using the `apparmor.security.beta.kubernetes.io/defaultProfileName` annotation. The default profile specified must have a prefix `localhost/`. User can specify the allowed AppArmor profile to use, if allowed, using the `apparmor.security.beta.kubernetes.io/allowedProfileNames`. The annotation value is a comma separated list of profile names, each of which is prefixed with `localhost/`. Similarly, users can specify the default profile for seccomp, if enabled using the `seccomp.security.alpha.kubernetes.io/defaultProfileName` annotation and the allowed profiles using the `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation. The value for allowed profiles can contain '`*`' which means allowing all profiles. The value of '`default` and `unconfined` is acceptable, in addition to profiles names prefixed with `localhost/`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
          "description": "The policy enforced."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the security context that will be applied to a Pod and container.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
          "description": "The policy enforced."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy.UPDATE": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the security context that will be applied to a Pod and container.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. User can specify the default AppArmor profile to use, if allowed, using the `apparmor.security.beta.kubernetes.io/defaultProfileName` annotation. The default profile specified must have a prefix `localhost/`. User can specify the allowed AppArmor profile to use, if allowed, using the `apparmor.security.beta.kubernetes.io/allowedProfileNames`. The annotation value is a comma separated list of profile names, each of which is prefixed with `localhost/`. Similarly, users can specify the default profile for seccomp, if enabled using the `seccomp.security.alpha.kubernetes.io/defaultProfileName` annotation and the allowed profiles using the `seccomp.security.alpha.kubernetes.io/allowedProfileNames` annotation. The value for allowed profiles can contain '`*`' which means allowing all profiles. The value of '`default` and `unconfined` is acceptable, in addition to profiles names prefixed with `localhost/`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
          "description": "The policy enforced."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicyList": {
      "description": "A list of PodSecurityPolicy objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of schema objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicyList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicyList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicySpec": {
      "description": "The policy to enforce.",
      "properties": {
        "allowPrivilegeEscalation": {
          "default": true,
          "description": "Flag indicating whether a Pod can request privilege escalation. This must be set to `true` if `defaultAllowPrivilegeEscalation` is set to `true`.",
          "type": "boolean"
        },
        "allowedCSIDrivers": {
          "description": "A whitelist of inline CSI drivers that must be explicitly set to be embedded within a pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is an alpha field, and is only honored if the API server enables the CSIInlineVolume feature gate.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedCSIDriver"
          },
          "type": "array"
        },
        "allowedCapabilities": {
          "description": "A list of capabilities that can be requested to add to a container. Capabilities in this field may be added at the Pod author's discretion. You must not list a capability in both `allowedCapabilities` and `requiredDropCapabilities`. If '`*`' is in the list, then `requiredDropCapabilities` must be empty.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "allowedFlexVolumes": {
          "description": "A whitelist of allowed FlexVolumes. Empty or nil indicates that all FlexVolumes may be used. This parameter is effective only when the usage of the FlexVolumes is allowed in the `volumes` field.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedFlexVolume"
          },
          "type": "array"
        },
        "allowedHostPaths": {
          "description": "A white list of allowed host paths. Empty indicates that all host paths may be used.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedHostPath"
          },
          "type": "array"
        },
        "allowedProcMountTypes": {
          "description": "A whitelist of allowed proc mount types. Empty or nil indicates that only the '`Default`' may be used. This requires the `ProcMountType` feature flag to be enabled.",
          "items": {
            "description": "The type of proc mount to use for containers. The '`Default`' value means to use the container runtime defaults for read-only paths and masked paths.",
            "enum": [
              "Default",
              "Unmasked"
            ],
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "allowedUnsafeSysctls": {
          "description": "A list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in '`*`' in which case it is considered as a prefix of allowed sysctls. Single '`*`' means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection. This field cannot conflict with the value of `forbiddenSysctls`.",
          "items": {
            "description": "The name of sysctl must start with lower case character or digit and end with lower case character or digit. It can have dots (`.`), `_` and `-` in it.",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "([a-z0-9]([-_a-z0-9]*[a-z0-9])?.)*[a-z0-9]([-_a-z0-9]*[a-z0-9])?",
            "type": "string"
          },
          "type": "array"
        },
        "defaultAddCapabilities": {
          "description": "The default set of capabilities that will be added to a container unless the Pod spec specifically drops the capability. You may not list a capability in both `defaultAddCapabilities` and `requiredDropCapabilities`. Capabilities added here are implicitly allowed, and need not be included in the `allowedCapabilities` list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "The default setting for whether a process can gain more privileges than its parent process. If this is set to `true`, `allowPrivilegeEscalation` must be set to `true` as well.",
          "type": "boolean"
        },
        "forbiddenSysctls": {
          "description": "A list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in '`*`' in which case it is considered as a prefix of forbidden sysctls. Single '`*`' means all sysctls are forbidden. This field cannot conflict with `allowedUnsafeSysctls`.",
          "items": {
            "description": "The name of sysctl must start with lower case character or digit and end with lower case character or digit. It can have dots (`.`), `_` and `-` in it.",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "([a-z0-9]([-_a-z0-9]*[a-z0-9])?.)*[a-z0-9]([-_a-z0-9]*[a-z0-9])?",
            "type": "string"
          },
          "type": "array"
        },
        "fsGroup": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.FSGroupStrategyOptions",
          "description": "The strategy that will dictate what fs group is used by the security context."
        },
        "hostIPC": {
          "description": "Whether the use of hostIPC in the Pod spec is allowed.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Whether the use of hostNetwork in the Pod spec is allowed.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Whether the use of hostPID in the Pod spec is allowed.",
          "type": "boolean"
        },
        "hostPorts": {
          "description": "Which host port ranges are allowed to be exposed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.HostPortRange"
          },
          "type": "array"
        },
        "privileged": {
          "description": "Whether a Pod can request to be run as privileged.",
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether kubelet will force containers to run with a read-only root file system. If the container specifically requests to run with a non-read only root file system the PSP should deny the Pod. If set to `false` the container may run with a read-only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "The capabilities to drop from a container. These are required to be dropped and cannot be added. If ",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "runAsGroup": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions",
          "description": "The strategy that dictates the valid `runAsGroup` values that may be set. If this field is omitted, the Pod's `runAsGroup` can take any value. This field requires the `RunAsGroup` feature gate to be enabled."
        },
        "runAsUser": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions",
          "description": "The strategy that dictates the valid `runAsUser` values that may be set."
        },
        "runtimeClass": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions",
          "description": "The strategy that will dictate the allowable RuntimeClasses for a Pod. If this field is omitted, the Pod's `runtimeClassName` field is unrestricted. Enforcement of this field depends on the `RuntimeClass` feature gate being enabled."
        },
        "seLinux": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SELinuxStrategyOptions",
          "description": "The strategy that dictates the allowable labels that may be set."
        },
        "supplementalGroups": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions",
          "description": "The strategy that dictates what supplemental groups are used by the securityContext."
        },
        "volumes": {
          "description": "A white list of allowed volume plugins. Empty list indicates that no volumes may be used. To allow all volumes you may use '`*`'.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "fsGroup",
        "runAsUser",
        "seLinux",
        "supplementalGroups"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions": {
      "description": "The type and options related to the groups to run workloads as.",
      "properties": {
        "ranges": {
          "description": "List of the allowed GIDs that may be used. If you would like to force a single GID then supply a single range with the same `start` and `end`. This is required when `rule` is set to '`MustRunAs`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate the allowable runAsGroup values that may be set.",
          "enum": [
            "MayRunAs",
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions": {
      "description": "The type and options for running workloads as some users.",
      "properties": {
        "ranges": {
          "description": "List of allowed UIDs that may be used. If you would like to force a single UID then supply a single range with the same `start` and `end`. Required when `rule` is set to '`MustRunAs`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate the allowable runAsUser values that may be set.",
          "enum": [
            "MustRunAs",
            "MustRunAsNonRoot",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions": {
      "description": "The strategy that will dictate the allowable RuntimeClasses for a Pod.",
      "properties": {
        "allowedRuntimeClassNames": {
          "description": "A whitelist of RuntimeClass names that may be specified on a Pod. A value of '`*`' means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the `defaultRuntimeClassName` field to be unset.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultRuntimeClassName": {
          "description": "The default RuntimeClassName to set on the Pod. The default MUST be allowed by the `allowedRuntimeClassNames` list. A value of nil does not mutate the Pod.",
          "type": "string"
        }
      },
      "required": [
        "allowedRuntimeClassNames"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.SELinuxStrategyOptions": {
      "description": "The type and options related to SELinux settings.",
      "properties": {
        "rule": {
          "description": "The strategy that will dictate the allowable labels that may be set.",
          "enum": [
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "SELinux options required to run as. This is required when `rule` is set to '`MustRunAs`'."
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions": {
      "description": "The type and options related to the supplemental groups.",
      "properties": {
        "ranges": {
          "description": "The allowed ranges of supplemental groups.  If you would like to force a single supplemental group then supply a single range with the same `start` and `end`. This is required when `rule` is set to '`MustRunAs`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate what supplemental groups is used in the SecurityContext.",
          "enum": [
            "MayRunAs",
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "This describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "A list of selectors used to find ClusterRoles and create the `rules`. If any of the selectors match, the ClusterRole's permissions will be added.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.ClusterRole.CREATE": {
      "description": "A cluster level logical grouping of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRole.GET": {
      "description": "A cluster level logical grouping of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "rules",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRole.UPDATE": {
      "description": "A cluster level logical grouping of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding.CREATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the objects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "roleRef",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding.GET": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a ClusterRole."
        },
        "subjects": {
          "description": "References to the objects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "roleRef",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding.UPDATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the objects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "roleRef",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
      "description": "A collection of ClusterRoleBindings",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRoleBindings",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleList": {
      "description": "A collection of ClusterRoles",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRoles",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "Information that describes a policy rule. Rules can either apply to API resources (such as '`pods`' or '`secrets`') or non-resource URL paths (such as ' /api  '),  but not both.",
      "properties": {
        "apiGroups": {
          "description": "The name of the API group that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. This field is required when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards ('`*`') are allowed, but only as the full, final step in the path. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. If this field is not empty, other fields including `apiGroups`, `resources`, `resourceNames` must be empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "A white list of names that the rule applies to. An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. '`*`' represents all resources. This field cannot be empty when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of verbs that apply to ALL the resource kinds and attribute restrictions contained in this rule. '`*`' represents all verbs.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.Role.CREATE": {
      "description": "Role is a namespaced, logical grouping of policy rules.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "The policy rules defined for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.Role.GET": {
      "description": "Role is a namespaced, logical grouping of policy rules.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "The policy rules defined for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "rules",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.Role.UPDATE": {
      "description": "Role is a namespaced, logical grouping of policy rules.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "rules": {
          "description": "The policy rules defined for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding.CREATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace, and binds it to some subjects in the namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata."
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "Reference a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the objects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "roleRef",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding.GET": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace, and binds it to some subjects in the namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "Reference a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the objects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "roleRef",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding.UPDATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace, and binds it to some subjects in the namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "Reference a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This cannot be updated."
        },
        "subjects": {
          "description": "References to the objects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "roleRef",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBindingList": {
      "description": "A collection of RoleBindings",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RoleBindings",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleList": {
      "description": "A collection of Roles",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Roles",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard object's metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleRef": {
      "description": "Information for referencing a role or a cluste role",
      "properties": {
        "apiGroup": {
          "description": "The group for the referenced resource. Currently this must be '`rbac.authorization.k8s.io`'.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name of the referenced resource. This value must be a valid path segment name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.Subject": {
      "description": "A reference to the object or user identity. This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiGroup": {
          "description": "The API group of the referenced subject. When `kind` is '`ServiceAccount`', this field must be empty string ('') . When `kind` is '`User`' or '`Group`', this field must be '`rbac.authorization.k8s.io`'.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Group",
            "ServiceAccount",
            "User"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced object. If `kind` is '`ServiceAccount`', the name must be a valid ServiceAccount name.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object. If the object kind is '`User`' or '`Group`' which are not namespaced, this value must be empty.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.scheduling.v1.PriorityClass.CREATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain. Name prefixed with '`system-`' are reserved for predefined system priority classes, e.g. '`system-cluster-critical`' (2000000000), '`system-node-critical`' (2000001000)."
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "value",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClass.GET": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "value",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClass.UPDATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to true, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain. Name prefixed with '`system-`' are reserved for predefined system priority classes, e.g. '`system-cluster-critical`' (2000000000), '`system-node-critical`' (2000001000)."
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "value",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClassList": {
      "description": "A collection of priority classes.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of PriorityClasses",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPreset.CREATE": {
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPreset"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetSpec",
          "description": "Specification for the PodPreset resource."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPreset.GET": {
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPreset"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetSpec",
          "description": "Specification for the PodPreset resource."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPreset.UPDATE": {
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPreset"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetSpec",
          "description": "Specification for the PodPreset resource."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPresetList": {
      "description": "A collection of PodPreset objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PodPreset objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPresetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPresetList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPresetSpec": {
      "description": "The description of a PodPreset object. At least one of `volumes`, `env`, `envFrom`, `volumeMounts` must be specified.",
      "properties": {
        "env": {
          "description": "The collection of EnvVar to inject into containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array"
        },
        "envFrom": {
          "description": "The collection of EnvFromSource to inject into containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of resources, in this case pods."
        },
        "volumeMounts": {
          "description": "The collection of VolumeMount to inject into containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array"
        },
        "volumes": {
          "description": "The collection of Volume to inject into the Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        }
      },
      "required": [
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.StorageClass.CREATE": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. ['`ro`', '`soft`']. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this storage class. Keys cannot be empty. The number of parameters cannot exceed 512 and the total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaim policy. It is up to the volume plugin to reject provisioning for storage classes with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitingForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClass.GET": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. ['`ro`', '`soft`']. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this storage class.",
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaim policy.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "enum": [
            "Immediate",
            "WaitingForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "provisioner",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClass.UPDATE": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. ['`ro`', '`soft`']. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this storage class. Keys cannot be empty. The number of parameters cannot exceed 512 and the total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with this reclaim policy. It is up to the volume plugin to reject provisioning for storage classes with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitingForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClassList": {
      "description": "A collection of storage classes.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of StorageClasses",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment.CREATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified node.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus",
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment.GET": {
      "description": "The intent to attach or detach the specified volume to/from the specified node.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus",
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment.UPDATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified node.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus",
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachmentList": {
      "description": "A collection of VolumeAttachment objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of VolumeAttachments",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachmentList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSource": {
      "description": "A volume that should be attached. Only PersistenVolumes can be attached via external attacher. Exactly one member can be set.",
      "properties": {
        "inlineVolumeSpec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "Information for attaching a persistent volume defined by a Pod's inline VolumeSource. This field is populated only for the `CSIMigration` feature. It contains translated fields from a Pod's inline VolumeSource to a PersistentVolumeSpec. This field is alpha-level and is only honored by servers that enabled the `CSIMigration` feature."
        },
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach. The name must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "persistentVolumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSpec": {
      "description": "The specification of a VolumeAttachment request.",
      "properties": {
        "attacher": {
          "description": "The name of the volume driver that must handle this request. This is the name returned by `GetPluginName()`. The value must be a valid DNS subdomain.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to. The value must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSource",
          "description": "The volume that should be attached."
        }
      },
      "required": [
        "attacher",
        "source",
        "nodeName"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentStatus": {
      "description": "The status of a VolumeAttachment request.",
      "properties": {
        "attachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError",
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Upon successful attach operation, this field is populated with information returned by the `attach` operation that must be passed into subsequent `WaitForAttach` or `Mount` calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "object"
        },
        "detachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError",
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "attached"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeError": {
      "description": "An error encountered during a volume operation.",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during `Attach` or `Detach` operation. This string maybe logged, so it should not contain sensitive information.",
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time the error was encountered."
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.CSIDriver.CREATE": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` MUST be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), dots (`.`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriver.GET": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriver.UPDATE": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the cluster-driver-registrar sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` MUST be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`[a-z0-9A-Z]`) with dashes (`-`), dots (`.`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriverList": {
      "description": "A collection of CSIDriver objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of CSIDriver objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriverList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriverList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriverSpec": {
      "description": "The specification of a CSIDriver.",
      "properties": {
        "attachRequired": {
          "description": "Flag indicating whether this driver requires an `attach` operation. A driver may implement the CSI `ControllerPublishVolume()` method and the Kubernetes attach/detach controller can call the `attach` volume interface which checks the `volumeattachment` status and waits until the volume is attached before mounting it. The CSI external-attacher coordinates with CSI volume driver and updates the `volumeattachment` status when the `attach` operation is complete. If the `CSIDriverRegistry` feature-gate is enabled and the value is specified to false, the `attach` operation will be skipped. Otherwise the `attach` operation will be called.",
          "type": "boolean"
        },
        "podInfoOnMount": {
          "default": false,
          "description": "If set to true, it indicates this CSI volume driver requires additional Pod information (like `podName`, `podUID`, etc.) during mount operations. If set to false, Pod information will not be passed on mount. The CSI driver specifies `podInfoOnMount` as part of driver deployment. If true, kubelet will pass Pod information as `VolumeContext` in the CSI `NodePublishVolume()` calls. The CSI driver is responsible for parsing and validating the information passed in. The following `VolumeConext` will be passed if this is set to true. This list might grow, but the prefix will be used. `\"csi.storage.k8s.io/pod.name\": pod.name, \"csi.storage.k8s.io/pod.namespace\": pod.namespace, \"csi.storage.k8s.io/pod.uid\": string(pod.UID), \"csi.storage.k8s.io/ephemeral\": \"true\" iff the volume is an ephemeral inline volume defined by a `CSIVolumeSource`, otherwise \"false\". \"csi.storage.k8s.io/ephemeral\" is a new feature in v1.16. It is only required for drivers which support both the 'Persistent' and 'Ephemeral' volume lifecycle mode. Other drivers can leave Pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, dirvers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.",
          "type": "boolean"
        },
        "volumeLifecycleModes": {
          "description": "This defines what kind of volumes this CSI volume driver supports. The default if the list is empty is 'Persistent', which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is 'Ephemeral'. In this mode, volumes are defined inline inside the Pod spec with `csiVolumeSource` and their lifecycle is tied to the lifecycle of that Pod. A driver has to be aware of this because it is only going to get a `NodePublishVolume` call for such a volume. For more information about implementing this mode, see https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html A driver can support one or more of these modes and more modes may be added in the future.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "attachRequired"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.CSINode.CREATE": {
      "description": "CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be the Kubernetes Node name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINode.GET": {
      "description": "CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINode.UPDATE": {
      "description": "CSINode holds information about all CSI drivers installed on a node. CSI drivers do not need to create the CSINode object directly. As long as they use the node-driver-registrar sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a node. If the object is missing, it means either there are no CSI Drivers available on the node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be the Kubernetes Node name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINodeDriver": {
      "description": "Information about one CSI driver installed on a Node",
      "properties": {
        "allocatable": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeNodeResources",
          "description": "The volume resources of a node that are available for scheduling."
        },
        "name": {
          "description": "The name of the CSI driver. This MUST be the same name returned by the CSI `GetPluginName()` call for that driver. The value must be a valid DNS subdomain.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeID": {
          "description": "ID of the node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for nodes. For example, Kubernetes may refer to a given node as 'node1', but the storage system may refer to the same node as 'nodeA'. When Kubernetes issues a command to the storage system to attach a volume to a specific node, it can use this field to refer to the node name using the ID that the storage system will understand, e.g. 'nodeA' instead of 'node1'.",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "topologyKeys": {
          "description": "The list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. '`company.com/zone`', '`company.com/region`'). When a driver is initialized on a node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own Node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the Node object and pass back to the driver. It is possible for different Nodes to use different topology keys. This can be empty if driver does not support topology. ",
          "items": {
            "description": "The key must be a qualified name",
            "minLength": 1,
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "name",
        "nodeID"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.CSINodeList": {
      "description": "A collection of CSINode objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CSINode objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINodeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINodeList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINodeSpec": {
      "description": "Information about CSI drivers installed on a Node",
      "properties": {
        "drivers": {
          "description": "A list of information for all CSI Drivers on a node. If all drivers in the list are uninstalled, this can become empty. Items in list must have unique names.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeDriver"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "drivers"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.VolumeNodeResources": {
      "description": "A set of resource limits for the scheduling of volumes.",
      "properties": {
        "count": {
          "description": "Maximum number of unique volumes managed by the CSI driver that can be used on a node. A volume that is both attached and mounted on a node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple Pods on the same node. If this field is nil, then the supported number of volumes on this node is unbounded.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition": {
      "description": "A column for server side printing.",
      "properties": {
        "description": {
          "description": "A human readable description of this column.",
          "type": "string"
        },
        "format": {
          "description": "An OpenAPI type definition for this column. The '`name`' format is applied to the primary identifier column to assist in clients identifying column for the resource name.",
          "enum": [
            "int32",
            "int64",
            "float",
            "double",
            "byte",
            "date",
            "date-time",
            "password"
          ],
          "type": "string"
        },
        "jsonPath": {
          "description": "A simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "A human readable name for the column.",
          "minLength": 1,
          "type": "string"
        },
        "priority": {
          "description": "An integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "An OpenAPI type definition for this column.",
          "enum": [
            "integer",
            "number",
            "string",
            "boolean",
            "date"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "jsonPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion": {
      "description": "This describes how to convert different versions of a CustomResource.",
      "properties": {
        "strategy": {
          "description": "The conversion strategy specifies how custom resources are converted between versions. '`None`' means the converter only change the `apiVersion` and would not touch any other field in the custom resource. '`Webhook`' means that the API Server will call an external webhook to do the conversion. Additional information is specified in `webhook`. This requires `preserveUnknownFields` to be false.",
          "enum": [
            "None",
            "Webhook"
          ],
          "minLength": 1,
          "type": "string"
        },
        "webhook": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion",
          "description": "This describes how to call the conversion webhook. Required when `strategy` is set to '`Webhook`'."
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.CREATE": {
      "description": "A resource that should be exposed on the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata.  Its name MUST be in the format `<.spec.name>.<.spec.group>`"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET": {
      "description": "A resource that should be exposed on the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata.  Its name MUST be in the format `<.spec.name>.<.spec.group>`"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE": {
      "description": "A resource that should be exposed on the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata.  Its name MUST be in the format `<.spec.name>.<.spec.group>`"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition": {
      "description": "Details for the current condition of a resource.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.",
          "enum": [
            "Established",
            "NamesAccepted",
            "Terminating"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList": {
      "description": "A list of CustomResourceDefinition objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CustomResourceDefinition objects",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinitionList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinitionList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames": {
      "description": "The names to serve this CustomResourceDefinition",
      "properties": {
        "categories": {
          "description": "A list of grouped resources this custom resource belongs to (e.g. '`all`'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`. Each entry must be a valid DNS label.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "listKind": {
          "description": "The serialized `kind` of the list for this resource. Defaults to '`kind`List'.",
          "type": "string"
        },
        "plural": {
          "description": "The plural name of the resource to serve. The custom resources are served under '`/apis/<group>/<version>/.../<plural>`'. It must match the name of the CustomResourceDefinition (in the form '`<names.plural>.<group>`'). Must be all lowercase. The value must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "shortNames": {
          "description": "Short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase and valid DNS labels.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singular": {
          "description": "The singular name of the resource. It must be all lowercase and valid DNS label. Defaults to lowercased `kind`.",
          "type": "string"
        }
      },
      "required": [
        "plural",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec": {
      "description": "This describes how a user wants their resource to appear",
      "properties": {
        "conversion": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion",
          "description": "The conversion settings for the CRD."
        },
        "group": {
          "description": "The API group of the defined custom resource. The custom resources are served under '`/apis/<group>/...`'. Must match the name of the CustomResourceDefinition (in the form '`<names.plural>.<group>`'). The value must be a valid DNS subdomain and it must contain at least one dot.",
          "minLength": 1,
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
          "description": "The resource and kind names for the custom resource."
        },
        "preserveUnknownFields": {
          "description": "This flag indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. `apiVersion`, `kind`, `metadata` and known fields inside `metadata` are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`.",
          "type": "boolean"
        },
        "scope": {
          "default": "Namespaced",
          "description": "This indicates whether the defined custom resource is cluster- or namespace-scoped.",
          "enum": [
            "Cluster",
            "Namespaced"
          ],
          "type": "string"
        },
        "versions": {
          "description": "The list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as '`beta`' or '`alpha`'), and then by comparing major version, then minor version. An example sorted list of versions: '`v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "group",
        "names",
        "scope",
        "versions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus": {
      "description": "The state of the CustomResourceDefinition",
      "properties": {
        "acceptedNames": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
          "description": "The names that are actually being used to serve discovery. They may be different than the `names` in spec."
        },
        "conditions": {
          "description": "This indicates state for particular aspects of a CustomResourceDefinition",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
          },
          "type": "array"
        },
        "storedVersions": {
          "description": "A list of all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in the storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "acceptedNames",
        "storedVersions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion": {
      "description": "A version for CustomResourceDefinition.",
      "properties": {
        "additionalPrinterColumns": {
          "description": "Additional columns returned in table output. If no columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
          },
          "type": "array"
        },
        "name": {
          "description": "The version name, e.g. '`v1`', '`v2beta1`', etc. The custom resources are served under this version at '`/apis/<group>/<version>/...`' if `served` is true. The value must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation",
          "description": "The schema used for validation, pruning, and defaulting of this version of the custom resource."
        },
        "served": {
          "description": "A flag enabling/disabling this version to be served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "This flag indicates that the `version` should be used when persisting custom resources to storage. There must be exactly one version with `storage` set to true.",
          "type": "boolean"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources",
          "description": "What subresources this version of the defined custom resource have."
        }
      },
      "required": [
        "name",
        "served",
        "storage"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale": {
      "description": "This defines how to serve the `scale` subresource for CustomResources.",
      "properties": {
        "labelSelectorPath": {
          "description": "The JSON path inside a custom resource that corresponds to `scale.status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to an empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "The JSON path inside a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "minLength": 1,
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "The JSON path inside a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus": {
      "description": "This defines how to serve the `status` subresource for CustomResources. Status is represented by the `.status` JSON path inside a CustomResource. When set, the server exposes a `/status` subresource for the custom resource. PUT requests to the `/status` subresource take a custom resource object, and ignore changes to anything except the status stanza. PUT/POST/PATCH requests to the custom resource ignore changes to the `status` stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources": {
      "description": "The `status` and `scale` subresources for CustomResources.",
      "properties": {
        "scale": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale",
          "description": "This indicates that the custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus",
          "description": "This indicates the custom resource should serve a `/status` subresource. When enabled, requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object, requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation": {
      "description": "A list of validation methods for CustomResources.",
      "properties": {
        "openAPIV3Schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps",
          "description": "The OpenAPI v3 schema to use for validation and pruning."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation": {
      "description": "Reference to an external resource for extended documentation.",
      "properties": {
        "description": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "This represents any valid JSON value. These types are supported: `bool`, `int64`, `float64`, `string`, `[]interface{}`, `map[string]interface{}` and `nil`."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "description": "A JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "properties": {
        "$ref": {
          "type": "string"
        },
        "$schema": {
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
        },
        "allOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array"
        },
        "anyOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array"
        },
        "default": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
          "description": "A default value for undefined object fields. Defaulting is a beta feature under the `CustomResourceDefaulting` feature gate. Defaulting requires `spec.preserveUnknownFields` to be false."
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          },
          "type": "array"
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        },
        "format": {
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "format": "int64",
          "type": "integer"
        },
        "maxLength": {
          "format": "int64",
          "type": "integer"
        },
        "maxProperties": {
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "format": "double",
          "type": "number"
        },
        "minItems": {
          "format": "int64",
          "type": "integer"
        },
        "minLength": {
          "format": "int64",
          "type": "integer"
        },
        "minProperties": {
          "format": "int64",
          "type": "integer"
        },
        "minimum": {
          "format": "double",
          "type": "number"
        },
        "multipleOf": {
          "format": "double",
          "type": "number"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "uniqueItems": {
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "This flag indicates that the value is an embedded Kubernetes `runtime.Object`, with `TypeMeta` and `ObjectMeta`. The type must be '`object`'. It is allowed to further restrict the embedded object. `kind`, `apiVersion` and `metadata` are validated automatically. `x-kubernetes-preserve-unknown-fields` is allowed to be true, but does not have to be if the object is fully specified (up to `kind`, `apiVersion`, `metadata`).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "This flag indicates that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of '`anyOf`' is permitted if following one of the following patterns: 1) `'anyOf': [{'type': 'integer'}, {'type': 'string'}]` 2) `'allOf': [{'anyOf': [{'type': 'integer'}, {'type': 'string'} ...]}]`",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "This annotates an array with the `x-kubernetes-list-type` '`map`' by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the '`x-kubernetes-list-type`' extension set to '`map`'. Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "x-kubernetes-list-type": {
          "description": "This annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 1) `atomic`: the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...). 2) `set`: Sets are lists that must not have multiple items with the same value. Each value must be a scalar (or another atomic type). 3) `map`: These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The `map` tag must only be used on a list with elements of type object. Defaults to '`atomic`' for arrays.",
          "enum": [
            "atomic",
            "set",
            "map"
          ],
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "This flag stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested `properties` or `additionalProperties` are specified in the schema. This can either be true or undefined. False is forbidden.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray": {
      "description": "A value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool": {
      "description": "A JSONSchemaProps or a boolean value. Defaults to true for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray": {
      "description": "A JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference": {
      "description": "A reference to a Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An URL path at which the webhook will be contacted.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "An optional service port at which the webhook will be contacted.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig": {
      "description": "Information to make a TLS connection with a webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference",
          "description": "A reference to the Service for this webhook."
        },
        "url": {
          "description": "The location of the webhook, in standard URL form ('`scheme://host:port/path`'). The `host` should not refer to a Service running in the cluster; use the `service` field instead. The `host` might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using '`localhost`' or '`127.0.0.1`' as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be '`https`'. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. '`user:password@`' is not allowed. Fragments ('`#...`') and query parameters ('`?...`') are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion": {
      "description": "This describes how to call a conversion webhook",
      "properties": {
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig",
          "description": "The instructions for calling the webhook if strategy is '`Webhook`'."
        },
        "conversionReviewVersions": {
          "description": "An ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "conversionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition": {
      "description": "A column for server side printing.",
      "properties": {
        "JSONPath": {
          "description": "A simple JSON path, i.e. with array notation.",
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "A human readable description of the column.",
          "type": "string"
        },
        "format": {
          "description": "An optional OpenAPI type definition for this column. The '`name`' format is applied to the primary identifier column to assist in clients identifying column is the resource name.",
          "enum": [
            "int32",
            "int64",
            "float",
            "double",
            "byte",
            "date",
            "date-time",
            "password"
          ],
          "type": "string"
        },
        "name": {
          "description": "A human readable name for the column.",
          "minLength": 1,
          "type": "string"
        },
        "priority": {
          "description": "An integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "An OpenAPI type definition for this column.",
          "enum": [
            "integer",
            "number",
            "string",
            "boolean",
            "date"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "type",
        "JSONPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion": {
      "description": "This describes how to convert different versions of a CustomResource.",
      "properties": {
        "conversionReviewVersions": {
          "default": [
            "v1beta1"
          ],
          "description": "An ordered list of preferred 'ConversionReview' versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, conversion will fail for this object. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "strategy": {
          "description": "The conversion strategy. '`None`' means the converter only change the `apiVersion` and would not touch any other fields in the CustomResource; '`Webhook`' means that the API server will call an external webhook to do the conversion. Additional information is specified in `webhookClientConfig`. This requires the `preserveUnknownFields` to be false.",
          "enum": [
            "None",
            "Webhook"
          ],
          "minLength": 1,
          "type": "string"
        },
        "webhookClientConfig": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig",
          "description": "The information on calling a webhook if `strategy` is '`Webhook`'. Required when `strategy` is set to `Webhook`."
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.CREATE": {
      "description": "A resource that should be exposed on the API server. Its name MUST be in the format `<.spec.name>.<.spec.group>`. Deprecated in v1.16, planned for removal in v1.19. Use `apiextensions.k8s.io/v1` `CustomResourceDefinition` instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object's metadata.  Its name MUST be in the format `<.spec.names.plural>.<.spec.group>`"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET": {
      "description": "A resource that should be exposed on the API server. Deprecated in v1.16, planned for removal in v1.19. Use `apiextensions.k8s.io/v1` `CustomResourceDefinition` instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.UPDATE": {
      "description": "A resource that should be exposed on the API server. Its name MUST be in the format `<.spec.name>.<.spec.group>`. Deprecated in v1.16, planned for removal in v1.19. Use `apiextensions.k8s.io/v1` `CustomResourceDefinition` instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object's metadata."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "spec",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition": {
      "description": "Details for the current condition of a resource.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.",
          "enum": [
            "Established",
            "NamesAccepted",
            "Terminating"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList": {
      "description": "A list of CustomResourceDefinition objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CustomResourceDefinition objects",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinitionList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinitionList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames": {
      "description": "The names used for this CustomResourceDefinition",
      "properties": {
        "categories": {
          "description": "A list of grouped resources this custom resource belongs to (e.g. 'all'). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`. Each entry must be a valid DNS label.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "listKind": {
          "description": "The serialized `kind` of the list for this resource. Defaults to '`kind`List'.",
          "type": "string"
        },
        "plural": {
          "description": "The plural name of the resource to serve. The custom resources are served under `/apis/<group>/<version>/.../<plural>`. Must match the name of the CustomResourceDefinition (in the form `<names.plural>.<group>`). It must be all lowercase. The value must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "shortNames": {
          "description": "Short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. It must be all lowercase and valid DNS labels.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singular": {
          "description": "The singular name of the resource. It must be all lowercase and valid DNS label. Defaults to lowercased `kind`.",
          "type": "string"
        }
      },
      "required": [
        "plural",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec": {
      "description": "This describes how a user wants their resource to appear",
      "properties": {
        "additionalPrinterColumns": {
          "description": "Additional columns returned in table output. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
          },
          "type": "array"
        },
        "conversion": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion",
          "description": "The conversion settings for the CRD."
        },
        "group": {
          "description": "The API group of the defined custom resource. The custom resources are served under `/apis/<group>/...`. Must match the name of the CustomResourceDefinition (in the form '`<names.plural>.<group>`').",
          "minLength": 1,
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
          "description": "The resource and kind names for the custom resource."
        },
        "preserveUnknownFields": {
          "default": true,
          "description": "This indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. `apiVersion`, `kind`, `metadata` and known fields inside `metadata` are always preserved. If false, schemas must be defined for all versions. Defaults to true in v1beta for backwards compatibility. Deprecated: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `x-kubernetes-preserve-unknown-fields: true` extension.",
          "type": "boolean"
        },
        "scope": {
          "default": "Namespaced",
          "description": "Scope indicates whether this custom resource is cluster or namespace scoped.",
          "enum": [
            "Cluster",
            "Namespaced"
          ],
          "type": "string"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
          "description": "What subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive."
        },
        "validation": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
          "description": "The schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive."
        },
        "version": {
          "description": "The API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. Deprecated: use `versions` instead.",
          "type": "string"
        },
        "versions": {
          "description": "The list of all supported versions for this resource. If `version` field is provided, this field is optional. All versions must use the same validation schema for now. i.e., top level `validation` field is applied to all of these `versions`. The version `name` will be used to compute the order. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as '`beta`' or '`alpha`'), and then by comparing major version, then minor version. An example sorted list of versions: '`v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
          },
          "type": "array"
        }
      },
      "required": [
        "group",
        "names",
        "scope"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus": {
      "description": "The state of the CustomResourceDefinition",
      "properties": {
        "acceptedNames": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
          "description": "The names that are actually being used to serve discovery They may be different than the `names` in spec."
        },
        "conditions": {
          "description": "This indicates state for particular aspects of a CustomResourceDefinition",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
          },
          "type": "array"
        },
        "storedVersions": {
          "description": "A list of all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in the storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "acceptedNames",
        "storedVersions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion": {
      "description": "A version for CustomResourceDefinition.",
      "properties": {
        "additionalPrinterColumns": {
          "description": "Additional columns returned in table output. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
          },
          "type": "array"
        },
        "name": {
          "description": "The version name, e.g. '`v1`', '`v2beta1`', etc. The custom resources are served under this version at `/apis/<group>/<version>/...` if `served` is true. The value must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
          "description": "The schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead)."
        },
        "served": {
          "description": "A flag enabling/disabling this version to be served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "This flag indicates that the `version` is used as storage version. There must be exactly one version with `storage` set to true.",
          "type": "boolean"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
          "description": "The subresources for this version of the defined custom resource. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead)."
        }
      },
      "required": [
        "name",
        "served",
        "storage"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale": {
      "description": "This defines how to serve the `scale` subresource for CustomResources.",
      "properties": {
        "labelSelectorPath": {
          "description": "The JSON path inside a CustomResource that corresponds to `scale.status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HPA. The field pointed by the JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. If there is no value under the given path in the CustomResource, the `status` label selector value in the `/scale` subresource will default to the empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "The JSON path inside a CustomResource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the CustomResource, the `/scale` subresource will return an error on GET.",
          "minLength": 1,
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "The JSON path inside of a CustomResource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the CustomResource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus": {
      "description": "This defines how to serve the `status` subresource for CustomResources. Status is represented by the `.status` JSON path inside a CustomResource. When set, the server exposes a `/status` subresource for the custom resource. PUT requests to the `/status` subresource take a custom resource object, and ignore changes to anything except the status stanza. PUT/POST/PATCH requests to the custom resource ignore changes to the `status` stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources": {
      "description": "The `status` and `scale` subresources for CustomResources.",
      "properties": {
        "scale": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale",
          "description": "The custom resource should serve a `/scale` subresource that returns an `autoscaling/v1` Scale object."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus",
          "description": "This indicates the custom resource should serve a `/status` subresource. When enabled, requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object. Requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation": {
      "description": "A list of validation methods for CustomResources.",
      "properties": {
        "openAPIV3Schema": {
          "description": "The OpenAPI v3 schema to use for validation and pruning.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference": {
      "description": "A reference to a Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An optional URL path at which the webhook will be contacted.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the service port at which the webhook will be contacted.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig": {
      "description": "Information to make a TLS connection with a webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "oneOf": [
          {
            "service": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference",
              "description": "A reference to the Service for this webhook."
            }
          },
          {
            "url": {
              "description": "The location of the webhook, in standard URL form ('`scheme://host:port/path`'). The `host` should not refer to a Service running in the cluster; use the `service` field instead. The `host` might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using '`localhost`' or '`127.0.0.1`' as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be '`https`'. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. '`user:password@`' is not allowed. Fragments ('`#...`') and query parameters ('`?...`') are not allowed, either.",
              "type": "string"
            }
          }
        ]
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "description": "A fixed-point representation of a number. No quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized. Before serializing, Quantity will be put in 'canonical form'. This means that Exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that no precision is lost, no fractional digits will be emitted, and the exponent (or suffix) is as large as possible. The sign will be omitted unless the number is negative. Non-canonical values will still parse as long as they are well formed.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "The information about an API group.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIGroup"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the group.",
          "minLength": 1,
          "type": "string"
        },
        "preferredVersion": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery",
          "description": "The version preferred by the API server, which probably is the storage version."
        },
        "serverAddressByClientCIDRs": {
          "description": "A map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at `X-Forwarded-For` header or `X-Real-Ip` header or `request.RemoteAddr` (in that order) to get the client IP.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "minItems": 1,
          "type": "array"
        },
        "versions": {
          "description": "The versions supported in this API group.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "name",
        "versions",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "APIGroupList is a list of APIGroup, to allow clients to discover the API at /apis.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "groups": {
          "description": "groups is a list of APIGroup.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          },
          "minItems": 1,
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIGroupList"
          ],
          "type": "string"
        }
      },
      "required": [
        "groups",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "The name of a resource and whether it is namespaced.",
      "properties": {
        "categories": {
          "description": "A list of the grouped resources this resource belongs to",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "description": "The preferred group of the resource. Empty implies the group of the containing resource list. For subresources, this may have a different value.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The plural name of the resource.",
          "minLength": 1,
          "type": "string"
        },
        "namespaced": {
          "description": "This indicates if the resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "A list of suggested short names of the resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singularName": {
          "description": "The singular name of the resource. This allows clients to handle plural and singular opaquely. The singularName is more correct for reporting status on a single item.",
          "minLength": 1,
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the `StorageVersionHash` feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "A list of supported kube verbs",
          "items": {
            "enum": [
              "get",
              "list",
              "watch",
              "create",
              "update",
              "patch",
              "delete",
              "deletecollection",
              "proxy"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "version": {
          "description": "The preferred version of the resource. Empty implies the version of the containing resource list. For subresources, this may have a different value.",
          "type": "string"
        }
      },
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "A list of APIResource, it is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "groupVersion": {
          "description": "The group and version this APIResourceList is for.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIResourceList"
          ],
          "type": "string"
        },
        "resources": {
          "description": "The name of the resources and if they are namespaced.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "groupVersion",
        "resources",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions": {
      "description": "A list of the available API versions",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIVersions"
          ],
          "type": "string"
        },
        "serverAddressByClientCIDRs": {
          "description": "A map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at `X-Forwarded-For` header or `X-Real-Ip` header or `request.RemoteAddr` (in that order) to get the client IP.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "minItems": 1,
          "type": "array"
        },
        "versions": {
          "description": "The API versions that are available.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "versions",
        "serverAddressByClientCIDRs",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIVersions",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
          "items": {
            "enum": [
              "All"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
          "format": "int64",
          "type": "integer"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "type": "string"
        },
        "preconditions": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions",
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a 409 Conflict status will be returned."
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
          "enum": [
            "Background",
            "Foreground",
            "Orphan"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta2"
        },
        {
          "group": "auditregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta2"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v2alpha1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "This stores a set of fields in a data structure like a Trie, in JSON format. Each key is either a '`.`' representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats: '`f:<name>`', where `<name>` is the name of a field in a struct, or key in a map '`v:<value>`', where `<value>` is the exact JSON formatted value of a list item '`i:<index>`', where `<index>` is position of an item in a list '`k:<keys>`', where `<keys>` is a map of a list item's key fields to their unique values. If a key maps to an empty fields value, the field that key represents is part of the set. The exact format is defined in 'sigs.k8s.io/structured-merge-diff'",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "The 'group/version' and 'version' string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "description": "The API group and version in the form 'group/version'",
          "minLength": 1,
          "type": "string"
        },
        "version": {
          "description": "The version in the form of 'version'.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of matchLabels and matchExpressions are ANDed. An empty label selector matches all objects. A null label selector matches no objects.",
      "properties": {
        "matchExpressions": {
          "description": "matchExpressions is a list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "matchLabels is a map of key,value pairs. A single key,value in the matchLabels map is equivalent to an element of matchExpressions, whose key field is \"key\", the operator is \"In\", and the values array contains only \"value\". The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains values, a key, and an operator that relates the key and values.",
      "properties": {
        "key": {
          "description": "key is the label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "operator represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists and DoesNotExist.",
          "enum": [
            "DoesNotExist",
            "Exists",
            "In",
            "NotIn"
          ],
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "values is an array of string values. If the operator is In or NotIn, the values array must be non-empty. If the operator is Exists or DoesNotExist, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of {ObjectMeta, ListMeta}.",
      "properties": {
        "continue": {
          "description": "continue may be set if the user set a limit on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The resourceVersion field returned when using this continue value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "The number of subsequent items in the list which are not included in this response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Clients should not rely on the `remainingItemCount` to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only. More info: https://git.k8s.io/community/contributors/devel/api-conventions.md#concurrency-control-and-consistency",
          "type": "string"
        },
        "selfLink": {
          "description": "A URL representing this object. Populated by the system. Read-only. DEPRECATED. Kubernetes will stop populating this field in 1.20 and the field is planned to be removed in 1.21.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "A workflow-id, a field set and the group version of the resource that the field set applies to.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "fieldsType": {
          "description": "The discriminator for the different fields format and version. There is currently only one possible value: '`FieldsV1`'",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
          "description": "The first JSON version format as described in the '`FieldsV1`' type."
        },
        "manager": {
          "description": "An identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "The type of operation which lead to the creation of this object.",
          "enum": [
            "Apply",
            "Update"
          ],
          "minLength": 1,
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The timestamp when these fields were set. It should always be empty if `operation` is '`Apply`'."
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "description": "MicroTime is version of Time with microsecond level precision.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE": {
      "description": "Metadata that all persisted resources must have, which includes all objects users create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character.  The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create request.",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. 'kubernetes', 'orphan', 'foregroundDeletion'), or it contains at least one slash ('/').",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the `name` field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return '201 Created' or '500' with Reason 'ServerTimeout' indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the 'Retry-After' header). Applied only if `name` is not specified.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.  Both the key and the value must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have '/' in it thus referred to as 'qualified name'. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "managedFields": {
          "description": "This maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated.",
          "type": "string"
        },
        "namespace": {
          "default": "default",
          "description": "The space within each name must be unique. An empty `namespace` is equivalent to the '`default`' namespace. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET": {
      "description": "Metadata that all persisted resources must have, which includes all objects users create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now and apiserver is going to ignore it if set in create or update request.",
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "creationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. It is populated by the system, read-only. Null for lists."
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the finalizers list is empty. As long as the finalizers list contains items, deletion is blocked. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time. For example, a user may request that a pod is deleted in 30 seconds. The Kubelet will react by sending a graceful termination signal to the containers in the pod. After that 30 seconds, the Kubelet will send a hard termination signal (SIGKILL) to the container and after cleanup, remove the pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated. If not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name ONLY IF the `name` field has not been provided. If this field is used, the name returned to the client will be different than the name passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the `name` field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will NOT return a 409 - instead, it will either return '201 Created' or '500' with Reason 'ServerTimeout' indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the 'Retry-After' header). Applied only if `name` is not specified.",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. May match selectors of replication controllers and services.",
          "type": "object"
        },
        "managedFields": {
          "description": "This maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace defines the space within each name must be unique. An empty namespace is equivalent to the '`default`' namespace, but 'default' is the canonical representation. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only.",
          "type": "string"
        },
        "selfLink": {
          "description": "SelfLink is a URL representing this object. Populated by the system. Read-only. DEPRECATED Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.PATCH": {
      "description": "Metadata for patch operation.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character.  The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now. It can be provided in a patch operation, but the value provided must be identical to the existing value.",
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "creationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. It is populated by the system, read-only. Null for lists. Its value is immutable once set."
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Its value is immutable once set.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested and is not directly settable by a client. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. No new finalizer can be added if the object's deletionTimestamp is not nil. No new items can be added when the object is already deleted.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. 'kubernetes', 'orphan', 'foregroundDeletion'), or it contains at least one slash ('/').",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "generateName is an optional prefix for the server to generate a unique name IF the name field has not been provided. It is ignored during patch operation",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. It cannot be decremented.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.  Both the key and the value must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have '/' in it thus referred to as 'qualified name'. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "name": {
          "description": "The name cannot be updated so the value (if provided) must match the current name.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace cannot be updated so the value (if provided) must match the current namespace.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. When included in a PATCH request, its value must match the existing value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE": {
      "description": "Metadata for patch operation.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Annotations is an unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character.  The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now. It can be provided in a patch operation, but the value provided must be identical to the existing value.",
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "creationTimestamp is a timestamp representing the server time when this object was created. It is not guaranteed to be set in happens-before order across separate operations. It is represented in RFC3339 form and is in UTC. It is populated by the system, read-only. Null for lists. Its value is immutable once set."
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when deletionTimestamp is also set. May only be shortened. Its value is immutable once set.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested and is not directly settable by a client. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the deletionTimestamp of the object is non-nil, entries in this list can only be removed. No new finalizer can be added if the object's deletionTimestamp is not nil. When update, no new items can be added when the object is already deleted.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. 'kubernetes', 'orphan', 'foregroundDeletion'), or it contains at least one slash ('/').",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "generateName is an optional prefix for the server to generate a unique name IF the name field has not been provided. It is ignored during patch operation",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. It cannot be decremented.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects.  Both the key and the value must consist of alphanumeric characters, '-', '_' or '.', and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have '/' in it thus referred to as 'qualified name'. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "managedFields": {
          "description": "This maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "The name cannot be updated so the value (if provided) must match the current name.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace cannot be updated so the value (if provided) must match the current namespace.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If ALL objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the controller field set to true. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "uid": {
          "description": "UID is the unique in time and space value for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. When updating an existing object, its value must match the current value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "minLength": 1,
          "type": "string"
        },
        "blockOwnerDeletion": {
          "default": false,
          "description": "If true, AND if the owner has the 'foregroundDeletion' finalizer, then the owner cannot be deleted from the key-value store until this reference is removed.  To set this field, a user needs 'delete' permission of the owner, otherwise 422 (Unprocessable Entity) will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If true, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "minLength": 1,
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body."
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (update, delete, etc.) is carried out.",
      "properties": {
        "resourceVersion": {
          "description": "The target resource version",
          "type": "string"
        },
        "uid": {
          "description": "Specifies the target UID.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "A map between the server address and client IP ranges.",
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "minLength": 1,
          "type": "string"
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a 'hostname', 'hostname:port', 'ip' or 'IP:port'.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
          "description": "Extended data associated with the reason.  Each reason may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Status"
          ],
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the 'Failure' status. If this value is empty there is no information available. A reason clarifies an HTTP status code but does not override it.",
          "type": "string"
        },
        "status": {
          "description": "Status of the operation. One of: 'Success' or 'Failure'.",
          "enum": [
            "Success",
            "Failure"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about an api.Status failure, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed.  Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n  \"name\" - the field \"name\" on the current resource\n  \"items[0].name\" - the field \"name\" on the first array entry in \"items\"",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error.  This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The Reason field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The Causes array includes more details associated with the StatusReason failure. Not all StatusReasons may provide detailed causes.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          },
          "type": "array"
        },
        "group": {
          "description": "The group attribute of the resource associated with the status StatusReason.",
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status StatusReason (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described). More info: http://kubernetes.io/docs/user-guide/identifiers#uids",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around time.Time which supports correct marshaling to YAML and JSON.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "description": "Event represents a single event to a watched resource.",
      "properties": {
        "object": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "Object is new state of the object if Type is Added or Modified, or the state of the object immediately before deletion if Type is Deleted. If Type is Error, status is recommended; other types may make sense depending on context."
        },
        "type": {
          "enum": [
            "Added",
            "Deleted",
            "Error",
            "Modified"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "object"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta2"
        },
        {
          "group": "auditregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta2"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v2alpha1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "policy",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions. To use this, make a field which has `RawExtension` as its type in your external, versioned struct, and `Object` in your internal struct. You also need to register your various plugin types. Decode first uses json or yaml to unmarshal the serialized data into your external object. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using pkg/conversion) into the internal struct. The runtime package's `DefaultScheme` has conversion functions installed which will unpack the JSON stored in `RawExtension`, turning it into the correct object type, and storing it in the `Object`. (TODO: In the case where the object is of an unknown type, a `runtime.Unknown` object will be created and stored.)",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "description": "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
      "format": "int-or-string",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.version.Info": {
      "description": "Info contains versioning information. how we'll want to distribute that information.",
      "properties": {
        "buildDate": {
          "minLength": 1,
          "type": "string"
        },
        "compiler": {
          "minLength": 1,
          "type": "string"
        },
        "gitCommit": {
          "minLength": 1,
          "type": "string"
        },
        "gitTreeState": {
          "minLength": 1,
          "type": "string"
        },
        "gitVersion": {
          "minLength": 1,
          "type": "string"
        },
        "goVersion": {
          "minLength": 1,
          "type": "string"
        },
        "major": {
          "minLength": 1,
          "type": "string"
        },
        "minor": {
          "minLength": 1,
          "type": "string"
        },
        "platform": {
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "major",
        "minor",
        "gitVersion",
        "gitCommit",
        "gitTreeState",
        "buildDate",
        "goVersion",
        "compiler",
        "platform"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.CREATE": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata where `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus",
          "description": "Derived information about an API server"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata where `name` must be '`version.group`'."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus",
          "description": "Derived information about an API server"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata where `name` must be '`version.group`'."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus",
          "description": "Derived information about an API server"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition": {
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type",
        "status"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList": {
      "description": "A list of APIService objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "The list of APIService objects",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIServiceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "description": "Information for locating and communicating with a server. Only HTTPS is supported, though you can disable certificate verification.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle for validating an API server's serving certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "group": {
          "description": "The API group name this server hosts. If `group` is empty, `version` must be '`v1`'. Value must be a valid DNS subdomain.",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "The priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher `groupPriorityMininum` values such that the whole group gets a higher priority. The primary sort is based on `groupPriorityMinimum`, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object ('v1.bar' before 'v1.foo'). We'd recommend something like: '`*.k8s.io`' (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "format": "int32",
          "maximum": 20000,
          "minimum": 1,
          "type": "integer"
        },
        "insecureSkipTLSVerify": {
          "description": "This flag disables TLS certificate verification. This is strongly discouraged. You should use the `caBundle` instead. If `caBundle` is specified, this field cannot be True.",
          "type": "boolean"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference",
          "description": "A reference to the service for this API server. It must communicate on port 443. If the `service` is nil, it means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. In that case, `caBundle` and `insecureSkipTLSVerify` cannot be specified."
        },
        "version": {
          "description": "The API version this server hosts. Value must be a valid DNS label. For example, '`v1`'.",
          "type": "string"
        },
        "versionPriority": {
          "description": "This field controls the ordering of this API version inside of its group. The primary sort is based on `versionPriority`, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a `group`. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. 'Kube-like' versions start with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA>beta>alpha` (where GA is a version with no suffix such as `beta` or `alpha`), and then by comparing major version, then minor version. An example sorted list of versions: `v10`, `v2`, `v1`, `v11beta2`, `v10beta3`, `v3beta1`, `v12alpha1`, `v11alpha2`, `foo1`, `foo10`.",
          "format": "int32",
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "service",
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus": {
      "description": "Derived information about an API server",
      "properties": {
        "conditions": {
          "description": "Current service state of apiService.",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "description": "A reference to Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the service that hosting webhook.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    }
  },
  "parameters": {
    "allowWatchBookmarks": {
      "description": "allowWatchBookmarks requests watch events with type 'BOOKMARK'. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any BOOKMARK event during a session. This field is ignored if the operation is not a watch or the feature gate WatchBookmarks is not enabled in apiserver. This field is alpha.",
      "in": "query",
      "name": "allowWatchBookmarks",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "continue": {
      "description": "The continue option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the continue value from a previous query result with identical query parameters (except for the value of continue) and the server may reject a continue value it does not recognize. If the specified continue value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a 410 ResourceExpired error together with a continue token. If the client needs a consistent list, it must restart their list without the continue field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when watch is true. Clients may start a watch from the last resourceVersion value returned by the server and not miss any modifications.",
      "in": "query",
      "name": "continue",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "dryRun": {
      "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are: - All: all dry run stages will be processed",
      "in": "query",
      "name": "dryRun",
      "required": false,
      "type": "string",
      "enum": [
        "All"
      ],
      "uniqueItems": true
    },
    "exact": {
      "description": "Should the export be exact.  Exact export maintains cluster-specific fields like 'Namespace'. Deprecated. Planned for removal in 1.18.",
      "in": "query",
      "name": "exact",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "export": {
      "description": "Should this value be exported.  Export strips fields that a user can not specify. Deprecated. Planned for removal in 1.18.",
      "in": "query",
      "name": "export",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "fieldManager": {
      "description": "fieldManager is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by https://golang.org/pkg/unicode/#IsPrint.",
      "in": "query",
      "name": "fieldManager",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "fieldSelector": {
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything.",
      "in": "query",
      "name": "fieldSelector",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "force": {
      "description": "Force is going to _force_ Apply requests. It means user will re-acquire conflicting fields owned by other people. Force flag must be unset for non-apply patch requests.",
      "in": "query",
      "name": "force",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "gracePeriodSeconds": {
      "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified. zero means delete immediately.",
      "in": "query",
      "name": "gracePeriodSeconds",
      "required": false,
      "type": "integer",
      "uniqueItems": true
    },
    "includeUninitialized": {
      "description": "If true, partially initialized resources are included in the response.",
      "in": "query",
      "name": "includeUninitialized",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "labelSelector": {
      "description": "A selector to restrict the list of returned objects by their labels. Defaults to everything.",
      "in": "query",
      "name": "labelSelector",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "limit": {
      "description": "limit is a maximum number of responses to return for a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a limit may return fewer than the requested amount of items (up to zero items) in the event all requested objects are filtered out and clients should only use the presence of the continue field to determine whether more results are available. Servers may choose not to support the limit argument and will return all of the available results. If limit is specified and the continue field is empty, clients may assume that no more results are available. This field is not supported if watch is true.\n\nThe server guarantees that the objects returned when using continue will be identical to issuing a single list call without a limit - that is, no objects created, modified, or deleted after the first request is issued will be included in any subsequent continued requests. This is sometimes referred to as a consistent snapshot, and ensures that a client that is using limit to receive smaller chunks of a very large result can ensure they see all possible objects. If objects are updated during a chunked list the version of the object that was present at the time the first list result was calculated is returned.",
      "in": "query",
      "name": "limit",
      "required": false,
      "type": "integer",
      "uniqueItems": true
    },
    "namespace": {
      "description": "object name and auth scope, such as for teams and projects",
      "in": "path",
      "name": "namespace",
      "required": true,
      "type": "string",
      "uniqueItems": true
    },
    "orphanDependents": {
      "description": "Deprecated: please use the PropagationPolicy, this field will be deprecated in 1.7. Should the dependent objects be orphaned. If true/false, the \"orphan\" finalizer will be added to/removed from the object's finalizers list. Either this field or PropagationPolicy may be set, but not both.",
      "in": "query",
      "name": "orphanDependents",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "pretty": {
      "description": "If 'true', then the output is pretty printed.",
      "in": "query",
      "name": "pretty",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "propagationPolicy": {
      "description": "Whether and how garbage collection will be performed. Either this field or OrphanDependents may be set, but not both. The default policy is decided by the existing finalizer set in the metadata.finalizers and the resource-specific default policy. Acceptable values are: 'Orphan' - orphan the dependents; 'Background' - allow the garbage collector to delete the dependents in the background; 'Foreground' - a cascading policy that deletes all dependents in the foreground.",
      "in": "query",
      "name": "propagationPolicy",
      "required": false,
      "type": "string",
      "enum": [
        "Orphan",
        "Background",
        "Foreground"
      ],
      "uniqueItems": true
    },
    "resourceVersion": {
      "description": "When specified with a watch call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for list: - if unset, then the result is returned from remote storage based on quorum-read flag; - if it's 0, then we simply return what we currently have in cache, no guarantee; - if set to non zero, then the result is at least as fresh as given rv.",
      "in": "query",
      "name": "resourceVersion",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "timeoutSeconds": {
      "description": "Timeout for the list/watch call. This limits the duration of the call, regardless of any activity or inactivity.",
      "in": "query",
      "name": "timeoutSeconds",
      "required": false,
      "type": "integer",
      "uniqueItems": true
    },
    "watch": {
      "description": "Watch for changes to the described resources and return them as a stream of add, update, and remove notifications. Specify resourceVersion.",
      "in": "query",
      "name": "watch",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    }
  },
  "paths": {
    "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a MutatingWebhookConfiguration",
        "operationId": "createAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind MutatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ValidatingWebhookConfiguration",
        "operationId": "createAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ValidatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations": {
      "post": {
        "description": "create a MutatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "createAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind MutatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations": {
      "post": {
        "description": "create a ValidatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "createAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ValidatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1/customresourcedefinitions": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CustomResourceDefinition",
        "operationId": "createApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1CollectionCustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CustomResourceDefinition",
        "operationId": "listApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions": {
      "post": {
        "description": "create a CustomResourceDefinition",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "createApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1beta1CollectionCustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CustomResourceDefinition",
        "operationId": "listApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1/apiservices": {
      "post": {
        "description": "create an APIService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "createApiregistrationV1APIService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of APIService",
        "operationId": "deleteApiregistrationV1CollectionAPIService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind APIService",
        "operationId": "listApiregistrationV1APIService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {
      "post": {
        "description": "create a ControllerRevision",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "createAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ControllerRevision",
        "operationId": "deleteAppsV1CollectionNamespacedControllerRevision",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ControllerRevision",
        "operationId": "listAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevisionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/daemonsets": {
      "post": {
        "description": "create a DaemonSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "createAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of DaemonSet",
        "operationId": "deleteAppsV1CollectionNamespacedDaemonSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DaemonSet",
        "operationId": "listAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments": {
      "post": {
        "description": "create a Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "createAppsV1NamespacedDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Deployment",
        "operationId": "deleteAppsV1CollectionNamespacedDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Deployment",
        "operationId": "listAppsV1NamespacedDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets": {
      "post": {
        "description": "create a ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "createAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ReplicaSet",
        "operationId": "deleteAppsV1CollectionNamespacedReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicaSet",
        "operationId": "listAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets": {
      "post": {
        "description": "create a StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "createAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of StatefulSet",
        "operationId": "deleteAppsV1CollectionNamespacedStatefulSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StatefulSet",
        "operationId": "listAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/auditregistration.k8s.io/v1alpha1/auditsinks": {
      "post": {
        "description": "create an AuditSink",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "operationId": "createAuditregistrationV1alpha1AuditSink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of AuditSink",
        "operationId": "deleteAuditregistrationV1alpha1CollectionAuditSink",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind AuditSink",
        "operationId": "listAuditregistrationV1alpha1AuditSink",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSinkList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/authentication.k8s.io/v1/tokenreviews": {
      "post": {
        "description": "create a TokenReview",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication_v1"
        ],
        "operationId": "createAuthenticationV1TokenReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {
      "post": {
        "description": "create a LocalSubjectAccessReview",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "operationId": "createAuthorizationV1NamespacedLocalSubjectAccessReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/selfsubjectaccessreviews": {
      "post": {
        "description": "create a SelfSubjectAccessReview",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "operationId": "createAuthorizationV1SelfSubjectAccessReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/selfsubjectrulesreviews": {
      "post": {
        "description": "create a SelfSubjectRulesReview",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "operationId": "createAuthorizationV1SelfSubjectRulesReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/subjectaccessreviews": {
      "post": {
        "description": "create a SubjectAccessReview",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "operationId": "createAuthorizationV1SubjectAccessReview",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {
      "post": {
        "description": "create a HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "createAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers": {
      "post": {
        "description": "create a HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs": {
      "post": {
        "description": "create a Job",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "createBatchV1NamespacedJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Job",
        "operationId": "deleteBatchV1CollectionNamespacedJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Job",
        "operationId": "listBatchV1NamespacedJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.JobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {
      "post": {
        "description": "create a CronJob",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "createBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CronJob",
        "operationId": "deleteBatchV1beta1CollectionNamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests": {
      "post": {
        "description": "create a CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "createCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CertificateSigningRequest",
        "operationId": "deleteCertificatesV1beta1CollectionCertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CertificateSigningRequest",
        "operationId": "listCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Lease",
        "operationId": "createCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Lease",
        "operationId": "deleteCoordinationV1CollectionNamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {
      "post": {
        "description": "create a Lease",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "operationId": "createCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Lease",
        "operationId": "deleteCoordinationV1beta1CollectionNamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/namespaces": {
      "post": {
        "description": "create a Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1Namespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Namespace",
        "operationId": "listCoreV1Namespace",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/configmaps": {
      "post": {
        "description": "create a ConfigMap",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ConfigMap",
        "operationId": "deleteCoreV1CollectionNamespacedConfigMap",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "get": {
        "description": "list or watch objects of kind ConfigMap",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "listCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/endpoints": {
      "post": {
        "description": "create Endpoints",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Endpoints",
        "operationId": "deleteCoreV1CollectionNamespacedEndpoints",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Endpoints",
        "operationId": "listCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EndpointsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/events": {
      "post": {
        "description": "create an Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Event",
        "operationId": "deleteCoreV1CollectionNamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listCoreV1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/limitranges": {
      "post": {
        "description": "create a LimitRange",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of LimitRange",
        "operationId": "deleteCoreV1CollectionNamespacedLimitRange",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind LimitRange",
        "operationId": "listCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {
      "post": {
        "description": "create a PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PersistentVolumeClaim",
        "operationId": "deleteCoreV1CollectionNamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PersistentVolumeClaim",
        "operationId": "listCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods": {
      "post": {
        "description": "create a Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Pod",
        "operationId": "deleteCoreV1CollectionNamespacedPod",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Pod",
        "operationId": "listCoreV1NamespacedPod",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/binding": {
      "post": {
        "description": "create binding of a Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedPodBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Binding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/eviction": {
      "post": {
        "description": "create eviction of a Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedPodEviction",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Eviction",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "Eviction",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/podtemplates": {
      "post": {
        "description": "create a PodTemplate",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodTemplate",
        "operationId": "deleteCoreV1CollectionNamespacedPodTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodTemplate",
        "operationId": "listCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers": {
      "post": {
        "description": "create a ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ReplicationController",
        "operationId": "deleteCoreV1CollectionNamespacedReplicationController",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicationController",
        "operationId": "listCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas": {
      "post": {
        "description": "create a ResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ResourceQuota",
        "operationId": "deleteCoreV1CollectionNamespacedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ResourceQuota",
        "operationId": "listCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/secrets": {
      "post": {
        "description": "create a Secret",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedSecret",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Secret",
        "operationId": "deleteCoreV1CollectionNamespacedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Secret",
        "operationId": "listCoreV1NamespacedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.SecretList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services": {
      "post": {
        "description": "create a Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Service",
        "operationId": "listCoreV1NamespacedService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts": {
      "post": {
        "description": "create a ServiceAccount",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ServiceAccount",
        "operationId": "deleteCoreV1CollectionNamespacedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ServiceAccount",
        "operationId": "listCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create token of a ServiceAccount",
        "operationId": "createCoreV1NamespacedServiceAccountToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.CREATE"
            }
          },
          {
            "description": "name of the TokenRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes": {
      "post": {
        "description": "create a Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1Node",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Node",
        "operationId": "deleteCoreV1CollectionNode",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Node",
        "operationId": "listCoreV1Node",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.NodeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumes": {
      "post": {
        "description": "create a PersistentVolume",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "createCoreV1PersistentVolume",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PersistentVolume",
        "operationId": "deleteCoreV1CollectionPersistentVolume",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PersistentVolume",
        "operationId": "listCoreV1PersistentVolume",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      }
    },
    "/apis/discovery.k8s.io/v1alpha1/namespaces/{namespace}/endpointslices": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an EndpointSlice",
        "operationId": "createDiscoveryV1alpha1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of EndpointSlice",
        "operationId": "deleteDiscoveryV1alpha1CollectionNamespacedEndpointSlice",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind EndpointSlice",
        "operationId": "listDiscoveryV1alpha1NamespacedEndpointSlice",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSliceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {
      "post": {
        "description": "create an Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "operationId": "createEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Event",
        "operationId": "deleteEventsV1beta1CollectionNamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {
      "post": {
        "description": "create a NetworkPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "operationId": "createNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of NetworkPolicy",
        "operationId": "deleteNetworkingV1CollectionNamespacedNetworkPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind NetworkPolicy",
        "operationId": "listNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Ingress",
        "operationId": "createNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Ingress",
        "operationId": "deleteNetworkingV1beta1CollectionNamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/node.k8s.io/v1beta1/runtimeclasses": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RuntimeClass",
        "operationId": "createNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RuntimeClass",
        "operationId": "deleteNodeV1beta1CollectionRuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RuntimeClass",
        "operationId": "listNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {
      "post": {
        "description": "create a PodDisruptionBudget",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "createPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodDisruptionBudget",
        "operationId": "deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodDisruptionBudget",
        "operationId": "listPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/podsecuritypolicies": {
      "post": {
        "description": "create a PodSecurityPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "createPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodSecurityPolicy",
        "operationId": "deletePolicyV1beta1CollectionPodSecurityPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodSecurityPolicy",
        "operationId": "listPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterroles": {
      "post": {
        "description": "create a ClusterRole",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "createRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRole",
        "operationId": "deleteRbacAuthorizationV1CollectionClusterRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRole",
        "operationId": "listRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings": {
      "post": {
        "description": "create a ClusterRoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "createRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1CollectionClusterRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRoleBinding",
        "operationId": "listRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {
      "post": {
        "description": "create a Role",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "createRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Role",
        "operationId": "deleteRbacAuthorizationV1CollectionNamespacedRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {
      "post": {
        "description": "create a RoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "createRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RoleBinding",
        "operationId": "deleteRbacAuthorizationV1CollectionNamespacedRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1/priorityclasses": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PriorityClass",
        "operationId": "createSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PriorityClass",
        "operationId": "deleteSchedulingV1CollectionPriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PriorityClass",
        "operationId": "listSchedulingV1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      }
    },
    "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {
      "post": {
        "description": "create a PodPreset",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "operationId": "createSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodPreset",
        "operationId": "deleteSettingsV1alpha1CollectionNamespacedPodPreset",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodPreset",
        "operationId": "listSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/storageclasses": {
      "post": {
        "description": "create a StorageClass",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "createStorageV1StorageClass",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of StorageClass",
        "operationId": "deleteStorageV1CollectionStorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StorageClass",
        "operationId": "listStorageV1StorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/volumeattachments": {
      "post": {
        "description": "create a VolumeAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "createStorageV1VolumeAttachment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/includeUninitialized"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VolumeAttachment",
        "operationId": "deleteStorageV1CollectionVolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VolumeAttachment",
        "operationId": "listStorageV1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csidrivers": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CSIDriver",
        "operationId": "createStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CSIDriver",
        "operationId": "deleteStorageV1beta1CollectionCSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CSIDriver",
        "operationId": "listStorageV1beta1CSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csinodes": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CSINode",
        "operationId": "createStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CSINode",
        "operationId": "listStorageV1beta1CSINode",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified MutatingWebhookConfiguration",
        "operationId": "patchAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified MutatingWebhookConfiguration",
        "operationId": "readAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified MutatingWebhookConfiguration",
        "operationId": "replaceAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ValidatingWebhookConfiguration",
        "operationId": "patchAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ValidatingWebhookConfiguration",
        "operationId": "readAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ValidatingWebhookConfiguration",
        "operationId": "replaceAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}": {
      "delete": {
        "description": "delete a MutatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the MutatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified MutatingWebhookConfiguration",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "patchAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the MutatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified MutatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "readAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the MutatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified MutatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the MutatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}": {
      "delete": {
        "description": "delete a ValidatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ValidatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified ValidatingWebhookConfiguration",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ValidatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified ValidatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "readAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ValidatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified ValidatingWebhookConfiguration",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ValidatingWebhookConfiguration",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CustomResourceDefinition",
        "operationId": "patchApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CustomResourceDefinition",
        "operationId": "readApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CustomResourceDefinition",
        "operationId": "replaceApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}": {
      "delete": {
        "description": "delete a CustomResourceDefinition",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "deleteApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified CustomResourceDefinition",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "patchApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified CustomResourceDefinition",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "readApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified CustomResourceDefinition",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "replaceApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1/apiservices/{name}": {
      "delete": {
        "description": "delete an APIService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "deleteApiregistrationV1APIService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified APIService",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "patchApiregistrationV1APIService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified APIService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "readApiregistrationV1APIService",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified APIService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "replaceApiregistrationV1APIService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}": {
      "delete": {
        "description": "delete a ControllerRevision",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "deleteAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ControllerRevision",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ControllerRevision",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ControllerRevision",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ControllerRevision",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ControllerRevision",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ControllerRevision",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ControllerRevision",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {
      "delete": {
        "description": "delete a DaemonSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "deleteAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified DaemonSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified DaemonSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified DaemonSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {
      "delete": {
        "description": "delete a Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "deleteAppsV1NamespacedDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Deployment",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedDeployment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}": {
      "delete": {
        "description": "delete a ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "deleteAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ReplicaSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {
      "delete": {
        "description": "delete a StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "deleteAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified StatefulSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/auditregistration.k8s.io/v1alpha1/auditsinks/{name}": {
      "delete": {
        "description": "delete an AuditSink",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "operationId": "deleteAuditregistrationV1alpha1AuditSink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the AuditSink",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified AuditSink",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "operationId": "patchAuditregistrationV1alpha1AuditSink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the AuditSink",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      },
      "get": {
        "description": "read the specified AuditSink",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "operationId": "readAuditregistrationV1alpha1AuditSink",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the AuditSink",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified AuditSink",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "operationId": "replaceAuditregistrationV1alpha1AuditSink",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the AuditSink",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.auditregistration.v1alpha1.AuditSink.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "auditregistration.k8s.io",
          "kind": "AuditSink",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "delete": {
        "description": "delete a HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "deleteAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified HorizontalPodAutoscaler",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "patchAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "readAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "replaceAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "delete": {
        "description": "delete a HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "patch": {
        "description": "partially update the specified HorizontalPodAutoscaler",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "get": {
        "description": "read the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "put": {
        "description": "replace the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {
      "delete": {
        "description": "delete a Job",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "deleteBatchV1NamespacedJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Job",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "patchBatchV1NamespacedJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Job",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "readBatchV1NamespacedJob",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Job",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "replaceBatchV1NamespacedJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}": {
      "delete": {
        "description": "delete a CronJob",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "deleteBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified CronJob",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "patchBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified CronJob",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "readBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified CronJob",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "replaceBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}": {
      "delete": {
        "description": "delete a CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "deleteCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified CertificateSigningRequest",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "patchCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "readCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "replaceCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Lease",
        "operationId": "deleteCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Lease",
        "operationId": "patchCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Lease",
        "operationId": "readCoordinationV1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Lease",
        "operationId": "replaceCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Lease",
        "operationId": "deleteCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified Lease",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "operationId": "patchCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Lease",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified Lease",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "operationId": "readCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Lease",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified Lease",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "operationId": "replaceCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Lease",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/namespaces/{name}": {
      "delete": {
        "description": "delete a Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1Namespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Namespace",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1Namespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1Namespace",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1Namespace",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/configmaps/{name}": {
      "delete": {
        "description": "delete a ConfigMap",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ConfigMap",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      },
      "patch": {
        "description": "partially update the specified ConfigMap",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ConfigMap",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "422": {
            "description": "Unprocessable entity.",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ConfigMap",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ConfigMap",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ConfigMap",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ConfigMap",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/endpoints/{name}": {
      "delete": {
        "description": "delete Endpoints",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Endpoints",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Endpoints",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Endpoints",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Endpoints",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Endpoints",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Endpoints",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Endpoints",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/events/{name}": {
      "delete": {
        "description": "delete an Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Event",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/limitranges/{name}": {
      "delete": {
        "description": "delete a LimitRange",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the LimitRange",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified LimitRange",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the LimitRange",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified LimitRange",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the LimitRange",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified LimitRange",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the LimitRange",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}": {
      "delete": {
        "description": "delete a PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified PersistentVolumeClaim",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}": {
      "delete": {
        "description": "delete a Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Pod",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedPod",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedPod",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/podtemplates/{name}": {
      "delete": {
        "description": "delete a PodTemplate",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodTemplate",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified PodTemplate",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodTemplate",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified PodTemplate",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodTemplate",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified PodTemplate",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodTemplate",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {
      "delete": {
        "description": "delete a ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ReplicationController",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas/{name}": {
      "delete": {
        "description": "delete a ResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ResourceQuota",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/secrets/{name}": {
      "delete": {
        "description": "delete a Secret",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedSecret",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Secret",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedSecret",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Secret",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Secret",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedSecret",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Secret",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}": {
      "delete": {
        "description": "delete a Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Service",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedService",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedService",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {
      "delete": {
        "description": "delete a ServiceAccount",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ServiceAccount",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ServiceAccount",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ServiceAccount",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ServiceAccount",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ServiceAccount",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified ServiceAccount",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ServiceAccount",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes/{name}": {
      "delete": {
        "description": "delete a Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1Node",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Node",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1Node",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.PATCH"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1Node",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1Node",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumes/{name}": {
      "delete": {
        "description": "delete a PersistentVolume",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "deleteCoreV1PersistentVolume",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified PersistentVolume",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1PersistentVolume",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified PersistentVolume",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1PersistentVolume",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified PersistentVolume",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1PersistentVolume",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      }
    },
    "/apis/discovery.k8s.io/v1alpha1/namespaces/{namespace}/endpointslices/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an EndpointSlice",
        "operationId": "deleteDiscoveryV1alpha1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified EndpointSlice",
        "operationId": "patchDiscoveryV1alpha1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified EndpointSlice",
        "operationId": "readDiscoveryV1alpha1NamespacedEndpointSlice",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified EndpointSlice",
        "operationId": "replaceDiscoveryV1alpha1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}": {
      "delete": {
        "description": "delete an Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "operationId": "deleteEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified Event",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "operationId": "patchEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "operationId": "readEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified Event",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "operationId": "replaceEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Event",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}": {
      "delete": {
        "description": "delete a NetworkPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "operationId": "deleteNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the NetworkPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified NetworkPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "operationId": "patchNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the NetworkPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified NetworkPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "operationId": "readNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the NetworkPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified NetworkPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "operationId": "replaceNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the NetworkPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Ingress",
        "operationId": "deleteNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Ingress",
        "operationId": "patchNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Ingress",
        "operationId": "readNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Ingress",
        "operationId": "replaceNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a RuntimeClass",
        "operationId": "deleteNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified RuntimeClass",
        "operationId": "patchNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified RuntimeClass",
        "operationId": "readNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified RuntimeClass",
        "operationId": "replaceNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}": {
      "delete": {
        "description": "delete a PodDisruptionBudget",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "deletePolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PodDisruptionBudget",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "operationId": "patchPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified PodDisruptionBudget",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "readPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified PodDisruptionBudget",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "replacePolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/podsecuritypolicies/{name}": {
      "delete": {
        "description": "delete a PodSecurityPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "deletePolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodSecurityPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "patch": {
        "description": "partially update the specified PodSecurityPolicy",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "patchPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodSecurityPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read the specified PodSecurityPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "readPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodSecurityPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "put": {
        "description": "replace the specified PodSecurityPolicy",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "replacePolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodSecurityPolicy",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}": {
      "delete": {
        "description": "delete a ClusterRole",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "deleteRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRole",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterRole",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "patchRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRole",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ClusterRole",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "readRbacAuthorizationV1ClusterRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRole",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace the specified ClusterRole",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "replaceRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRole",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}": {
      "delete": {
        "description": "delete a ClusterRoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "deleteRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified ClusterRoleBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "patchRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified ClusterRoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "readRbacAuthorizationV1ClusterRoleBinding",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace the specified ClusterRoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "replaceRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ClusterRoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}": {
      "delete": {
        "description": "delete a Role",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "deleteRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Role",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified Role",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "patchRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Role",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified Role",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "readRbacAuthorizationV1NamespacedRole",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Role",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace the specified Role",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "replaceRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Role",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}": {
      "delete": {
        "description": "delete a RoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "deleteRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the RoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified RoleBinding",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "patchRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the RoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified RoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "readRbacAuthorizationV1NamespacedRoleBinding",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the RoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace the specified RoleBinding",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "replaceRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the RoleBinding",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1/priorityclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PriorityClass",
        "operationId": "deleteSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PriorityClass",
        "operationId": "patchSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PriorityClass",
        "operationId": "readSchedulingV1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PriorityClass",
        "operationId": "replaceSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      }
    },
    "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}": {
      "delete": {
        "description": "delete a PodPreset",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "operationId": "deleteSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodPreset",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "description": "partially update the specified PodPreset",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "operationId": "patchSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodPreset",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "get": {
        "description": "read the specified PodPreset",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "operationId": "readSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodPreset",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "put": {
        "description": "replace the specified PodPreset",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "operationId": "replaceSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodPreset",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/storageclasses/{name}": {
      "delete": {
        "description": "delete a StorageClass",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "deleteStorageV1StorageClass",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StorageClass",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified StorageClass",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "patchStorageV1StorageClass",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StorageClass",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified StorageClass",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "readStorageV1StorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StorageClass",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified StorageClass",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "replaceStorageV1StorageClass",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StorageClass",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/volumeattachments/{name}": {
      "delete": {
        "description": "delete a VolumeAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "deleteStorageV1VolumeAttachment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "patch": {
        "description": "partially update the specified VolumeAttachment",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "patchStorageV1VolumeAttachment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "get": {
        "description": "read the specified VolumeAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "readStorageV1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "put": {
        "description": "replace the specified VolumeAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "replaceStorageV1VolumeAttachment",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csidrivers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CSIDriver",
        "operationId": "deleteStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CSIDriver",
        "operationId": "patchStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CSIDriver",
        "operationId": "readStorageV1beta1CSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CSIDriver",
        "operationId": "replaceStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csinodes/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CSINode",
        "operationId": "deleteStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CSINode",
        "operationId": "patchStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CSINode",
        "operationId": "readStorageV1beta1CSINode",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CSINode",
        "operationId": "replaceStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/": {
      "get": {
        "description": "get information of the admissionregistration API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration"
        ],
        "operationId": "getAdmissionregistrationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAdmissionregistrationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ]
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "operationId": "getAdmissionregistrationV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/apiextensions.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getApiextensionsAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions"
        ]
      }
    },
    "/apis/apiextensions.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getApiextensionsV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ]
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "getApiextensionsV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/apiregistration.k8s.io/": {
      "get": {
        "description": "get information of the apiregistration API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration"
        ],
        "operationId": "getApiregistrationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "getApiregistrationV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/apps/": {
      "get": {
        "description": "get information of the apps API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ],
        "operationId": "getAppsAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/apps/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "getAppsV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/auditregistration.k8s.io/": {
      "get": {
        "description": "get information of auditregistration API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration"
        ],
        "operationId": "getAuditregistrationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/auditregistration.k8s.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "auditregistration_v1alpha1"
        ],
        "operationId": "getAuditregistrationV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/authentication.k8s.io/": {
      "get": {
        "description": "get information of the authentication API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication"
        ],
        "operationId": "getAuthenticationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/authentication.k8s.io/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication_v1"
        ],
        "operationId": "getAuthenticationV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/authorization.k8s.io/": {
      "get": {
        "description": "get information of the authorization API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization"
        ],
        "operationId": "getAuthorizationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/authorization.k8s.io/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "operationId": "getAuthorizationV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/autoscaling/": {
      "get": {
        "description": "get information of the autoscaling API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling"
        ],
        "operationId": "getAutoscalingAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/autoscaling/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "getAutoscalingV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/autoscaling/v2beta2/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "getAutoscalingV2beta2APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/batch/": {
      "get": {
        "description": "get information of the batch API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch"
        ],
        "operationId": "getBatchAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/batch/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "getBatchV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/batch/v1beta1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "getBatchV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/certificates.k8s.io/": {
      "get": {
        "description": "get information of the certificates API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates"
        ],
        "operationId": "getCertificatesAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "getCertificatesV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/coordination.k8s.io/": {
      "get": {
        "description": "get information of the coordination API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination"
        ],
        "operationId": "getCoordinationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/coordination.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getCoordinationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ]
      }
    },
    "/apis/coordination.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getCoordinationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ]
      }
    },
    "/api/": {
      "get": {
        "description": "get available API versions",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core"
        ],
        "operationId": "getCoreAPIVersions",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "getCoreV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers": {
      "get": {
        "description": "get ephemeral containers of the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "getCoreV1NamespacedPodEphemeralContainers",
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "EphemeralContainer",
          "version": "v1"
        }
      },
      "put": {
        "description": "update ephemeral containers of the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "updateCoreV1NamespacedPodEphemeralContainers",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
              },
              "type": "array"
            }
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
              },
              "type": "array"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "items": {
                "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
              },
              "type": "array"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "EphemeralContainer",
          "version": "v1"
        }
      }
    },
    "/apis/discovery.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getDiscoveryAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery"
        ]
      }
    },
    "/apis/discovery.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getDiscoveryV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ]
      }
    },
    "/apis/events.k8s.io/": {
      "get": {
        "description": "get information of the events API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events"
        ],
        "operationId": "getEventsAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "operationId": "getEventsV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/extensions/": {
      "get": {
        "description": "get information of the extensions API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions"
        ],
        "operationId": "getExtensionsAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/networking.k8s.io/": {
      "get": {
        "description": "get information of the networking API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking"
        ],
        "operationId": "getNetworkingAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/networking.k8s.io/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "operationId": "getNetworkingV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getNetworkingV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ]
      }
    },
    "/apis/node.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getNodeAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node"
        ]
      }
    },
    "/apis/node.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getNodeV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ]
      }
    },
    "/apis/policy/": {
      "get": {
        "description": "get information of the policy group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy"
        ],
        "operationId": "getPolicyAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/policy/v1beta1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "getPolicyV1beta1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/": {
      "get": {
        "description": "get information of the rbac.authorization.k8s.io API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization"
        ],
        "operationId": "getRbacAuthorizationAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "operationId": "getRbacAuthorizationV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/scheduling.k8s.io/": {
      "get": {
        "description": "get information of the scheduling.k8s.io API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling"
        ],
        "operationId": "getSchedulingAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/scheduling.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getSchedulingV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ]
      }
    },
    "/apis/settings.k8s.io/": {
      "get": {
        "description": "get information of the settings.k8s.io API group",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings"
        ],
        "operationId": "getSettingsAPIGroup",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/settings.k8s.io/v1alpha1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "operationId": "getSettingsV1alpha1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/storage.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the storage.k8s.io API group",
        "operationId": "getStorageAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage"
        ]
      }
    },
    "/apis/storage.k8s.io/v1/": {
      "get": {
        "description": "get available resources",
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "getStorageV1APIResources",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getStorageV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ]
      }
    },
    "/apis/apps/v1/controllerrevisions": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ControllerRevision",
        "operationId": "listAppsV1ControllerRevisionForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevisionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/daemonsets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DaemonSet",
        "operationId": "listAppsV1DaemonSetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/deployments": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Deployment",
        "operationId": "listAppsV1DeploymentForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/replicasets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicaSet",
        "operationId": "listAppsV1ReplicaSetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/statefulsets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StatefulSet",
        "operationId": "listAppsV1StatefulSetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v1/horizontalpodautoscalers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v2beta2/horizontalpodautoscalers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/batch/v1/jobs": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Job",
        "operationId": "listBatchV1JobForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.JobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1beta1/cronjobs": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV1beta1CronJobForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1/leases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1LeaseForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1beta1/leases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1beta1LeaseForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/componentstatuses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list objects of kind ComponentStatus",
        "operationId": "listCoreV1ComponentStatus",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatusList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      }
    },
    "/api/v1/configmaps": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ConfigMap",
        "operationId": "listCoreV1ConfigMapForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      }
    },
    "/api/v1/endpoints": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Endpoints",
        "operationId": "listCoreV1EndpointsForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EndpointsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      }
    },
    "/api/v1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listCoreV1EventForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/api/v1/limitranges": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind LimitRange",
        "operationId": "listCoreV1LimitRangeForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumeclaims": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PersistentVolumeClaim",
        "operationId": "listCoreV1PersistentVolumeClaimForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/pods": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Pod",
        "operationId": "listCoreV1PodForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/podtemplates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodTemplate",
        "operationId": "listCoreV1PodTemplateForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      }
    },
    "/api/v1/replicationcontrollers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicationController",
        "operationId": "listCoreV1ReplicationControllerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/resourcequotas": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ResourceQuota",
        "operationId": "listCoreV1ResourceQuotaForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/secrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Secret",
        "operationId": "listCoreV1SecretForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.SecretList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      }
    },
    "/api/v1/serviceaccounts": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ServiceAccount",
        "operationId": "listCoreV1ServiceAccountForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      }
    },
    "/api/v1/services": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Service",
        "operationId": "listCoreV1ServiceForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/apis/discovery.k8s.io/v1alpha1/endpointslices": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind EndpointSlice",
        "operationId": "listDiscoveryV1alpha1EndpointSliceForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1alpha1.EndpointSliceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listEventsV1beta1EventForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/networkpolicies": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind NetworkPolicy",
        "operationId": "listNetworkingV1NetworkPolicyForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/ingresses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listNetworkingV1beta1IngressForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/poddisruptionbudgets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodDisruptionBudget",
        "operationId": "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/rolebindings": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1RoleBindingForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/roles": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1RoleForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      }
    },
    "/apis/settings.k8s.io/v1alpha1/podpresets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodPreset",
        "operationId": "listSettingsV1alpha1PodPresetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status": {
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CustomResourceDefinition",
        "operationId": "patchApiextensionsV1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CustomResourceDefinition",
        "operationId": "readApiextensionsV1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CustomResourceDefinition",
        "operationId": "replaceApiextensionsV1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status": {
      "patch": {
        "description": "partially update status of the specified CustomResourceDefinition",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "patchApiextensionsV1beta1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read status of the specified CustomResourceDefinition",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "readApiextensionsV1beta1CustomResourceDefinitionStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified CustomResourceDefinition",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "operationId": "replaceApiextensionsV1beta1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CustomResourceDefinition",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status": {
      "patch": {
        "description": "partially update status of the specified APIService",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "patchApiregistrationV1APIServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified APIService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "readApiregistrationV1APIServiceStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified APIService",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "operationId": "replaceApiregistrationV1APIServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the APIService",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status": {
      "patch": {
        "description": "partially update status of the specified DaemonSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedDaemonSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified DaemonSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedDaemonSetStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified DaemonSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedDaemonSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the DaemonSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale": {
      "patch": {
        "description": "partially update scale of the specified Deployment",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedDeploymentScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "get": {
        "description": "read scale of the specified Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedDeploymentScale",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace scale of the specified Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedDeploymentScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status": {
      "patch": {
        "description": "partially update status of the specified Deployment",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedDeploymentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedDeploymentStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified Deployment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedDeploymentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Deployment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale": {
      "patch": {
        "description": "partially update scale of the specified ReplicaSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedReplicaSetScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "get": {
        "description": "read scale of the specified ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedReplicaSetScale",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace scale of the specified ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedReplicaSetScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status": {
      "patch": {
        "description": "partially update status of the specified ReplicaSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedReplicaSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedReplicaSetStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified ReplicaSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedReplicaSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicaSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale": {
      "patch": {
        "description": "partially update scale of the specified StatefulSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedStatefulSetScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "get": {
        "description": "read scale of the specified StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedStatefulSetScale",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace scale of the specified StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedStatefulSetScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status": {
      "patch": {
        "description": "partially update status of the specified StatefulSet",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "patchAppsV1NamespacedStatefulSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "readAppsV1NamespacedStatefulSetStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified StatefulSet",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "operationId": "replaceAppsV1NamespacedStatefulSetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the StatefulSet",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
      "patch": {
        "description": "partially update status of the specified HorizontalPodAutoscaler",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "operationId": "replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
      "patch": {
        "description": "partially update status of the specified HorizontalPodAutoscaler",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "get": {
        "description": "read status of the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified HorizontalPodAutoscaler",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "operationId": "replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the HorizontalPodAutoscaler",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status": {
      "patch": {
        "description": "partially update status of the specified Job",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "patchBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified Job",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "readBatchV1NamespacedJobStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified Job",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "operationId": "replaceBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Job",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status": {
      "patch": {
        "description": "partially update status of the specified CronJob",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "patchBatchV1beta1NamespacedCronJobStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read status of the specified CronJob",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "readBatchV1beta1NamespacedCronJobStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified CronJob",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "operationId": "replaceBatchV1beta1NamespacedCronJobStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CronJob",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status": {
      "patch": {
        "description": "partially update status of the specified CertificateSigningRequest",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "patchCertificatesV1beta1CertificateSigningRequestStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read status of the specified CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "readCertificatesV1beta1CertificateSigningRequestStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "replaceCertificatesV1beta1CertificateSigningRequestStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/namespaces/{name}/status": {
      "patch": {
        "description": "partially update status of the specified Namespace",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespaceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespaceStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespaceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status": {
      "patch": {
        "description": "partially update status of the specified PersistentVolumeClaim",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedPersistentVolumeClaimStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedPersistentVolumeClaimStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified PersistentVolumeClaim",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedPersistentVolumeClaimStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolumeClaim",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/status": {
      "patch": {
        "description": "partially update status of the specified Pod",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedPodStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedPodStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedPodStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {
      "patch": {
        "description": "partially update scale of the specified ReplicationController",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedReplicationControllerScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "get": {
        "description": "read scale of the specified ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedReplicationControllerScale",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace scale of the specified ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedReplicationControllerScale",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Scale",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status": {
      "patch": {
        "description": "partially update status of the specified ReplicationController",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedReplicationControllerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedReplicationControllerStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified ReplicationController",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedReplicationControllerStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ReplicationController",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status": {
      "patch": {
        "description": "partially update status of the specified ResourceQuota",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedResourceQuotaStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified ResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedResourceQuotaStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified ResourceQuota",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedResourceQuotaStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ResourceQuota",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}/status": {
      "patch": {
        "description": "partially update status of the specified Service",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedServiceStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified Service",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Service",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes/{name}/status": {
      "patch": {
        "description": "partially update status of the specified Node",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1NodeStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NodeStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified Node",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NodeStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Node",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "201": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumes/{name}/status": {
      "patch": {
        "description": "partially update status of the specified PersistentVolume",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "patchCoreV1PersistentVolumeStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified PersistentVolume",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1PersistentVolumeStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified PersistentVolume",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1PersistentVolumeStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PersistentVolume",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status": {
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Ingress",
        "operationId": "patchNetworkingV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Ingress",
        "operationId": "readNetworkingV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Ingress",
        "operationId": "replaceNetworkingV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status": {
      "patch": {
        "description": "partially update status of the specified PodDisruptionBudget",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "get": {
        "description": "read status of the specified PodDisruptionBudget",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified PodDisruptionBudget",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "operationId": "replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the PodDisruptionBudget",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/volumeattachments/{name}/status": {
      "patch": {
        "description": "partially update status of the specified VolumeAttachment",
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "patchStorageV1VolumeAttachmentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "get": {
        "description": "read status of the specified VolumeAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "readStorageV1VolumeAttachmentStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      },
      "put": {
        "description": "replace status of the specified VolumeAttachment",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "operationId": "replaceStorageV1VolumeAttachmentStatus",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the VolumeAttachment",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      }
    },
    "/api/v1/componentstatuses/{name}": {
      "get": {
        "description": "read the specified ComponentStatus",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1ComponentStatus",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the ComponentStatus",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ]
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/log": {
      "get": {
        "description": "read log of the specified Pod",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "text/plain",
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "readCoreV1NamespacedPodLog",
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        },
        "parameters": [
          {
            "uniqueItems": true,
            "type": "string",
            "description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
            "name": "container",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Follow the log stream of the pod. Defaults to false.",
            "name": "follow",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
            "name": "limitBytes",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Pod",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "Return previous terminated container logs. Defaults to false.",
            "name": "previous",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of sinceSeconds or sinceTime may be specified.",
            "name": "sinceSeconds",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "integer",
            "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or sinceSeconds or sinceTime",
            "name": "tailLines",
            "in": "query"
          },
          {
            "uniqueItems": true,
            "type": "boolean",
            "description": "If true, add an RFC3339 or RFC3339Nano timestamp at the beginning of every line of log output. Defaults to false.",
            "name": "timestamps",
            "in": "query"
          }
        ]
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval": {
      "put": {
        "description": "replace approval of the specified CertificateSigningRequest",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "operationId": "replaceCertificatesV1beta1CertificateSigningRequestApproval",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the CertificateSigningRequest",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/namespaces/{name}/finalize": {
      "put": {
        "description": "replace finalize of the specified Namespace",
        "consumes": [
          "*/*"
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "operationId": "replaceCoreV1NamespaceFinalize",
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "uniqueItems": true,
            "type": "string",
            "description": "name of the Namespace",
            "name": "name",
            "in": "path",
            "required": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "type": "apiKey",
      "name": "authorization",
      "in": "header"
    }
  }
}
