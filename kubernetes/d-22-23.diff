# Only in 1.22orig/defs: io.k8s.api.core.v1.Handler.json
# Only in 1.23orig/defs: io.k8s.api.core.v1.LifecycleHandler.json

## Remove rbac/v1alpha1
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.AggregationRule.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.ClusterRole.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.ClusterRoleList.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.PolicyRule.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.Role.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.RoleBinding.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.RoleBindingList.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.RoleList.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.RoleRef.json
# Only in 1.22orig/defs: io.k8s.api.rbac.v1alpha1.Subject.json
# Only in 1.22orig/ops: createRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: createRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: createRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: createRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1CollectionClusterRole.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1CollectionNamespacedRole.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: deleteRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: getRbacAuthorizationV1alpha1APIResources.json
# Only in 1.22orig/ops: listRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: listRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: listRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: listRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces.json
# Only in 1.22orig/ops: listRbacAuthorizationV1alpha1RoleForAllNamespaces.json
# Only in 1.22orig/ops: patchRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: patchRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: patchRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: patchRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: readRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: readRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: readRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: readRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: replaceRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: replaceRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: replaceRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: replaceRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1ClusterRole.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1ClusterRoleBinding.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1ClusterRoleBindingList.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1ClusterRoleList.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1NamespacedRole.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1NamespacedRoleBinding.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1NamespacedRoleBindingList.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1NamespacedRoleList.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1RoleBindingListForAllNamespaces.json
# Only in 1.22orig/ops: watchRbacAuthorizationV1alpha1RoleListForAllNamespaces.json

## Remove scheduling/v1alpha1
# Only in 1.22orig/defs: io.k8s.api.scheduling.v1alpha1.PriorityClass.json
# Only in 1.22orig/defs: io.k8s.api.scheduling.v1alpha1.PriorityClassList.json
# Only in 1.22orig/ops: createSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: deleteSchedulingV1alpha1CollectionPriorityClass.json
# Only in 1.22orig/ops: deleteSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: getSchedulingV1alpha1APIResources.json
# Only in 1.22orig/ops: listSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: patchSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: readSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: replaceSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: watchSchedulingV1alpha1PriorityClass.json
# Only in 1.22orig/ops: watchSchedulingV1alpha1PriorityClassList.json

## Remove storage/v1alpha1 VolumeAttachment
# Only in 1.22orig/defs: io.k8s.api.storage.v1alpha1.VolumeAttachment.json
# Only in 1.22orig/defs: io.k8s.api.storage.v1alpha1.VolumeAttachmentList.json
# Only in 1.22orig/defs: io.k8s.api.storage.v1alpha1.VolumeAttachmentSource.json
# Only in 1.22orig/defs: io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec.json
# Only in 1.22orig/defs: io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus.json
# Only in 1.22orig/defs: io.k8s.api.storage.v1alpha1.VolumeError.json
# Only in 1.22orig/ops: createStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: deleteStorageV1alpha1CollectionVolumeAttachment.json
# Only in 1.22orig/ops: deleteStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: listStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: patchStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: readStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: replaceStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: watchStorageV1alpha1VolumeAttachment.json
# Only in 1.22orig/ops: watchStorageV1alpha1VolumeAttachmentList.json

# Only in 1.23orig/defs: io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ContainerResourceMetricSource.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.CrossVersionObjectReference.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ExternalMetricSource.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ExternalMetricStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HPAScalingPolicy.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HPAScalingRules.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.MetricIdentifier.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.MetricSpec.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.MetricStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.MetricTarget.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.MetricValueStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ObjectMetricSource.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ObjectMetricStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.PodsMetricSource.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.PodsMetricStatus.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ResourceMetricSource.json
# Only in 1.23orig/defs: io.k8s.api.autoscaling.v2.ResourceMetricStatus.json

# Only in 1.23orig/defs: io.k8s.api.core.v1.GRPCAction.json
# Only in 1.23orig/defs: io.k8s.api.core.v1.PodOS.json

# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.FlowDistinguisherMethod.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.FlowSchema.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.FlowSchemaCondition.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.FlowSchemaList.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.FlowSchemaSpec.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.FlowSchemaStatus.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.GroupSubject.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.LimitResponse.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.LimitedPriorityLevelConfiguration.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.NonResourcePolicyRule.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PolicyRulesWithSubjects.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfiguration.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationCondition.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationList.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationReference.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationSpec.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.PriorityLevelConfigurationStatus.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.QueuingConfiguration.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.ResourcePolicyRule.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.ServiceAccountSubject.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.Subject.json
# Only in 1.23orig/defs: io.k8s.api.flowcontrol.v1beta2.UserSubject.json

# Only in 1.23orig/defs: io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule.json

# Only in 1.23orig/ops: deleteCoreV1CollectionNamespacedService.json

# Only in 1.23orig/ops: createAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: deleteAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: listAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: patchAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: patchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus.json
# Only in 1.23orig/ops: readAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: readAutoscalingV2NamespacedHorizontalPodAutoscalerStatus.json
# Only in 1.23orig/ops: replaceAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: replaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus.json
# Only in 1.23orig/ops: watchAutoscalingV2NamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: watchAutoscalingV2NamespacedHorizontalPodAutoscalerList.json

# Only in 1.23orig/ops: deleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler.json
# Only in 1.23orig/ops: getAutoscalingV2APIResources.json
# Only in 1.23orig/ops: listAutoscalingV2HorizontalPodAutoscalerForAllNamespaces.json
# Only in 1.23orig/ops: watchAutoscalingV2HorizontalPodAutoscalerListForAllNamespaces.json

# Only in 1.23orig/ops: createFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: createFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: deleteFlowcontrolApiserverV1beta2CollectionFlowSchema.json
# Only in 1.23orig/ops: deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration.json
# Only in 1.23orig/ops: deleteFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: getFlowcontrolApiserverV1beta2APIResources.json
# Only in 1.23orig/ops: listFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: listFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: patchFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: patchFlowcontrolApiserverV1beta2FlowSchemaStatus.json
# Only in 1.23orig/ops: patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.json
# Only in 1.23orig/ops: readFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: readFlowcontrolApiserverV1beta2FlowSchemaStatus.json
# Only in 1.23orig/ops: readFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.json
# Only in 1.23orig/ops: replaceFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: replaceFlowcontrolApiserverV1beta2FlowSchemaStatus.json
# Only in 1.23orig/ops: replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus.json
# Only in 1.23orig/ops: watchFlowcontrolApiserverV1beta2FlowSchema.json
# Only in 1.23orig/ops: watchFlowcontrolApiserverV1beta2FlowSchemaList.json
# Only in 1.23orig/ops: watchFlowcontrolApiserverV1beta2PriorityLevelConfiguration.json
# Only in 1.23orig/ops: watchFlowcontrolApiserverV1beta2PriorityLevelConfigurationList.json

# diff -r 1.22orig/defs/io.k8s.api.apps.v1.DaemonSetStatus.json 1.23orig/defs/io.k8s.api.apps.v1.DaemonSetStatus.json
# 39c39
# <       "description": "The number of nodes that should be running the daemon pod and have one or more of the daemon pod running and ready.",
# ---
# >       "description": "numberReady is the number of nodes that should be running the daemon pod and have one or more of the daemon pod running with a Ready Condition.",
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.DaemonSetUpdateStrategy.json 1.23orig/defs/io.k8s.api.apps.v1.DaemonSetUpdateStrategy.json
# 9c9,13
# <       "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.",
# ---
# >       "description": "Type of daemon set update. Can be \"RollingUpdate\" or \"OnDelete\". Default is RollingUpdate.\n\nPossible enum values:\n - `\"OnDelete\"` Replace the old daemons only when it's killed\n - `\"RollingUpdate\"` Replace the old daemons by new ones using rolling update i.e replace them on each node one after the other.",
# >       "enum": [
# >         "OnDelete",
# >         "RollingUpdate"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.DeploymentStatus.json 1.23orig/defs/io.k8s.api.apps.v1.DeploymentStatus.json
# 29c29
# <       "description": "Total number of ready pods targeted by this deployment.",
# ---
# >       "description": "readyReplicas is the number of pods targeted by this Deployment with a Ready Condition.",
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.DeploymentStrategy.json 1.23orig/defs/io.k8s.api.apps.v1.DeploymentStrategy.json
# 9c9,13
# <       "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.",
# ---
# >       "description": "Type of deployment. Can be \"Recreate\" or \"RollingUpdate\". Default is RollingUpdate.\n\nPossible enum values:\n - `\"Recreate\"` Kill all existing pods before creating new ones.\n - `\"RollingUpdate\"` Replace the old ReplicaSets by new one using rolling update i.e gradually scale down the old ReplicaSets and scale up the new one.",
# >       "enum": [
# >         "Recreate",
# >         "RollingUpdate"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.ReplicaSetStatus.json 1.23orig/defs/io.k8s.api.apps.v1.ReplicaSetStatus.json
# 29c29
# <       "description": "The number of ready replicas for this replica set.",
# ---
# >       "description": "readyReplicas is the number of pods targeted by this ReplicaSet with a Ready Condition.",
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.StatefulSetSpec.json 1.23orig/defs/io.k8s.api.apps.v1.StatefulSetSpec.json
# 8a9,12
# >     "persistentVolumeClaimRetentionPolicy": {
# >       "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy",
# >       "description": "persistentVolumeClaimRetentionPolicy describes the lifecycle of persistent volume claims created from volumeClaimTemplates. By default, all persistent volume claims are created as needed and retained until manually deleted. This policy allows the lifecycle to be altered, for example by deleting persistent volume claims when their stateful set is deleted, or when their pod is scaled down. This requires the StatefulSetAutoDeletePVC feature gate to be enabled, which is alpha.  +optional"
# >     },
# 10c14,18
# <       "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.",
# ---
# >       "description": "podManagementPolicy controls how pods are created during initial scale up, when replacing pods on nodes, or when scaling down. The default policy is `OrderedReady`, where pods are created in increasing order (pod-0, then pod-1, etc) and the controller will wait until each pod is ready before continuing. When scaling down, the pods are removed in the opposite order. The alternative policy is `Parallel` which will create pods in parallel to match the desired scale without waiting, and on scale down will delete all pods at once.\n\nPossible enum values:\n - `\"OrderedReady\"` will create pods in strictly increasing order on scale up and strictly decreasing order on scale down, progressing only when the previous pod is ready or terminated. At most one pod will be changed at any time.\n - `\"Parallel\"` will create and delete pods as soon as the stateful set replica count is changed, and will not wait for pods to be ready or complete termination.",
# >       "enum": [
# >         "OrderedReady",
# >         "Parallel"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.StatefulSetStatus.json 1.23orig/defs/io.k8s.api.apps.v1.StatefulSetStatus.json
# 5c5
# <       "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset. This is an alpha field and requires enabling StatefulSetMinReadySeconds feature gate. Remove omitempty when graduating to beta",
# ---
# >       "description": "Total number of available pods (ready for at least minReadySeconds) targeted by this statefulset. This is a beta field and enabled/disabled by StatefulSetMinReadySeconds feature gate.",
# 38c38
# <       "description": "readyReplicas is the number of Pods created by the StatefulSet controller that have a Ready Condition.",
# ---
# >       "description": "readyReplicas is the number of pods created for this StatefulSet with a Ready Condition.",
# 58c58,59
# <     "replicas"
# ---
# >     "replicas",
# >     "availableReplicas"
# diff -r 1.22orig/defs/io.k8s.api.apps.v1.StatefulSetUpdateStrategy.json 1.23orig/defs/io.k8s.api.apps.v1.StatefulSetUpdateStrategy.json
# 9c9,13
# <       "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.",
# ---
# >       "description": "Type indicates the type of the StatefulSetUpdateStrategy. Default is RollingUpdate.\n\nPossible enum values:\n - `\"OnDelete\"` triggers the legacy behavior. Version tracking and ordered rolling restarts are disabled. Pods are recreated from the StatefulSetSpec when they are manually deleted. When a scale operation is performed with this strategy,specification version indicated by the StatefulSet's currentRevision.\n - `\"RollingUpdate\"` indicates that update will be applied to all Pods in the StatefulSet with respect to the StatefulSet ordering constraints. When a scale operation is performed with this strategy, new Pods will be created from the specification version indicated by the StatefulSet's updateRevision.",
# >       "enum": [
# >         "OnDelete",
# >         "RollingUpdate"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus.json 1.23orig/defs/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus.json
# 40,41c40
# <     "desiredReplicas",
# <     "conditions"
# ---
# >     "desiredReplicas"
# diff -r 1.22orig/defs/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus.json 1.23orig/defs/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus.json
# 40,41c40
# <     "desiredReplicas",
# <     "conditions"
# ---
# >     "desiredReplicas"
# diff -r 1.22orig/defs/io.k8s.api.batch.v1.CronJobSpec.json 1.23orig/defs/io.k8s.api.batch.v1.CronJobSpec.json
# 5c5,10
# <       "description": "Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one",
# ---
# >       "description": "Specifies how to treat concurrent executions of a Job. Valid values are: - \"Allow\" (default): allows CronJobs to run concurrently; - \"Forbid\": forbids concurrent runs, skipping next run if previous run hasn't finished yet; - \"Replace\": cancels currently running job and replaces it with a new one\n\nPossible enum values:\n - `\"Allow\"` allows CronJobs to run concurrently.\n - `\"Forbid\"` forbids concurrent runs, skipping next run if previous hasn't finished yet.\n - `\"Replace\"` cancels currently running job and replaces it with a new one.",
# >       "enum": [
# >         "Allow",
# >         "Forbid",
# >         "Replace"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.batch.v1.JobCondition.json 1.23orig/defs/io.k8s.api.batch.v1.JobCondition.json
# 25c25,30
# <       "description": "Type of job condition, Complete or Failed.",
# ---
# >       "description": "Type of job condition, Complete or Failed.\n\nPossible enum values:\n - `\"Complete\"` means the job has completed its execution.\n - `\"Failed\"` means the job has failed its execution.\n - `\"Suspended\"` means the job has been suspended.",
# >       "enum": [
# >         "Complete",
# >         "Failed",
# >         "Suspended"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.batch.v1.JobSpec.json 1.23orig/defs/io.k8s.api.batch.v1.JobSpec.json
# 45c45
# <       "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is alpha-level and is only honored by servers that enable the TTLAfterFinished feature.",
# ---
# >       "description": "ttlSecondsAfterFinished limits the lifetime of a Job that has finished execution (either Complete or Failed). If this field is set, ttlSecondsAfterFinished after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. finalizers) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes.",
# diff -r 1.22orig/defs/io.k8s.api.batch.v1.JobStatus.json 1.23orig/defs/io.k8s.api.batch.v1.JobStatus.json
# 5c5
# <       "description": "The number of actively running pods.",
# ---
# >       "description": "The number of pending and running pods.",
# 31a32,36
# >     "ready": {
# >       "description": "The number of pods which have a Ready condition.\n\nThis field is alpha-level. The job controller populates the field when the feature gate JobReadyPods is enabled (disabled by default).",
# >       "format": "int32",
# >       "type": "integer"
# >     },
# 43c48
# <       "description": "UncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\nThe job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status: (1) Add the pod UID to the arrays in this field. (2) Remove the pod finalizer. (3) Remove the pod UID from the arrays while increasing the corresponding\n    counter.\n\nThis field is alpha-level. The job controller only makes use of this field when the feature gate PodTrackingWithFinalizers is enabled. Old jobs might not be tracked using this field, in which case the field remains null."
# ---
# >       "description": "UncountedTerminatedPods holds the UIDs of Pods that have terminated but the job controller hasn't yet accounted for in the status counters.\n\nThe job controller creates pods with a finalizer. When a pod terminates (succeeded or failed), the controller does three steps to account for it in the job status: (1) Add the pod UID to the arrays in this field. (2) Remove the pod finalizer. (3) Remove the pod UID from the arrays while increasing the corresponding\n    counter.\n\nThis field is beta-level. The job controller only makes use of this field when the feature gate JobTrackingWithFinalizers is enabled (enabled by default). Old jobs might not be tracked using this field, in which case the field remains null."
# diff -r 1.22orig/defs/io.k8s.api.certificates.v1.CertificateSigningRequestCondition.json 1.23orig/defs/io.k8s.api.certificates.v1.CertificateSigningRequestCondition.json
# 25c25,30
# <       "description": "type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\nAn \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\nA \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed.",
# ---
# >       "description": "type of the condition. Known conditions are \"Approved\", \"Denied\", and \"Failed\".\n\nAn \"Approved\" condition is added via the /approval subresource, indicating the request was approved and should be issued by the signer.\n\nA \"Denied\" condition is added via the /approval subresource, indicating the request was denied and should not be issued by the signer.\n\nA \"Failed\" condition is added via the /status subresource, indicating the signer failed to issue the certificate.\n\nApproved and Denied conditions are mutually exclusive. Approved, Denied, and Failed conditions cannot be removed once added.\n\nOnly one condition of a given type is allowed.\n\nPossible enum values:\n - `\"Approved\"` Approved indicates the request was approved and should be issued by the signer.\n - `\"Denied\"` Denied indicates the request was denied and should not be issued by the signer.\n - `\"Failed\"` Failed indicates the signer failed to issue the certificate.",
# >       "enum": [
# >         "Approved",
# >         "Denied",
# >         "Failed"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ConfigMapKeySelector.json 1.23orig/defs/io.k8s.api.core.v1.ConfigMapKeySelector.json
# 22c22
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Container.json 1.23orig/defs/io.k8s.api.core.v1.Container.json
# 39c39,44
# <       "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
# ---
# >       "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
# >       "enum": [
# >         "Always",
# >         "IfNotPresent",
# >         "Never"
# >       ],
# 97c102,106
# <       "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
# ---
# >       "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
# >       "enum": [
# >         "FallbackToLogsOnError",
# >         "File"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ContainerPort.json 1.23orig/defs/io.k8s.api.core.v1.ContainerPort.json
# 23c23,28
# <       "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".",
# ---
# >       "description": "Protocol for port. Must be UDP, TCP, or SCTP. Defaults to \"TCP\".\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
# >       "enum": [
# >         "SCTP",
# >         "TCP",
# >         "UDP"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ContainerStatus.json 1.23orig/defs/io.k8s.api.core.v1.ContainerStatus.json
# 9c9
# <       "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images",
# ---
# >       "description": "The image the container is running. More info: https://kubernetes.io/docs/concepts/containers/images.",
# 29c29
# <       "description": "The number of times the container has been restarted, currently based on the number of dead containers that have not yet been removed. Note that this is calculated from dead containers. But those containers are subject to garbage collection. This value will get capped at 5 by GC.",
# ---
# >       "description": "The number of times the container has been restarted.",
# diff -r 1.22orig/defs/io.k8s.api.core.v1.EndpointPort.json 1.23orig/defs/io.k8s.api.core.v1.EndpointPort.json
# 18c18,23
# <       "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.",
# ---
# >       "description": "The IP protocol for this port. Must be UDP, TCP, or SCTP. Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
# >       "enum": [
# >         "SCTP",
# >         "TCP",
# >         "UDP"
# >       ],
# 27c32
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.api.core.v1.EphemeralContainer.json 1.23orig/defs/io.k8s.api.core.v1.EphemeralContainer.json
# 2c2
# <   "description": "An EphemeralContainer is a container that may be added temporarily to an existing pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a pod is removed or restarted. If an ephemeral container causes a pod to exceed its resource allocation, the pod may be evicted. Ephemeral containers may not be added by directly updating the pod spec. They must be added via the pod's ephemeralcontainers subresource, and they will appear in the pod spec once added. This is an alpha feature enabled by the EphemeralContainers feature flag.",
# ---
# >   "description": "An EphemeralContainer is a temporary container that you may add to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. The kubelet may evict a Pod if an ephemeral container causes the Pod to exceed its resource allocation.\n\nTo add an ephemeral container, use the ephemeralcontainers subresource of an existing Pod. Ephemeral containers may not be removed or restarted.\n\nThis is a beta feature available on clusters that haven't disabled the EphemeralContainers feature gate.",
# 39c39,44
# <       "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images",
# ---
# >       "description": "Image pull policy. One of Always, Never, IfNotPresent. Defaults to Always if :latest tag is specified, or IfNotPresent otherwise. Cannot be updated. More info: https://kubernetes.io/docs/concepts/containers/images#updating-images\n\nPossible enum values:\n - `\"Always\"` means that kubelet always attempts to pull the latest image. Container will fail If the pull fails.\n - `\"IfNotPresent\"` means that kubelet pulls if the image isn't present on disk. Container will fail if the image isn't present and the pull fails.\n - `\"Never\"` means that kubelet never pulls an image, but only uses a local image. Container will fail if the image isn't present",
# >       "enum": [
# >         "Always",
# >         "IfNotPresent",
# >         "Never"
# >       ],
# 59c64,71
# <       "type": "array"
# ---
# >       "type": "array",
# >       "x-kubernetes-list-map-keys": [
# >         "containerPort",
# >         "protocol"
# >       ],
# >       "x-kubernetes-list-type": "map",
# >       "x-kubernetes-patch-merge-key": "containerPort",
# >       "x-kubernetes-patch-strategy": "merge"
# 86c98
# <       "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container is run in whatever namespaces are shared for the pod. Note that the container runtime must support this feature.",
# ---
# >       "description": "If set, the name of the container from PodSpec that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of this container. If not set then the ephemeral container uses the namespaces configured in the Pod spec.\n\nThe container runtime must implement support for this feature. If the runtime does not support namespace targeting then the result of setting this field is undefined.",
# 94c106,110
# <       "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.",
# ---
# >       "description": "Indicate how the termination message should be populated. File will use the contents of terminationMessagePath to populate the container status message on both success and failure. FallbackToLogsOnError will use the last chunk of container log output if the termination message file is empty and the container exited with an error. The log output is limited to 2048 bytes or 80 lines, whichever is smaller. Defaults to File. Cannot be updated.\n\nPossible enum values:\n - `\"FallbackToLogsOnError\"` will read the most recent contents of the container logs for the container status message when the container exits with an error and the terminationMessagePath has no contents.\n - `\"File\"` is the default behavior and will set the container status message to the contents of the container's terminationMessagePath when the container exits.",
# >       "enum": [
# >         "FallbackToLogsOnError",
# >         "File"
# >       ],
# 111c127
# <       "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
# ---
# >       "description": "Pod volumes to mount into the container's filesystem. Subpath mounts are not allowed for ephemeral containers. Cannot be updated.",
# diff -r 1.22orig/defs/io.k8s.api.core.v1.HTTPGetAction.json 1.23orig/defs/io.k8s.api.core.v1.HTTPGetAction.json
# 24c24,28
# <       "description": "Scheme to use for connecting to the host. Defaults to HTTP.",
# ---
# >       "description": "Scheme to use for connecting to the host. Defaults to HTTP.\n\nPossible enum values:\n - `\"HTTP\"` means that the scheme used will be http://\n - `\"HTTPS\"` means that the scheme used will be https://",
# >       "enum": [
# >         "HTTP",
# >         "HTTPS"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Lifecycle.json 1.23orig/defs/io.k8s.api.core.v1.Lifecycle.json
# 5c5
# <       "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
# ---
# >       "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
# 9,10c9,10
# <       "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
# <       "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the PreStop hooked is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
# ---
# >       "$ref": "#/definitions/io.k8s.api.core.v1.LifecycleHandler",
# >       "description": "PreStop is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The Pod's termination grace period countdown begins before the PreStop hook is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period (unless delayed by finalizers). Other management of the container blocks until the hook completes or until the termination grace period is reached. More info: https://kubernetes.io/docs/concepts/containers/container-lifecycle-hooks/#container-hooks"
# diff -r 1.22orig/defs/io.k8s.api.core.v1.LimitRangeItem.json 1.23orig/defs/io.k8s.api.core.v1.LimitRangeItem.json
# 40c40,45
# <       "description": "Type of resource that this limit applies to.",
# ---
# >       "description": "Type of resource that this limit applies to.\n\nPossible enum values:\n - `\"Container\"` Limit that applies to all containers in a namespace\n - `\"PersistentVolumeClaim\"` Limit that applies to all persistent volume claims in a namespace\n - `\"Pod\"` Limit that applies to all pods in a namespace",
# >       "enum": [
# >         "Container",
# >         "PersistentVolumeClaim",
# >         "Pod"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.LocalVolumeSource.json 1.23orig/defs/io.k8s.api.core.v1.LocalVolumeSource.json
# 5c5
# <       "description": "Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a fileystem if unspecified.",
# ---
# >       "description": "Filesystem type to mount. It applies only when the Path is a block device. Must be a filesystem type supported by the host operating system. Ex. \"ext4\", \"xfs\", \"ntfs\". The default value is to auto-select a filesystem if unspecified.",
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NamespaceCondition.json 1.23orig/defs/io.k8s.api.core.v1.NamespaceCondition.json
# 18c18,25
# <       "description": "Type of namespace controller condition.",
# ---
# >       "description": "Type of namespace controller condition.\n\nPossible enum values:\n - `\"NamespaceContentRemaining\"` contains information about resources remaining in a namespace.\n - `\"NamespaceDeletionContentFailure\"` contains information about namespace deleter errors during deletion of resources.\n - `\"NamespaceDeletionDiscoveryFailure\"` contains information about namespace deleter errors during resource discovery.\n - `\"NamespaceDeletionGroupVersionParsingFailure\"` contains information about namespace deleter errors parsing GV for legacy types.\n - `\"NamespaceFinalizersRemaining\"` contains information about which finalizers are on resources remaining in a namespace.",
# >       "enum": [
# >         "NamespaceContentRemaining",
# >         "NamespaceDeletionContentFailure",
# >         "NamespaceDeletionDiscoveryFailure",
# >         "NamespaceDeletionGroupVersionParsingFailure",
# >         "NamespaceFinalizersRemaining"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NamespaceStatus.json 1.23orig/defs/io.k8s.api.core.v1.NamespaceStatus.json
# 14c14,18
# <       "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/",
# ---
# >       "description": "Phase is the current lifecycle phase of the namespace. More info: https://kubernetes.io/docs/tasks/administer-cluster/namespaces/\n\nPossible enum values:\n - `\"Active\"` means the namespace is available for use in the system\n - `\"Terminating\"` means the namespace is undergoing graceful termination",
# >       "enum": [
# >         "Active",
# >         "Terminating"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NodeAddress.json 1.23orig/defs/io.k8s.api.core.v1.NodeAddress.json
# 9c9,16
# <       "description": "Node address type, one of Hostname, ExternalIP or InternalIP.",
# ---
# >       "description": "Node address type, one of Hostname, ExternalIP or InternalIP.\n\nPossible enum values:\n - `\"ExternalDNS\"` identifies a DNS name which resolves to an IP address which has the characteristics of a NodeExternalIP. The IP it resolves to may or may not be a listed NodeExternalIP address.\n - `\"ExternalIP\"` identifies an IP address which is, in some way, intended to be more usable from outside the cluster then an internal IP, though no specific semantics are defined. It may be a globally routable IP, though it is not required to be. External IPs may be assigned directly to an interface on the node, like a NodeInternalIP, or alternatively, packets sent to the external IP may be NAT'ed to an internal node IP rather than being delivered directly (making the IP less efficient for node-to-node traffic than a NodeInternalIP).\n - `\"Hostname\"` identifies a name of the node. Although every node can be assumed to have a NodeAddress of this type, its exact syntax and semantics are not defined, and are not consistent between different clusters.\n - `\"InternalDNS\"` identifies a DNS name which resolves to an IP address which has the characteristics of a NodeInternalIP. The IP it resolves to may or may not be a listed NodeInternalIP address.\n - `\"InternalIP\"` identifies an IP address which is assigned to one of the node's network interfaces. Every node should have at least one address of this type. An internal IP is normally expected to be reachable from every other node, but may not be visible to hosts outside the cluster. By default it is assumed that kube-apiserver can reach node internal IPs, though it is possible to configure clusters where this is not the case. NodeInternalIP is the default type of node IP, and does not necessarily imply that the IP is ONLY reachable internally. If a node has multiple internal IPs, no specific semantics are assigned to the additional IPs.",
# >       "enum": [
# >         "ExternalDNS",
# >         "ExternalIP",
# >         "Hostname",
# >         "InternalDNS",
# >         "InternalIP"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NodeCondition.json 1.23orig/defs/io.k8s.api.core.v1.NodeCondition.json
# 25c25,32
# <       "description": "Type of node condition.",
# ---
# >       "description": "Type of node condition.\n\nPossible enum values:\n - `\"DiskPressure\"` means the kubelet is under pressure due to insufficient available disk.\n - `\"MemoryPressure\"` means the kubelet is under pressure due to insufficient available memory.\n - `\"NetworkUnavailable\"` means that network for the node is not correctly configured.\n - `\"PIDPressure\"` means the kubelet is under pressure due to insufficient available PID.\n - `\"Ready\"` means kubelet is healthy and ready to accept pods.",
# >       "enum": [
# >         "DiskPressure",
# >         "MemoryPressure",
# >         "NetworkUnavailable",
# >         "PIDPressure",
# >         "Ready"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NodeSelector.json 1.23orig/defs/io.k8s.api.core.v1.NodeSelector.json
# 17c17
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NodeSelectorRequirement.json 1.23orig/defs/io.k8s.api.core.v1.NodeSelectorRequirement.json
# 9c9,17
# <       "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.",
# ---
# >       "description": "Represents a key's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist. Gt, and Lt.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"Gt\"`\n - `\"In\"`\n - `\"Lt\"`\n - `\"NotIn\"`",
# >       "enum": [
# >         "DoesNotExist",
# >         "Exists",
# >         "Gt",
# >         "In",
# >         "Lt",
# >         "NotIn"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NodeSelectorTerm.json 1.23orig/defs/io.k8s.api.core.v1.NodeSelectorTerm.json
# 21c21
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.api.core.v1.NodeStatus.json 1.23orig/defs/io.k8s.api.core.v1.NodeStatus.json
# 56c56,61
# <       "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.",
# ---
# >       "description": "NodePhase is the recently observed lifecycle phase of the node. More info: https://kubernetes.io/docs/concepts/nodes/node/#phase The field is never populated, and now is deprecated.\n\nPossible enum values:\n - `\"Pending\"` means the node has been created/added by the system, but not configured.\n - `\"Running\"` means the node has been configured and has Kubernetes components running.\n - `\"Terminated\"` means the node has been removed from the cluster.",
# >       "enum": [
# >         "Pending",
# >         "Running",
# >         "Terminated"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ObjectFieldSelector.json 1.23orig/defs/io.k8s.api.core.v1.ObjectFieldSelector.json
# 18c18
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ObjectReference.json 1.23orig/defs/io.k8s.api.core.v1.ObjectReference.json
# 35c35
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PersistentVolumeClaimCondition.json 1.23orig/defs/io.k8s.api.core.v1.PersistentVolumeClaimCondition.json
# 23a24,28
# >       "description": "\n\n\nPossible enum values:\n - `\"FileSystemResizePending\"` - controller resize is finished and a file system resize is pending on node\n - `\"Resizing\"` - a user trigger resize of pvc has been started",
# >       "enum": [
# >         "FileSystemResizePending",
# >         "Resizing"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PersistentVolumeClaimSpec.json 1.23orig/defs/io.k8s.api.core.v1.PersistentVolumeClaimSpec.json
# 21c21
# <       "description": "Resources represents the minimum resources the volume should have. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
# ---
# >       "description": "Resources represents the minimum resources the volume should have. If RecoverVolumeExpansionFailure feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#resources"
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PersistentVolumeClaimStatus.json 1.23orig/defs/io.k8s.api.core.v1.PersistentVolumeClaimStatus.json
# 10a11,17
# >     "allocatedResources": {
# >       "additionalProperties": {
# >         "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
# >       },
# >       "description": "The storage resource within AllocatedResources tracks the capacity allocated to a PVC. It may be larger than the actual capacity when a volume expansion operation is requested. For storage quota, the larger value from allocatedResources and PVC.spec.resources is used. If allocatedResources is not set, PVC.spec.resources alone is used for quota calculation. If a volume expansion capacity request is lowered, allocatedResources is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
# >       "type": "object"
# >     },
# 28c35,44
# <       "description": "Phase represents the current phase of PersistentVolumeClaim.",
# ---
# >       "description": "Phase represents the current phase of PersistentVolumeClaim.\n\nPossible enum values:\n - `\"Bound\"` used for PersistentVolumeClaims that are bound\n - `\"Lost\"` used for PersistentVolumeClaims that lost their underlying PersistentVolume. The claim was bound to a PersistentVolume and this volume does not exist any longer and all data on it was lost.\n - `\"Pending\"` used for PersistentVolumeClaims that are not yet bound",
# >       "enum": [
# >         "Bound",
# >         "Lost",
# >         "Pending"
# >       ],
# >       "type": "string"
# >     },
# >     "resizeStatus": {
# >       "description": "ResizeStatus stores status of resize operation. ResizeStatus is not set by default but when expansion is complete resizeStatus is set to empty string by resize controller or kubelet. This is an alpha field and requires enabling RecoverVolumeExpansionFailure feature.",
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PersistentVolumeSpec.json 1.23orig/defs/io.k8s.api.core.v1.PersistentVolumeSpec.json
# 94c94,99
# <       "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming",
# ---
# >       "description": "What happens to a persistent volume when released from its claim. Valid options are Retain (default for manually created PersistentVolumes), Delete (default for dynamically provisioned PersistentVolumes), and Recycle (deprecated). Recycle must be supported by the volume plugin underlying this PersistentVolume. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#reclaiming\n\nPossible enum values:\n - `\"Delete\"` means the volume will be deleted from Kubernetes on release from its claim. The volume plugin must support Deletion.\n - `\"Recycle\"` means the volume will be recycled back into the pool of unbound persistent volumes on release from its claim. The volume plugin must support Recycling.\n - `\"Retain\"` means the volume will be left in its current phase (Released) for manual reclamation by the administrator. The default policy is Retain.",
# >       "enum": [
# >         "Delete",
# >         "Recycle",
# >         "Retain"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PersistentVolumeStatus.json 1.23orig/defs/io.k8s.api.core.v1.PersistentVolumeStatus.json
# 9c9,16
# <       "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase",
# ---
# >       "description": "Phase indicates if a volume is available, bound to a claim, or released by a claim. More info: https://kubernetes.io/docs/concepts/storage/persistent-volumes#phase\n\nPossible enum values:\n - `\"Available\"` used for PersistentVolumes that are not yet bound Available volumes are held by the binder and matched to PersistentVolumeClaims\n - `\"Bound\"` used for PersistentVolumes that are bound\n - `\"Failed\"` used for PersistentVolumes that failed to be correctly recycled or deleted after being released from a claim\n - `\"Pending\"` used for PersistentVolumes that are not available\n - `\"Released\"` used for PersistentVolumes where the bound PersistentVolumeClaim was deleted released volumes must be recycled before becoming available again this phase is used by the persistent volume claim binder to signal to another process to reclaim the resource",
# >       "enum": [
# >         "Available",
# >         "Bound",
# >         "Failed",
# >         "Pending",
# >         "Released"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PodCondition.json 1.23orig/defs/io.k8s.api.core.v1.PodCondition.json
# 25c25,31
# <       "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions",
# ---
# >       "description": "Type is the type of the condition. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-conditions\n\nPossible enum values:\n - `\"ContainersReady\"` indicates whether all containers in the pod are ready.\n - `\"Initialized\"` means that all init containers in the pod have started successfully.\n - `\"PodScheduled\"` represents status of the scheduling process for this pod.\n - `\"Ready\"` means the pod is able to service requests and should be added to the load balancing pools of all matching services.",
# >       "enum": [
# >         "ContainersReady",
# >         "Initialized",
# >         "PodScheduled",
# >         "Ready"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PodReadinessGate.json 1.23orig/defs/io.k8s.api.core.v1.PodReadinessGate.json
# 5c5,11
# <       "description": "ConditionType refers to a condition in the pod's condition list with matching type.",
# ---
# >       "description": "ConditionType refers to a condition in the pod's condition list with matching type.\n\nPossible enum values:\n - `\"ContainersReady\"` indicates whether all containers in the pod are ready.\n - `\"Initialized\"` means that all init containers in the pod have started successfully.\n - `\"PodScheduled\"` represents status of the scheduling process for this pod.\n - `\"Ready\"` means the pod is able to service requests and should be added to the load balancing pools of all matching services.",
# >       "enum": [
# >         "ContainersReady",
# >         "Initialized",
# >         "PodScheduled",
# >         "Ready"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PodSecurityContext.json 1.23orig/defs/io.k8s.api.core.v1.PodSecurityContext.json
# 5c5
# <       "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
# ---
# >       "description": "A special supplemental group that applies to all containers in a pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the pod:\n\n1. The owning GID will be the FSGroup 2. The setgid bit is set (new files created in the volume will be owned by FSGroup) 3. The permission bits are OR'd with rw-rw----\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume. Note that this field cannot be set when spec.os.name is windows.",
# 10c10
# <       "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used.",
# ---
# >       "description": "fsGroupChangePolicy defines behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support fsGroup based ownership(and permissions). It will have no effect on ephemeral volume types such as: secret, configmaps and emptydir. Valid values are \"OnRootMismatch\" and \"Always\". If not specified, \"Always\" is used. Note that this field cannot be set when spec.os.name is windows.",
# 14c14
# <       "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
# ---
# >       "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
# 23c23
# <       "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container.",
# ---
# >       "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows.",
# 29c29
# <       "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container."
# ---
# >       "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in SecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence for that container. Note that this field cannot be set when spec.os.name is windows."
# 33c33
# <       "description": "The seccomp options to use by the containers in this pod."
# ---
# >       "description": "The seccomp options to use by the containers in this pod. Note that this field cannot be set when spec.os.name is windows."
# 36c36
# <       "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
# ---
# >       "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Note that this field cannot be set when spec.os.name is windows.",
# 44c44
# <       "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch.",
# ---
# >       "description": "Sysctls hold a list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. Note that this field cannot be set when spec.os.name is windows.",
# 52c52
# <       "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
# ---
# >       "description": "The Windows specific settings applied to all containers. If unspecified, the options within a container's SecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PodSpec.json 1.23orig/defs/io.k8s.api.core.v1.PodSpec.json
# 31c31,37
# <       "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.",
# ---
# >       "description": "Set DNS policy for the pod. Defaults to \"ClusterFirst\". Valid values are 'ClusterFirstWithHostNet', 'ClusterFirst', 'Default' or 'None'. DNS parameters given in DNSConfig will be merged with the policy selected with DNSPolicy. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to 'ClusterFirstWithHostNet'.\n\nPossible enum values:\n - `\"ClusterFirst\"` indicates that the pod should use cluster DNS first unless hostNetwork is true, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"ClusterFirstWithHostNet\"` indicates that the pod should use cluster DNS first, if it is available, then fall back on the default (as determined by kubelet) DNS settings.\n - `\"Default\"` indicates that the pod should use the default (as determined by kubelet) DNS settings.\n - `\"None\"` indicates that the pod should use empty DNS settings. DNS parameters such as nameservers and search paths should be defined via DNSConfig.",
# >       "enum": [
# >         "ClusterFirst",
# >         "ClusterFirstWithHostNet",
# >         "Default",
# >         "None"
# >       ],
# 39c45
# <       "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is alpha-level and is only honored by servers that enable the EphemeralContainers feature.",
# ---
# >       "description": "List of ephemeral containers run in this pod. Ephemeral containers may be run in an existing pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a pod, and it cannot be modified by updating the pod spec. In order to add an ephemeral container to an existing pod, use the pod's ephemeralcontainers subresource. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.",
# 101a108,111
# >     "os": {
# >       "$ref": "#/definitions/io.k8s.api.core.v1.PodOS",
# >       "description": "Specifies the OS of the containers in the pod. Some pod and container fields are restricted if this is set.\n\nIf the OS field is set to linux, the following fields must be unset: -securityContext.windowsOptions\n\nIf the OS field is set to windows, following fields must be unset: - spec.hostPID - spec.hostIPC - spec.securityContext.seLinuxOptions - spec.securityContext.seccompProfile - spec.securityContext.fsGroup - spec.securityContext.fsGroupChangePolicy - spec.securityContext.sysctls - spec.shareProcessNamespace - spec.securityContext.runAsUser - spec.securityContext.runAsGroup - spec.securityContext.supplementalGroups - spec.containers[*].securityContext.seLinuxOptions - spec.containers[*].securityContext.seccompProfile - spec.containers[*].securityContext.capabilities - spec.containers[*].securityContext.readOnlyRootFilesystem - spec.containers[*].securityContext.privileged - spec.containers[*].securityContext.allowPrivilegeEscalation - spec.containers[*].securityContext.procMount - spec.containers[*].securityContext.runAsUser - spec.containers[*].securityContext.runAsGroup This is an alpha field and requires the IdentifyPodOS feature"
# >     },
# 130c140,145
# <       "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy",
# ---
# >       "description": "Restart policy for all containers within the pod. One of Always, OnFailure, Never. Default to Always. More info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle/#restart-policy\n\nPossible enum values:\n - `\"Always\"`\n - `\"Never\"`\n - `\"OnFailure\"`",
# >       "enum": [
# >         "Always",
# >         "Never",
# >         "OnFailure"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PodStatus.json 1.23orig/defs/io.k8s.api.core.v1.PodStatus.json
# 21c21
# <       "description": "Status for any ephemeral containers that have run in this pod. This field is alpha-level and is only populated by servers that enable the EphemeralContainers feature.",
# ---
# >       "description": "Status for any ephemeral containers that have run in this pod. This field is beta-level and available on clusters that haven't disabled the EphemeralContainers feature gate.",
# 47c47,54
# <       "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase",
# ---
# >       "description": "The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle. The conditions array, the reason and message fields, and the individual container status arrays contain more detail about the pod's status. There are five possible phase values:\n\nPending: The pod has been accepted by the Kubernetes system, but one or more of the container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while. Running: The pod has been bound to a node, and all of the containers have been created. At least one container is still running, or is in the process of starting or restarting. Succeeded: All containers in the pod have terminated in success, and will not be restarted. Failed: All containers in the pod have terminated, and at least one container has terminated in failure. The container either exited with non-zero status or was terminated by the system. Unknown: For some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod.\n\nMore info: https://kubernetes.io/docs/concepts/workloads/pods/pod-lifecycle#pod-phase\n\nPossible enum values:\n - `\"Failed\"` means that all containers in the pod have terminated, and at least one container has terminated in a failure (exited with a non-zero exit code or was stopped by the system).\n - `\"Pending\"` means the pod has been accepted by the system, but one or more of the containers has not been started. This includes time before being bound to a node, as well as time spent pulling images onto the host.\n - `\"Running\"` means the pod has been bound to a node and all of the containers have been started. At least one container is still running or is in the process of being restarted.\n - `\"Succeeded\"` means that all containers in the pod have voluntarily terminated with a container exit code of 0, and the system is not going to restart any of these containers.\n - `\"Unknown\"` means that for some reason the state of the pod could not be obtained, typically due to an error in communicating with the host of the pod. Deprecated: It isn't being set since 2015 (74da3b14b0c0f658b3bb8d2def5094686d0e9095)",
# >       "enum": [
# >         "Failed",
# >         "Pending",
# >         "Running",
# >         "Succeeded",
# >         "Unknown"
# >       ],
# 64c71,76
# <       "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md",
# ---
# >       "description": "The Quality of Service (QOS) classification assigned to the pod based on resource requirements See PodQOSClass type for available QOS classes More info: https://git.k8s.io/community/contributors/design-proposals/node/resource-qos.md\n\nPossible enum values:\n - `\"BestEffort\"` is the BestEffort qos class.\n - `\"Burstable\"` is the Burstable qos class.\n - `\"Guaranteed\"` is the Guaranteed qos class.",
# >       "enum": [
# >         "BestEffort",
# >         "Burstable",
# >         "Guaranteed"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.PortStatus.json 1.23orig/defs/io.k8s.api.core.v1.PortStatus.json
# 13c13,18
# <       "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"",
# ---
# >       "description": "Protocol is the protocol of the service port of which status is recorded here The supported values are: \"TCP\", \"UDP\", \"SCTP\"\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
# >       "enum": [
# >         "SCTP",
# >         "TCP",
# >         "UDP"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Probe.json 1.23orig/defs/io.k8s.api.core.v1.Probe.json
# 6c6
# <       "description": "One and only one of the following should be specified. Exec specifies the action to take."
# ---
# >       "description": "Exec specifies the action to take."
# 12a13,16
# >     "grpc": {
# >       "$ref": "#/definitions/io.k8s.api.core.v1.GRPCAction",
# >       "description": "GRPC specifies an action involving a GRPC port. This is an alpha field and requires enabling GRPCContainerProbe feature gate."
# >     },
# 34c38
# <       "description": "TCPSocket specifies an action involving a TCP port. TCP hooks not yet supported"
# ---
# >       "description": "TCPSocket specifies an action involving a TCP port."
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ScopedResourceSelectorRequirement.json 1.23orig/defs/io.k8s.api.core.v1.ScopedResourceSelectorRequirement.json
# 5c5,11
# <       "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.",
# ---
# >       "description": "Represents a scope's relationship to a set of values. Valid operators are In, NotIn, Exists, DoesNotExist.\n\nPossible enum values:\n - `\"DoesNotExist\"`\n - `\"Exists\"`\n - `\"In\"`\n - `\"NotIn\"`",
# >       "enum": [
# >         "DoesNotExist",
# >         "Exists",
# >         "In",
# >         "NotIn"
# >       ],
# 9c15,23
# <       "description": "The name of the scope that the selector applies to.",
# ---
# >       "description": "The name of the scope that the selector applies to.\n\nPossible enum values:\n - `\"BestEffort\"` Match all pod objects that have best effort quality of service\n - `\"CrossNamespacePodAffinity\"` Match all pod objects that have cross-namespace pod (anti)affinity mentioned. This is a beta feature enabled by the PodAffinityNamespaceSelector feature flag.\n - `\"NotBestEffort\"` Match all pod objects that do not have best effort quality of service\n - `\"NotTerminating\"` Match all pod objects where spec.activeDeadlineSeconds is nil\n - `\"PriorityClass\"` Match all pod objects that have priority class mentioned\n - `\"Terminating\"` Match all pod objects where spec.activeDeadlineSeconds >=0",
# >       "enum": [
# >         "BestEffort",
# >         "CrossNamespacePodAffinity",
# >         "NotBestEffort",
# >         "NotTerminating",
# >         "PriorityClass",
# >         "Terminating"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.SeccompProfile.json 1.23orig/defs/io.k8s.api.core.v1.SeccompProfile.json
# 9c9,14
# <       "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.",
# ---
# >       "description": "type indicates which kind of seccomp profile will be applied. Valid options are:\n\nLocalhost - a profile defined in a file on the node should be used. RuntimeDefault - the container runtime default profile should be used. Unconfined - no profile should be applied.\n\nPossible enum values:\n - `\"Localhost\"` indicates a profile defined in a file on the node should be used. The file's location relative to <kubelet-root-dir>/seccomp.\n - `\"RuntimeDefault\"` represents the default container runtime seccomp profile.\n - `\"Unconfined\"` indicates no seccomp profile is applied (A.K.A. unconfined).",
# >       "enum": [
# >         "Localhost",
# >         "RuntimeDefault",
# >         "Unconfined"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Secret.json 1.23orig/defs/io.k8s.api.core.v1.Secret.json
# 42c42
# <       "description": "Used to facilitate programmatic handling of secret data.",
# ---
# >       "description": "Used to facilitate programmatic handling of secret data. More info: https://kubernetes.io/docs/concepts/configuration/secret/#secret-types",
# diff -r 1.22orig/defs/io.k8s.api.core.v1.SecurityContext.json 1.23orig/defs/io.k8s.api.core.v1.SecurityContext.json
# 5c5
# <       "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN",
# ---
# >       "description": "AllowPrivilegeEscalation controls whether a process can gain more privileges than its parent process. This bool directly controls if the no_new_privs flag will be set on the container process. AllowPrivilegeEscalation is true always when the container is: 1) run as Privileged 2) has CAP_SYS_ADMIN Note that this field cannot be set when spec.os.name is windows.",
# 10c10
# <       "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime."
# ---
# >       "description": "The capabilities to add/drop when running containers. Defaults to the default set of capabilities granted by the container runtime. Note that this field cannot be set when spec.os.name is windows."
# 13c13
# <       "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false.",
# ---
# >       "description": "Run container in privileged mode. Processes in privileged containers are essentially equivalent to root on the host. Defaults to false. Note that this field cannot be set when spec.os.name is windows.",
# 17c17
# <       "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled.",
# ---
# >       "description": "procMount denotes the type of proc mount to use for the containers. The default is DefaultProcMount which uses the container runtime defaults for readonly paths and masked paths. This requires the ProcMountType feature flag to be enabled. Note that this field cannot be set when spec.os.name is windows.",
# 21c21
# <       "description": "Whether this container has a read-only root filesystem. Default is false.",
# ---
# >       "description": "Whether this container has a read-only root filesystem. Default is false. Note that this field cannot be set when spec.os.name is windows.",
# 25c25
# <       "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
# ---
# >       "description": "The GID to run the entrypoint of the container process. Uses runtime default if unset. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
# 34c34
# <       "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence.",
# ---
# >       "description": "The UID to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows.",
# 40c40
# <       "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
# ---
# >       "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in PodSecurityContext.  If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is windows."
# 44c44
# <       "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options."
# ---
# >       "description": "The seccomp options to use by this container. If seccomp options are provided at both the pod & container level, the container options override the pod options. Note that this field cannot be set when spec.os.name is windows."
# 48c48
# <       "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence."
# ---
# >       "description": "The Windows specific settings applied to all containers. If unspecified, the options from the PodSecurityContext will be used. If set in both SecurityContext and PodSecurityContext, the value specified in SecurityContext takes precedence. Note that this field cannot be set when spec.os.name is linux."
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ServicePort.json 1.23orig/defs/io.k8s.api.core.v1.ServicePort.json
# 23c23,28
# <       "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.",
# ---
# >       "description": "The IP protocol for this port. Supports \"TCP\", \"UDP\", and \"SCTP\". Default is TCP.\n\nPossible enum values:\n - `\"SCTP\"` is the SCTP protocol.\n - `\"TCP\"` is the TCP protocol.\n - `\"UDP\"` is the UDP protocol.",
# >       "enum": [
# >         "SCTP",
# >         "TCP",
# >         "UDP"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.ServiceSpec.json 1.23orig/defs/io.k8s.api.core.v1.ServiceSpec.json
# 13c13
# <       "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nUnless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the clusterIP field.  If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order).  These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
# ---
# >       "description": "ClusterIPs is a list of IP addresses assigned to this service, and are usually assigned randomly.  If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the service; otherwise creation of the service will fail. This field may not be changed through updates unless the type field is also being changed to ExternalName (which requires this field to be empty) or the type field is being changed from ExternalName (in which case this field may optionally be specified, as describe above).  Valid values are \"None\", empty string (\"\"), or a valid IP address.  Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required.  Only applies to types ClusterIP, NodePort, and LoadBalancer. If this field is specified when creating a Service of type ExternalName, creation will fail. This field will be wiped when updating a Service to type ExternalName.  If this field is not specified, it will be initialized from the clusterIP field.  If this field is specified, clients must ensure that clusterIPs[0] and clusterIP have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the ipFamilies field. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
# 32c32,36
# <       "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
# ---
# >       "description": "externalTrafficPolicy denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints. \"Local\" preserves the client source IP and avoids a second hop for LoadBalancer and Nodeport type services, but risks potentially imbalanced traffic spreading. \"Cluster\" obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.\n\nPossible enum values:\n - `\"Cluster\"` specifies node-global (legacy) behavior.\n - `\"Local\"` specifies node-local endpoints behavior.",
# >       "enum": [
# >         "Cluster",
# >         "Local"
# >       ],
# 45c49
# <       "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service, and is gated by the \"IPv6DualStack\" feature gate.  This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail.  This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service.  Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services.  This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
# ---
# >       "description": "IPFamilies is a list of IP families (e.g. IPv4, IPv6) assigned to this service. This field is usually assigned automatically based on cluster configuration and the ipFamilyPolicy field. If this field is specified manually, the requested family is available in the cluster, and ipFamilyPolicy allows it, it will be used; otherwise creation of the service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\".  This field only applies to Services of types ClusterIP, NodePort, and LoadBalancer, and does apply to \"headless\" services. This field will be wiped when updating a Service to type ExternalName.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order).  These families must correspond to the values of the clusterIPs field, if specified. Both clusterIPs and ipFamilies are governed by the ipFamilyPolicy field.",
# 53c57
# <       "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service, and is gated by the \"IPv6DualStack\" feature gate.  If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field.  This field will be wiped when updating a service to type ExternalName.",
# ---
# >       "description": "IPFamilyPolicy represents the dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to SingleStack. Services can be \"SingleStack\" (a single IP family), \"PreferDualStack\" (two IP families on dual-stack configured clusters or a single IP family on single-stack clusters), or \"RequireDualStack\" (two IP families on dual-stack configured clusters, otherwise fail). The ipFamilies and clusterIPs fields depend on the value of this field. This field will be wiped when updating a service to type ExternalName.",
# 98c102,106
# <       "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
# ---
# >       "description": "Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies\n\nPossible enum values:\n - `\"ClientIP\"` is the Client IP based.\n - `\"None\"` - no session affinity.",
# >       "enum": [
# >         "ClientIP",
# >         "None"
# >       ],
# 106c114,120
# <       "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types",
# ---
# >       "description": "type determines how the Service is exposed. Defaults to ClusterIP. Valid options are ExternalName, ClusterIP, NodePort, and LoadBalancer. \"ClusterIP\" allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object or EndpointSlice objects. If clusterIP is \"None\", no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a virtual IP. \"NodePort\" builds on ClusterIP and allocates a port on every node which routes to the same endpoints as the clusterIP. \"LoadBalancer\" builds on NodePort and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the clusterIP. \"ExternalName\" aliases this service to the specified externalName. Several other fields do not apply to ExternalName services. More info: https://kubernetes.io/docs/concepts/services-networking/service/#publishing-services-service-types\n\nPossible enum values:\n - `\"ClusterIP\"` means a service will only be accessible inside the cluster, via the cluster IP.\n - `\"ExternalName\"` means a service consists of only a reference to an external name that kubedns or equivalent will return as a CNAME record, with no exposing or proxying of any pods involved.\n - `\"LoadBalancer\"` means a service will be exposed via an external load balancer (if the cloud provider supports it), in addition to 'NodePort' type.\n - `\"NodePort\"` means a service will be exposed on one port of every node, in addition to 'ClusterIP' type.",
# >       "enum": [
# >         "ClusterIP",
# >         "ExternalName",
# >         "LoadBalancer",
# >         "NodePort"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Taint.json 1.23orig/defs/io.k8s.api.core.v1.Taint.json
# 5c5,10
# <       "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.",
# ---
# >       "description": "Required. The effect of the taint on pods that do not tolerate the taint. Valid effects are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
# >       "enum": [
# >         "NoExecute",
# >         "NoSchedule",
# >         "PreferNoSchedule"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Toleration.json 1.23orig/defs/io.k8s.api.core.v1.Toleration.json
# 5c5,10
# <       "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.",
# ---
# >       "description": "Effect indicates the taint effect to match. Empty means match all taint effects. When specified, allowed values are NoSchedule, PreferNoSchedule and NoExecute.\n\nPossible enum values:\n - `\"NoExecute\"` Evict any already-running pods that do not tolerate the taint. Currently enforced by NodeController.\n - `\"NoSchedule\"` Do not allow new pods to schedule onto the node unless they tolerate the taint, but allow all pods submitted to Kubelet without going through the scheduler to start, and allow all already-running pods to continue running. Enforced by the scheduler.\n - `\"PreferNoSchedule\"` Like TaintEffectNoSchedule, but the scheduler tries not to schedule new pods onto the node, rather than prohibiting new pods from scheduling onto the node entirely. Enforced by the scheduler.",
# >       "enum": [
# >         "NoExecute",
# >         "NoSchedule",
# >         "PreferNoSchedule"
# >       ],
# 13c18,22
# <       "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.",
# ---
# >       "description": "Operator represents a key's relationship to the value. Valid operators are Exists and Equal. Defaults to Equal. Exists is equivalent to wildcard for value, so that a pod can tolerate all taints of a particular category.\n\nPossible enum values:\n - `\"Equal\"`\n - `\"Exists\"`",
# >       "enum": [
# >         "Equal",
# >         "Exists"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.TopologySpreadConstraint.json 1.23orig/defs/io.k8s.api.core.v1.TopologySpreadConstraint.json
# 18c18,22
# <       "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assigment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.",
# ---
# >       "description": "WhenUnsatisfiable indicates how to deal with a pod if it doesn't satisfy the spread constraint. - DoNotSchedule (default) tells the scheduler not to schedule it. - ScheduleAnyway tells the scheduler to schedule the pod in any location,\n  but giving higher precedence to topologies that would help reduce the\n  skew.\nA constraint is considered \"Unsatisfiable\" for an incoming pod if and only if every possible node assignment for that pod would violate \"MaxSkew\" on some topology. For example, in a 3-zone cluster, MaxSkew is set to 1, and pods with the same labelSelector spread as 3/1/1: | zone1 | zone2 | zone3 | | P P P |   P   |   P   | If WhenUnsatisfiable is set to DoNotSchedule, incoming pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as ActualSkew(2-1) on zone2(zone3) satisfies MaxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it *more* imbalanced. It's a required field.\n\nPossible enum values:\n - `\"DoNotSchedule\"` instructs the scheduler not to schedule the pod when constraints are not satisfied.\n - `\"ScheduleAnyway\"` instructs the scheduler to schedule the pod even if constraints are not satisfied.",
# >       "enum": [
# >         "DoNotSchedule",
# >         "ScheduleAnyway"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.core.v1.Volume.json 1.23orig/defs/io.k8s.api.core.v1.Volume.json
# 42c42
# <       "description": "Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time.\n\nThis is a beta feature and only available when the GenericEphemeralVolume feature gate is enabled."
# ---
# >       "description": "Ephemeral represents a volume that is handled by a cluster storage driver. The volume's lifecycle is tied to the pod that defines it - it will be created before the pod starts, and deleted when the pod is removed.\n\nUse this if: a) the volume is only needed while the pod runs, b) features of normal volumes like restoring from snapshot or capacity\n   tracking are needed,\nc) the storage driver is specified through a storage class, and d) the storage driver supports dynamic volume provisioning through\n   a PersistentVolumeClaim (see EphemeralVolumeSource for more\n   information on the connection between this volume type\n   and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA pod can use both types of ephemeral volumes and persistent volumes at the same time."
# diff -r 1.22orig/defs/io.k8s.api.discovery.v1.EndpointSlice.json 1.23orig/defs/io.k8s.api.discovery.v1.EndpointSlice.json
# 5c5,10
# <       "description": "addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.",
# ---
# >       "description": "addressType specifies the type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This field is immutable after creation. The following address types are currently supported: * IPv4: Represents an IPv4 Address. * IPv6: Represents an IPv6 Address. * FQDN: Represents a Fully Qualified Domain Name.\n\nPossible enum values:\n - `\"FQDN\"` represents a FQDN.\n - `\"IPv4\"` represents an IPv4 Address.\n - `\"IPv6\"` represents an IPv6 Address.",
# >       "enum": [
# >         "FQDN",
# >         "IPv4",
# >         "IPv6"
# >       ],
# diff -r 1.22orig/defs/io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule.json 1.23orig/defs/io.k8s.api.flowcontrol.v1beta1.ResourcePolicyRule.json
# 2c2
# <   "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) least one member of namespaces matches the request.",
# ---
# >   "description": "ResourcePolicyRule is a predicate that matches some resource requests, testing the request's verb and the target resource. A ResourcePolicyRule matches a resource request if and only if: (a) at least one member of verbs matches the request, (b) at least one member of apiGroups matches the request, (c) at least one member of resources matches the request, and (d) either (d1) the request does not specify a namespace (i.e., `Namespace==\"\"`) and clusterScope is true or (d2) the request specifies a namespace and least one member of namespaces matches the request's namespace.",
# diff -r 1.22orig/defs/io.k8s.api.networking.v1.IngressClassParametersReference.json 1.23orig/defs/io.k8s.api.networking.v1.IngressClassParametersReference.json
# 21c21
# <       "description": "Scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\". Field can be enabled with IngressClassNamespacedParams feature gate.",
# ---
# >       "description": "Scope represents if this refers to a cluster or namespace scoped resource. This may be set to \"Cluster\" (default) or \"Namespace\".",
# diff -r 1.22orig/defs/io.k8s.api.rbac.v1.PolicyRule.json 1.23orig/defs/io.k8s.api.rbac.v1.PolicyRule.json
# 33c33
# <       "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds and AttributeRestrictions contained in this rule. '*' represents all verbs.",
# ---
# >       "description": "Verbs is a list of Verbs that apply to ALL the ResourceKinds contained in this rule. '*' represents all verbs.",
# diff -r 1.22orig/defs/io.k8s.api.storage.v1.CSIDriverSpec.json 1.23orig/defs/io.k8s.api.storage.v1.CSIDriverSpec.json
# 9c9
# <       "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details. This field is beta, and is only honored by servers that enable the CSIVolumeFSGroupPolicy feature gate.\n\nThis field is immutable.\n\nDefaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.",
# ---
# >       "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific FSGroupPolicy values for additional details.\n\nThis field is immutable.\n\nDefaults to ReadWriteOnceWithFSType, which will examine each volume to determine if Kubernetes should modify ownership and permissions of the volume. With the default policy the defined fsGroup will only be applied if a fstype is defined and the volume's access mode contains ReadWriteOnce.",
# 21c21
# <       "description": "If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis field is immutable.\n\nThis is a beta field and only available when the CSIStorageCapacity feature is enabled. The default is false.",
# ---
# >       "description": "If set to true, storageCapacity indicates that the CSI volume driver wants pod scheduling to consider the storage capacity that the driver deployment will report by creating CSIStorageCapacity objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable CSIStorageCapacity object.\n\nAlternatively, the driver can be deployed with the field unset or false and it can be flipped later when storage capacity information has been published.\n\nThis field was immutable in Kubernetes <= 1.22 and now is mutable.\n\nThis is a beta field and only available when the CSIStorageCapacity feature is enabled. The default is false.",
# diff -r 1.22orig/defs/io.k8s.api.storage.v1.StorageClass.json 1.23orig/defs/io.k8s.api.storage.v1.StorageClass.json
# 74c74
# < }
# ---
# > }
# \ No newline at end of file
# diff -r 1.22orig/defs/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions.json 1.23orig/defs/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions.json
# 126a127,131
# >       "version": "v2"
# >     },
# >     {
# >       "group": "autoscaling",
# >       "kind": "DeleteOptions",
# 197a203,207
# >     },
# >     {
# >       "group": "flowcontrol.apiserver.k8s.io",
# >       "kind": "DeleteOptions",
# >       "version": "v1beta2"
# diff -r 1.22orig/defs/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent.json 1.23orig/defs/io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent.json
# 105a106,110
# >       "version": "v2"
# >     },
# >     {
# >       "group": "autoscaling",
# >       "kind": "WatchEvent",
# 176a182,186
# >     },
# >     {
# >       "group": "flowcontrol.apiserver.k8s.io",
# >       "kind": "WatchEvent",
# >       "version": "v1beta2"
# diff -r 1.22orig/ops/connectCoreV1GetNamespacedPodExec.json 1.23orig/ops/connectCoreV1GetNamespacedPodExec.json
# 34c34
# <       "description": "Redirect the standard error stream of the pod for this call. Defaults to true.",
# ---
# >       "description": "Redirect the standard error stream of the pod for this call.",
# 48c48
# <       "description": "Redirect the standard output stream of the pod for this call. Defaults to true.",
# ---
# >       "description": "Redirect the standard output stream of the pod for this call.",
# diff -r 1.22orig/ops/createAdmissionregistrationV1MutatingWebhookConfiguration.json 1.23orig/ops/createAdmissionregistrationV1MutatingWebhookConfiguration.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createAdmissionregistrationV1ValidatingWebhookConfiguration.json 1.23orig/ops/createAdmissionregistrationV1ValidatingWebhookConfiguration.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createApiextensionsV1CustomResourceDefinition.json 1.23orig/ops/createApiextensionsV1CustomResourceDefinition.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createApiregistrationV1APIService.json 1.23orig/ops/createApiregistrationV1APIService.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createAppsV1NamespacedControllerRevision.json 1.23orig/ops/createAppsV1NamespacedControllerRevision.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAppsV1NamespacedDaemonSet.json 1.23orig/ops/createAppsV1NamespacedDaemonSet.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAppsV1NamespacedDeployment.json 1.23orig/ops/createAppsV1NamespacedDeployment.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAppsV1NamespacedReplicaSet.json 1.23orig/ops/createAppsV1NamespacedReplicaSet.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAppsV1NamespacedStatefulSet.json 1.23orig/ops/createAppsV1NamespacedStatefulSet.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAutoscalingV1NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/createAutoscalingV1NamespacedHorizontalPodAutoscaler.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createBatchV1NamespacedCronJob.json 1.23orig/ops/createBatchV1NamespacedCronJob.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createBatchV1NamespacedJob.json 1.23orig/ops/createBatchV1NamespacedJob.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createBatchV1beta1NamespacedCronJob.json 1.23orig/ops/createBatchV1beta1NamespacedCronJob.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCertificatesV1CertificateSigningRequest.json 1.23orig/ops/createCertificatesV1CertificateSigningRequest.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createCoordinationV1NamespacedLease.json 1.23orig/ops/createCoordinationV1NamespacedLease.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1Namespace.json 1.23orig/ops/createCoreV1Namespace.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createCoreV1NamespacedConfigMap.json 1.23orig/ops/createCoreV1NamespacedConfigMap.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedEndpoints.json 1.23orig/ops/createCoreV1NamespacedEndpoints.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedEvent.json 1.23orig/ops/createCoreV1NamespacedEvent.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedLimitRange.json 1.23orig/ops/createCoreV1NamespacedLimitRange.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedPersistentVolumeClaim.json 1.23orig/ops/createCoreV1NamespacedPersistentVolumeClaim.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedPod.json 1.23orig/ops/createCoreV1NamespacedPod.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedPodTemplate.json 1.23orig/ops/createCoreV1NamespacedPodTemplate.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedReplicationController.json 1.23orig/ops/createCoreV1NamespacedReplicationController.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedResourceQuota.json 1.23orig/ops/createCoreV1NamespacedResourceQuota.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedSecret.json 1.23orig/ops/createCoreV1NamespacedSecret.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedService.json 1.23orig/ops/createCoreV1NamespacedService.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1NamespacedServiceAccount.json 1.23orig/ops/createCoreV1NamespacedServiceAccount.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createCoreV1Node.json 1.23orig/ops/createCoreV1Node.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createCoreV1PersistentVolume.json 1.23orig/ops/createCoreV1PersistentVolume.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createDiscoveryV1NamespacedEndpointSlice.json 1.23orig/ops/createDiscoveryV1NamespacedEndpointSlice.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createDiscoveryV1beta1NamespacedEndpointSlice.json 1.23orig/ops/createDiscoveryV1beta1NamespacedEndpointSlice.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createEventsV1NamespacedEvent.json 1.23orig/ops/createEventsV1NamespacedEvent.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createEventsV1beta1NamespacedEvent.json 1.23orig/ops/createEventsV1beta1NamespacedEvent.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createFlowcontrolApiserverV1beta1FlowSchema.json 1.23orig/ops/createFlowcontrolApiserverV1beta1FlowSchema.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createFlowcontrolApiserverV1beta1PriorityLevelConfiguration.json 1.23orig/ops/createFlowcontrolApiserverV1beta1PriorityLevelConfiguration.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createInternalApiserverV1alpha1StorageVersion.json 1.23orig/ops/createInternalApiserverV1alpha1StorageVersion.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createNetworkingV1IngressClass.json 1.23orig/ops/createNetworkingV1IngressClass.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createNetworkingV1NamespacedIngress.json 1.23orig/ops/createNetworkingV1NamespacedIngress.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createNetworkingV1NamespacedNetworkPolicy.json 1.23orig/ops/createNetworkingV1NamespacedNetworkPolicy.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createNodeV1RuntimeClass.json 1.23orig/ops/createNodeV1RuntimeClass.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createNodeV1alpha1RuntimeClass.json 1.23orig/ops/createNodeV1alpha1RuntimeClass.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createNodeV1beta1RuntimeClass.json 1.23orig/ops/createNodeV1beta1RuntimeClass.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createPolicyV1NamespacedPodDisruptionBudget.json 1.23orig/ops/createPolicyV1NamespacedPodDisruptionBudget.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createPolicyV1beta1NamespacedPodDisruptionBudget.json 1.23orig/ops/createPolicyV1beta1NamespacedPodDisruptionBudget.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createPolicyV1beta1PodSecurityPolicy.json 1.23orig/ops/createPolicyV1beta1PodSecurityPolicy.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createRbacAuthorizationV1ClusterRole.json 1.23orig/ops/createRbacAuthorizationV1ClusterRole.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createRbacAuthorizationV1ClusterRoleBinding.json 1.23orig/ops/createRbacAuthorizationV1ClusterRoleBinding.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createRbacAuthorizationV1NamespacedRole.json 1.23orig/ops/createRbacAuthorizationV1NamespacedRole.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createRbacAuthorizationV1NamespacedRoleBinding.json 1.23orig/ops/createRbacAuthorizationV1NamespacedRoleBinding.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createSchedulingV1PriorityClass.json 1.23orig/ops/createSchedulingV1PriorityClass.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createStorageV1CSIDriver.json 1.23orig/ops/createStorageV1CSIDriver.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createStorageV1CSINode.json 1.23orig/ops/createStorageV1CSINode.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createStorageV1StorageClass.json 1.23orig/ops/createStorageV1StorageClass.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createStorageV1VolumeAttachment.json 1.23orig/ops/createStorageV1VolumeAttachment.json
# 20a21,27
# >     },
# >     {
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# diff -r 1.22orig/ops/createStorageV1alpha1NamespacedCSIStorageCapacity.json 1.23orig/ops/createStorageV1alpha1NamespacedCSIStorageCapacity.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/createStorageV1beta1NamespacedCSIStorageCapacity.json 1.23orig/ops/createStorageV1beta1NamespacedCSIStorageCapacity.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/deleteCoreV1NamespacedService.json 1.23orig/ops/deleteCoreV1NamespacedService.json
# 52c52
# <         "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
# ---
# >         "$ref": "#/definitions/io.k8s.api.core.v1.Service"
# 58c58
# <         "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
# ---
# >         "$ref": "#/definitions/io.k8s.api.core.v1.Service"
# diff -r 1.22orig/ops/patchAdmissionregistrationV1MutatingWebhookConfiguration.json 1.23orig/ops/patchAdmissionregistrationV1MutatingWebhookConfiguration.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAdmissionregistrationV1ValidatingWebhookConfiguration.json 1.23orig/ops/patchAdmissionregistrationV1ValidatingWebhookConfiguration.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchApiextensionsV1CustomResourceDefinition.json 1.23orig/ops/patchApiextensionsV1CustomResourceDefinition.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchApiextensionsV1CustomResourceDefinitionStatus.json 1.23orig/ops/patchApiextensionsV1CustomResourceDefinitionStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchApiregistrationV1APIService.json 1.23orig/ops/patchApiregistrationV1APIService.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchApiregistrationV1APIServiceStatus.json 1.23orig/ops/patchApiregistrationV1APIServiceStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedControllerRevision.json 1.23orig/ops/patchAppsV1NamespacedControllerRevision.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedDaemonSet.json 1.23orig/ops/patchAppsV1NamespacedDaemonSet.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedDaemonSetStatus.json 1.23orig/ops/patchAppsV1NamespacedDaemonSetStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedDeployment.json 1.23orig/ops/patchAppsV1NamespacedDeployment.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedDeploymentScale.json 1.23orig/ops/patchAppsV1NamespacedDeploymentScale.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedDeploymentStatus.json 1.23orig/ops/patchAppsV1NamespacedDeploymentStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedReplicaSet.json 1.23orig/ops/patchAppsV1NamespacedReplicaSet.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedReplicaSetScale.json 1.23orig/ops/patchAppsV1NamespacedReplicaSetScale.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedReplicaSetStatus.json 1.23orig/ops/patchAppsV1NamespacedReplicaSetStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedStatefulSet.json 1.23orig/ops/patchAppsV1NamespacedStatefulSet.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedStatefulSetScale.json 1.23orig/ops/patchAppsV1NamespacedStatefulSetScale.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAppsV1NamespacedStatefulSetStatus.json 1.23orig/ops/patchAppsV1NamespacedStatefulSetStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAutoscalingV1NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/patchAutoscalingV1NamespacedHorizontalPodAutoscaler.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus.json 1.23orig/ops/patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
>     {
# diff -r 1.22orig/ops/patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.json 1.23orig/ops/patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.json 1.23orig/ops/patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchBatchV1NamespacedCronJob.json 1.23orig/ops/patchBatchV1NamespacedCronJob.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchBatchV1NamespacedCronJobStatus.json 1.23orig/ops/patchBatchV1NamespacedCronJobStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchBatchV1NamespacedJob.json 1.23orig/ops/patchBatchV1NamespacedJob.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchBatchV1NamespacedJobStatus.json 1.23orig/ops/patchBatchV1NamespacedJobStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchBatchV1beta1NamespacedCronJob.json 1.23orig/ops/patchBatchV1beta1NamespacedCronJob.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchBatchV1beta1NamespacedCronJobStatus.json 1.23orig/ops/patchBatchV1beta1NamespacedCronJobStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCertificatesV1CertificateSigningRequest.json 1.23orig/ops/patchCertificatesV1CertificateSigningRequest.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCertificatesV1CertificateSigningRequestApproval.json 1.23orig/ops/patchCertificatesV1CertificateSigningRequestApproval.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCertificatesV1CertificateSigningRequestStatus.json 1.23orig/ops/patchCertificatesV1CertificateSigningRequestStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoordinationV1NamespacedLease.json 1.23orig/ops/patchCoordinationV1NamespacedLease.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1Namespace.json 1.23orig/ops/patchCoreV1Namespace.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespaceStatus.json 1.23orig/ops/patchCoreV1NamespaceStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedConfigMap.json 1.23orig/ops/patchCoreV1NamespacedConfigMap.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedEndpoints.json 1.23orig/ops/patchCoreV1NamespacedEndpoints.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedEvent.json 1.23orig/ops/patchCoreV1NamespacedEvent.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedLimitRange.json 1.23orig/ops/patchCoreV1NamespacedLimitRange.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedPersistentVolumeClaim.json 1.23orig/ops/patchCoreV1NamespacedPersistentVolumeClaim.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedPersistentVolumeClaimStatus.json 1.23orig/ops/patchCoreV1NamespacedPersistentVolumeClaimStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedPod.json 1.23orig/ops/patchCoreV1NamespacedPod.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedPodEphemeralcontainers.json 1.23orig/ops/patchCoreV1NamespacedPodEphemeralcontainers.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedPodStatus.json 1.23orig/ops/patchCoreV1NamespacedPodStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedPodTemplate.json 1.23orig/ops/patchCoreV1NamespacedPodTemplate.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedReplicationController.json 1.23orig/ops/patchCoreV1NamespacedReplicationController.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedReplicationControllerScale.json 1.23orig/ops/patchCoreV1NamespacedReplicationControllerScale.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedReplicationControllerStatus.json 1.23orig/ops/patchCoreV1NamespacedReplicationControllerStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedResourceQuota.json 1.23orig/ops/patchCoreV1NamespacedResourceQuota.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedResourceQuotaStatus.json 1.23orig/ops/patchCoreV1NamespacedResourceQuotaStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedSecret.json 1.23orig/ops/patchCoreV1NamespacedSecret.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedService.json 1.23orig/ops/patchCoreV1NamespacedService.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedServiceAccount.json 1.23orig/ops/patchCoreV1NamespacedServiceAccount.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NamespacedServiceStatus.json 1.23orig/ops/patchCoreV1NamespacedServiceStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1Node.json 1.23orig/ops/patchCoreV1Node.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1NodeStatus.json 1.23orig/ops/patchCoreV1NodeStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1PersistentVolume.json 1.23orig/ops/patchCoreV1PersistentVolume.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchCoreV1PersistentVolumeStatus.json 1.23orig/ops/patchCoreV1PersistentVolumeStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchDiscoveryV1NamespacedEndpointSlice.json 1.23orig/ops/patchDiscoveryV1NamespacedEndpointSlice.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchDiscoveryV1beta1NamespacedEndpointSlice.json 1.23orig/ops/patchDiscoveryV1beta1NamespacedEndpointSlice.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchEventsV1NamespacedEvent.json 1.23orig/ops/patchEventsV1NamespacedEvent.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchEventsV1beta1NamespacedEvent.json 1.23orig/ops/patchEventsV1beta1NamespacedEvent.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchFlowcontrolApiserverV1beta1FlowSchema.json 1.23orig/ops/patchFlowcontrolApiserverV1beta1FlowSchema.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchFlowcontrolApiserverV1beta1FlowSchemaStatus.json 1.23orig/ops/patchFlowcontrolApiserverV1beta1FlowSchemaStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchFlowcontrolApiserverV1beta1PriorityLevelConfiguration.json 1.23orig/ops/patchFlowcontrolApiserverV1beta1PriorityLevelConfiguration.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus.json 1.23orig/ops/patchFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchInternalApiserverV1alpha1StorageVersion.json 1.23orig/ops/patchInternalApiserverV1alpha1StorageVersion.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchInternalApiserverV1alpha1StorageVersionStatus.json 1.23orig/ops/patchInternalApiserverV1alpha1StorageVersionStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNetworkingV1IngressClass.json 1.23orig/ops/patchNetworkingV1IngressClass.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNetworkingV1NamespacedIngress.json 1.23orig/ops/patchNetworkingV1NamespacedIngress.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNetworkingV1NamespacedIngressStatus.json 1.23orig/ops/patchNetworkingV1NamespacedIngressStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNetworkingV1NamespacedNetworkPolicy.json 1.23orig/ops/patchNetworkingV1NamespacedNetworkPolicy.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNodeV1RuntimeClass.json 1.23orig/ops/patchNodeV1RuntimeClass.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNodeV1alpha1RuntimeClass.json 1.23orig/ops/patchNodeV1alpha1RuntimeClass.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchNodeV1beta1RuntimeClass.json 1.23orig/ops/patchNodeV1beta1RuntimeClass.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchPolicyV1NamespacedPodDisruptionBudget.json 1.23orig/ops/patchPolicyV1NamespacedPodDisruptionBudget.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchPolicyV1NamespacedPodDisruptionBudgetStatus.json 1.23orig/ops/patchPolicyV1NamespacedPodDisruptionBudgetStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchPolicyV1beta1NamespacedPodDisruptionBudget.json 1.23orig/ops/patchPolicyV1beta1NamespacedPodDisruptionBudget.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus.json 1.23orig/ops/patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchPolicyV1beta1PodSecurityPolicy.json 1.23orig/ops/patchPolicyV1beta1PodSecurityPolicy.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchRbacAuthorizationV1ClusterRole.json 1.23orig/ops/patchRbacAuthorizationV1ClusterRole.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchRbacAuthorizationV1ClusterRoleBinding.json 1.23orig/ops/patchRbacAuthorizationV1ClusterRoleBinding.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchRbacAuthorizationV1NamespacedRole.json 1.23orig/ops/patchRbacAuthorizationV1NamespacedRole.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchRbacAuthorizationV1NamespacedRoleBinding.json 1.23orig/ops/patchRbacAuthorizationV1NamespacedRoleBinding.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchSchedulingV1PriorityClass.json 1.23orig/ops/patchSchedulingV1PriorityClass.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1CSIDriver.json 1.23orig/ops/patchStorageV1CSIDriver.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1CSINode.json 1.23orig/ops/patchStorageV1CSINode.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1StorageClass.json 1.23orig/ops/patchStorageV1StorageClass.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1VolumeAttachment.json 1.23orig/ops/patchStorageV1VolumeAttachment.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1VolumeAttachmentStatus.json 1.23orig/ops/patchStorageV1VolumeAttachmentStatus.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1alpha1NamespacedCSIStorageCapacity.json 1.23orig/ops/patchStorageV1alpha1NamespacedCSIStorageCapacity.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/patchStorageV1beta1NamespacedCSIStorageCapacity.json 1.23orig/ops/patchStorageV1beta1NamespacedCSIStorageCapacity.json
# 25a26,32
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAdmissionregistrationV1MutatingWebhookConfiguration.json 1.23orig/ops/replaceAdmissionregistrationV1MutatingWebhookConfiguration.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAdmissionregistrationV1ValidatingWebhookConfiguration.json 1.23orig/ops/replaceAdmissionregistrationV1ValidatingWebhookConfiguration.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceApiextensionsV1CustomResourceDefinition.json 1.23orig/ops/replaceApiextensionsV1CustomResourceDefinition.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceApiextensionsV1CustomResourceDefinitionStatus.json 1.23orig/ops/replaceApiextensionsV1CustomResourceDefinitionStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceApiregistrationV1APIService.json 1.23orig/ops/replaceApiregistrationV1APIService.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceApiregistrationV1APIServiceStatus.json 1.23orig/ops/replaceApiregistrationV1APIServiceStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedControllerRevision.json 1.23orig/ops/replaceAppsV1NamespacedControllerRevision.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedDaemonSet.json 1.23orig/ops/replaceAppsV1NamespacedDaemonSet.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedDaemonSetStatus.json 1.23orig/ops/replaceAppsV1NamespacedDaemonSetStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedDeployment.json 1.23orig/ops/replaceAppsV1NamespacedDeployment.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedDeploymentScale.json 1.23orig/ops/replaceAppsV1NamespacedDeploymentScale.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedDeploymentStatus.json 1.23orig/ops/replaceAppsV1NamespacedDeploymentStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedReplicaSet.json 1.23orig/ops/replaceAppsV1NamespacedReplicaSet.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedReplicaSetScale.json 1.23orig/ops/replaceAppsV1NamespacedReplicaSetScale.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedReplicaSetStatus.json 1.23orig/ops/replaceAppsV1NamespacedReplicaSetStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedStatefulSet.json 1.23orig/ops/replaceAppsV1NamespacedStatefulSet.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedStatefulSetScale.json 1.23orig/ops/replaceAppsV1NamespacedStatefulSetScale.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAppsV1NamespacedStatefulSetStatus.json 1.23orig/ops/replaceAppsV1NamespacedStatefulSetStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAutoscalingV1NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/replaceAutoscalingV1NamespacedHorizontalPodAutoscaler.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus.json 1.23orig/ops/replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.json 1.23orig/ops/replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.json 1.23orig/ops/replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.json 1.23orig/ops/replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceBatchV1NamespacedCronJob.json 1.23orig/ops/replaceBatchV1NamespacedCronJob.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceBatchV1NamespacedCronJobStatus.json 1.23orig/ops/replaceBatchV1NamespacedCronJobStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceBatchV1NamespacedJob.json 1.23orig/ops/replaceBatchV1NamespacedJob.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceBatchV1NamespacedJobStatus.json 1.23orig/ops/replaceBatchV1NamespacedJobStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceBatchV1beta1NamespacedCronJob.json 1.23orig/ops/replaceBatchV1beta1NamespacedCronJob.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceBatchV1beta1NamespacedCronJobStatus.json 1.23orig/ops/replaceBatchV1beta1NamespacedCronJobStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCertificatesV1CertificateSigningRequest.json 1.23orig/ops/replaceCertificatesV1CertificateSigningRequest.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCertificatesV1CertificateSigningRequestApproval.json 1.23orig/ops/replaceCertificatesV1CertificateSigningRequestApproval.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCertificatesV1CertificateSigningRequestStatus.json 1.23orig/ops/replaceCertificatesV1CertificateSigningRequestStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoordinationV1NamespacedLease.json 1.23orig/ops/replaceCoordinationV1NamespacedLease.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1Namespace.json 1.23orig/ops/replaceCoreV1Namespace.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespaceFinalize.json 1.23orig/ops/replaceCoreV1NamespaceFinalize.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespaceStatus.json 1.23orig/ops/replaceCoreV1NamespaceStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedConfigMap.json 1.23orig/ops/replaceCoreV1NamespacedConfigMap.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedEndpoints.json 1.23orig/ops/replaceCoreV1NamespacedEndpoints.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedEvent.json 1.23orig/ops/replaceCoreV1NamespacedEvent.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedLimitRange.json 1.23orig/ops/replaceCoreV1NamespacedLimitRange.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedPersistentVolumeClaim.json 1.23orig/ops/replaceCoreV1NamespacedPersistentVolumeClaim.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedPersistentVolumeClaimStatus.json 1.23orig/ops/replaceCoreV1NamespacedPersistentVolumeClaimStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedPod.json 1.23orig/ops/replaceCoreV1NamespacedPod.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedPodEphemeralcontainers.json 1.23orig/ops/replaceCoreV1NamespacedPodEphemeralcontainers.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedPodStatus.json 1.23orig/ops/replaceCoreV1NamespacedPodStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedPodTemplate.json 1.23orig/ops/replaceCoreV1NamespacedPodTemplate.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedReplicationController.json 1.23orig/ops/replaceCoreV1NamespacedReplicationController.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedReplicationControllerScale.json 1.23orig/ops/replaceCoreV1NamespacedReplicationControllerScale.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedReplicationControllerStatus.json 1.23orig/ops/replaceCoreV1NamespacedReplicationControllerStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedResourceQuota.json 1.23orig/ops/replaceCoreV1NamespacedResourceQuota.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedResourceQuotaStatus.json 1.23orig/ops/replaceCoreV1NamespacedResourceQuotaStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedSecret.json 1.23orig/ops/replaceCoreV1NamespacedSecret.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedService.json 1.23orig/ops/replaceCoreV1NamespacedService.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedServiceAccount.json 1.23orig/ops/replaceCoreV1NamespacedServiceAccount.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NamespacedServiceStatus.json 1.23orig/ops/replaceCoreV1NamespacedServiceStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1Node.json 1.23orig/ops/replaceCoreV1Node.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1NodeStatus.json 1.23orig/ops/replaceCoreV1NodeStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1PersistentVolume.json 1.23orig/ops/replaceCoreV1PersistentVolume.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceCoreV1PersistentVolumeStatus.json 1.23orig/ops/replaceCoreV1PersistentVolumeStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceDiscoveryV1NamespacedEndpointSlice.json 1.23orig/ops/replaceDiscoveryV1NamespacedEndpointSlice.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceDiscoveryV1beta1NamespacedEndpointSlice.json 1.23orig/ops/replaceDiscoveryV1beta1NamespacedEndpointSlice.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceEventsV1NamespacedEvent.json 1.23orig/ops/replaceEventsV1NamespacedEvent.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceEventsV1beta1NamespacedEvent.json 1.23orig/ops/replaceEventsV1beta1NamespacedEvent.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceFlowcontrolApiserverV1beta1FlowSchema.json 1.23orig/ops/replaceFlowcontrolApiserverV1beta1FlowSchema.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceFlowcontrolApiserverV1beta1FlowSchemaStatus.json 1.23orig/ops/replaceFlowcontrolApiserverV1beta1FlowSchemaStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceFlowcontrolApiserverV1beta1PriorityLevelConfiguration.json 1.23orig/ops/replaceFlowcontrolApiserverV1beta1PriorityLevelConfiguration.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus.json 1.23orig/ops/replaceFlowcontrolApiserverV1beta1PriorityLevelConfigurationStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceInternalApiserverV1alpha1StorageVersion.json 1.23orig/ops/replaceInternalApiserverV1alpha1StorageVersion.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceInternalApiserverV1alpha1StorageVersionStatus.json 1.23orig/ops/replaceInternalApiserverV1alpha1StorageVersionStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNetworkingV1IngressClass.json 1.23orig/ops/replaceNetworkingV1IngressClass.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNetworkingV1NamespacedIngress.json 1.23orig/ops/replaceNetworkingV1NamespacedIngress.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNetworkingV1NamespacedIngressStatus.json 1.23orig/ops/replaceNetworkingV1NamespacedIngressStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNetworkingV1NamespacedNetworkPolicy.json 1.23orig/ops/replaceNetworkingV1NamespacedNetworkPolicy.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNodeV1RuntimeClass.json 1.23orig/ops/replaceNodeV1RuntimeClass.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNodeV1alpha1RuntimeClass.json 1.23orig/ops/replaceNodeV1alpha1RuntimeClass.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceNodeV1beta1RuntimeClass.json 1.23orig/ops/replaceNodeV1beta1RuntimeClass.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replacePolicyV1NamespacedPodDisruptionBudget.json 1.23orig/ops/replacePolicyV1NamespacedPodDisruptionBudget.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replacePolicyV1NamespacedPodDisruptionBudgetStatus.json 1.23orig/ops/replacePolicyV1NamespacedPodDisruptionBudgetStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replacePolicyV1beta1NamespacedPodDisruptionBudget.json 1.23orig/ops/replacePolicyV1beta1NamespacedPodDisruptionBudget.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus.json 1.23orig/ops/replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replacePolicyV1beta1PodSecurityPolicy.json 1.23orig/ops/replacePolicyV1beta1PodSecurityPolicy.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceRbacAuthorizationV1ClusterRole.json 1.23orig/ops/replaceRbacAuthorizationV1ClusterRole.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceRbacAuthorizationV1ClusterRoleBinding.json 1.23orig/ops/replaceRbacAuthorizationV1ClusterRoleBinding.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceRbacAuthorizationV1NamespacedRole.json 1.23orig/ops/replaceRbacAuthorizationV1NamespacedRole.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceRbacAuthorizationV1NamespacedRoleBinding.json 1.23orig/ops/replaceRbacAuthorizationV1NamespacedRoleBinding.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceSchedulingV1PriorityClass.json 1.23orig/ops/replaceSchedulingV1PriorityClass.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1CSIDriver.json 1.23orig/ops/replaceStorageV1CSIDriver.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1CSINode.json 1.23orig/ops/replaceStorageV1CSINode.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1StorageClass.json 1.23orig/ops/replaceStorageV1StorageClass.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1VolumeAttachment.json 1.23orig/ops/replaceStorageV1VolumeAttachment.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1VolumeAttachmentStatus.json 1.23orig/ops/replaceStorageV1VolumeAttachmentStatus.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1alpha1NamespacedCSIStorageCapacity.json 1.23orig/ops/replaceStorageV1alpha1NamespacedCSIStorageCapacity.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {
# diff -r 1.22orig/ops/replaceStorageV1beta1NamespacedCSIStorageCapacity.json 1.23orig/ops/replaceStorageV1beta1NamespacedCSIStorageCapacity.json
# 22a23,29
# >       "description": "fieldValidation determines how the server should respond to unknown/duplicate fields in the object in the request. Introduced as alpha in 1.23, older servers or servers with the `ServerSideFieldValidation` feature disabled will discard valid values specified in  this param and not perform any server side field validation. Valid values are: - Ignore: ignores unknown/duplicate fields. - Warn: responds with a warning for each unknown/duplicate field, but successfully serves the request. - Strict: fails the request on unknown/duplicate fields.",
# >       "in": "query",
# >       "name": "fieldValidation",
# >       "type": "string",
# >       "uniqueItems": true
# >     },
# >     {

