description: CELDeviceSelector contains a CEL expression for selecting a device.
x-kab-description-zh: CELDeviceSelector 包含一个用来选择设备的 CEL 表达式。
properties:
  expression:
    description: |-
      `expression` is a CEL expression which evaluates a single device.
      It must evaluate to true when the device under consideration satisfies the desired criteria,
      and false when it does not.
      Any other result is an error and causes allocation of devices to abort.

      The expression's input is an object named "device", which carries the following properties:

      - `driver` (string): the name of the driver which defines this device.
      - `attributes` (map[string]object): the device's attributes, grouped by prefix
         (e.g. device.attributes["dra.example.com"] evaluates to an object with all
         of the attributes which were prefixed by "dra.example.com".
      - `capacity` (map[string]object): the device's capacities, grouped by prefix.
      - `allowMultipleAllocations (bool)`: the `allowMultipleAllocations` property of the device
        (v1.34+ with the DRAConsumableCapacity feature enabled)

      Example: Consider a `device` with `driver="dra.example.com"`, which exposes two attributes
      named `"model"` and `"ext.example.com/family"` and which exposes one capacity named `"modules"`.
      This input to this expression would have the following fields:

      ```
      device.driver
      device.attributes["dra.example.com"].model
      device.attributes["ext.example.com"].family
      device.capacity["dra.example.com"].modules
      ```

      The `device.driver` field can be used to check for a specific driver,
      either as a high-level precondition (i.e. you only want to consider devices from this driver)
      or as part of a multi-clause expression that is meant to consider devices from different drivers.

      The value type of each attribute is defined by the device definition,
      and users who write these expressions must consult the documentation for their specific drivers.
      The value type of each capacity is `Quantity`.

      If an unknown prefix is used as a lookup in either `device.attributes` or `device.capacity`,
      an empty map will be returned.
      Any reference to an unknown field will cause an evaluation error and allocation to abort.

      A robust expression should check for the existence of attributes before referencing them.

      For ease of use, the `cel.bind()` function is enabled, and can be used to simplify expressions
      that access multiple attributes with the same domain. For example:

      ```
      cel.bind(dra, device.attributes["dra.example.com"], dra.someBool && dra.anotherBool)
      ```

      The length of the `expression` must be smaller or equal to 10 Ki.
      The cost of evaluating it is also limited based on the estimated number of logical steps.
    x-kab-description-zh: |-
      `expression` 是一个用来评估单个设备的 CEL 表达式。
      当所考虑的设备满足预期的条件时，表达式的求值结果必须为 true，否则必须为 false。
      所有其他结果都意味着表达式求值过程出错，系统会中止设备分配操作。

      表达式的输入是一个名为 `device` 的对象。该对象具有以下属性：

      - `driver` (string)：定义此设备的驱动的名称。
      - `attributes` (map[string]object)：设备的属性集合，按前缀分组。
        例如，`device.attributes["dra.example.com"]` 的计算结果为对象的所有前缀为 `"dra.example.com"` 的属性。
      - `capacity` (map[string]object)：设备的容量信息，按容量名的前缀分组。
      - `allowMultipleAllocations (bool)`：设备的 `allowMultipleAllocations` 属性
        （v1.34+ 及以上版本，且启用 `DRAConsumableCapacity` 特性）。

      例如：假设某个 `device` 的 `driver` 为 `"dra.example.com"`，该设备公开两个属性 `"model"`
      和 `"ext.example.com/family"`，并且该设备公开一个名为 `"modules"` 容量信息。
      表达式的输入就包含以下字段：

      ```
      device.driver
      device.attributes["dra.example.com"].model
      device.attributes["ext.example.com"].family
      device.capacity["dra.example.com"].modules
      ```

      字段 `device.driver` 可以用来检查特定的驱动。进行这类检查的原因可能是源于高层前置条件
      （例如你只想考虑来自此驱动的设备），也可能是在考虑来自多个驱动的设备时牵涉多个子句表达式的一部分。

      每个属性的属性值的类型是由设备定义的，编写这些表达式的用户必须查阅对应驱动的文档来了解数据类型。
      容量信息中的各个属性值的类型都是 `Quantity`。

      如果在 `device.attributes` 或 `device.capacity` 中使用未知的前缀来执行查找操作，返回的会是一个空的映射。
      对不存在的字段的引用会导致表达式求值出错，设备分配操作会被中止。
      编写较好的表达式要先检查某属性是否存在，之后才会引用该属性。

      为了便于使用，系统启用了 `cel.bind()` 函数。表达式中可以使用此函数来简化其语法，
      尤其是在访问同一作用域中的多个属性时。例如：

      ```
      cel.bind(dra, device.attributes["dra.example.com"], dra.someBool && dra.anotherBool)
      ```

      `expression` 的长度不能超过 10 KiB。
      表达式求值的开销也是有上限的，计算开销的依据是根据对逻辑步骤的个数进行预估。
    minLength: 1
    type: string
required:
  - expression
type: object

