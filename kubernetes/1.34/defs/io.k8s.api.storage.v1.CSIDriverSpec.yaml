description: The specification of a CSIDriver. The whole spec is immutable.
x-kab-description-zh: CSIDriver 的规约。整个规约是不可变更的。
properties:
  attachRequired:
    default: true
    description: |
      Flag indicating this CSI volume driver requires an `attach` operation because it implements
      the CSI `ControllerPublishVolume()` method.
      The Kubernetes attach/detach controller should call the `attach` volume interface which checks the
      `volumeattachment` status and waits until the volume is attached before proceeding to mounting.
      The CSI `"external-attacher"` coordinates with CSI volume driver and updates the
      `volumeattachment` status when the `attach` operation is complete.
      If the value is specified to `false`, the `attach` operation will be skipped.
      Otherwise the `attach` operation will be called.

      This field is immutable.
    x-kab-description-zh: |
      此标志标明对应的 CSI 卷驱动需要 `attach` 操作，因为它实现了 CSI `ControllerPublishVolume()` 方法。
      Kubernetes attach/detach 控制器应该调用 `attach` 卷接口，检查 `volumeattachment` 的状态，
      并等待卷被挂接之后才继续执行挂载操作。
      CSI `"external-attacher"` 组件会与 CSI 卷驱动一起，在 `attach` 操作完成之后更新 `volumeattachment`
      的状态。
      如果此字段值被设置为 `false`，则会略过 `attach` 操作。否则会调用 `attach` 操作。

      此字段是不可变更的。
    type: boolean

  fsGroupPolicy:
    default: ReadWriteOnceWithFSType
    description: |
      Defines if the underlying volume supports changing ownership and permission of the volume
      before being mounted.
      - `"File"`: the CSI driver supports volume ownership and permission change via `fsGroup`,
        and Kubernetes may use `fsGroup` to change permissions and ownership of the volume to match
        user requested `fsGroup` in the PodSecurityPolicy regardless of fstype or access mode.
        This mode should be defined if the `fsGroup` is expected to always change on mount.
      - `"None"`: Volumes will be mounted without performing any ownership or permission modifications,
        as the CSIDriver does not support these operations.
        This mode should be selected if the CSIDriver does not support `fsGroup` modifications.
        For example, when Kubernetes cannot change ownership and permission on a volume due to
        root-squash settings on a NFS volume.
      - `"ReadWriteOnceWithFSType"`: Each volume will be examined to determine if the volume ownership
        and permissions should be modified. If a fstype is defined and the volume's access mode contains
        `"ReadWriteOnce"`, then the defined `fsGroup` will be applied.
        This mode should be defined if it's expected that the `fsGroup` may need to be modified
        depending on the Pod's security policy. This is the default behavior if no other policy
        is defined.

      This field was immutable in Kubernetes < 1.29 and now is mutable.
      With the default policy the defined fsGroup will only be applied if a fstype is defined and
      the volume's access mode contains ReadWriteOnce.
    x-kab-description-zh: |
      此字段表明下层的存储卷是否支持在被挂载之前变更属主和访问权限。

      - `"File"`：CSI 驱动通过 `fsGroup` 来支持卷属主和访问权限变更。Kubernetes 可以使用 `fsGroup`
        来更改存储卷的属主和访问权限设置，以便匹配 PodSecurityPolicy 中请求的 `fsGroup`，
        无论存储卷的文件系统类型或者访问模式是如何设置的。
        如果在每次挂载的时候 `fsGroup` 都可能发生变更，则应定义为这种模式。
      - `"None"`：挂载存储卷时不会执行任何与属主和访问权限相关的变更，CSIDriver 不支持这类操作。
        如果 CSIDriver 不支持变更 `fsGroup` 时应该选择这种模式。
        例如，某个 NFS 卷上设置了 root-squash 选项，则 Kubernetes 无法变更该卷的属主和访问权限设置。
      - `"ReadWriteOnceWithFSType"`：每个存储卷都会被独立检查是否应该变更其属主和访问权限设置。
        如果存储卷设置了文件系统类型，并且其访问模式中包含了 `"ReadWriteOnce"`，则会应用所定义的
        `fsGroup`。如果需要根据 Pod 的安全策略来决定是否要修改 `fsGroup` 设置，应该选择这种模式。
        如果没有定义其他策略，则这个选项是默认的行为。

      此字段在 v1.29 之前是不可变更的，从 v1.30 开始可以变更。如果使用了默认的策略，则只有设置了 `fstype`
      并且卷的访问模式中包含 `ReadWriteOnce` 时，才会应用 `fsGroup` 设置。
    enum:
      - File
      - None
      - ReadWriteOnceWithFSType
    type: string
  nodeAllocatableUpdatePeriodSeconds:
    description: |-
      `nodeAllocatableUpdatePeriodSeconds` specifies the interval between periodic updates of
      the CSINode allocatable capacity for this driver.
      When set, both periodic updates and updates triggered by capacity-related failures are enabled.
      If not set, no updates occur (neither periodic nor upon detecting capacity-related failures),
      and the `allocatable.count` remains static.
      The minimum allowed value for this field is 10 seconds.

      This is a Beta feature and requires the MutableCSINodeAllocatableCount feature gate to be enabled.

      This field is mutable.
    x-kab-description-zh: |-
      `nodeAllocatableUpdatePeriodSeconds` 用来为此驱动设置 CSINode 可分配容量信息的更新周期。
      如果设置了此字段，则一方面会启用对可分配容量信息的周期性更新，另一方面也会启用与容量相关的失效。
      如果不设置此字段，则不会发生更新操作（定期更新和与容量相关的失效都不会发生），
      字段 `allocatable.count` 的值因此会变成静态值。
      此字段的最小值是 10 秒钟。

      此字段处于 Beta 阶段，需要启用 MutableCSINodeAllocatableCount 特性门控才能使用。

      此字段是可变更的。
    format: int64
    minimum: 10
    type: integer
  podInfoOnMount:
    default: false
    description: |
      If set to `true`, `podInfoOnMount` indicates this CSI volume driver requires additional Pod
      information (like `"podName"`, `"podUID"`, etc.) during `mount` operations.
      If set to `false`, Pod information will not be passed on `mount`.
      The CSI driver specifies `podInfoOnMount` as part of the driver deployment.
      If `true`, Kubelet will pass Pod information as `VolumeContext` in the CSI `NodePublishVolume()`
      calls. The CSI driver is responsible for parsing and validating the information passed in as
      `VolumeContext`. The following `VolumeConext` will be passed if `podInfoOnMount` is set to `true`.
      This list might grow, but the prefix will be used.

      - `"csi.storage.k8s.io/pod.name"`: `pod.Name`
      - `"csi.storage.k8s.io/pod.namespace"`: `pod.Namespace`
      - `"csi.storage.k8s.io/pod.uid"`: `string(pod.UID)`
      - `"csi.storage.k8s.io/ephemeral"`: `true` iff the volume is an ephemeral inline volume
        defined by a `CSIVolumeSource`, otherwise `false`.
      - `"csi.storage.k8s.io/ephemeral"`: A new feature in Kubernetes 1.16. It is only required
        for drivers which support both the `"Persistent"` and `"Ephemeral"` `volumeLifecycleMode`.
        Other drivers can leave Pod info disabled and/or ignore this field.

      This field was immutable in Kubernetes < 1.29 and now is mutable.
    x-kab-description-zh: |
      此字段设置为 `true` 表示 CSI 卷驱动程序在执行 `mount` 操作时需要一些额外的 Pod 信息
      （`"podName"`、`"podUID"` 等）。 若设置为 `false`，则不会在 `mount` 操作时传递 Pod 信息。
      CSI 卷驱动在被部署时设置 `podInfoOnMount` 的取值。

      此字段为 `true` 时，kubelet 会将 Pod 信息封装到 CSI `NodePublishVolume()` 调用所接受的
      `VolumeContext` 结构中。CSI 驱动负责对 `VolumeContext` 结构中的信息进行解析和合法性检查。
      `VolumeContext` 中传递的信息如下（列表可能会增长，但前缀会一直保留）：

      - `"csi.storage.k8s.io/pod.name"`：`pod.Name`
      - `"csi.storage.k8s.io/pod.namespace"`：`pod.Namespace`
      - `"csi.storage.k8s.io/pod.uid"`：`string(pod.UID)`
      - `"csi.storage.k8s.io/ephemeral"`：若卷是使用 `CSIVolumeSource` 定义的临时卷，则为 `true`，
        否则为 `false`。`"csi.storage.k8s.io/ephemeral"` 是 v1.16 引入的特性。
        只有同时支持 `"Persistent"` 和 `"Ephemeral"` 两种 `volumeLifecycleMode` 的驱动才需要处理。 
        其他驱动可以禁止 Pod 信息，同时忽略此字段。

      此字段在 v1.29 之前是不可变更的，从 v1.30 开始支持变更。
    type: boolean
  requiresRepublish:
    description: |
      This indicates the CSI driver wants `NodePublishVolume()` being periodically called to
      reflect any possible change in the mounted volume. This field defaults to `false`.
      **Note**: After a successful initial `NodePublishVolume()` call, subsequent calls to
      `NodePublishVolume()` should only update the contents of the volume.
      New mount points will not be seen by a running container.
    x-kab-description-zh: |
      此字段标明 CSI 驱动希望其 `NodePublishVolume()` 接口能够被周期性地调用以反映所挂载卷的变化。
      此字段默认取值为 `false`。

      **注意**： 在成功地执行了最初的 `NodePublishVolume()` 调用之后，对 `NodePublishVolume()`
      的后续调用应该仅更新卷的内容。运行中的容器无法检测到新的挂载点。
    type: boolean
  seLinuxMount:
    default: false
    description: |
      This specifies if the CSI driver supports `-o context` mount option.

      When `true`, the CSI driver must ensure that all volumes provided by this CSI driver can be
      mounted separately with different `"-o context"` options.
      This is typical for storage backends that provide volumes as filesystems on block devices or
      as independent shared volumes.
      Kubernetes will call `NodeStage`/`NodePublish` with `-o context=xyz` mount option when mounting
      a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context.
      In the future, it may be expanded to other volume AccessModes.
      In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.

      When `false`, Kubernetes won't pass any special SELinux mount options to the driver.
      This is typical for volumes that represent subdirectories of a bigger shared filesystem.
    x-kab-description-zh: |
      此字段用来设置是否 CSI 驱动支持 `"-o context"` 挂载选项。

      字段为 `true` 时，CSI 驱动必须确保该驱动所制备的所有卷都可以用不同的 `"-o context"` 选项分别挂载。
      某些存储后端会使用块设备上的文件系统来提供存储卷，或者使用独立的共享卷提供存储卷，
      对于这类存储后端，支持 `"-o context"` 挂载选项是一种典型需求。

      对于显式设置了 SELinux 上下文的 Pod，Kubernetes 在为其挂载 `"ReadWriteOncePod"` 卷时，
      要调用 `NodeStage()`/`NodePublish()` 接口，这时会提供 `"-o context=xyz"` 这类挂载选项，
      在将来的版本中，这种行为也可能被扩展到其他的卷访问模式。
      无论如何，Kubernetes 会确保只使用一个 SELinux 上下文来挂载卷。

      字段设置为 `false` 时，Kubernetes 不会向驱动传递任何特殊的 SELinux 上下文挂载选项。
      某些存储卷所代表的是较大规模共享文件系统的一部分，对于这些卷，字段设置为 `false` 是比较常见的。
    type: boolean
  storageCapacity:
    default: false
    description: |
      If set to `true`, `storageCapacity` indicates that the CSI volume driver wants Pod scheduling to
      consider the storage capacity that the driver deployment will report by creating
      `CSIStorageCapacity` objects with capacity information.

      The check can be enabled immediately when deploying a driver.
      In that case, provisioning new volumes with late binding will pause until the driver deployment
      has published some suitable `CSIStorageCapacity` object.

      Alternatively, the driver can be deployed with the field unset or `false` and it can be flipped
      later when storage capacity information has been published.

      This field was immutable in Kubernetes before 1.22 and now is mutable.
    x-kab-description-zh: |
      此字段设置为 `true` 时，表明 CSI 卷驱动希望 Pod 调度时会考虑存储容量信息。
      这些存储容量信息包含在驱动部署时创建的 `CSIStorageCapacity` 结构中。

      在部署 CSI 驱动时，可以立即启用容量检查。如果是这样，制备延迟绑定的新卷的操作会被暂停，
      直到所部署的驱动公布了一些合适的 `CSIStorageCapacity` 对象为止。

      另一种使用方式是，在部署 CSI 驱动时不设置此字段，或者将其设置为 `false`，
      当后期存储容量信息可用时，在改变字段设置值。

      此字段在 v1.22 之前是只读的；在其后的版本中是可变更的。
    type: boolean
  tokenRequests:
    description: |
      This indicates the CSI driver needs Pods' service account tokens it is mounting volume for
      to do necessary authentication.
      Kubelet will pass the tokens in `VolumeContext` in the CSI `NodePublishVolume()` calls.
      The CSI driver should parse and validate the following `VolumeContext`:

      ```
      "csi.storage.k8s.io/serviceAccount.tokens": {
        "<audience>": {
          "token": "<token>",
          "expirationTimestamp": "<expiration timestamp in RFC3339>"
          ,
        },
        ...
      }
      ```

      **Note**: `audience` in each TokenRequest should be different and at most one token is empty string.
      To receive a new token after expiry, `requiresRepublish` can be used to trigger
      `NodePublishVolume()` periodically.
    x-kab-description-zh: |
      此字段表明 CSI 驱动需要 Pod 的服务账号令牌信息，以便在挂载卷的时候完成必要的身份认证操作。
      kubelet 会将令牌放入 `VolumeContext` 结构中，传递给 CSI `NodePublishVolume()` 调用。
      CSI 驱动需要对 `VolumeContext` 中的数据进行解析和合法性检查。

      ```
      "csi.storage.k8s.io/serviceAccount.tokens": {
        "<audience>": {
          "token": "<token>",
          "expirationTimestamp": "<expiration timestamp in RFC3339>"
          ,
        },
        ...
      }
      ```

      **注意**： 每个 TokenRequest 中的 `audience` 都应该是不同的，最多只能有一个令牌是空字符串。
      如果想在令牌过期之后重新收到新令牌，可以通过 `requiresRepublish` 来触发周期性的
      `NodePublishVolume()` 调用。
    items:
      $ref: '#/definitions/io.k8s.api.storage.v1.TokenRequest'
    type: array
    x-kubernetes-list-type: atomic
  volumeLifecycleModes:
    default:
      - Persistent
    description: |
      This defines what kind of volumes this CSI volume driver supports.
      The default if the list is empty is `["Persistent"]`, which is the usage defined
      by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
      The other mode is `"Ephemeral"`. In this mode, volumes are defined inline inside the Pod spec
      with CSIVolumeSource and their lifecycle is tied to the lifecycle of that Pod.
      A driver has to be aware of this because it is only going to get a `NodePublishVolume()` call
      for such a volume.
      For more information about implementing this mode, see
      [CSI doc](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html).
      A driver can support one or more of these modes and more modes may be added in the future.

      This field is immutable.
    x-kab-description-zh: |
      此字段定义当前 CSI 卷驱动所支持的卷类型。
      如果列表为空，默认值为 `["Persistent"]`，也就是 CSI 规范中定义的用法，在 Kubernetes
      中通过 PV/PVC 机制来实现。
      另外一种模式是 `"Ephemeral"`。在这种模式下，存储卷实在 Pod 的规约中以内联方式通过
      CSIVolumeSource 定义的，存储卷的生命周期与 Pod 的生命周期绑定。

      CSI 驱动必须知道合法的配置选项是什么，因为对这类存储卷它只有一次调用 `NodePublishVolume()`
      的机会。关于如何实现这种模式的更多信息，可以参阅
      [CSI 文档](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html)。
      每个 CSI 驱动可以实现这里的一种或者多种模式，并且将来的版本中可能还会添加新的模式。

      此字段是不可变更的。
    items:
      enum:
        - Ephemeral
        - Persistent
      type: string
    type: array
    x-kubernetes-list-type: set
required:
  - attachRequired
  - podInfoOnMount
type: object

