{
  "description": "A JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
  "properties": {
    "$ref": {
      "type": "string"
    },
    "$schema": {
      "type": "string"
    },
    "additionalItems": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
    },
    "additionalProperties": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool"
    },
    "allOf": {
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
      },
      "type": "array"
    },
    "anyOf": {
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
      },
      "type": "array"
    },
    "default": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
      "description": "A default value for undefined object fields. Defaulting is a beta feature under the `CustomResourceDefaulting` feature gate. Defaulting requires `spec.preserveUnknownFields` to be false."
    },
    "definitions": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
      },
      "type": "object"
    },
    "dependencies": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
      },
      "type": "object"
    },
    "description": {
      "type": "string"
    },
    "enum": {
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
      },
      "type": "array"
    },
    "example": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
    },
    "exclusiveMaximum": {
      "type": "boolean"
    },
    "exclusiveMinimum": {
      "type": "boolean"
    },
    "externalDocs": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
    },
    "format": {
      "type": "string"
    },
    "id": {
      "type": "string"
    },
    "items": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
    },
    "maxItems": {
      "format": "int64",
      "type": "integer"
    },
    "maxLength": {
      "format": "int64",
      "type": "integer"
    },
    "maxProperties": {
      "format": "int64",
      "type": "integer"
    },
    "maximum": {
      "format": "double",
      "type": "number"
    },
    "minItems": {
      "format": "int64",
      "type": "integer"
    },
    "minLength": {
      "format": "int64",
      "type": "integer"
    },
    "minProperties": {
      "format": "int64",
      "type": "integer"
    },
    "minimum": {
      "format": "double",
      "type": "number"
    },
    "multipleOf": {
      "format": "double",
      "type": "number"
    },
    "not": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
    },
    "nullable": {
      "type": "boolean"
    },
    "oneOf": {
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
      },
      "type": "array"
    },
    "pattern": {
      "type": "string"
    },
    "patternProperties": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
      },
      "type": "object"
    },
    "properties": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
      },
      "type": "object"
    },
    "required": {
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "title": {
      "type": "string"
    },
    "type": {
      "type": "string"
    },
    "uniqueItems": {
      "type": "boolean"
    },
    "x-kubernetes-embedded-resource": {
      "description": "This flag indicates that the value is an embedded Kubernetes `runtime.Object`, with `TypeMeta` and `ObjectMeta`. The type must be '`object`'. It is allowed to further restrict the embedded object. `kind`, `apiVersion` and `metadata` are validated automatically. `x-kubernetes-preserve-unknown-fields` is allowed to be true, but does not have to be if the object is fully specified (up to `kind`, `apiVersion`, `metadata`).",
      "type": "boolean"
    },
    "x-kubernetes-int-or-string": {
      "description": "This flag indicates that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of '`anyOf`' is permitted if following one of the following patterns: 1) `'anyOf': [{'type': 'integer'}, {'type': 'string'}]` 2) `'allOf': [{'anyOf': [{'type': 'integer'}, {'type': 'string'} ...]}]`",
      "type": "boolean"
    },
    "x-kubernetes-list-map-keys": {
      "description": "This annotates an array with the `x-kubernetes-list-type` '`map`' by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the '`x-kubernetes-list-type`' extension set to '`map`'. Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported).",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "x-kubernetes-list-type": {
      "description": "This annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values: 1) `atomic`: the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...). 2) `set`: Sets are lists that must not have multiple items with the same value. Each value must be a scalar (or another atomic type). 3) `map`: These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The `map` tag must only be used on a list with elements of type object. Defaults to '`atomic`' for arrays.",
      "enum": [
        "atomic",
        "set",
        "map"
      ],
      "type": "string"
    },
    "x-kubernetes-preserve-unknown-fields": {
      "description": "This flag stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested `properties` or `additionalProperties` are specified in the schema. This can either be true or undefined. False is forbidden.",
      "type": "boolean"
    }
  },
  "type": "object"
}
