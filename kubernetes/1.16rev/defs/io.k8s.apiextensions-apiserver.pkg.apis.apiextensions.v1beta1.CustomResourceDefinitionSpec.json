{
  "description": "This describes how a user wants their resource to appear",
  "properties": {
    "additionalPrinterColumns": {
      "description": "Additional columns to show e.g. in kubectl output next to the name. Defaults to a `created-at` column. This is the global columns for all `versions`. Global and per-version columns are mutually exclusive.",
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
      },
      "type": "array"
    },
    "conversion": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion",
      "description": "The conversion settings for the CRD."
    },
    "group": {
      "description": "The group this resource belongs in. The value must be a valid DNS subdomain and it must contain at least one dot.",
      "minLength": 1,
      "type": "string"
    },
    "names": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
      "description": "The names used to describe this custom resource"
    },
    "preserveUnknownFields": {
      "default": true,
      "description": "This flag disables pruning of object fields which are not specified in the OpenAPI schema. `apiVersion`, `kind`, `metadata` and known fields inside metadata are always preserved. Defaults to true in v1beta and will default to false in v1.",
      "type": "boolean"
    },

    "scope": {
      "default": "Namespaced",
      "description": "Scope indicates whether this resource is cluster or namespace scoped.",
      "enum": [
        "Cluster",
        "Namespaced"
      ],
      "type": "string"
    },
    "subresources": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
      "description": "Subresources describes the subresources for CustomResource. This is the global subresources for all versions. Top-level and per-version subresources are mutually exclusive."
    },
    "validation": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
      "description": "The validation methods for CustomResources. This is the global validation schema for all versions. Global and per-version schemas are mutually exclusive."
    },
    "version": {
      "description": "The version this resource belongs to. Should be always the first item in the `versions` field if provided. At least one of `version` or `versions` must be set. This is deprecated, please use `Versions`.",
      "type": "string"
    },
    "versions": {
      "description": "The list of all supported versions for this resource. If `version` field is provided, this field is optional. All versions must use the same validation schema for now. i.e., top level `validation` field is applied to all of these `versions`. The version `name` will be used to compute the order. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as '`beta`' or '`alpha`'), and then by comparing major version, then minor version. An example sorted list of versions: '`v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10`'.",
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
      },
      "type": "array"
    }
  },
  "required": [
    "group",
    "names",
    "scope"
  ],
  "type": "object"
}
