{
  "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has `RawExtension` as its type in your external, versioned struct, and `Object` in your internal struct. You also need to register your various plugin types.\n\n```\n// Internal package:\ntype MyAPIObject struct {\n  runtime.TypeMeta `json:\",inline\"`\n  MyPlugin runtime.Object `json:\"myPlugin\"`\n}\ntype PluginA struct {\n  AOption string `json:\"aOption\"`\n}\n\n// External package:\ntype MyAPIObject struct {\n  runtime.TypeMeta `json:\",inline\"`\n  MyPlugin runtime.RawExtension `json:\"myPlugin\"`\n}\ntype PluginA struct {\n  AOption string `json:\"aOption\"`\n}\n\n```\n\nOn the wire, the JSON will look something like this:\n\n```\n{\n  \"kind\":\"MyAPIObject\",\n  \"apiVersion\":\"v1\",\n  \"myPlugin\": {\n    \"kind\": \"PluginA\",\n    \"aOption\": \"foo\",\n  },\n}\n```\n\nDecode first uses JSON or YAML to unmarshal the serialized data into your external object. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using `pkg/conversion`) into the internal struct. The `runtime` package's `DefaultScheme` has conversion functions installed which will unpack the JSON stored in `RawExtension`, turning it into the correct object type, and storing it in the `Object`. (TODO: In the case where the object is of an unknown type, a `runtime.Unknown` object will be created and stored.)",
  "properties": {
    "Raw": {
      "description": "The underlying serialization of this object.",
      "format": "byte",
      "type": "string"
    }
  },
  "required": [
    "Raw"
  ],
  "type": "object"
}
