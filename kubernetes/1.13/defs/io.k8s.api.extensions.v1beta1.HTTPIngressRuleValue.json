{
  "description": "HTTPIngressRuleValue is a list of http selectors pointing to backends. In the example: http://<host>/<path>?<searchpart> -> backend where where parts of the url correspond to RFC 3986, this resource will be used to match against everything after the last '/' and before the first '?' or '#'.",
  "required": [
    "paths"
  ],
  "properties": {
    "paths": {
      "description": "A collection of paths that map requests to backends.",
      "type": "array",
      "items": {
        "description": "HTTPIngressPath associates a path regex with a backend. Incoming urls matching the path are forwarded to the backend.",
        "required": [
          "backend"
        ],
        "properties": {
          "backend": {
            "description": "IngressBackend describes all endpoints for a given service and port.",
            "required": [
              "serviceName",
              "servicePort"
            ],
            "properties": {
              "serviceName": {
                "description": "Specifies the name of the referenced service.",
                "type": "string"
              },
              "servicePort": {
                "description": "IntOrString is a type that can hold an int32 or a string.  When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.  This allows you to have, for example, a JSON field that can accept a name or number.",
                "type": "string",
                "format": "int-or-string"
              }
            }
          },
          "path": {
            "description": "Path is an extended POSIX regex as defined by IEEE Std 1003.1, (i.e this follows the egrep/unix syntax, not the perl syntax) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. Paths must begin with a '/'. If unspecified, the path defaults to a catch all sending traffic to the backend.",
            "type": "string"
          }
        }
      }
    }
  }
}