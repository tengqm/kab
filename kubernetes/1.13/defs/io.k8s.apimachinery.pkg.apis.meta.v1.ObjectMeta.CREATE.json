{
  "description": "Metadata that all persisted resources must have, which includes all objects users create.",
  "properties": {
    "annotations": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
      "type": "object"
    },
    "clusterName": {
      "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now. It can be provided in a `PATCH` operation, but the value provided must be identical to the existing value.",
      "type": "string"
    },
    "finalizers": {
      "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
      "items": {
        "description": "The name of the finalizer must is either a standard finalizer name (e.g. `\"kubernetes\"`, `\"orphan\"`, `\"foregroundDeletion\"`), or it contains at least one slash (`'/'`).",
        "type": "string"
      },
      "type": "array",
      "x-kubernetes-patch-strategy": "merge"
    },
    "generateName": {
      "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. If this field is used, the `name` returned to the client will be different than the `name` passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the `name` field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will **NOT** return a `\"409\"`. Instead, it will either return `\"201 Created\"` or `\"500\"` with reason `\"ServerTimeout\"` indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the `\"Retry-After\"` header).",
      "type": "string"
    },
    "initializers": {
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Initializers",
      "description": "This field is a list of Initializers that have not yet acted on the object. If nil or empty, this object has been completely initialized. Otherwise, the object is considered *uninitialized* and is hidden when reading from clients unless explicitly asked to observe uninitialized objects. When an object is created, the system will populate this list with the current set of initializers. Only privileged users may set or modify this list. Once it is empty, it may not be modified further by any user."
    },
    "labels": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
      "type": "object"
    },
    "name": {
      "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated.",
      "type": "string"
    },
    "namespace": {
      "default": "default",
      "description": "The space within which each `name` must be unique. An empty `namespace` is equivalent to the `\"default\"` namespace. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated.",
      "type": "string"
    }
  },
  "required": [
    "name"
  ],
  "type": "object"
}
