{
  "description": "Information for locating and communicating with a server. Only HTTPS is supported, though you can disable certificate verification.",
  "properties": {
    "caBundle": {
      "description": "A PEM encoded CA bundle for validating an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. This field cannot be specified if `service` is provided because local APIServices cannot have a CA bundle.",
      "format": "byte",
      "type": "string",
      "x-kubernetes-list-type": "atomic"
    },
    "group": {
      "description": "The API group name this server hosts. If `group` is empty, `version` must be '`v1`'. Value must be a valid DNS subdomain.",
      "type": "string"
    },
    "groupPriorityMinimum": {
      "description": "The priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher `groupPriorityMininum` values such that the whole group gets a higher priority. The primary sort is based on `groupPriorityMinimum`, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object ('v1.bar' before 'v1.foo'). We'd recommend something like: '`*.k8s.io`' (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
      "format": "int32",
      "maximum": 20000,
      "minimum": 1,
      "type": "integer"
    },
    "insecureSkipTLSVerify": {
      "description": "This flag disables TLS certificate verification. This is strongly discouraged. You should use the `caBundle` instead. If `caBundle` is specified, this field cannot be True. If `service` is not specified, this field cannot be specified because local APIServices cannot have TLS certificate verification.",
      "type": "boolean"
    },
    "service": {
      "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference",
      "description": "A reference to the service for this API server. It must communicate on port 443. If the `service` is nil, it means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. In that case, `caBundle` and `insecureSkipTLSVerify` cannot be specified."
    },
    "version": {
      "description": "The API version this server hosts. Value must be a valid DNS label. For example, '`v1`'.",
      "type": "string"
    },
    "versionPriority": {
      "description": "This field controls the ordering of this API version inside of its group. The primary sort is based on `versionPriority`, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a `group`. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. 'Kube-like' versions start with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA>beta>alpha` (where GA is a version with no suffix such as `beta` or `alpha`), and then by comparing major version, then minor version. An example sorted list of versions: `v10`, `v2`, `v1`, `v11beta2`, `v10beta3`, `v3beta1`, `v12alpha1`, `v11alpha2`, `foo1`, `foo10`.",
      "format": "int32",
      "maximum": 1000,
      "minimum": 1,
      "type": "integer"
    }
  },
  "required": [
    "groupPriorityMinimum",
    "versionPriority"
  ],
  "type": "object"
}
