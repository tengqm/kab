{
  "description": "Pod-level security attributes and common container settings. Some fields are also present in `container.securityContext`. Field values of `container.securityContext` take precedence over field values of `pod.securityContext`.",
  "properties": {
    "fsGroup": {
      "description": "A special supplemental group that applies to all containers in a Pod. Some volume types allow the Kubelet to change the ownership of that volume to be owned by the Pod:\n\n1. The owning GID will be the `fsGroup`;\n1. The `setgid` bit is set (new files created in the volume will be owned by `fsGroup`);\n1. The permission bits are OR'd with \"`rw-rw----`\";\n\nIf unset, the Kubelet will not modify the ownership and permissions of any volume.",
      "format": "int64",
      "type": "integer"
    },
    "fsGroupChangePolicy": {
      "default": "Always",
      "description": "The behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support `fsGroup` based ownership (and permissions). It will have no effect on ephemeral volume types such as: \"`secret`\", \"`configmaps`\" and \"`emptydir`\".",
      "enum": [
        "Always",
        "OnRootMismatch"
      ],
      "type": "string"
    },
    "runAsGroup": {
      "description": "The group ID (GID) to run the entry point of the container process. Uses runtime default if unset. May also be set in `container.securityContext`.",
      "format": "int64",
      "type": "integer"
    },
    "runAsNonRoot": {
      "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in `container.securityContext`.",
      "type": "boolean"
    },
    "runAsUser": {
      "description": "The user ID (UID) to run the entry point of the container process. Defaults to user specified in image metadata if unspecified. May also be set in `container.securityContext`.",
      "format": "int64",
      "type": "integer"
    },
    "seLinuxOptions": {
      "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
      "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in `container.securityContext`."
    },
    "seccompProfile": {
      "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
      "description": "The seccomp options to use by the containers in this pod."
    },
    "supplementalGroups": {
      "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container.",
      "items": {
        "format": "int64",
        "type": "integer"
      },
      "type": "array"
    },
    "sysctls": {
      "description": "A list of namespaced sysctls used for the pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. The name of each item must be unique in the array.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
      },
      "type": "array"
    },
    "windowsOptions": {
      "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
      "description": " The Windows specific settings applied to all containers. If unspecified, the options within a container's `securityContext` will be used."
    }
  },
  "type": "object"
}
