{
  "description": "This information is immutable after the request is created. Only the `request` and `usages` fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.",
  "properties": {
    "extra": {
      "additionalProperties": {
        "items": {
          "type": "string"
        },
        "type": "array"
      },
      "description": "Extra contains extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
      "type": "object"
    },
    "groups": {
      "description": "Group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
      "items": {
        "type": "string"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "request": {
      "description": "An x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
      "format": "byte",
      "minLength": 1,
      "type": "string",
      "x-kubernetes-list-type": "atomic"
    },
    "signerName": {
      "description": "The requested signer, and is a qualified name.\n\nList/watch requests for CertificateSigningRequests can filter on this field using a \"`spec.signerName=NAME`\" fieldSelector.\n\nWell-known Kubernetes signers are:\n\n 1. \"`kubernetes.io/kube-apiserver-client`\": issues client certificates that can be used to authenticate to `kube-apiserver`.\n   Requests for this signer are never auto-approved by `kube-controller-manager`, can be issued by the \"`csrsigning`\" controller in `kube-controller-manager`.\n 2. \"`kubernetes.io/kube-apiserver-client-kubelet`\": issues client certificates that kubelets use to authenticate to `kube-apiserver`.\n   Requests for this signer can be auto-approved by the \"`csrapproving`\" controller in `kube-controller-manager`, and can be issued by the \"`csrsigning`\" controller in `kube-controller-manager`.\n 3. \"`kubernetes.io/kubelet-serving`\" issues serving certificates that kubelets use to serve TLS endpoints, which `kube-apiserver` can connect to securely.\n   Requests for this signer are never auto-approved by `kube-controller-manager`, and can be issued by the \"`csrsigning`\" controller in `kube-controller-manager`.\n\nMore details are available at https://k8s.io/docs/reference/access-authn-authz/certificate-signing-requests/#kubernetes-signers\n\nCustom `signerName`s can also be specified. The signer defines:\n\n 1. Trust distribution: how trust (CA bundles) are distributed.\n 2. Permitted subjects: and behavior when a disallowed subject is requested.\n 3. Required, permitted, or forbidden x509 extensions in the request (including whether `subjectAltNames` are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n 4. Required, permitted, or forbidden key usages / extended key usages.\n 5. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n 6. Whether or not requests for CA certificates are allowed.\n",
      "type": "string"
    },
    "uid": {
      "description": "The UID of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
      "type": "string"
    },
    "usages": {
      "description": "A set of key usages requested in the issued certificate.\n\nRequests for TLS client certificates typically request: \"`digital signature`\", \"`key encipherment`\", \"`client auth`\".\n\nRequests for TLS serving certificates typically request: \"`key encipherment`\", \"`digital signature`\", \"`server auth`\".",
      "items": {
        "type": "string",
        "enum": [
          "signing",
          "digital signature",
          "content commitment",
          "key encipherment",
          "key agreement",
          "data encipherment",
          "cert sign",
          "crl sign",
          "encipher only",
          "decipher only",
          "any",
          "server auth",
          "client auth",
          "code signing",
          "email protection",
          "s/mmime",
          "ipsec end system",
          "ipsec tunnel",
          "ipsec user",
          "timestamping",
          "ocsp signing",
          "microsoft sgc",
          "netscape sgc"
        ],
      },
      "minItems": 1,
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "username": {
      "description": "The name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
      "type": "string"
    }
  },
  "required": [
    "request",
    "signerName",
    "usages"
  ],
  "type": "object"
}
