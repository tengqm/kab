{
  "description": "The specification of a Service.",
  "properties": {
    "clusterIP": {
      "description": "The IP address of the Service. It is usually assigned randomly by the system. If an address is manually specified, is in-range (as per system configuration), and is not in use, it will be allocated to the Service; otherwise creation of the Service will fail.\n\nThis field may not be changed through updates unless the `type` field is also being changed to `\"ExternalName\"` (which requires this field to be blank) or the `type` field is being changed from `\"ExternalName\"` (in which case this field may optionally be specified, as describe above).\n\nValid values are `\"None\"`, empty string (`\"\"`), or a valid IP address. Setting this to `\"None\"` makes a *headless service* (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types `\"ClusterIP\"`, `\"NodePort\"`, and `\"LoadBalancer\"`. This field cannot be set to `\"None\"` if Service type is `\"NodePort\"` or `\"LoadBalancer\"`. If this field is specified when creating a Service of type `\"ExternalName\"`, the Service creation will fail. This field will be wiped when updating a Service to type `\"ExternalName\"`.",
      "type": "string"
    },
    "externalIPs": {
      "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. The IP address provided cannot be `\"0.0.0.0\"` or loopback addresses (`\"127.0.0.0/8\"`) or link-local addresses (`\"169.254.0.0/16\"`) or link-local multicast addresses (`\"244.0.0.0/24\"`).",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "externalName": {
      "description": "The external reference that discovery mechanisms will return as an alias for this Service (e.g. a DNS CNAME record). No proxying will be involved. Must be a lowercase [RFC-1123 hostname](https://tools.ietf.org/html/rfc1123) when `type` is `\"ExternalName\"`. Having a trailing dot is acceptable.",
      "type": "string"
    },
    "externalTrafficPolicy": {
      "description": "This denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints.\n\n- `\"Local\"`: preserves the client source IP and avoids a second hop for `\"LoadBalancer\"` and `\"Nodeport\"` type of services, but risks potentially imbalanced traffic spreading.\n- `\"Cluster\"`: obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.\n",
      "enum": [
        "Cluster",
        "Local"
      ],
      "type": "string"
    },
    "healthCheckNodePort": {
      "description": "The health-check node port for the Service. This only applies when `type` is set to `\"LoadBalancer\"` and `externalTrafficPolicy` is set to `\"Local\"`. If a value is specified, is in-range, and is not in use, it will be used. If not specified, a value will be automatically allocated. External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this Service or not. If this field is specified when creating a Service which does not need it, the Service creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing `type`).",
      "format": "int32",
      "minimum": 0,
      "type": "integer"
    },
    "ipFamily": {
      "description": "This specifies whether this Service has a preference for a particular IP family (e.g. `\"IPv4\"` vs. `\"IPv6\"`) when the `IPv6DualStack` feature gate is enabled. In a dual-stack cluster, you can specify `ipFamily` when creating a `\"ClusterIP\"` Service to determine whether the controller will allocate an IPv4 or IPv6 IP for it, and you can specify `ipFamily` when creating a headless Service to determine whether it will have IPv4 or IPv6 Endpoints. In either case, if you do not specify an `ipFamily` explicitly, it will default to the cluster's primary IP family. This field is part of an Alpha feature, and you should not make any assumptions about its semantics other than those described above. In particular, you should not assume that it can (or cannot) be changed after creation time; that it can only have the values `\"IPv4\"` and `\"IPv6\"`; or that its current value on a given Service correctly reflects the current state of that Service. (For `\"ClusterIP\"` Services, look at `clusterIP` to see if the Service is IPv4 or IPv6. For headless Services, look at the `endpoints`, which may be dual-stack in the future. For `\"ExternalName\"` Services, `ipFamily` has no meaning, but it may be set to an irrelevant value anyway.)",
      "enum": [
        "IPv4",
        "IPv6"
      ],
      "type": "string"
    },
    "loadBalancerIP": {
      "description": "Only applies to `\"LoadBalancer\"` type of Services. A load balancer will be created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. It is ignored if the cloud-provider does not support the feature.",
      "type": "string"
    },
    "loadBalancerSourceRanges": {
      "description": "Only applies to `\"LoadBalancer\"` type of Services. If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. Every entry must be a valid CIDR expression. This field will be ignored if the cloud-provider does not support the feature.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "ports": {
      "description": "The list of ports that are exposed by this Service. Required when the Service is not a *headless service* and it is not of type `\"ExternalName\"`. The tuple of (`protocol`, `nodePort`) must be unique among all port records and the tuple of (`protocol`, `port`) must be unique as well.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
      },
      "type": "array",
      "x-kubernetes-list-map-keys": [
        "port",
        "protocol"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "port",
      "x-kubernetes-patch-strategy": "merge"
    },
    "publishNotReadyAddresses": {
      "default": false,
      "description": "This indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's *headless Service* to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered **ready** even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
      "type": "boolean"
    },
    "selector": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Service traffic will be routed to Pods with label keys and values matching this selector. If empty or not present, the Service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. This field is ignored if Service `type` is `\"ExternalName\"`.",
      "type": "object"
    },
    "sessionAffinity": {
      "default": "None",
      "description": "Used to maintain session affinity. Setting this to `\"ClientIP\"` enables client IP based session affinity.",
      "enum": [
        "ClientIP",
        "None"
      ],
      "minLength": 1,
      "type": "string"
    },
    "sessionAffinityConfig": {
      "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
      "description": "The configurations of session affinity. It is required when `sessionAffinity` is set to `\"ClientIP\"` and it cannot be set when `sessionAffinity` is set to `\"None\"`."
    },
    "topologyKeys": {
      "description": "A preference-order list of topology keys which implementations of Services should use to preferentially sort endpoints when accessing this Service. This field cannot be set when `externalTrafficPolicy=\"Local\"`. Topology keys must be valid label keys. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value `\"*\"` may be used to mean *any topology*. This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is Alpha-level and is only honored by servers that enable the `ServiceTopology` feature.",
      "items": {
        "type": "string"
      },
      "maxItems": 16,
      "type": "array"
    },
    "type": {
      "default": "ClusterIP",
      "description": "This field determines how the Service is exposed.\n\n- `\"ClusterIP\"`: allocates a cluster internal IP address for load-balancing to endpoints. Endpoints are determined by the `selector` or if that is not specified, by manual construction of an Endpoints object or EndpointSlice ojbects. If `clusterIP` is `\"None\"`, no virtual IP is allocated and the endpoints are published as a set of Endpoints rather than a virtual IP.\n- `\"NodePort\"`: builds on `\"ClusterIP\"` and allocates a port on every node which routes to the same endpoints as the `clusterIP`.\n- `\"LoadBalancer\"`: builds on `\"NodePort\"` and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the `clusterIP`.\n- `\"ExternalName\"` - aliases this Service to the specified `externalName`. Several other fields do not apply to `\"ExternalName\"` Services.\n",
      "enum": [
        "ClusterIP",
        "ExternalName",
        "LoadBalancer",
        "NodePort"
      ],
      "type": "string"
    }
  },
  "type": "object"
}
