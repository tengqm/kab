{
  "definitions": {
    "io.k8s.api.admissionregistration.v1.MutatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list is supported by the API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the `failurePolicy`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig",
          "description": "Information for communicating with the hook."
        },
        "failurePolicy": {
          "default": "Fail",
          "description": "How unrecognized errors from the admission endpoint are handled",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Equivalent",
          "description": "This defines how the `rules` list is used to match incoming requests.\n\n- `\"Exact\"` means matching a request only if it exactly matches a specified rule. For example, if `deployments` can be modified via `\"apps/v1\"`, `\"apps/v1beta1\"`, and `\"extensions/v1beta1\"`, but `rules` only included `\"apiGroups\":[\"apps\"], \"apiVersions\":[\"v1\"], \"resources\": [\"deployments\"]`, a request to `\"apps/v1beta1\"` or `\"extensions/v1beta1\"` would not be sent to the webhook.\n- `\"Equivalent\"` means matching a request if it modifies a resource listed in `rules`, even via another API group or version. For example, if `deployments` can be modified via `\"apps/v1\"`, `\"apps/v1beta1\"`, and `\"extensions/v1beta1\"`, and `rules` only included `\"apiGroups\":[\"apps\"], \"apiVersions\":[\"v1\"], \"resources\": [\"deployments\"]`, a request to `\"apps/v1beta1\"` or `\"extensions/v1beta1\"` would be converted to `\"apps/v1\"` and sent to the webhook.",
          "enum": [
            "Exact",
            "Equivalent"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., `\"imagepolicy.kubernetes.io\"`, where `\"imagepolicy\"` is the name of the webhook, and `\"kubernetes.io\"` is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace to the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with `runlevel` of '`0`' or '`1`';  you will set the selector as follows: \n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"runlevel\",\n    \"operator\": \"NotIn\",\n    \"values\": [\"0\", \"1\"]\n  }]\n}\n```\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the `environment` of '`prod`' or '`staging`', you will set the selector as follows:\n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"environment\",\n    \"operator\": \"In\",\n    \"values\": [\"prod\", \"staging\"]\n  }]\n}\n```\n\nDefault to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "reinvocationPolicy": {
          "default": "Never",
          "description": "This indicates whether this webhook should be called multiple times as part of a single admission evaluation.\n\n- `\"Never\"` means the webhook will not be called more than once in a single admission evaluation.\n- `\"IfNeeded\"` means the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call.\n\nWebhooks that specify this option **must** be idempotent, able to process objects they previously admitted.\n\n**Note**: the number of additional invocations is not guaranteed to be exactly one. If additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. Webhooks that use this option may be reordered to minimize the number of additional invocations. To validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.",
          "enum": [
            "IfNeeded",
            "Never"
          ],
          "type": "string"
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches **any** entry defined in the `rules` list. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "description": "Whether this webhook has any side effects. Webhooks with side effects **MUST** implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone.",
          "enum": [
            "None",
            "NoneOnDryRun"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 10,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "admissionReviewVersions",
        "clientConfig",
        "name",
        "sideEffects"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata This name must be a valid DNS subdomain name."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations. The name must be fully qualified name and it must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "webhooks"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList": {
      "description": "A list of MutatingWebhookConfiguration objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.RuleWithOperations": {
      "description": "A tuple of `operations` and `resources`. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "The API groups the resources belong to. `\"*\"` is the wildcard for all groups. If `\"*\"` is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "apiVersions": {
          "description": "The API versions the resources belong to. `\"*\"` means all versions. If `\"*\"` is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "operations": {
          "description": "The operations the admission hook cares about. `\"CREATE\"`, `\"UPDATE\"`, `\"DELETE\"`, `\"CONNECT\"` or \"`*`\" for all of those operations and any future admission operations that are added. If `\"*\"` is present, the length of the slice must be one.",
          "items": {
            "enum": [
              "*",
              "CONNECT",
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. For example:\n\n- `\"pods\"` means Pods.\n- `\"pods/log\"` means the `\"log\"` subresource of Pods.\n- `\"*\"` means all resources, but not subresources.\n- `\"pods/*\"` means all subresources of Pods.\n- `\"*/scale\"` means all `\"scale\"` subresources.\n- `\"*/*\"` means all resources and their subresources.\n\nIf a wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "scope": {
          "default": "*",
          "description": "The scope of this rule.\n\n- `\"Cluster\"` means that only cluster-scoped resources will match this rule.\n- `\"Namespaced\"` means that only namespaced resources will match this rule.\n- `\"*\"` means that there are no scope restrictions.\n\nSubresources match the scope of their parent resource.",
          "enum": [
            "Cluster",
            "Namespaced",
            "*"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroups",
        "apiVersions",
        "operations",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ServiceReference": {
      "description": "Reference to a Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An URL path which will be sent in any request to this service. '`/`' and '' are always valid paths. '`//`' is invalid. The path has start with a '`/`'. The trailing '`/`' will be ignored. Each path segment must be a valid DNS subdomain.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the Service that hosting webhook.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "description": "An ordered list of preferred `AdmissionReview` versions the webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig",
          "description": "Information for communicating with the webhook."
        },
        "failurePolicy": {
          "default": "Fail",
          "description": "How unrecognized errors from the admission endpoint are handled.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Equivalent",
          "description": "How the `rules` list is used to match incoming requests.\n\n- `\"Exact\"`: matching a request only if it exactly matches a specified rule. For example, if `deployments` can be modified via `\"apps/v1\"`, `\"apps/v1beta1\"`, and `\"extensions/v1beta1\"`, but `rules` only included `\"apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]\"`, a request to `\"apps/v1beta1\"` or `\"extensions/v1beta1\"` would not be sent to the webhook.\n- `\"Equivalent\"`: matching a request if modifies a resource listed in `rules`, even via another API group or version. For example, if `deployments` can be modified via `\"apps/v1\"`, `\"apps/v1beta1\"`, and `\"extensions/v1beta1\"`, and `rules` only included `\"apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]\"`, a request to `\"apps/v1beta1\"` or `\"extensions/v1beta1\"` would be converted to `\"apps/v1\"` and sent to the webhook.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., `\"imagepolicy.kubernetes.io\"`, where `\"imagepolicy\"` is the name of the webhook, and `\"kubernetes.io\"` is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace and the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with `runlevel` of `\"0\"` or `\"1\"`;  you will set the selector as follows:\n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"runlevel\",\n    \"operator\": \"NotIn\",\n    \"values\": [\"0\", \"1\"]\n  }]\n}\n```\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\", you will set the selector as follows:\n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"environment\",\n    \"operator\": \"In\",\n    \"values\": [\"prod\", \"staging\"]\n  }]\n}\n```\n\nDefault to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A `null` object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches **any** entry defined in the `rules` list. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "description": "Whether this webhook has side effects. Webhooks with side effects **MUST** implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone.",
          "enum": [
            "None",
            "NoneOnDryRun"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 10,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "admissionReviewVersions",
        "clientConfig",
        "name",
        "sideEffects"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations. The name must be fully qualified name and it must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "webhooks"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList": {
      "description": "A list of ValidatingWebhookConfiguration objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ValidatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1.WebhookClientConfig": {
      "description": "The information for making a TLS connection with the webhook. Either `service` or `url` must be specified, but not both.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference",
          "description": "A reference to the Service for this webhook. If the webhook is running within the cluster, then you should use `service`. The `name`, `namespace` fields are required. The `port`, if specified, must be an integer between 1 and 65535, inclusive. The `path`, if specified, must start with a \"/\" and it cannot be \"//\". Each path segment must be a valid DNS subdomain name."
        },
        "url": {
          "description": "The location of the webhook in standard URL form (`\"https://host[:port][/path]\"`). The `\"host\"` is required and it should not refer to a Service running in the cluster; use the `service` field instead.\n\nThe `\"host\"` might be resolved via external DNS in some API servers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `\"host\"` may also be an IP address.\n\nPlease note that using `\"localhost\"` or `\"127.0.0.1\"` as a `\"host\"` is risky unless you take great care to run this webhook on all hosts which run an API server which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be `\"https\"`.\n\nA `\"path\"` is optional, and if present may be any string permissible in a URL. You may use the `\"path\"` to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. `\"user:password@\"` is not allowed. Fragments (`\"#...\"`) and query parameters (`\"?...\"`) are not allowed either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "default": [
            "v1beta1"
          ],
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list is supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the `failurePolicy`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig",
          "description": "Information for communicating with the hook."
        },
        "failurePolicy": {
          "default": "Ignore",
          "description": "How unrecognized errors from the admission endpoint are handled",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Exact",
          "description": "This defines how the `rules` list is used to match incoming requests.\n\n- `\"Exact\"` means matching a request only if it exactly matches a specified rule. For example, if `deployments` can be modified via `\"apps/v1\"`, `\"apps/v1beta1\"`, and `\"extensions/v1beta1\"`, but `rules` only included `\"apiGroups\":[\"apps\"], \"apiVersions\":[\"v1\"], \"resources\": [\"deployments\"]`, a request to `\"apps/v1beta1\"` or `\"extensions/v1beta1\"` would not be sent to the webhook.\n- `\"Equivalent\"` means matching a request if it modifies a resource listed in `rules`, even via another API group or version. For example, if `deployments` can be modified via `\"apps/v1\"`, `\"apps/v1beta1\"`, and `\"extensions/v1beta1\"`, and `rules` only included `\"apiGroups\":[\"apps\"], \"apiVersions\":[\"v1\"], \"resources\": [\"deployments\"]`, a request to `\"apps/v1beta1\"` or `\"extensions/v1beta1\"` would be converted to `\"apps/v1\"` and sent to the webhook.",
          "enum": [
            "Exact",
            "Equivalent"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., `\"imagepolicy.kubernetes.io\"`, where `\"imagepolicy\"` is the name of the webhook, and `\"kubernetes.io\"` is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace to the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with `runlevel` of '`0`' or '`1`';  you will set the selector as follows: \n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"runlevel\",\n    \"operator\": \"NotIn\",\n    \"values\": [\"0\", \"1\"]\n  }]\n}\n```\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the `environment` of '`prod`' or '`staging`', you will set the selector as follows:\n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"environment\",\n    \"operator\": \"In\",\n    \"values\": [\"prod\", \"staging\"]\n  }]\n}\n```\n\nDefault to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A null object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "reinvocationPolicy": {
          "default": "Never",
          "description": "This indicates whether this webhook should be called multiple times as part of a single admission evaluation.\n\n- `\"Never\"` means the webhook will not be called more than once in a single admission evaluation.\n- `\"IfNeeded\"` means the webhook will be called at least one additional time as part of the admission evaluation if the object being admitted is modified by other admission plugins after the initial webhook call.\n\nWebhooks that specify this option **must** be idempotent, able to process objects they previously admitted.\n\n**Note**: the number of additional invocations is not guaranteed to be exactly one. If additional invocations result in further modifications to the object, webhooks are not guaranteed to be invoked again. Webhooks that use this option may be reordered to minimize the number of additional invocations. To validate an object after all mutations are guaranteed complete, use a validating admission webhook instead.",
          "enum": [
            "IfNeeded",
            "Never"
          ],
          "type": "string"
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches **any** entry defined in the `rules` list. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "default": "Unknown",
          "description": "Whether this webhook has any side effects. Webhooks with side effects **MUST** implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the `dryRun` attribute will be auto-rejected if they match a webhook with `sideEffects` of `\"Unknown\"` or `\"Some\"`.",
          "enum": [
            "None",
            "NoneOnDryRun",
            "Some",
            "Unknown"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 30,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "clientConfig"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it. *DEPRECATED* in v1.16, planned for removal in v1.19. Use `admissionregistration.k8s.io/v1` MutatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations. The name must be fully qualified name and it must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it. *DEPRECATED* in v1.16, planned for removal in v1.19. Use `admissionregistration.k8s.io/v1` MutatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "webhooks"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object and may change it. *DEPRECATED* in v1.16, planned for removal in v1.19. Use `admissionregistration.k8s.io/v1` MutatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations. The name must be fully qualified name and it must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList": {
      "description": "A list of MutatingWebhookConfiguration objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "MutatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.RuleWithOperations": {
      "description": "A tuple of `operations` and `resources`. It is recommended to make sure that all the tuple expansions are valid.",
      "properties": {
        "apiGroups": {
          "description": "The API groups the resources belong to. `\"*\"` is the wildcard for all groups. If `\"*\"` is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "apiVersions": {
          "description": "The API versions the resources belong to. `\"*\"` means all versions. If `\"*\"` is present, the length of the slice must be one.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "operations": {
          "description": "The operations the admission hook cares about. `\"CREATE\"`, `\"UPDATE\"`, `\"DELETE\"`, `\"CONNECT\"` or \"`*`\" for all of those operations and any future admission operations that are added. If `\"*\"` is present, the length of the slice must be one.",
          "items": {
            "enum": [
              "*",
              "CONNECT",
              "CREATE",
              "DELETE",
              "UPDATE"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. For example:\n\n- `\"pods\"` means Pods.\n- `\"pods/log\"` means the `\"log\"` subresource of Pods.\n- `\"*\"` means all resources, but not subresources.\n- `\"pods/*\"` means all subresources of Pods.\n- `\"*/scale\"` means all `\"scale\"` subresources.\n- `\"*/*\"` means all resources and their subresources.\n\nIf a wildcard is present, the validation rule will ensure resources do not overlap with each other. Depending on the enclosing object, subresources might not be allowed.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "scope": {
          "default": "*",
          "description": "The scope of this rule.\n\n- `\"Cluster\"` means that only cluster-scoped resources will match this rule.\n- `\"Namespaced\"` means that only namespaced resources will match this rule.\n- `\"*\"` means that there are no scope restrictions.\n\nSubresources match the scope of their parent resource.",
          "enum": [
            "Cluster",
            "Namespaced",
            "*"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroups",
        "apiVersions",
        "operations",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ServiceReference": {
      "description": "Reference to a Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An URL path which will be sent in any request to this service. '`/`' and '' are always valid paths. '`//`' is invalid. The path has start with a '`/`'. The trailing '`/`' will be ignored. Each path segment must be a valid DNS subdomain.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the Service that hosting webhook.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook": {
      "description": "An admission webhook and the resources and operations it applies to.",
      "properties": {
        "admissionReviewVersions": {
          "default": [
            "v1beta1"
          ],
          "description": "An ordered list of preferred `AdmissionReview` versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, validation will fail for this object. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail and be subject to the failure policy.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig",
          "description": "Information for communicating with the webhook."
        },
        "failurePolicy": {
          "default": "Ignore",
          "description": "How unrecognized errors from the admission endpoint are handled.",
          "enum": [
            "Fail",
            "Ignore"
          ],
          "type": "string"
        },
        "matchPolicy": {
          "default": "Exact",
          "description": "How the `rules` list is used to match incoming requests.\n\n- \"`Exact`\": matching a request only if it exactly matches a specified rule. For example, if deployments can be modified via \"`apps/v1`\", \"`apps/v1beta1`\", and \"`extensions/v1beta1`\", but `rules` only included \"`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`\", a request to \"`apps/v1beta1`\" or \"`extensions/v1beta1`\" would not be sent to the webhook.\n- \"`Equivalent`\": matching a request if modifies a resource listed in `rules`, even via another API group or version. For example, if deployments can be modified via \"`apps/v1`\", \"`apps/v1beta1`\", and \"`extensions/v1beta1`\", and `rules` only included \"`apiGroups:[\"apps\"], apiVersions:[\"v1\"], resources: [\"deployments\"]`\", a request to \"`apps/v1beta1`\" or \"`extensions/v1beta1`\" would be converted to \"`apps/v1`\" and sent to the webhook.",
          "enum": [
            "Equivalent",
            "Exact"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the admission webhook. Name should be fully qualified, e.g., '`imagepolicy.kubernetes.io`', where '`imagepolicy`' is the name of the webhook, and '`kubernetes.io`' is the name of the organization.",
          "minLength": 1,
          "type": "string"
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook on an object based on the match between the object namespace and the selector. If the object itself is a namespace, the matching is performed on `object.metadata.labels`. If the object is another cluster scoped resource, it never skips the webhook. For example, to run the webhook on any objects whose namespace is not associated with `runlevel` of `\"0\"` or `\"1\"`;  you will set the selector as follows:\n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"runlevel\",\n    \"operator\": \"NotIn\",\n    \"values\": [\"0\", \"1\"]\n  }]\n}\n```\n\nIf instead you want to only run the webhook on any objects whose namespace is associated with the \"environment\" of \"prod\" or \"staging\", you will set the selector as follows:\n\n```\n\"namespaceSelector\": {\n  \"matchExpressions\": [{\n    \"key\": \"environment\",\n    \"operator\": \"In\",\n    \"values\": [\"prod\", \"staging\"]\n  }]\n}\n```\n\nDefault to the empty label selector, which matches everything."
        },
        "objectSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This decides whether to run the webhook based on if the object has matching labels. `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be sent to the webhook, and is considered to match if either object matches the selector. A `null` object (`oldObject` in the case of create, or `newObject` in the case of delete) or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions` object) is not considered to match. Use the object selector only if the webhook is opt-in, because end users may skip the admission webhook by setting the labels. Default to the empty Label selector, which matches everything."
        },
        "rules": {
          "description": "What operations on what resources/subresources the webhook cares about. The webhook cares about an operation if it matches **any** entry defined in the `rules` list. However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from putting the cluster in a state which cannot be recovered from without completely disabling the plugin, ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.RuleWithOperations"
          },
          "type": "array"
        },
        "sideEffects": {
          "description": "Whether this webhook has side effects. Webhooks with side effects **MUST** implement a reconciliation system, since a request may be rejected by a future step in the admission change and the side effects therefore need to be undone. Requests with the `dryRun` attribute will be auto-rejected if they match a webhook with `sideEffects` of `\"Unknown\"` or `\"Some\"`.",
          "enum": [
            "None",
            "NoneOnDryRun",
            "Some",
            "Unknown"
          ],
          "type": "string"
        },
        "timeoutSeconds": {
          "default": 30,
          "description": "The timeout for this webhook. After the timeout passes, the webhook call will be ignored or the API call will fail based on the `failurePolicy`.",
          "format": "int32",
          "maximum": 30,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "clientConfig",
        "name",
        "sideEffects"
      ],
      "type": "object"
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.CREATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it. *DEPRECATED* in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations. The name must be fully qualified name and it must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.  *DEPRECATED* in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "webhooks"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.UPDATE": {
      "description": "The configuration of an admission webhook that accepts or rejects an object without changing it.  *DEPRECATED* in v1.16, planned for removal in v1.19. Use admissionregistration.k8s.io/v1 ValidatingWebhookConfiguration instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "webhooks": {
          "description": "A list of webhooks and the affected resources and operations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhook"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList": {
      "description": "A list of ValidatingWebhookConfiguration objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "admissionregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ValidatingWebhookConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ValidatingWebhookConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfigurationList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.admissionregistration.v1beta1.WebhookClientConfig": {
      "description": "The information for making a TLS connection with the webhook. Either `service` or `url` must be specified, but not both.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ServiceReference",
          "description": "A reference to the Service for this webhook. If the webhook is running within the cluster, then you should use `service`. The `name`, `namespace` fields are required. The `port`, if specified, must be an integer between 1 and 65535, inclusive. The `path`, if specified, must start with a \"/\" and it cannot be \"//\". Each path segment must be a valid DNS subdomain name."
        },
        "url": {
          "description": "The location of the webhook in standard URL form (`\"https://host[:port][/path]\"`). The `\"host\"` is required and it should not refer to a Service running in the cluster; use the `service` field instead.\n\nThe `\"host\"` might be resolved via external DNS in some API servers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `\"host\"` may also be an IP address.\n\nPlease note that using `\"localhost\"` or `\"127.0.0.1\"` as a `\"host\"` is risky unless you take great care to run this webhook on all hosts which run an API server which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.\n\nThe scheme must be `\"https\"`.\n\nA `\"path\"` is optional, and if present may be any string permissible in a URL. You may use the `\"path\"` to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. `\"user:password@\"` is not allowed. Fragments (`\"#...\"`) and query parameters (`\"?...\"`) are not allowed either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.ControllerRevision.CREATE": {
      "description": "An immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a `ControllerRevision` has been successfully created, it can not be updated. The API server will fail validating all requests that attempt to mutate the `data` field. A `ControllerRevision` object may be deleted. Note that, due to its use by both the `DaemonSet` and `StatefulSet` controllers for update and rollback, this object is Beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "The serialized representation of the state. This cannot be updated."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevision"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "revision": {
          "description": "The revision of the state represented by `data`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "data",
        "kind",
        "metadata",
        "revision"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevision.GET": {
      "description": "An immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a `ControllerRevision` has been successfully created, it can not be updated. The API server will fail validating all requests that attempt to mutate the `data` field. A `ControllerRevision` object may be deleted. Note that, due to its use by both the `DaemonSet` and `StatefulSet` controllers for update and rollback, this object is Beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "The serialized representation of the state. This cannot be updated."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevision"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "revision": {
          "description": "The revision of the state represented by `data`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "data",
        "kind",
        "metadata",
        "revision"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevision.UPDATE": {
      "description": "An immutable snapshot of state data. Clients are responsible for serializing and deserializing the objects that contain their internal state. Once a `ControllerRevision` has been successfully created, it can not be updated. The API server will fail validating all requests that attempt to mutate the `data` field. A `ControllerRevision` object may be deleted. Note that, due to its use by both the `DaemonSet` and `StatefulSet` controllers for update and rollback, this object is Beta. However, it may be subject to name and representation changes in future releases, and clients should not depend on its stability. It is primarily for internal use by controllers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "data": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "The serialized representation of the state. This cannot be updated."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevision"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "revision": {
          "description": "The revision of the state represented by `data`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "revision"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ControllerRevisionList": {
      "description": "A list of ControllerRevision objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ControllerRevision objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ControllerRevisionList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ControllerRevisionList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet.CREATE": {
      "description": "The configuration of a DaemonSet.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.CREATE",
          "description": "The desired behavior of this DaemonSet."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet.GET": {
      "description": "The configuration of a DaemonSet.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.GET",
          "description": "The desired behavior of this DaemonSet."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetStatus",
          "description": "The current status of this DaemonSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSet.UPDATE": {
      "description": "The configuration of a DaemonSet.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.UPDATE",
          "description": "The desired behavior of this DaemonSet."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSetCondition": {
      "description": "The state of a DaemonSet at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of DaemonSet condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetList": {
      "description": "A list of DaemonSet objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of DaemonSet objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DaemonSetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DaemonSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DaemonSetSpec.CREATE": {
      "description": "The specification of a DaemonSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "The minimum number of seconds for which a newly created DaemonSet Pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means the Pods will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that are managed by the DaemonSet. Must match in order to be controlled. It must match the Pod template's labels."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "An object that describes the Pod that will be created. The DaemonSet will create exactly one copy of this Pod on every node that matches the template's node selector (or on every node if no node selector is specified)."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet Pods with new Pods."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetSpec.GET": {
      "description": "The specification of a DaemonSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "The minimum number of seconds for which a newly created DaemonSet Pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means the Pods will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that are managed by the DaemonSet. Must match in order to be controlled. It must match the Pod template's `labels`."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "An object that describes the Pod that will be created. The DaemonSet will create exactly one copy of this Pod on every node that matches the template's node selector (or on every node if no node selector is specified)."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet Pods with new Pods."
        }
      },
      "required": [
        "minReadySeconds",
        "revisionHistoryLimit",
        "selector",
        "template",
        "updateStrategy"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetSpec.UPDATE": {
      "description": "The specification of a DaemonSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "The minimum number of seconds for which a newly created DaemonSet Pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means the Pods will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old history to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that are managed by the DaemonSet. Must match in order to be controlled. It must match the Pod template's labels."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "An object that describes the Pod that will be created. The DaemonSet will create exactly one copy of this Pod on every node that matches the template's node selector (or on every node if no node selector is specified)."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy",
          "description": "An update strategy to replace existing DaemonSet Pods with new Pods."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetStatus": {
      "description": "The current state of a DaemonSet.",
      "properties": {
        "collisionCount": {
          "description": "The count of hash collisions for the DaemonSet. The DaemonSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest `ControllerRevision`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "conditions": {
          "description": "The latest observations of the DaemonSet's state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentNumberScheduled": {
          "description": "The number of nodes that are running at least 1 daemon Pod and are supposed to run the daemon Pod.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "desiredNumberScheduled": {
          "description": "The total number of nodes that should be running the daemon Pod (including nodes correctly running the daemon Pod).",
          "format": "int32",
          "type": "integer"
        },
        "numberAvailable": {
          "description": "The number of nodes that should be running the daemon Pod and have one or more of the daemon Pod running and available (ready for at least `spec.minReadySeconds`)",
          "format": "int32",
          "type": "integer"
        },
        "numberMisscheduled": {
          "description": "The number of nodes that are running the daemon Pod, but are not supposed to run the daemon Pod.",
          "format": "int32",
          "type": "integer"
        },
        "numberReady": {
          "description": "The number of nodes that should be running the daemon Pod and have one or more of the daemon Pod running and ready.",
          "format": "int32",
          "type": "integer"
        },
        "numberUnavailable": {
          "description": "The number of nodes that should be running the daemon Pod and have none of the daemon Pod running and available (ready for at least `spec.minReadySeconds`)",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the DaemonSet controller.",
          "format": "int64",
          "type": "integer"
        },
        "updatedNumberScheduled": {
          "description": "The total number of nodes that are running updated daemon Pod",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "currentNumberScheduled",
        "desiredNumberScheduled",
        "numberMisscheduled",
        "numberReady"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DaemonSetUpdateStrategy": {
      "description": "The update strategy for a DaemonSet.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet",
          "description": "Rolling update configuration parameters. Present only if `type` is set to `\"RollingUpdate\"`. This is required for rolling update."
        },
        "type": {
          "default": "RollingUpdate",
          "description": "Type of DaemonSet update.",
          "enum": [
            "OnDelete",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.Deployment.CREATE": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.CREATE",
          "description": "Specification of the desired behavior of the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.Deployment.GET": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.GET",
          "description": "Specification of the desired behavior of the Deployment."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStatus",
          "description": "The current information/status for the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.Deployment.UPDATE": {
      "description": "Deployment enables declarative updates for Pods and ReplicaSets.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Deployment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentSpec.UPDATE",
          "description": "Specification of the desired behavior of the Deployment."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DeploymentCondition": {
      "description": "The state of a Deployment at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time this condition was updated."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of Deployment condition.",
          "enum": [
            "Available",
            "Progressing",
            "ReplicaFailure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentList": {
      "description": "A list of Deployment objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Deployment objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "DeploymentList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "DeploymentList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.DeploymentSpec.CREATE": {
      "description": "The specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 which means a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the Deployment is paused and will not be processed by the Deployment controller.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "default": 600,
          "description": "The maximum time in seconds for a Deployment to make progress before it is considered to be failed. The Deployment controller will continue to process failed Deployments and a condition with a `\"ProgressDeadlineExceeded\"` reason will be surfaced in the Deployment `status`. Note that progress will not be estimated during the time a Deployment is paused. The value must be greater than the `minReadySeconds`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "Number of desired Pods. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for Pods. Existing ReplicaSets whose Pods are selected by this will be the ones affected by this Deployment. It must match the Pod template's labels. The `matchLabels` and `matchExpressions` cannot be both empty."
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use when replacing existing Pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "A template describes the Pods that will be created."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentSpec.GET": {
      "description": "The specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 which means a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the Deployment is paused and will not be processed by the Deployment controller.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "default": 600,
          "description": "The maximum time in seconds for a Deployment to make progress before it is considered to be failed. The Deployment controller will continue to process failed Deployments and a condition with a `\"ProgressDeadlineExceeded\"` reason will be surfaced in the Deployment `status`. Note that progress will not be estimated during the time a Deployment is paused. The value must be greater than the `minReadySeconds`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "Number of desired Pods. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for Pods. Existing ReplicaSets whose Pods are selected by this will be the ones affected by this Deployment. It must match the Pod template's labels. The `matchLabels` and `matchExpressions` cannot be both empty."
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use when replacing existing Pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "A template describes the Pods that will be created."
        }
      },
      "required": [
        "minReadySeconds",
        "paused",
        "progressDeadlineSeconds",
        "replicas",
        "revisionHistoryLimit",
        "selector",
        "strategy",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentSpec.UPDATE": {
      "description": "The specification of the desired behavior of the Deployment.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its container crashing, for it to be considered available. Defaults to 0 which means a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "paused": {
          "description": "Indicates that the Deployment is paused and will not be processed by the Deployment controller.",
          "type": "boolean"
        },
        "progressDeadlineSeconds": {
          "default": 600,
          "description": "The maximum time in seconds for a Deployment to make progress before it is considered to be failed. The Deployment controller will continue to process failed Deployments and a condition with a `\"ProgressDeadlineExceeded\"` reason will be surfaced in the Deployment `status`. Note that progress will not be estimated during the time a Deployment is paused. The value must be greater than the `minReadySeconds`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "Number of desired Pods. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The number of old ReplicaSets to retain to allow rollback. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector for Pods. Existing ReplicaSets whose Pods are selected by this will be the ones affected by this Deployment. It must match the Pod template's labels."
        },
        "strategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentStrategy",
          "description": "The deployment strategy to use when replacing existing Pods with new ones.",
          "x-kubernetes-patch-strategy": "retainKeys"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "A template describes the Pods that will be created."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStatus": {
      "description": "The most recently observed status of the Deployment.",
      "properties": {
        "availableReplicas": {
          "description": "Total number of available Pods (ready for at least `minReadySeconds`) targeted by this Deployment. It cannot be greater than the desired replicas or the ready replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "collisionCount": {
          "description": "Count of hash collisions for the Deployment. The Deployment controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest ReplicaSet. When updated, this value cannot be decremented.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "conditions": {
          "description": "The latest observations of a Deployment's state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "observedGeneration": {
          "description": "The generation observed by the Deployment controller.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "readyReplicas": {
          "description": "Total number of ready Pods targeted by this Deployment. This cannot be greater than the desired `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "description": "Total number of non-terminated Pods targeted by this Deployment (their labels match the `selector`).",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "unavailableReplicas": {
          "description": "Total number of unavailable Pods targeted by this Deployment. This is the total number of Pods that are still required for the Deployment to have 100% available capacity. They may either be Pods that are running but not yet available or Pods that still have not been created.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "updatedReplicas": {
          "description": "Total number of non-terminated Pods targeted by this Deployment that have the desired template spec. Must be less than the desired `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.DeploymentStrategy": {
      "description": "This specifies how to replace existing Pods with new ones.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment",
          "description": "Rolling update configuration parameters. This is required when `type` is `\"RollingUpdate\"`. When `type` is `\"Recreate\"`, this field is disallowed."
        },
        "type": {
          "default": "RollingUpdate",
          "description": "Type of update strategy",
          "enum": [
            "Recreate",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSet.CREATE": {
      "description": "A ReplicaSet ensures that a specified number of Pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. If the `labels` are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.CREATE",
          "description": "The specification of the desired behavior of the ReplicaSet."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSet.GET": {
      "description": "A ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. If the `labels` are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.GET",
          "description": "The specification of the desired behavior of the ReplicaSet."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus",
          "description": "The most recently observed status of the ReplicaSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSet.UPDATE": {
      "description": "A ReplicaSet ensures that a specified number of pod replicas are running at any given time.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. If the `labels` are empty, they are defaulted to be the same as the Pod(s) that the ReplicaSet manages."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.UPDATE",
          "description": "The specification of the desired behavior of the ReplicaSet."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSetCondition": {
      "description": "The state of a ReplicaSet at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of ReplicaSet condition.",
          "enum": [
            "ReplicaFailure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetList": {
      "description": "A list of ReplicaSet objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ReplicaSet objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicaSetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "ReplicaSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec.CREATE": {
      "description": "The specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the replica count. Label keys and values that must match in order to be controlled by this ReplicaSet. It must match the Pod template's `labels`. Empty `selector` is invalid."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "The object that describes the Pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec.GET": {
      "description": "The specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the replica count. Label keys and values that must match in order to be controlled by this ReplicaSet. It must match the Pod template's `labels`. Empty `selector` is invalid."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object that describes the Pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "minReadySeconds",
        "replicas",
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetSpec.UPDATE": {
      "description": "The specification of a ReplicaSet.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its container crashing, for it to be considered available. Default value 0 means a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas. This is a pointer to distinguish between explicit zero and unspecified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the replica count. Label keys and values that must match in order to be controlled by this ReplicaSet. It must match the Pod template's `labels`. Empty `selector` is invalid."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "The object that describes the Pod that will be created if insufficient replicas are detected."
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.ReplicaSetStatus": {
      "description": "The current status of a ReplicaSet.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least `minReadySeconds`) for this ReplicaSet.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "The latest observations of a ReplicaSet's state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of Pods that have labels matching the `labels` of the Pod template of the ReplicaSet.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the ReplicaSet controller.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this ReplicaSet.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "The most recently observed number of replicas.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDaemonSet": {
      "description": "Spec to control the desired behavior of DaemonSet rolling update.",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": 1,
          "description": "The maximum number of DaemonSet Pods that can be unavailable during the update. Value can be an absolute number or a percentage of total number of DaemonSet Pods at the start of the update. Absolute number is calculated from percentage by rounding up. This cannot be 0. Example: when this is set to \"30%\", at most 30% of the total number of nodes that should be running the DaemonSet Pod (i.e. `status.desiredNumberScheduled`) can have their Pods stopped for an update at any given time. The update starts by stopping at most 30% of those DaemonSet Pods and then brings up new DaemonSet Pods in their place. Once the new Pods are available, it then proceeds onto other DaemonSet Pods, thus ensuring that at least 70% of original number of DaemonSet Pods are available at all times during the update."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateDeployment": {
      "description": "Spec to control the desired behavior of rolling update for a Deployment.",
      "properties": {
        "maxSurge": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": "25%",
          "description": "The maximum number of Pods that can be scheduled above the desired number of Pods. Value can be an absolute number (ex: `\"5\"`) or a percentage of desired pods (ex: `\"10%\"`). This can not be `\"0\"` if `maxUnavailable` is `\"0\"`. Absolute number is calculated from percentage by rounding up. Example: when this is set to `\"30%\"`, the new ReplicaSet can be scaled up immediately when the rolling update starts, such that the total number of old and new Pods do not exceed 130% of desired Pods. Once old Pods have been killed, new ReplicaSet can be scaled up further, ensuring that total number of Pods running at any time during the update is at most 130% of desired Pods."
        },
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "default": "25%",
          "description": "The maximum number of Pods that can be unavailable during the update. Value can be an absolute number (ex: `\"5\"`) or a percentage of desired pods (ex: `\"10%\"`). Absolute number is calculated from percentage by rounding down. This can not be `\"0\"` if `maxSurge` is `\"0\"`. Example: when this is set to `\"30%\"`, the old ReplicaSet can be scaled down to 70% of desired Pods immediately when the rolling update starts. Once new Pods are ready, old ReplicaSet can be scaled down further, followed by scaling up the new ReplicaSet, ensuring that the total number of Pods available at all times during the update is at least 70% of desired Pods. This value cannot be more than `\"100%\"`."
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy": {
      "description": "Spec to control the desired behavior of rolling update for a StatefulSet.",
      "properties": {
        "partition": {
          "default": 0,
          "description": "The ordinal at which the StatefulSet should be partitioned.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSet.CREATE": {
      "description": "A StatefulSet is a set of Pods with consistent identities. Identities are defined as:\n\n- Network: A single stable DNS and hostname.\n- Storage: As many volume claims as requested.\n\nA StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.CREATE",
          "description": "The desired behavior of this StatefulSet."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSet.GET": {
      "description": "A StatefulSet is a set of Pods with consistent identities. Identities are defined as:\n\n- Network: A single stable DNS and hostname.\n- Storage: As many volume claims as requested.\n\nA StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.GET",
          "description": "The desired behavior of this StatefulSet."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetStatus",
          "description": "The current status of Pods in this StatefulSet. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSet.UPDATE": {
      "description": "A StatefulSet is a set of Pods with consistent identities. Identities are defined as:\n\n- Network: A single stable DNS and hostname.\n- Storage: As many volume claims as requested.\n\nA StatefulSet guarantees that a given network identity will always map to the same storage identity.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSet"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.UPDATE",
          "description": "The desired behavior of this StatefulSet."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSetCondition": {
      "description": "The state of a StatefulSet at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of StatefulSet condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetList": {
      "description": "A list of StatefulSet objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apps/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of StatefulSet objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StatefulSetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apps",
          "kind": "StatefulSetList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.apps.v1.StatefulSetSpec.CREATE": {
      "description": "The specification of a StatefulSet.",
      "properties": {
        "podManagementPolicy": {
          "default": "OrderedReady",
          "description": "This controls how Pods are created during initial scale up, when replacing Pods on nodes, or when scaling down. The default policy is `\"OrderedReady\"`, where Pods are created in increasing order and the controller will wait until each Pod is ready before continuing. When scaling down, the Pods are removed in the opposite order. The alternative policy is `\"Parallel\"` which will create Pods in parallel to match the desired scale without waiting, and on scale down will delete all Pods at once. Cannot be updated.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "default": 1,
          "description": "The desired number of replicas of the given `template`. These are replicas in the sense that they are instantiations of the same `template`, but individual replicas also have a consistent identity.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied spec version. Cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the `replicas` count. It must match the Pod template's `labels`. Cannot be updated."
        },
        "serviceName": {
          "description": "The name of the Service that governs this StatefulSet. This Service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: `\"pod-specific-string.serviceName.default.svc.cluster.local\"` where '`\"pod-specific-string\"`' is managed by the StatefulSet controller. Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "An object that describes the Pod that will be created if insufficient replicas are detected. Each Pod stamped out by the StatefulSet will fulfill this `template`, but have a unique identity from the rest of the StatefulSet. Currently only check if the `metadata.labels` are set."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "The update strategy that will be employed to update Pods in the StatefulSet when a revision is made to `template`."
        },
        "volumeClaimTemplates": {
          "description": "A list of claims that Pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a Pod. Every claim in this list must have at least one matching (by name) `volumeMount` in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        }
      },
      "required": [
        "selector",
        "serviceName",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetSpec.GET": {
      "description": "The specification of a StatefulSet.",
      "properties": {
        "podManagementPolicy": {
          "default": "OrderedReady",
          "description": "This controls how Pods are created during initial scale up, when replacing Pods on nodes, or when scaling down. The default policy is `\"OrderedReady\"`, where Pods are created in increasing order and the controller will wait until each Pod is ready before continuing. When scaling down, the Pods are removed in the opposite order. The alternative policy is `\"Parallel\"` which will create Pods in parallel to match the desired scale without waiting, and on scale down will delete all Pods at once. Cannot be updated.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "default": 1,
          "description": "The desired number of replicas of the given `template`. These are replicas in the sense that they are instantiations of the same `template`, but individual replicas also have a consistent identity.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied spec version. Cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the `replicas` count. It must match the Pod template's `labels`. Cannot be updated."
        },
        "serviceName": {
          "description": "The name of the Service that governs this StatefulSet. This Service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: `\"pod-specific-string.serviceName.default.svc.cluster.local\"` where '`\"pod-specific-string\"`' is managed by the StatefulSet controller. Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "An object that describes the Pod that will be created if insufficient replicas are detected. Each Pod stamped out by the StatefulSet will fulfill this `template`, but have a unique identity from the rest of the StatefulSet. Currently only check if the `metadata.labels` are set."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "The update strategy that will be employed to update Pods in the StatefulSet when a revision is made to `template`."
        },
        "volumeClaimTemplates": {
          "description": "A list of claims that Pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a Pod. Every claim in this list must have at least one matching (by name) `volumeMount` in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        }
      },
      "required": [
        "podManagementPolicy",
        "replicas",
        "revisionHistoryLimit",
        "selector",
        "serviceName",
        "template",
        "updateStrategy",
        "volumeClaimTemplates"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetSpec.UPDATE": {
      "description": "The specification of a StatefulSet.",
      "properties": {
        "podManagementPolicy": {
          "default": "OrderedReady",
          "description": "This controls how Pods are created during initial scale up, when replacing Pods on nodes, or when scaling down. The default policy is `\"OrderedReady\"`, where Pods are created in increasing order and the controller will wait until each Pod is ready before continuing. When scaling down, the Pods are removed in the opposite order. The alternative policy is `\"Parallel\"` which will create Pods in parallel to match the desired scale without waiting, and on scale down will delete all Pods at once. Cannot be updated.",
          "enum": [
            "OrderedReady",
            "Parallel"
          ],
          "type": "string"
        },
        "replicas": {
          "default": 1,
          "description": "The desired number of replicas of the given `template`. These are replicas in the sense that they are instantiations of the same `template`, but individual replicas also have a consistent identity.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "revisionHistoryLimit": {
          "default": 10,
          "description": "The maximum number of revisions that will be maintained in the StatefulSet's revision history. The revision history consists of all revisions not represented by a currently applied spec version. Cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the `replicas` count. It must match the Pod template's `labels`. Cannot be updated."
        },
        "serviceName": {
          "description": "The name of the Service that governs this StatefulSet. This Service must exist before the StatefulSet, and is responsible for the network identity of the set. Pods get DNS/hostnames that follow the pattern: `\"pod-specific-string.serviceName.default.svc.cluster.local\"` where '`\"pod-specific-string\"`' is managed by the StatefulSet controller. Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "An object that describes the Pod that will be created if insufficient replicas are detected. Each Pod stamped out by the StatefulSet will fulfill this `template`, but have a unique identity from the rest of the StatefulSet. Currently only check if the `metadata.labels` are set."
        },
        "updateStrategy": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy",
          "description": "The update strategy that will be employed to update Pods in the StatefulSet when a revision is made to `template`."
        },
        "volumeClaimTemplates": {
          "description": "A list of claims that Pods are allowed to reference. The StatefulSet controller is responsible for mapping network identities to claims in a way that maintains the identity of a Pod. Every claim in this list must have at least one matching (by name) `volumeMount` in one container in the template. A claim in this list takes precedence over any volumes in the template, with the same name. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        }
      },
      "required": [
        "selector",
        "serviceName",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetStatus": {
      "description": "The current state of a StatefulSet.",
      "properties": {
        "collisionCount": {
          "description": "The count of hash collisions for the StatefulSet. The StatefulSet controller uses this field as a collision avoidance mechanism when it needs to create the name for the newest `ControllerRevision`. When updated, this field cannot be decremented.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "conditions": {
          "description": "The latest observations of a StatefulSet's state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "currentReplicas": {
          "description": "The number of Pods created by the StatefulSet controller from the StatefulSet version indicated by `currentRevision`. Cannot be greater than `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "currentRevision": {
          "description": "If not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [0,`currentReplicas`).",
          "type": "string"
        },
        "observedGeneration": {
          "description": "The most recent generation observed by the StatefulSet controller. It corresponds to the StatefulSet's generation, which is updated on mutation by the API Server.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of Pods created by the StatefulSet controller that have a `\"Ready\"` condition. Cannot be greater than `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "description": "The number of Pods created by the StatefulSet controller.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "updateRevision": {
          "description": "If not empty, indicates the version of the StatefulSet used to generate Pods in the sequence [`replicas-updatedReplicas`,`replicas`)",
          "type": "string"
        },
        "updatedReplicas": {
          "description": "The number of Pods created by the StatefulSet controller from the StatefulSet version indicated by `updateRevision`. Cannot be greater than `replicas`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.apps.v1.StatefulSetUpdateStrategy": {
      "description": "The update strategy for a StatefulSet.",
      "properties": {
        "rollingUpdate": {
          "$ref": "#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy",
          "description": "Rolling update configuration parameters. Present only if `type` is set to `\"RollingUpdate\"`. This is required for rolling update. It cannot be specified when `type` is not `\"RollingUpdate\"`."
        },
        "type": {
          "default": "RollingUpdate",
          "description": "Type of the update strategy.\n\n- `\"RollingUpdate\"`' means that the update will be applied to all Pods with respect to the StatefulSet ordering constraints. New Pods will be created froom the `updateRevision`.\n- `\"OnDelete\"` triggers the legacy behavior. Version tracking and ordered rolling restarts are disabled. Pods are recreated from the StatefulSet's spec when they are manually deleted, using the version specified in `currentRevision`.\n",
          "enum": [
            "OnDelete",
            "RollingUpdate"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1.BoundObjectReference": {
      "description": "A reference to an object that a token is bound to.",
      "properties": {
        "apiVersion": {
          "description": "API group and version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind name of the referent",
          "enum": [
            "Pod",
            "Secret"
          ],
          "type": "string"
        },
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referent.",
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenRequest.CREATE": {
      "description": "TokenRequest requests a token for a given service account.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenRequest.GET": {
      "description": "TokenRequest requests a token for a given service account.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenRequestSpec": {
      "description": "Client provided parameters for a token request.",
      "properties": {
        "audiences": {
          "description": "The intendend audiences of the token. A recipient of a token must identitfy themself with an identifier in the list of `audiences` of the token, and otherwise should reject the token. A token issued for multiple `audiences` may be used to authenticate against any of the `audiences` listed but implies a high degree of trust between the target audiences.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "boundObjectRef": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.BoundObjectReference",
          "description": "A reference to an object that the token will be bound to. The token will only be valid for as long as the bound object exists. The API server's `TokenReview` endpoint will validate the `boundObjectRef`, but other `audiences` may not. Keep `expirationSeconds` small if you want prompt revocation."
        },
        "expirationSeconds": {
          "description": "The requested duration of validity of the request. The token issuer may return a token with a different validity duration so a client needs to check the `expirationTimestamp` field in a response.",
          "format": "int64",
          "maximum": 4294967295,
          "minimum": 600,
          "type": "integer"
        }
      },
      "required": [
        "audiences"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenRequestStatus": {
      "description": "The result of a token request.",
      "properties": {
        "expirationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time of expiration of the returned token."
        },
        "token": {
          "description": "The opaque bearer token.",
          "type": "string"
        }
      },
      "required": [
        "expirationTimestamp",
        "token"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenReview.CREATE": {
      "description": "TokenReview attempts to authenticate a token to a known user. **Note**: TokenReview requests may be cached by the webhook token authenticator plugin in the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec",
          "description": "Information about the request being evaluated"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenReview.GET": {
      "description": "TokenReview attempts to authenticate a token to a known user. **Note**: TokenReview requests may be cached by the webhook token authenticator plugin in the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus",
          "description": "Indicates whether the request can be authenticated; filled in by the server."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authentication.v1.TokenReviewSpec": {
      "description": "A description of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "A list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the `audiences`. If no audiences are provided, the `audiences` will default to the audiences of the Kubernetes API server.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "token": {
          "description": "The opaque bearer token.",
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.TokenReviewStatus": {
      "description": "The result of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "The audience identifiers chosen by the authenticator that are compatible with both the TokenReview and `token`. An identifier is any identifier in the intersection of the `audiences` in the TokenReview's `spec` and the token's `audiences`. A client of the TokenReview API that sets the `spec.audiences` field should validate that a compatible audience identifier is returned in the `status.audiences` field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty `status.audiences` field where `status.authenticated` is `\"true\"`, the token is valid against the audience of the Kubernetes API server.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "authenticated": {
          "description": "This indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "This indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1.UserInfo",
          "description": "The UserInfo associated with the provided token."
        }
      },
      "required": [
        "audiences"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1.UserInfo": {
      "description": "Information about a user",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different `uid`.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authentication.v1beta1.TokenReview.CREATE": {
      "description": "TokenReview attempts to authenticate a token to a known user. **Note**: TokenReview requests may be cached by the webhook token authenticator plugin in the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewSpec",
          "description": "Information about the request being evaluated"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authentication.v1beta1.TokenReview.GET": {
      "description": "TokenReview attempts to authenticate a token to a known user. **Note**: TokenReview requests may be cached by the webhook token authenticator plugin in the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authentication.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "TokenReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReviewStatus",
          "description": "Indicates whether the request can be authenticated; filled in by the server."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authentication.v1beta1.TokenReviewSpec": {
      "description": "A description of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "A list of the identifiers that the resource server presented with the token identifies as. Audience-aware token authenticators will verify that the token was intended for at least one of the `audiences`. If no audiences are provided, the `audiences` will default to the audiences of the Kubernetes API server.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "token": {
          "description": "The opaque bearer token.",
          "type": "string"
        }
      },
      "required": [
        "token"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1beta1.TokenReviewStatus": {
      "description": "The result of the token authentication request.",
      "properties": {
        "audiences": {
          "description": "The audience identifiers chosen by the authenticator that are compatible with both the TokenReview and `token`. An identifier is any identifier in the intersection of the `audiences` in the TokenReview's `spec` and the token's `audiences`. A client of the TokenReview API that sets the `spec.audiences` field should validate that a compatible audience identifier is returned in the `status.audiences` field to ensure that the TokenReview server is audience aware. If a TokenReview returns an empty `status.audiences` field where `status.authenticated` is `\"true\"`, the token is valid against the audience of the Kubernetes API server.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "authenticated": {
          "description": "This indicates that the token was associated with a known user.",
          "type": "boolean"
        },
        "error": {
          "description": "This indicates that the token couldn't be checked",
          "type": "string"
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.UserInfo",
          "description": "The UserInfo associated with the provided token."
        }
      },
      "required": [
        "audiences"
      ],
      "type": "object"
    },
    "io.k8s.api.authentication.v1beta1.UserInfo": {
      "description": "Information about a user",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Additional information provided by the authenticator.",
          "type": "object"
        },
        "groups": {
          "description": "The names of groups this user is a part of.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "uid": {
          "description": "A unique value that identifies this user across time. If this user is deleted and another user by the same name is added, they will have different `uid`.",
          "type": "string"
        },
        "username": {
          "description": "The name that uniquely identifies this user among all active users.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview.CREATE": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LocalSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. Only the `namespace` field is allowed for a `LocalSubjectAccessReview` object."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated. The `namespace` of the `spec.resourceAttributes` must be equal to the namespace you made the request against, i.e. the `metadata.namespace`. If empty, it is defaulted. The `spec.resourceAttributes` must be empty for a `LocalSubjectAccessReview` object."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LocalSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated. The `namespace` must be equal to the namespace you made the request against. If empty, it is defaulted."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.NonResourceAttributes": {
      "description": "The authorization attributes available for non-resource requests",
      "properties": {
        "path": {
          "description": "The URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "The standard HTTP verb",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.NonResourceRule": {
      "description": "Information that describes a rule for the non-resource path.",
      "properties": {
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards (`\"*\"`) are allowed, but only as the full, final step in the path. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of HTTP API verbs, like: `\"get\"`, `\"post\"`, `\"put\"`, `\"delete\"`, `\"patch\"`, `\"head\"`, `\"options\"`. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceAttributes": {
      "description": "The authorization attributes available for resource requests",
      "properties": {
        "group": {
          "description": "The API group of the `resource`. `\"*\"` means all.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource being requested for a `\"get\"` request or deleted for a `\"delete\"` request. `\"\"` (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces. Empty string (`\"\"`) is defaulted for `LocalSubjectAccessReviews`. Value should be empty string (`\"\"`) for cluster-scoped resources. Empty string (`\"\"`) means *all* for namespace scoped resources from a `SubjectAccessReview` or `SelfSubjectAccessReview`.",
          "type": "string"
        },
        "resource": {
          "description": "One of the existing resource types. `\"*\"` means all.",
          "type": "string"
        },
        "subresource": {
          "description": "One of the existing resource types. `\"\"` means none.",
          "type": "string"
        },
        "verb": {
          "description": "A kubernetes resource API verb, like: `\"get\"`, `\"list\"`, `\"watch\"`, `\"create\"`, `\"update\"`, `\"delete\"`, `\"proxy\"`. `\"*\"` means all.",
          "type": "string"
        },
        "version": {
          "description": "The API version of the `resource`. `\"*\"` means all.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.ResourceRule": {
      "description": "The list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "properties": {
        "apiGroups": {
          "description": "The name of the API group that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "An optional list of names that the rule applies to. An empty set means that everything is allowed. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to:\n\n- `\"*\"` means all in the specified `apiGroups`.\n- `\"*/foo\"` represents the subresource `\"foo\"` for all resources in the specified `apiGroups`\n.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of kubernetes resource API verbs, like: `\"get\"`, `\"list\"`, `\"watch\"`, `\"create\"`, `\"update\"`, `\"delete\"`, `\"proxy\"`. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview.CREATE": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a `spec.namespace` means *in all namespaces*. Self is a special case, because users should always be able to check whether they can perform an action",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. For `SelfSubjectAccessReview`, this must be empty."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec",
          "description": "Information about the request being evaluated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a `spec.namespace` means *in all namespaces*. Self is a special case, because users should always be able to check whether they can perform an action",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec",
          "description": "Information about the request being evaluated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status filled by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec": {
      "description": "A description of the access request. One and only one of `nonResourceAttributes` and `resourceAttributes` should be specified.",
      "properties": {
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "Information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "Information for a resource access request"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview.CREATE": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should **NOT** Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. `SubjectAccessReview` and `LocalAccessReview` are the correct way to defer authorization decisions to the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectRulesReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec",
          "description": "Information about the request being evaluated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should **NOT** Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. `SubjectAccessReview` and `LocalAccessReview` are the correct way to defer authorization decisions to the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectRulesReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec",
          "description": "Information about the request being evaluated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus",
          "description": "Status is filled in by the server and indicates the set of actions a user can perform."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec": {
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview.CREATE": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. This must be an empty object."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SubjectAccessReview.GET": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewSpec": {
      "description": "A description of the access request. Exactly one of `resourceAttributes` and `nonResourceAttributes` must be set. At least one of `user` and `groups` must be specified.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "This contains some extra information about the user, returned from the authenticator. Since that is input to the authorizer it needs a reflection here.",
          "type": "object"
        },
        "groups": {
          "description": "The groups for testing. At least one of `user` or `groups` must be specified.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes",
          "description": "Information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceAttributes",
          "description": "Information for a resource access request"
        },
        "uid": {
          "description": "UID of the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "The user for testing. At least one of `user` or `groups` must be specified. If you specify `user` but not `groups`, then is it interpreted as \"What if User were not a member of any groups\"?",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectAccessReviewStatus": {
      "description": "Status of authorization test request.",
      "properties": {
        "allowed": {
          "description": "Flag indicating whethre the action would be allowed.",
          "type": "boolean"
        },
        "denied": {
          "description": "Flag indicating whether the action would be denied. If both `allowed` is `false` and `denied` is `false`, then the authorizer has no opinion on whether to authorize the action. `denied` may not be `true` if `allowed` is `true`.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "An indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "This indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1.SubjectRulesReviewStatus": {
      "description": "The result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list,  it's safe to assume the subject has that permission even if that list is incomplete.",
      "properties": {
        "evaluationError": {
          "description": "This can appear in combination with `resourceRules` or `nonResourceRules`. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that `resourceRules` and/or `nonResourceRules` may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "This indicates that the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "The list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.NonResourceRule"
          },
          "type": "array"
        },
        "resourceRules": {
          "description": "The list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1.ResourceRule"
          },
          "type": "array"
        }
      },
      "required": [
        "incomplete",
        "nonResourceRules",
        "resourceRules"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview.CREATE": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LocalSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. Only the `namespace` field is allowed for a `LocalSubjectAccessReview` object."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated. The `namespace` of the `spec.resourceAttributes` must be equal to the namespace you made the request against, i.e. the `metadata.namespace`. If empty, it is defaulted. The `spec.resourceAttributes` must be empty for a `LocalSubjectAccessReview` object."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview.GET": {
      "description": "LocalSubjectAccessReview checks whether or not a user or group can perform an action in a given namespace. Having a namespace scoped resource makes it much easier to grant namespace scoped policy that includes permissions checking.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LocalSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated. The `namespace` must be equal to the namespace you made the request against. If empty, it is defaulted."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.NonResourceAttributes": {
      "description": "The authorization attributes available for non-resource requests",
      "properties": {
        "path": {
          "description": "The URL path of the request",
          "type": "string"
        },
        "verb": {
          "description": "The standard HTTP verb",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.NonResourceRule": {
      "description": "Information that describes a rule for the non-resource path.",
      "properties": {
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards (`\"*\"`) are allowed, but only as the full, final step in the path. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of HTTP API verbs, like: `\"get\"`, `\"post\"`, `\"put\"`, `\"delete\"`, `\"patch\"`, `\"head\"`, `\"options\"`. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.ResourceAttributes": {
      "description": "The authorization attributes available for resource requests",
      "properties": {
        "group": {
          "description": "The API group of the `resource`. `\"*\"` means all.",
          "type": "string"
        },
        "name": {
          "description": "The name of the resource being requested for a `\"get\"` request or deleted for a `\"delete\"` request. `\"\"` (empty) means all.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the action being requested. Currently, there is no distinction between no namespace and all namespaces. Empty string (`\"\"`) is defaulted for `LocalSubjectAccessReviews`. Value should be empty string (`\"\"`) for cluster-scoped resources. Empty string (`\"\"`) means *all* for namespace scoped resources from a `SubjectAccessReview` or `SelfSubjectAccessReview`.",
          "type": "string"
        },
        "resource": {
          "description": "One of the existing resource types. `\"*\"` means all.",
          "type": "string"
        },
        "subresource": {
          "description": "One of the existing resource types. `\"\"` means none.",
          "type": "string"
        },
        "verb": {
          "description": "A kubernetes resource API verb, like: `\"get\"`, `\"list\"`, `\"watch\"`, `\"create\"`, `\"update\"`, `\"delete\"`, `\"proxy\"`. `\"*\"` means all.",
          "type": "string"
        },
        "version": {
          "description": "The API version of the `resource`. `\"*\"` means all.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.ResourceRule": {
      "description": "The list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
      "properties": {
        "apiGroups": {
          "description": "The name of the API group that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "An optional list of names that the rule applies to. An empty set means that everything is allowed. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to:\n\n- `\"*\"` means all in the specified `apiGroups`.\n- `\"*/foo\"` represents the subresource `\"foo\"` for all resources in the specified `apiGroups`\n.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "verbs": {
          "description": "A list of kubernetes resource API verbs, like: `\"get\"`, `\"list\"`, `\"watch\"`, `\"create\"`, `\"update\"`, `\"delete\"`, `\"proxy\"`. `\"*\"` means all.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview.CREATE": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a `spec.namespace` means *in all namespaces*. Self is a special case, because users should always be able to check whether they can perform an action",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. For `SelfSubjectAccessReview`, this must be empty."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec",
          "description": "Information about the request being evaluated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview.GET": {
      "description": "SelfSubjectAccessReview checks whether or the current user can perform an action. Not filling in a `spec.namespace` means *in all namespaces*. Self is a special case, because users should always be able to check whether they can perform an action",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec",
          "description": "Information about the request being evaluated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus",
          "description": "Status filled by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectAccessReviewSpec": {
      "description": "A description of the access request. One and only one of `nonResourceAttributes` and `resourceAttributes` should be specified.",
      "properties": {
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceAttributes",
          "description": "Information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceAttributes",
          "description": "Information for a resource access request"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview.CREATE": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should **NOT** Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. `SubjectAccessReview` and `LocalAccessReview` are the correct way to defer authorization decisions to the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectRulesReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec",
          "description": "Information about the request being evaluated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview.GET": {
      "description": "SelfSubjectRulesReview enumerates the set of actions the current user can perform within a namespace. The returned list of actions may be incomplete depending on the server's authorization mode, and any errors experienced during the evaluation. SelfSubjectRulesReview should be used by UIs to show/hide actions, or to quickly let an end user reason about their permissions. It should **NOT** Be used by external systems to drive authorization decisions as this raises confused deputy, cache lifetime/revocation, and correctness concerns. `SubjectAccessReview` and `LocalAccessReview` are the correct way to defer authorization decisions to the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SelfSubjectRulesReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec",
          "description": "Information about the request being evaluated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus",
          "description": "Status is filled in by the server and indicates the set of actions a user can perform."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SelfSubjectRulesReviewSpec": {
      "properties": {
        "namespace": {
          "description": "Namespace to evaluate rules for",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReview.CREATE": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReview.GET": {
      "description": "SubjectAccessReview checks whether or not a user or group can perform an action.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SubjectAccessReview"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec",
          "description": "Information about the request being evaluated"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus",
          "description": "Status is filled in by the server and indicates whether the request is allowed or not"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReviewSpec": {
      "description": "A description of the access request. Exactly one of `resourceAttributes` and `nonResourceAttributes` must be set. At least one of `user` and `groups` must be specified.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "This contains some extra information about the user, returned from the authenticator. Since that is input to the authorizer it needs a reflection here.",
          "type": "object"
        },
        "groups": {
          "description": "The groups for testing. At least one of `user` or `groups` must be specified.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nonResourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceAttributes",
          "description": "Information for a non-resource access request"
        },
        "resourceAttributes": {
          "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceAttributes",
          "description": "Information for a resource access request"
        },
        "uid": {
          "description": "UID of the requesting user.",
          "type": "string"
        },
        "user": {
          "description": "The user for testing. At least one of `user` or `groups` must be specified. If you specify `user` but not `groups`, then is it interpreted as \"What if User were not a member of any groups\"?",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.SubjectAccessReviewStatus": {
      "description": "Status of authorization test request.",
      "properties": {
        "allowed": {
          "description": "Flag indicating whethre the action would be allowed.",
          "type": "boolean"
        },
        "denied": {
          "description": "Flag indicating whether the action would be denied. If both `allowed` is `false` and `denied` is `false`, then the authorizer has no opinion on whether to authorize the action. `denied` may not be `true` if `allowed` is `true`.",
          "type": "boolean"
        },
        "evaluationError": {
          "description": "An indication that some error occurred during the authorization check. It is entirely possible to get an error and be able to continue determine authorization status in spite of it. For instance, RBAC can be missing a role, but enough roles are still present and bound to reason about the request.",
          "type": "string"
        },
        "reason": {
          "description": "This indicates why a request was allowed or denied.",
          "type": "string"
        }
      },
      "required": [
        "allowed"
      ],
      "type": "object"
    },
    "io.k8s.api.authorization.v1beta1.SubjectRulesReviewStatus": {
      "description": "The result of a rules check. This check can be incomplete depending on the set of authorizers the server is configured with and any errors experienced during evaluation. Because authorization rules are additive, if a rule appears in a list,  it's safe to assume the subject has that permission even if that list is incomplete.",
      "properties": {
        "evaluationError": {
          "description": "This can appear in combination with `resourceRules` or `nonResourceRules`. It indicates an error occurred during rule evaluation, such as an authorizer that doesn't support rule evaluation, and that `resourceRules` and/or `nonResourceRules` may be incomplete.",
          "type": "string"
        },
        "incomplete": {
          "description": "This indicates that the rules returned by this call are incomplete. This is most commonly encountered when an authorizer, such as an external authorizer, doesn't support rules evaluation.",
          "type": "boolean"
        },
        "nonResourceRules": {
          "description": "The list of actions the subject is allowed to perform on non-resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.NonResourceRule"
          },
          "type": "array"
        },
        "resourceRules": {
          "description": "The list of actions the subject is allowed to perform on resources. The list ordering isn't significant, may contain duplicates, and possibly be incomplete.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.ResourceRule"
          },
          "type": "array"
        }
      },
      "required": [
        "incomplete",
        "nonResourceRules",
        "resourceRules"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.CrossVersionObjectReference": {
      "description": "Information for identifying a referenced resource.",
      "properties": {
        "apiVersion": {
          "description": "API group and version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. The value cannot be `\".\"` or `\"..\"`, and it can not contain `'/'` or `'%'`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.CREATE": {
      "description": "The configuration for a horizontal Pod autoscaler (HPA).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET": {
      "description": "The configuration for a horizontal Pod autoscaler (HPA).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus",
          "description": "Current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE": {
      "description": "The configuration for a horizontal Pod autoscaler (HPA).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList": {
      "description": "A list of HorizontalPodAutoscaler objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of HorizontalPodAutoscaler objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscalerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec": {
      "description": "The specification of a horizontal Pod autoscaler (HPA).",
      "properties": {
        "maxReplicas": {
          "description": "Upper limit for the number of Pods that can be set by the autoscaler; cannot be smaller than `minReplicas`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "minReplicas": {
          "default": 1,
          "description": "The lower limit for the number of replicas to which the autoscaler can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate `HPAScaleToZero` is enabled and at least one `\"Object\"` or `\"External\"` metric is configured. Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference",
          "description": "Reference to scaled resource; horizontal Pod autoscaler will learn the current resource consumption and will set the desired number of Pods by using its `scale` subresource."
        },
        "targetCPUUtilizationPercentage": {
          "description": "Target average CPU utilization (represented as a percentage of requested CPU) over all the Pods; if not specified the default autoscaling policy will be used.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "maxReplicas",
        "scaleTargetRef"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus": {
      "description": "Current status of a horizontal Pod autoscaler",
      "properties": {
        "currentCPUUtilizationPercentage": {
          "description": "Current average CPU utilization over all Pods, represented as a percentage of requested CPU, e.g. 70 means that an average Pod is using now 70% of its requested CPU.",
          "format": "int32",
          "type": "integer"
        },
        "currentReplicas": {
          "description": "Current number of replicas of Pods managed by this autoscaler.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "desiredReplicas": {
          "description": "Desired number of replicas of Pods managed by this autoscaler.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "lastScaleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the HorizontalPodAutoscaler scaled the number of Pods; used by the autoscaler to control how often the number of Pods is changed."
        },
        "observedGeneration": {
          "description": "Most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "currentCPUUtilizationPercentage",
        "currentReplicas",
        "desiredReplicas",
        "lastScaleTime",
        "observedGeneration"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.Scale.GET": {
      "description": "The scale for a resource.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Scale"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec",
          "description": "Defines the behavior of the scale."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus",
          "description": "Current status of the scale. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.Scale.UPDATE": {
      "description": "The scale for a resource.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Scale"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec",
          "description": "Defines the behavior of the scale."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v1.ScaleSpec": {
      "description": "The attributes of a scale subresource.",
      "properties": {
        "replicas": {
          "description": "The desired number of instances for the scaled object.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v1.ScaleStatus": {
      "description": "The current status of a scale subresource.",
      "properties": {
        "replicas": {
          "description": "The actual number of observed instances of the scaled object.",
          "format": "int32",
          "type": "integer"
        },
        "selector": {
          "description": "Label query over Pods that should match the replicas count. This is same as the label selector but in the string format to avoid introspection by clients. The string will be in the same format as the query-param syntax.",
          "type": "string"
        }
      },
      "required": [
        "replicas",
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference": {
      "description": "Information for identifying a referenced resource.",
      "properties": {
        "apiVersion": {
          "description": "API group and version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. The value cannot be `\".\"` or `\"..\"`, and it can not contain `'/'` or `'%'`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.ExternalMetricSource": {
      "description": "ExternalMetricSource indicates how to scale on a metric not associated with any Kubernetes object (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster). Exactly one target type should be set.",
      "properties": {
        "metricName": {
          "description": "The name of the metric in question.",
          "type": "string"
        },
        "metricSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Used to identify a specific time series within a given metric."
        },
        "targetAverageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target per-Pod value of global metric (as a quantity). Mutually exclusive with `targetValue`."
        },
        "targetValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the metric (as a quantity). Mutually exclusive with `targetAverageValue`."
        }
      },
      "required": [
        "metricName"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus": {
      "description": "The current value of a global metric which is not associated with any Kubernetes object.",
      "properties": {
        "currentAverageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of metric averaged over autoscaled Pods."
        },
        "currentValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the metric (as a quantity)"
        },
        "metricName": {
          "description": "The name of a metric used for autoscaling in metric system.",
          "minLength": 1,
          "type": "string"
        },
        "metricSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Used to identify a specific time series within a given metric."
        }
      },
      "required": [
        "currentValue",
        "metricName"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.CREATE": {
      "description": "The configuration for a horizontal Pod autoscaler, which automatically manages the replica count of any resource implementing the `scale` subresource based on the `metrics` specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET": {
      "description": "The configuration for a horizontal Pod autoscaler, which automatically manages the replica count of any resource implementing the `scale` subresource based on the `metrics` specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus",
          "description": "The current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.UPDATE": {
      "description": "The configuration for a horizontal Pod autoscaler, which automatically manages the replica count of any resource implementing the `scale` subresource based on the `metrics` specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition": {
      "description": "The state of a HorizontalPodAutoscaler at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another"
        },
        "message": {
          "description": "A human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of the current condition",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList": {
      "description": "A list of HorizontalPodAutoscaler objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of HorizontalPodAutoscaler objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscalerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v2beta1"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerSpec": {
      "description": "The specification of a HorizontalPodAutoscaler (HPA).",
      "properties": {
        "maxReplicas": {
          "description": "The upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less than `minReplicas`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "metrics": {
          "description": "The specifications to use for calculating the desired replica count. The maximum replica count across all metrics will be used. The desired replica count is calculated through multiplying the ratio between the target value and the current value by the current number of Pods. Ergo, metrics used must decrease as the Pod count is increased, and vice-versa. See the individual metric source types for more information about how each `type` of metric must respond.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.MetricSpec"
          },
          "type": "array"
        },
        "minReplicas": {
          "default": 1,
          "description": "The lower limit for the number of replicas to which the autoscaler can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate `HPAScaleToZero` is enabled and at least one `\"Object\"` or `\"External\"` metric is configured. Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference",
          "description": "This points to the target resource to scale, and is used to identify the Pods for which metrics should be collected, as well as to actually change the replica count."
        }
      },
      "required": [
        "maxReplicas",
        "scaleTargetRef"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerStatus": {
      "description": "The current status of a HorizontalPodAutoscaler",
      "properties": {
        "conditions": {
          "description": "The set of conditions required for this autoscaler to scale its target. It indicates whether or not those conditions are met.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerCondition"
          },
          "type": "array"
        },
        "currentMetrics": {
          "description": "The last read state of the metrics used by this autoscaler.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.MetricStatus"
          },
          "type": "array"
        },
        "currentReplicas": {
          "description": "The current number of replicas of Pods managed by this autoscaler, as last seen by the autoscaler.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "desiredReplicas": {
          "description": "The desired number of replicas of Pods managed by this autoscaler, as last calculated by the autoscaler.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "lastScaleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the HorizontalPodAutoscaler scaled the number of Pods; used by the autoscaler to control how often the number of Pods is changed."
        },
        "observedGeneration": {
          "description": "Most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "conditions",
        "currentMetrics",
        "currentReplicas",
        "desiredReplicas",
        "lastScaleTime",
        "observedGeneration"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.MetricSpec": {
      "description": "This specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "properties": {
        "external": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ExternalMetricSource",
          "description": "Reference to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information from outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ObjectMetricSource",
          "description": "Reference to a metric describing a single Kubernetes object (for example, `\"hits-per-second\"` on an Ingress object)."
        },
        "pods": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.PodsMetricSource",
          "description": "Reference to a metric describing each Pod in the current scale target (for example, `\"transactions-processed-per-second\"`). The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ResourceMetricSource",
          "description": "Reference to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes describing each Pod in the current scale target (e.g. CPU or memory). Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source."
        },
        "type": {
          "description": "The type of metric source. It should be one of `\"External\"`, `\"Object\"`, `\"Pods\"` or `\"Resource\"`, each mapping to a matching field in the object.",
          "enum": [
            "External",
            "Object",
            "Pods",
            "Resource"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.MetricStatus": {
      "description": "The last-read state of a single metric.",
      "properties": {
        "external": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ExternalMetricStatus",
          "description": "Reference to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information from outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus",
          "description": "Reference to a metric describing a single Kubernetes object (for example, `\"hits-per-second\"` on an Ingress object)."
        },
        "pods": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.PodsMetricStatus",
          "description": "Reference to a metric describing each Pod in the current scale target (for example, `\"transactions-processed-per-second\"`).  The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus",
          "description": "Reference to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes describing each Pod in the current scale target (e.g. CPU or memory). Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source."
        },
        "type": {
          "description": "The type of metric source. It should be one of `\"External\"`, `\"Object\"`, `\"Pods\"` or `\"Resource\"`, each mapping to a matching field in the object.",
          "enum": [
            "External",
            "Object",
            "Pods",
            "Resource"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.ObjectMetricSource": {
      "description": "ObjectMetricSource indicates how to scale on a metric describing a kubernetes object (for example, `\"hits-per-second\"` on an Ingress object).",
      "properties": {
        "averageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the average of the metric across all relevant Pods (as a quantity)"
        },
        "metricName": {
          "description": "The name of the metric in question.",
          "minLength": 1,
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The string-encoded form of a standard kubernetes label selector for the given metric. When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the `metricName` will be used to gather metrics."
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference",
          "description": "The described Kubernetes object."
        },
        "targetValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the metric (as a quantity)."
        }
      },
      "required": [
        "metricName",
        "target",
        "targetValue"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.ObjectMetricStatus": {
      "description": "The current value of a metric describing a kubernetes object (for example, `\"hits-per-second\"` on an Ingress object).",
      "properties": {
        "averageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the average of the metric across all relevant Pods (as a quantity)"
        },
        "currentValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the metric (as a quantity)."
        },
        "metricName": {
          "description": "The name of the metric in question.",
          "minLength": 1,
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The string-encoded form of a standard kubernetes label selector for the given metric. When set in the object metric source, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the `metricName` will be used to gather metrics."
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.CrossVersionObjectReference",
          "description": "The described Kubernetes object."
        }
      },
      "required": [
        "currentValue",
        "metricName",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.PodsMetricSource": {
      "description": "PodsMetricSource indicates how to scale on a metric describing each Pod in the current scale target (for example, `\"transactions-processed-per-second\"`). The values will be averaged together before being compared to the target value.",
      "properties": {
        "metricName": {
          "description": "The name of the metric in question",
          "minLength": 1,
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The string-encoded form of a standard Kubernetes label selector for the given metric. When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the `metricName` will be used to gather metrics."
        },
        "targetAverageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the average of the metric across all relevant Pods (as a quantity)"
        }
      },
      "required": [
        "metricName",
        "targetAverageValue"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.PodsMetricStatus": {
      "description": "The current value of a metric describing each Pod in the current scale target (for example, `\"transactions-processed-per-second\"`).",
      "properties": {
        "currentAverageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the average of the metric across all relevant Pods (as a quantity)"
        },
        "metricName": {
          "description": "The name of the metric in question",
          "minLength": 1,
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The string-encoded form of a standard Kubernetes label selector for the given metric. When set in the pods metric source, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the `metricName` will be used to gather metrics."
        }
      },
      "required": [
        "currentAverageValue",
        "metricName"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.ResourceMetricSource": {
      "description": "ResourceMetricSource indicates how to scale on a resource metric known to Kubernetes, as specified in `requests` and `limits`, describing each Pod in the current scale target (e.g. CPU or memory). The values will be averaged together before being compared to the target. Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source.",
      "properties": {
        "name": {
          "description": "The name of the resource in question.",
          "minLength": 1,
          "type": "string"
        },
        "targetAverageUtilization": {
          "description": "The target value of the average of the resource metric across all relevant Pods, represented as a percentage of the requested value of the resource for the Pods.",
          "format": "int32",
          "type": "integer"
        },
        "targetAverageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the average of the resource metric across all relevant Pods, as a raw value (instead of as a percentage of the request), similar to the `\"pods\"` metric source type."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta1.ResourceMetricStatus": {
      "description": "The current value of a resource metric known to Kubernetes, as specified in `requests` and `limits`, describing each Pod in the current scale target (e.g. CPU or memory). Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source.",
      "properties": {
        "currentAverageUtilization": {
          "description": "The current value of the average of the resource metric across all relevant Pods, represented as a percentage of the requested value of the resource for the Pods. It will only be present if `targetAverageValue` was set in the corresponding metric specification.",
          "format": "int32",
          "type": "integer"
        },
        "currentAverageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the average of the resource metric across all relevant Pods, as a raw value (instead of as a percentage of the request), similar to the `\"pods\"` metric source type. It will always be set, regardless of the corresponding metric specification."
        },
        "name": {
          "description": "The name of the resource in question.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "currentAverageValue",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference": {
      "description": "Information for identifying a referenced resource.",
      "properties": {
        "apiVersion": {
          "description": "API group and version of the referent",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referent.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referent. The value cannot be `\".\"` or `\"..\"`, and it can not contain `'/'` or `'%'`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ExternalMetricSource": {
      "description": "A metric not associated with any Kubernetes object.",
      "properties": {
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given `metric`"
        }
      },
      "required": [
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus": {
      "description": "The current value of a global metric which is not associated with any Kubernetes object.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given `metric`"
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        }
      },
      "required": [
        "current",
        "metric"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy": {
      "description": "HPAScalingPolicy is a policy which must hold true for a specified past interval.",
      "properties": {
        "periodSeconds": {
          "default": 15,
          "description": "The time window for which the policy should hold true.",
          "format": "int32",
          "maximum": 1800,
          "minimum": 1,
          "type": "integer"
        },
        "type": {
          "description": "This is used to specify the scaling policy.\n\n- `\"Pods\"` means the policy is about the change in absolute number of Pods.\n- `\"Percent\"` means the policy is about the relative number of change with respect to the current number of Pods.\n",
          "enum": [
            "Pods",
            "Percentage"
          ],
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "The amount of change permitted by the policy. When `type` is set to `\"Percent\"`, the maximum value is 100.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "periodSeconds",
        "type",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HPAScalingRules": {
      "description": "HPAScalingRules configures the scaling behavior for one direction. These rules are applied after calculating the desired replicas from metrics for the HPA. They can limit the scaling velocity by specifying scaling policies. They can prevent flapping by specifying the stabilization window, so that the number of replicas is not set instantly. Instead, the safest value from the stabilization window is chosen.",
      "properties": {
        "policies": {
          "description": "A list of potential scaling polices which can be used during scaling. At least one policy must be specified, otherwise the whole rule will be discarded as invalid",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingPolicy"
          },
          "minItems": 1,
          "type": "array"
        },
        "selectPolicy": {
          "default": "Max",
          "description": "This is used to specify the policy to use.\n\n- `\"Max\"` means selecting the policy with the highest possible change.\n- `\"Min\"` means selecting the policy with the lowest possible change.\n",
          "enum": [
            "Max",
            "Min"
          ],
          "type": "string"
        },
        "stabilizationWindowSeconds": {
          "description": "The number of seconds after which recommendations are to be considered while scaling up or scaling down. For scaling up, the default value is 0; for scale down, the default value is 300.",
          "format": "int32",
          "maximum": 3600,
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.CREATE": {
      "description": "The configuration for a horizontal Pod autoscaler, which automatically manages the replica count of any resource implementing the `scale` subresource based on the `metrics` specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET": {
      "description": "The configuration for a horizontal Pod autoscaler, which automatically manages the replica count of any resource implementing the `scale` subresource based on the `metrics` specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus",
          "description": "The current information about the autoscaler."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.UPDATE": {
      "description": "The configuration for a horizontal Pod autoscaler, which automatically manages the replica count of any resource implementing the `scale` subresource based on the `metrics` specified.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscaler"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec",
          "description": "Specification of the behavior of the autoscaler"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior": {
      "description": "Configuration of the scaling behavior of the target in both up and down directions.",
      "properties": {
        "scaleDown": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingRules",
          "description": "The scaling policy for scaling down. If not set, the default value is to allow to scale down to `minReplicas` Pods, with a 300 second stabilization window."
        },
        "scaleUp": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HPAScalingRules",
          "description": "The scaling policy for scaling Up. If not set, the default value is the higher of:\n\n1. increase no more than 4 Pods per 60 seconds;\n1. double the number of Pods per 60 seconds.\n\nNo stabilization is used."
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition": {
      "description": "The state of a HorizontalPodAutoscaler at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another"
        },
        "message": {
          "description": "A human-readable explanation containing details about the transition",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of the current condition",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList": {
      "description": "A list of HorizontalPodAutoscaler objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "autoscaling/v2beta2"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of HorizontalPodAutoscaler objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "HorizontalPodAutoscalerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscalerList",
          "version": "v2beta2"
        }
      ]
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerSpec": {
      "description": "The specification of a horizontal Pod autoscaler (HPA).",
      "properties": {
        "behavior": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerBehavior",
          "description": "The scaling behavior configuration of the target in both the up and down directions. If not set, the default HPAScalingRules for scaling up and scaling down are used."
        },
        "maxReplicas": {
          "description": "Upper limit for the number of replicas to which the autoscaler can scale up. It cannot be less than `minReplicas`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "metrics": {
          "description": "The specifications to use for calculating the desired replica count. The maximum value across all metrics will be used. The desired replica count is calculated by multiplying the ratio between the target value and the current value by the current number of Pods. Ergo, metrics used must decrease as the Pod count is increased, and vice-versa. See the individual metric source types for more information about how each `type` of metric must respond. If not set, the default metrics will be set to `80%` of average CPU utilization.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricSpec"
          },
          "type": "array"
        },
        "minReplicas": {
          "default": 1,
          "description": "The lower limit for the number of replicas to which the autoscaler can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate `HPAScaleToZero` is enabled and at least one `\"Object\"` or `\"External\"` metric is configured. Scaling is active as long as at least one metric value is available.",
          "format": "int32",
          "type": "integer"
        },
        "scaleTargetRef": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
          "description": "This points to the target resource to scale, and is used to identify the Pods for which metrics should be collected, as well as to actually change the replica count."
        }
      },
      "required": [
        "maxReplicas",
        "scaleTargetRef"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerStatus": {
      "description": "Current status of a horizontal Pod autoscaler",
      "properties": {
        "conditions": {
          "description": "The set of conditions required for this autoscaler to scale its target. It indicates whether or not those conditions are met.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerCondition"
          },
          "type": "array"
        },
        "currentMetrics": {
          "description": "The last read state of the metrics used by this autoscaler.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricStatus"
          },
          "type": "array"
        },
        "currentReplicas": {
          "description": "Current number of replicas of Pods managed by this autoscaler, as last seen by the autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "desiredReplicas": {
          "description": "Desired number of replicas of Pods managed by this autoscaler, as last calculated by the autoscaler.",
          "format": "int32",
          "type": "integer"
        },
        "lastScaleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the HorizontalPodAutoscaler scaled the number of Pods; used by the autoscaler to control how often the number of Pods is changed."
        },
        "observedGeneration": {
          "description": "Most recent generation observed by this autoscaler.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "conditions",
        "currentMetrics",
        "currentReplicas",
        "desiredReplicas",
        "lastScaleTime",
        "observedGeneration"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricIdentifier": {
      "description": "The name and optionally the selector for a metric",
      "properties": {
        "name": {
          "description": "The name of the given metric. The name cannot be `\".\"` or `\"..\"` and it cannot contain `'/'` or `'%'`.",
          "minLength": 1,
          "type": "string"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "The string-encoded form of a standard kubernetes label selector for the given metric. When set, it is passed as an additional parameter to the metrics server for more specific metrics scoping. When unset, just the `name` will be used to gather metrics."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricSpec": {
      "description": "This specifies how to scale based on a single metric (only `type` and one other matching field should be set at once).",
      "properties": {
        "external": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ExternalMetricSource",
          "description": "Reference to a global metric that is not associated with any Kubernetes object. It allows autoscaling based on information from outside of cluster (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster)."
        },
        "object": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ObjectMetricSource",
          "description": "Reference to a metric describing a single Kubernetes object (for example, `\"hits-per-second\"` on an Ingress object)."
        },
        "pods": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.PodsMetricSource",
          "description": "Reference to a metric describing each Pod in the current scale target (for example, `\"transactions-processed-per-second\"`). The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ResourceMetricSource",
          "description": "Reference  to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes describing each Pod in the current scale target (e.g. CPU or memory). Such metrics are built into Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source."
        },
        "type": {
          "description": "The type of metric source. It should be one of `\"External\"`, `\"Object\"`, `\"Pods\"` or `\"Resource\"`, each mapping to a matching field in the object. Note: `\"ContainerResource\"` type is available only when the feature gate `HPAContainerMetrics` is enabled.",
          "enum": [
            "External",
            "Object",
            "Pods",
            "Resource"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricStatus": {
      "description": "The last-read state of a single metric.",
      "properties": {
        "external": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ExternalMetricStatus",
          "description": "This refers to a global metric that is not associated with any Kubernetes object."
        },
        "object": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus",
          "description": "This refers to a metric describing a single kubernetes object."
        },
        "pods": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.PodsMetricStatus",
          "description": "This refers to a metric describing each Pod in the current scale target. The values will be averaged together before being compared to the target value."
        },
        "resource": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus",
          "description": "This refers to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes describing each Pod in the current scale target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source."
        },
        "type": {
          "description": "The type of metric source. It will be one of `\"External\"`, `\"Object\"`, `\"Pods\"` or `\"Resource\"`, each corresponds to a matching field in the object.",
          "enum": [
            "External",
            "Object",
            "Pods",
            "Resource"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricTarget": {
      "description": "The target value, average value, or average utilization of a specific metric.\n\n- For `\"Object\"` type of metrics, one of `value` and `averageValue` must be specified.\n- For `\"External\"` type of metrics, one and only one of `value` or `averageValue` must be set.\n- For `\"Pod\"` type of metrics, `averageValue` must be set.\n- For `\"Resource\"` type of metrics, either `averageUtilization` or `averageValue` should be specified but not both.\n",
      "properties": {
        "averageUtilization": {
          "description": "Target value of the average of the resource metric across all relevant Pods, represented as a percentage of the requested value of the resource for the Pods. Currently only valid for `\"Resource\"` metric source type",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "averageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the average of the metric across all relevant Pods. The value must be positive if specified."
        },
        "type": {
          "description": "Type of the metric value.",
          "enum": [
            "AverageValue",
            "Utilization",
            "Value"
          ],
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The target value of the metric (as a quantity). The value must be positive if specified."
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.MetricValueStatus": {
      "description": "The current value for a metric",
      "properties": {
        "averageUtilization": {
          "description": "The current value of the average of the resource metric across all relevant Pods, represented as a percentage of the requested value of the resource for the Pods.",
          "format": "int32",
          "type": "integer"
        },
        "averageValue": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the average of the metric across all relevant Pods (as a quantity)"
        },
        "value": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "The current value of the metric (as a quantity)."
        }
      },
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ObjectMetricSource": {
      "description": "A metric on a Kubernetes object.",
      "properties": {
        "describedObject": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference",
          "description": "A reference to the object to be evaluated."
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by `name` and `selector`."
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given `metric`."
        }
      },
      "required": [
        "describedObject",
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ObjectMetricStatus": {
      "description": "The current value of a metric describing a kubernetes object.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given `metric`"
        },
        "describedObject": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.CrossVersionObjectReference"
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        }
      },
      "required": [
        "current",
        "describedObject",
        "metric"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.PodsMetricSource": {
      "description": "A metric describing each Pod in the current scale target. The values will be averaged together before being compared to the target value.",
      "properties": {
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given `metric`"
        }
      },
      "required": [
        "metric",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.PodsMetricStatus": {
      "description": "The current value of a metric describing each Pod in the current scale target.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given `metric`"
        },
        "metric": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricIdentifier",
          "description": "The target metric by name and selector"
        }
      },
      "required": [
        "current",
        "metric"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ResourceMetricSource": {
      "description": "A resource metric describing each Pod in the current scale target. The resource is known to Kubernetes as it can be specified in `requests` and `limits`. The values will be averaged together before being compared to the target. Such metrics are built in to Kubernetes, and have special scaling options on top of those available to normal per-Pod metrics using the `\"pods\"` source.  Only one `target` type should be set.",
      "properties": {
        "name": {
          "description": "The name of the resource in question.",
          "minLength": 1,
          "type": "string"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricTarget",
          "description": "The target value for the given metric"
        }
      },
      "required": [
        "name",
        "target"
      ],
      "type": "object"
    },
    "io.k8s.api.autoscaling.v2beta2.ResourceMetricStatus": {
      "description": "The current value of a resource metric known to Kubernetes, as specified in `requests` and `limits`, describing each Pod in the current scale target.",
      "properties": {
        "current": {
          "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.MetricValueStatus",
          "description": "The current value for the given metric"
        },
        "name": {
          "description": "The name of the resource in question.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "current",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.Job.CREATE": {
      "description": "The configuration of a Job.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Job"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE",
          "description": "Specification of the desired behavior of a Job"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.Job.GET": {
      "description": "The configuration of a Job.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Job"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.GET",
          "description": "Specification of the desired behavior of a Job"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobStatus",
          "description": "Current status of a Job"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.Job.UPDATE": {
      "description": "The configuration of a Job.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Job"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.UPDATE",
          "description": "Specification of the desired behavior of a Job"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.JobCondition": {
      "description": "JobCondition describes the current state of a Job.",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition was checked."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "The (brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Type of job condition",
          "enum": [
            "Compelte",
            "Failed"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobList": {
      "description": "A list of Job objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Job objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "JobList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "JobList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.batch.v1.JobSpec.CREATE": {
      "description": "This describes how the Job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "The duration in seconds relative to the `startTime` that the Job may be active before the system tries to terminate it.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "backoffLimit": {
          "default": 6,
          "description": "The number of retries before marking this Job as failed",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completions": {
          "description": "The desired number of successfully finished Pods the Job should be run with. Setting to `nil` means that the success of any Pod signals the success of all Pods, and allows `parallelism` to have any positive value. Setting to `1` means that `parallelism` is limited to 1 and the success of that Pod signals the success of the Job. This field cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "manualSelector": {
          "description": "This controls the generation of Pod labels and Pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When `false` or unset, the system pick labels unique to this Job and appends those labels to the Pod template. When `true`, the user is responsible for picking unique labels and specifying the `selector`. Failure to pick a unique label may cause this and other Jobs to not function correctly. However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.",
          "type": "boolean"
        },
        "parallelism": {
          "description": "The maximum desired number of Pods the Job should run at any given time. The actual number of Pods running in steady state will be less than this number when `((.spec.completions - .status.successful) < .spec.parallelism)`, i.e. when the work left to do is less than max `parallelism`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the Pod count. Normally, the system sets this field for you. The `selector` must match the `labels` defined on the Pod template. This field cannot be updated."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "Describes the Pod that will be created when executing a Job. This field cannot be updated. For a Job, the `restartPolicy` must be explicitly set because the default value `\"Always\"` is not acceptable. The valid value is one of `\"OnFailure\"` and `\"Never\"`. Also the `containers` field cannot be empty."
        },
        "ttlSecondsAfterFinished": {
          "description": "This limits the lifetime of a Job that has finished execution (either `\"Complete\"` or `\"Failed\"`). If this field is set, the specified seconds after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. `finalizers`) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is Alpha level and is only honored by servers that enable the `TTLAfterFinished` feature gate.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobSpec.GET": {
      "description": "This describes how the Job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "The duration in seconds relative to the `startTime` that the Job may be active before the system tries to terminate it.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "backoffLimit": {
          "default": 6,
          "description": "The number of retries before marking this Job as failed",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completions": {
          "description": "The desired number of successfully finished Pods the Job should be run with. Setting to `nil` means that the success of any Pod signals the success of all Pods, and allows `parallelism` to have any positive value. Setting to `1` means that `parallelism` is limited to 1 and the success of that Pod signals the success of the Job. This field cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "manualSelector": {
          "description": "This controls the generation of Pod labels and Pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When `false` or unset, the system pick labels unique to this Job and appends those labels to the Pod template. When `true`, the user is responsible for picking unique labels and specifying the `selector`. Failure to pick a unique label may cause this and other Jobs to not function correctly. However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.",
          "type": "boolean"
        },
        "parallelism": {
          "description": "The maximum desired number of Pods the Job should run at any given time. The actual number of Pods running in steady state will be less than this number when `((.spec.completions - .status.successful) < .spec.parallelism)`, i.e. when the work left to do is less than max `parallelism`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the Pod count. Normally, the system sets this field for you. The `selector` must match the `labels` defined on the Pod template. This field cannot be updated."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "Describes the Pod that will be created when executing a Job. This field cannot be updated."
        },
        "ttlSecondsAfterFinished": {
          "description": "This limits the lifetime of a Job that has finished execution (either `\"Complete\"` or `\"Failed\"`). If this field is set, the specified seconds after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. `finalizers`) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is Alpha level and is only honored by servers that enable the `TTLAfterFinished` feature gate.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "activeDeadlineSeconds",
        "backoffLimit",
        "completions",
        "manualSelector",
        "parallelism",
        "selector",
        "template",
        "ttlSecondsAfterFinished"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobSpec.UPDATE": {
      "description": "This describes how the Job execution will look like.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "The duration in seconds relative to the `startTime` that the Job may be active before the system tries to terminate it.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "backoffLimit": {
          "default": 6,
          "description": "The number of retries before marking this Job as failed",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completions": {
          "description": "The desired number of successfully finished Pods the Job should be run with. Setting to `nil` means that the success of any Pod signals the success of all Pods, and allows `parallelism` to have any positive value. Setting to `1` means that `parallelism` is limited to 1 and the success of that Pod signals the success of the Job. This field cannot be updated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "manualSelector": {
          "description": "This controls the generation of Pod labels and Pod selectors. Leave `manualSelector` unset unless you are certain what you are doing. When `false` or unset, the system pick labels unique to this Job and appends those labels to the Pod template. When `true`, the user is responsible for picking unique labels and specifying the `selector`. Failure to pick a unique label may cause this and other Jobs to not function correctly. However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.",
          "type": "boolean"
        },
        "parallelism": {
          "description": "The maximum desired number of Pods the Job should run at any given time. The actual number of Pods running in steady state will be less than this number when `((.spec.completions - .status.successful) < .spec.parallelism)`, i.e. when the work left to do is less than max `parallelism`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over Pods that should match the Pod count. Normally, the system sets this field for you. The `selector` must match the `labels` defined on the Pod template. This field cannot be updated."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "Describes the Pod that will be created when executing a Job. This field cannot be updated."
        },
        "ttlSecondsAfterFinished": {
          "description": "This limits the lifetime of a Job that has finished execution (either `\"Complete\"` or `\"Failed\"`). If this field is set, the specified seconds after the Job finishes, it is eligible to be automatically deleted. When the Job is being deleted, its lifecycle guarantees (e.g. `finalizers`) will be honored. If this field is unset, the Job won't be automatically deleted. If this field is set to zero, the Job becomes eligible to be deleted immediately after it finishes. This field is Alpha level and is only honored by servers that enable the `TTLAfterFinished` feature gate.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "selector",
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1.JobStatus": {
      "description": "The current status of a Job.",
      "properties": {
        "active": {
          "description": "The number of actively running Pods.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "completionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time when the Job was completed. It is not guaranteed to be set in *happens-before* order across separate operations. It is represented in RFC3339 form and is in UTC. The completion time is only set when the Job finishes successfully."
        },
        "conditions": {
          "description": "The latest available observations of an object's current state. When a Job fails, one of the conditions will have `type` set to `\"Failed\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1.JobCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "failed": {
          "description": "The number of Pods which reached phase `\"Failed\"`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time when the Job was acknowledged by the controller. It is not guaranteed to be set in *happens-before* order across separate operations. It is represented in RFC3339 form and is in UTC."
        },
        "succeeded": {
          "description": "The number of Pods which reached phase `\"Succeeded\"`.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.batch.v1beta1.CronJob.CREATE": {
      "description": "The configuration of a CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` can be at most 52 characters long because the CronJob controller will append a 11-character suffix to the name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJob.GET": {
      "description": "The configuration of a CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobStatus",
          "description": "Current status of the CronJob."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJob.UPDATE": {
      "description": "The configuration of a CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` can be at most 52 characters long because the CronJob controller will append a 11-character suffix to the name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJobList": {
      "description": "A list of CronJob objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CronJob objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJobList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJobList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.batch.v1beta1.CronJobSpec": {
      "description": "Specification detailing how the job execution will look like and when it actually runs.",
      "properties": {
        "concurrencyPolicy": {
          "default": "Allow",
          "description": "Specifies how to treat concurrent executions of a Job.\n\n- `\"Allow\"` means allowing CronJobs to run concurrently.\n- `\"Forbid\"` means forbiding concurrent runs, skipping next run if previous run hasn't finished yet.\n- `\"Replace\"` means cancelling currently running job and replaces it with a new one.\n\n",
          "enum": [
            "Allow",
            "Forbid",
            "Replace"
          ],
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "default": 1,
          "description": "The number of failed Jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "jobTemplate": {
          "$ref": "#/definitions/io.k8s.api.batch.v1beta1.JobTemplateSpec",
          "description": "Specifies the Job that will be created when executing a CronJob."
        },
        "schedule": {
          "description": "The schedule in Cron format, see [Cron Syntax](https://en.wikipedia.org/wiki/Cron).",
          "minLength": 1,
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the Job if it misses scheduled time for any reason. Missed Jobs executions will be counted as failed ones.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "default": 3,
          "description": "The number of successful Jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "suspend": {
          "default": false,
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.",
          "type": "boolean"
        }
      },
      "required": [
        "jobTemplate",
        "schedule"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1beta1.CronJobStatus": {
      "description": "The current state of a CronJob.",
      "properties": {
        "active": {
          "description": "A list of references to currently running Jobs.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array"
        },
        "lastScheduleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the Job was successfully scheduled."
        }
      },
      "required": [
        "active",
        "lastScheduleTime"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v1beta1.JobTemplateSpec": {
      "description": "The data the Job should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata for Jobs created from this template."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE",
          "description": "Specification of the desired behavior of the Job. The `selector` will be auto-generated so must not be specified. The `manualSelector` can be either nil or set to `false`."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v2alpha1.CronJob.CREATE": {
      "description": "The configuration of a CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v2alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` can be at most 52 characters long because the CronJob controller will append a 11-character suffix to the name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      ]
    },
    "io.k8s.api.batch.v2alpha1.CronJob.GET": {
      "description": "The configuration of a CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v2alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobStatus",
          "description": "Current status of the CronJob."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      ]
    },
    "io.k8s.api.batch.v2alpha1.CronJob.UPDATE": {
      "description": "The configuration of a CronJob.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v2alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJob"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` can be at most 52 characters long because the CronJob controller will append a 11-character suffix to the name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobSpec",
          "description": "Specification of the desired behavior of a CronJob, including the schedule."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      ]
    },
    "io.k8s.api.batch.v2alpha1.CronJobList": {
      "description": "A list of CronJob objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "batch/v2alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CronJob objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CronJobList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "batch",
          "kind": "CronJobList",
          "version": "v2alpha1"
        }
      ]
    },
    "io.k8s.api.batch.v2alpha1.CronJobSpec": {
      "description": "Specification detailing how the job execution will look like and when it actually runs.",
      "properties": {
        "concurrencyPolicy": {
          "default": "Allow",
          "description": "Specifies how to treat concurrent executions of a Job.\n\n- `\"Allow\"` means allowing CronJobs to run concurrently.\n- `\"Forbid\"` means forbiding concurrent runs, skipping next run if previous run hasn't finished yet.\n- `\"Replace\"` means cancelling currently running job and replaces it with a new one.\n\n",
          "enum": [
            "Allow",
            "Forbid",
            "Replace"
          ],
          "type": "string"
        },
        "failedJobsHistoryLimit": {
          "default": 1,
          "description": "The number of failed Jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "jobTemplate": {
          "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.JobTemplateSpec",
          "description": "Specifies the Job that will be created when executing a CronJob."
        },
        "schedule": {
          "description": "The schedule in Cron format, see [Cron Syntax](https://en.wikipedia.org/wiki/Cron).",
          "minLength": 1,
          "type": "string"
        },
        "startingDeadlineSeconds": {
          "description": "Optional deadline in seconds for starting the Job if it misses scheduled time for any reason. Missed Jobs executions will be counted as failed ones.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "successfulJobsHistoryLimit": {
          "default": 3,
          "description": "The number of successful Jobs to retain. This is a pointer to distinguish between explicit zero and not specified.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "suspend": {
          "default": false,
          "description": "This flag tells the controller to suspend subsequent executions, it does not apply to already started executions.",
          "type": "boolean"
        }
      },
      "required": [
        "jobTemplate",
        "schedule"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v2alpha1.CronJobStatus": {
      "description": "The current state of a CronJob.",
      "properties": {
        "active": {
          "description": "A list of references to currently running Jobs.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array"
        },
        "lastScheduleTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the Job was successfully scheduled."
        }
      },
      "required": [
        "active",
        "lastScheduleTime"
      ],
      "type": "object"
    },
    "io.k8s.api.batch.v2alpha1.JobTemplateSpec": {
      "description": "The data the Job should have when created from a template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata for Jobs created from this template."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE",
          "description": "Specification of the desired behavior of the Job. The `selector` will be auto-generated so must not be specified. The `manualSelector` can be either nil or set to `false`."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequest.CREATE": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued. Kubelets use this API to obtain:\n\n1. client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client-kubelet\"` ).\n1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely (with the `signerName` set to `\"kubernetes.io/kubelet-serving\"`).\n\nThis API can be used to request client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client\"`), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information. It is immutable after creation. Only the `request`, `signerName`, and `usages` fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequest.GET": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued. Kubelets use this API to obtain:\n\n1. client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client-kubelet\"` ).\n1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely (with the `signerName` set to `\"kubernetes.io/kubelet-serving\"`).\n\nThis API can be used to request client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client\"`), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information. It is immutable after creation. Only the `request`, `signerName`, and `usages` fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestStatus",
          "description": "Information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequest.UPDATE": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued. Kubelets use this API to obtain:\n\n1. client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client-kubelet\"` ).\n1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely (with the `signerName` set to `\"kubernetes.io/kubelet-serving\"`).\n\nThis API can be used to request client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client\"`), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information. It is immutable after creation. Only the `request`, `signerName`, and `usages` fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestCondition": {
      "properties": {
        "lastUpdateTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Timestamp of the last update to this condition"
        },
        "message": {
          "description": "Human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "Brief reason for the request state",
          "type": "string"
        },
        "type": {
          "description": "Request approval state",
          "enum": [
            "Approved",
            "Denied"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestList": {
      "description": "A list of CertificateSigningRequest objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CertificateSigningRequest objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequestList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequestList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestSpec": {
      "description": "This information is immutable after the request is created. Only the `request` and `usages` fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "object"
        },
        "groups": {
          "description": "Group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "request": {
          "description": "An x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
          "format": "byte",
          "minLength": 1,
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "signerName": {
          "description": "The requested signer, and is a qualified name. A **list**/**watch** request for CertificateSigningRequests can filter on this field by setting the `fieldSelector` parameter to `\"spec.signerName=NAME\"`. Well-known Kubernetes signers are:\n\n1. `\"kubernetes.io/kube-apiserver-client\"` for issuing client certificates that can be used to authenticate to `kube-apiserver`. Requests for this signer are never auto-approved by the `kube-controller-manager`. It can be issued by the `\"csrsigning\"` controller in the `kube-controller-manager`.\n1. `\"kubernetes.io/kube-apiserver-client-kubelet\"` for issuing client certificates that a kubelet uses to authenticate to `kube-apiserver`. Requests for this signer can be auto-approved by the `\"csrapproving\"` controller in the `kube-controller-manager`. It can be issued by the `\"csrsigning\"` controller in the `kube-controller-manager`.\n1. `\"kubernetes.io/kubelet-serving\"` for issuing serving certificates a kubelet uses to serve TLS endpoints, which `kube-apiserver` can connect to securely. Requests for this signer are never auto-approved by the `kube-controller-manager`. It can be issued by the `\"csrsigning\"` controller in the `kube-controller-manager`.\n\nCustom `signerName`s can also be specified. The signer defines:\n\n1. Trust distribution: how trust (CA bundles) are distributed.\n1. Permitted subjects: and behavior when a disallowed subject is requested.\n1. Required, permitted, or forbidden x509 extensions in the request (including whether `subjectAltNames` are allowed, which types, restrictions on allowed values) and behavior when a disallowed extension is requested.\n1. Required, permitted, or forbidden key usages / extended key usages.\n1. Expiration/certificate lifetime: whether it is fixed by the signer, configurable by the admin.\n1. Whether or not requests for CA certificates are allowed.\n",
          "type": "string"
        },
        "uid": {
          "description": "The UID of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        },
        "usages": {
          "description": "A set of key usages requested in the issued certificate.\n\n- Requests for TLS client certificates typically request: `\"digital signature\"`, `\"key encipherment\"`, `\"client auth\"`;\n\n- Requests for TLS serving certificates typically request: `\"key encipherment\"`, `\"digital signature\"`, `\"server auth\"`.",
          "items": {
            "enum": [
              "any",
              "cert sign",
              "client auth",
              "code signing",
              "content commitment",
              "crl sign",
              "data encipherment",
              "decipher only",
              "digital signature",
              "email protection",
              "encipher only",
              "ipsec end system",
              "ipsec tunnel",
              "ipsec user",
              "key agreement",
              "key encipherment",
              "microsoft sgc",
              "netscape sgc",
              "ocsp signing",
              "s/mime",
              "server auth",
              "signing",
              "timestamping"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "username": {
          "description": "The name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        }
      },
      "required": [
        "request",
        "signerName",
        "usages"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1.CertificateSigningRequestStatus": {
      "description": "Conditions used to indicate approved/denied/failed status of the request, and the issued certificate.",
      "properties": {
        "certificate": {
          "description": "An issued certificate by the signer if an `\"Approved\"` condition is present. This field is set via the `/status` subresource. Once populated, this field is immutable.\n\nIf the certificate signing request is denied, a condition of type `\"Denied\"` is added and this field remains empty. If the signer cannot issue the certificate, a condition of type `\"Failed\"` is added and this field remains empty.\n\nValidation requirements:\n\n1. certificate must contain one or more PEM blocks.\n1. All PEM blocks must have the `\"CERTIFICATE\"` label, contain no headers, and the encoded data must be a BER-encoded ASN.1 Certificate structure as described in section 4 of RFC5280.\n1. Non-PEM content may appear before or after the `\"CERTIFICATE\"` PEM blocks and is unvalidated, to allow for explanatory text as described in section 5.2 of RFC7468.\n\nIf more than one PEM block is present, and the definition of the requested `spec.signerName` does not indicate otherwise, the first block is the issued certificate, and subsequent blocks should be treated as intermediate certificates and presented in TLS handshakes.\n\nThe certificate is encoded in PEM format. When serialized as JSON or YAML, the data is additionally base64-encoded, so it consists of:\n\n```\nbase64(\n  -----BEGIN CERTIFICATE-----\n  ...\n  -----END CERTIFICATE-----\n)\n```\n",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "conditions": {
          "description": "Conditions applied to the request.",
          "enum": [
            "Approved",
            "Denied",
            "Failed"
          ],
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "required": [
        "conditions"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest.CREATE": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued. Kubelets use this API to obtain:\n\n1. client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client-kubelet\"` ).\n1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely (with the `signerName` set to `\"kubernetes.io/kubelet-serving\"`).\n\nThis API can be used to request client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client\"`), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information. It is immutable after creation. Only the `request`, `signerName`, and `usages` fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued. Kubelets use this API to obtain:\n\n1. client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client-kubelet\"` ).\n1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely (with the `signerName` set to `\"kubernetes.io/kubelet-serving\"`).\n\nThis API can be used to request client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client\"`), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information. It is immutable after creation. Only the `request`, `signerName`, and `usages` fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus",
          "description": "Information about whether the request is approved or denied, and the certificate issued by the signer, or the failure condition indicating signer failure."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequest.UPDATE": {
      "description": "CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by submitting a certificate signing request, and having it asynchronously approved and issued. Kubelets use this API to obtain:\n\n1. client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client-kubelet\"` ).\n1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely (with the `signerName` set to `\"kubernetes.io/kubelet-serving\"`).\n\nThis API can be used to request client certificates to authenticate to `kube-apiserver` (with the `signerName` set to `\"kubernetes.io/kube-apiserver-client\"`), or to obtain certificates from custom non-Kubernetes signers.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequest"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec",
          "description": "The certificate request itself and some additional information. It is immutable after creation. Only the `request`, `signerName`, and `usages` fields can be set on creation. Other fields are derived by Kubernetes and cannot be modified by users."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition": {
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time the condition last transitioned from one status to another. If unset, when a new condition type is added or an existing condition's status is changed, the server defaults this to the current time."
        },
        "lastUpdateTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Timestamp of the last update to this condition"
        },
        "message": {
          "description": "Human readable message with details about the request state",
          "type": "string"
        },
        "reason": {
          "description": "Brief reason for the request state",
          "type": "string"
        },
        "status": {
          "default": "True",
          "description": "Status of the condition. `\"Approved\"`, `\"Denied\"`, and `\"Failed\"` conditions may not be `\"False\"` or `\"Unknown\"`. If unset, should be treated as `\"True\"`.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Request approval state",
          "enum": [
            "Approved",
            "Denied",
            "Failed"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestList": {
      "description": "A list of CertificateSigningRequest objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "certificates.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CertificateSigningRequest objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CertificateSigningRequestList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequestList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestSpec": {
      "description": "This information is immutable after the request is created. Only the `request` and `usages` fields can be set on creation, other fields are derived by Kubernetes and cannot be modified by users.",
      "properties": {
        "extra": {
          "additionalProperties": {
            "items": {
              "type": "string"
            },
            "type": "array"
          },
          "description": "Extra attributes of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "object"
        },
        "groups": {
          "description": "Group membership of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "request": {
          "description": "An x509 certificate signing request encoded in a \"CERTIFICATE REQUEST\" PEM block. When serialized as JSON or YAML, the data is additionally base64-encoded.",
          "format": "byte",
          "minLength": 1,
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "signerName": {
          "description": "Requested signer for the request. It is a qualified name in the form: `\"scope-hostname.io/name\"`. The length of `\"scope-hostname\"` cannot exceed 253 characters and there is at least one dot (`'.'`) in the string. Each segment of `\"scope-hostname\"` when separated by `'.'` must be less than 63 characters. The `\"name\"` part must be a valid DNS domain name. The field is defaulted when empty:\n\n1. for a kubelet client certificate, it is defaulted to `\"kubernetes.io/kube-apiserver-client-kubelet\"`.\n1. for a kubelet serving certificate, it is defaulted to `\"kubernetes.io/kubelet-serving\"`.\n1. Otherwise, it is defaulted to `\"kubernetes.io/legacy-unknown\"`.\n\nDistribution of trust for signers happens out of band. You can select on this field using `spec.signerName`.",
          "type": "string"
        },
        "uid": {
          "description": "The UID of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        },
        "usages": {
          "description": "A set of usage contexts the key will be valid for. See: https://tools.ietf.org/html/rfc5280#section-4.2.1.3 and https://tools.ietf.org/html/rfc5280#section-4.2.1.12",
          "items": {
            "enum": [
              "any",
              "cert sign",
              "client auth",
              "code signing",
              "content commitment",
              "crl sign",
              "data encipherment",
              "decipher only",
              "digital signature",
              "email protection",
              "encipher only",
              "ipsec end system",
              "ipsec tunnel",
              "ipsec user",
              "key agreement",
              "key encipherment",
              "microsoft sgc",
              "netscape sgc",
              "ocsp signing",
              "s/mime",
              "server auth",
              "signing",
              "timestamping"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "username": {
          "description": "The name of the user that created the CertificateSigningRequest. Populated by the API server on creation and immutable.",
          "type": "string"
        }
      },
      "required": [
        "request",
        "usages"
      ],
      "type": "object"
    },
    "io.k8s.api.certificates.v1beta1.CertificateSigningRequestStatus": {
      "description": "Conditions used to indicate approved/denied/failed status of the request, and the issued certificate.",
      "properties": {
        "certificate": {
          "description": "If request was approved, the controller will place the issued certificate here.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "conditions": {
          "description": "Conditions applied to the request, such as approval or denial.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "io.k8s.api.coordination.v1.Lease.CREATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.Lease.GET": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.Lease.UPDATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.LeaseList": {
      "description": "A list of Lease objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Lease objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LeaseList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "LeaseList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.coordination.v1.LeaseSpec": {
      "description": "The specification of a Lease.",
      "properties": {
        "acquireTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current Lease was acquired."
        },
        "holderIdentity": {
          "description": "The identity of the current holder of the Lease.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "A duration that candidates for a Lease need to wait before it can qcquire the Lease by force. This is measured against the last observed `renewTime`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "leaseTransitions": {
          "description": "The number of transitions of a Lease between holders.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "renewTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current holder last updated the Lease."
        }
      },
      "type": "object"
    },
    "io.k8s.api.coordination.v1beta1.Lease.CREATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.Lease.GET": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.Lease.UPDATE": {
      "description": "Lease defines a lease concept.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Lease"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseSpec",
          "description": "Specification of the Lease"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.LeaseList": {
      "description": "A list of Lease objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "coordination.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Lease objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LeaseList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "coordination.k8s.io",
          "kind": "LeaseList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.coordination.v1beta1.LeaseSpec": {
      "description": "The specification of a Lease.",
      "properties": {
        "acquireTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current Lease was acquired."
        },
        "holderIdentity": {
          "description": "The identity of the current holder of the Lease.",
          "type": "string"
        },
        "leaseDurationSeconds": {
          "description": "A duration that candidates for a Lease need to wait before it can qcquire the Lease by force. This is measured against the last observed `renewTime`.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "leaseTransitions": {
          "description": "The number of transitions of a Lease between holders.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "renewTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when the current holder last updated the Lease."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource": {
      "description": "A persistent disk resource in AWS. An AWS EBS disk must exist before being mounted to a container. The disk must also be in the same AWS zone as the node. An AWS EBS disk can only be mounted as `\"ReadWriteOnce\"`. AWS EBS volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume.\n\n**Tip**: Ensure that the filesystem type is supported by the host operating system. Examples: `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`.",
          "type": "string"
        },
        "partition": {
          "description": "The partition to mount in the volume. If omitted, the default is to mount by volume name. Examples: For volume `\"/dev/sda1\"`, you specify the partition as `\"1\"`. Similarly, the volume partition for `\"/dev/sda\"` is `\"0\"` (or you can leave the property empty).",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "readOnly": {
          "default": false,
          "description": "Specify `true` to force and set the `readOnly` property in volume mounts to true.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID of the persistent disk resource in the AWS EBS volume.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Affinity": {
      "description": "A group of affinity scheduling rules.",
      "properties": {
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeAffinity",
          "description": "Node affinity scheduling rules for the Pod."
        },
        "podAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinity",
          "description": "Pod affinity scheduling rules (e.g. co-locate this Pod in the same node, zone, etc. as some other Pod(s))."
        },
        "podAntiAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAntiAffinity",
          "description": "Pod anti-affinity scheduling rules (e.g. avoid putting this Pod in the same node, zone, etc. as some other Pod(s))."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.AttachedVolume": {
      "description": "A volume attached to the node",
      "properties": {
        "devicePath": {
          "description": "The device path where the volume is available",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the attached volume",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "devicePath",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureDiskVolumeSource": {
      "description": "An Azure data disk mounted on the node and bind mount to the Pod.",
      "properties": {
        "cachingMode": {
          "description": "Host caching mode.",
          "enum": [
            "None",
            "ReadOnly",
            "ReadWrite"
          ],
          "type": "string"
        },
        "diskName": {
          "description": "The name of the data disk in the blob storage.",
          "minLength": 1,
          "type": "string"
        },
        "diskURI": {
          "description": "The URI of the data disk in the blob storage. ",
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "kind": {
          "default": "Shared",
          "description": "Expected values are:\n\n- `\"Shared\"`: multiple blob disks per storage account\n- `\"Dedicated\"`: single blob disk per storage account\n- `\"Managed\"`: Azure managed data disk (only in managed availability set).\n\nThe `diskURI` is of format `\"/subscriptions/<ID>/resourcegroups/<NAME>/providers/microsoft.compute/disks/<DISK-ID>\"` for managed disk. For other kinds, the `diskURI` should look like `\"https://<ACCOUNT>.blob.core.windows.net/<CONTAINER>/<DISK>.vhd\"`.",
          "enum": [
            "Dedicated",
            "Managed",
            "Shared"
          ],
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        }
      },
      "required": [
        "diskName",
        "diskURI"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFilePersistentVolumeSource": {
      "description": "An Azure File service mounted on the node and bind mount to the Pod.",
      "properties": {
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of Secret that contains Azure storage account name and key",
          "minLength": 1,
          "type": "string"
        },
        "secretNamespace": {
          "description": "Namespace of the Secret that contains the Azure storage account name and key. Default is the same as the Pod. Empty string is not allowed.",
          "type": "string"
        },
        "shareName": {
          "description": "Share name",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.AzureFileVolumeSource": {
      "description": "An Azure File Service mount on the host and bind mount to the Pod.",
      "properties": {
        "readOnly": {
          "default": false,
          "description": "Defaults to `false` (read/write). `readOnly` here will force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretName": {
          "description": "The name of Secret that contains Azure storage account name and key",
          "minLength": 1,
          "type": "string"
        },
        "shareName": {
          "description": "Share name",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "secretName",
        "shareName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Binding.CREATE": {
      "description": "Binding ties a Pod to a node.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Binding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` field in metadata must be the name of an existing Pod."
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The target node that you want to bind to the Pod. The `kind` if provided must be `\"Node\"` and the `name` must be provided."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "target"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Binding.GET": {
      "description": "Binding ties a Pod to a node.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Binding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "target": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The target node that you want to bind to the Pod. The `kind` if provided must be `\"Node\"` and the `name` must be provided."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "target"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.CSIPersistentVolumeSource": {
      "description": "A storage that is managed by an external CSI volume driver",
      "properties": {
        "controllerExpandSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `ControllerExpandVolume()` call. This is an Alpha field and requires enabling `ExpandCSIVolumes` feature gate. This field may be empty if no Secret is required. If the Secret object contains more than one Secret, all Secrets are passed. When specified, both `name` and `namespace` field should be specified as valid DNS_LABEL strings."
        },
        "controllerPublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `ControllerPublishVolume()` and `ControllerUnpublishVolume()` calls. This field may be empty if no Secret is required. If the Secret object contains more than one secret, all secrets are passed. When specified, both `name` and `namespace` field should be specified as valid DNS_LABEL strings. The field can be updated if current value is nil."
        },
        "driver": {
          "description": "The name of the driver to use for this volume. The name can be at most 63 characters and it must be a valid DNS subdomain name.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. For example: `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `NodePublishVolume()` and `NodeUnpublishVolume()` calls. This field may be empty if no Secret is required. If the Secret object contains more than one secret, all secrets are passed. When specified, both `name` and `namespace` fields should be specified as valid DNS_LABEL strings."
        },
        "nodeStageSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the CSI driver to complete the CSI `NodeStageVolume()` and `NodeUnstageVolume()` calls. This field may be empty if no Secret is required. If the Secret object contains more than one secret, all secrets are passed. When specified, both `name` and `namespace` fields have to be specified as valid DNS_LABEL strings."
        },
        "readOnly": {
          "default": false,
          "description": "The value to pass to `ControllerPublishVolumeRequest()`.",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Attributes of the volume to publish.",
          "type": "object"
        },
        "volumeHandle": {
          "description": "The unique volume name returned by the CSI volume plugin's `CreateVolume()`. Used as reference to the volume on all subsequent calls.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "driver",
        "volumeHandle"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CSIVolumeSource": {
      "description": "The source location of a volume to mount, managed by an external CSI driver",
      "properties": {
        "driver": {
          "description": "The name of the CSI driver that handles this volume. Consult with your admin for the correct name as registered in the cluster. The name must be a valid DNS subdomain name.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Ex. `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`. If not provided, the empty value is passed to the associated CSI driver which will determine the default filesystem to apply.",
          "type": "string"
        },
        "nodePublishSecretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "A reference to the Secret containing sensitive information to be passed to the CSI driver to complete the CSI `NodePublishVolume()` and `NodeUnpublishVolume()` calls. If the Secret object contains more than one Secret, all Secret references are passed. When specified, the `name` field must be specified as a valid DNS subdomain name."
        },
        "readOnly": {
          "default": false,
          "description": "This indicates a read-only configuration for the volume.",
          "type": "boolean"
        },
        "volumeAttributes": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Driver-specific properties that are passed to the CSI driver. Consult your driver's documentation for supported values.",
          "type": "object"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Capabilities": {
      "description": "Adds and removes POSIX capabilities from running containers.",
      "properties": {
        "add": {
          "description": "Capabilities to add",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "drop": {
          "description": "Capabilities to remove",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSPersistentVolumeSource": {
      "description": "A Ceph filesystem mount that lasts the lifetime of a Pod. `cephfs` volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "A collection of Ceph monitors",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "path": {
          "default": "/",
          "description": "Path to use as the mounted root, rather than the full Ceph tree.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the filesystem to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretFile": {
          "default": "/etc/ceph/user.secret",
          "description": "The path to key ring for User.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "The reference to the authentication secret for user, default is empty."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name.",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CephFSVolumeSource": {
      "description": "Represents a Ceph filesystem mount that lasts the lifetime of a Pod. `cephfs` volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "monitors": {
          "description": "A collection of Ceph monitors.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "path": {
          "default": "/",
          "description": "The mounted root, rather than the full Ceph tree.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to `false` (read/write). `readOnly` here will force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretFile": {
          "default": "/etc/ceph/user.secret",
          "description": "The path to key ring for the `user`.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "A reference to the authentication Secret for `user`, default is empty."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name.",
          "type": "string"
        }
      },
      "required": [
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderPersistentVolumeSource": {
      "description": "An existing Cinder volume resource in Openstack. The volume must also be in the same region as the node. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only model.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Reference to a Secret object containing parameters used to connect to OpenStack. Both `namespace` and `name` must be specified as valid DNS_LABEL strings."
        },
        "volumeID": {
          "description": "The identifier for the Cinder volume.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.CinderVolumeSource": {
      "description": "Represents a Cinder volume resource in Openstack. A Cinder volume must exist before mounting to a container. The volume must also be in the same region as the kubelet. Cinder volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system, e.g. `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to `false` (read/write). `readOnly` here will force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Reference to a Secret object containing parameters used to connect to OpenStack"
        },
        "volumeID": {
          "description": "Volume ID used to identify the volume in Cinder",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ClientIPConfig": {
      "description": "The configuration for client IP based session affinity.",
      "properties": {
        "timeoutSeconds": {
          "default": 10800,
          "description": "The session sticky time in seconds.",
          "format": "int32",
          "maximum": 86400,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "timeoutSeconds"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ComponentCondition": {
      "description": "Information about the condition of a component.",
      "properties": {
        "error": {
          "description": "Condition error code for a component. For example, a health check error code.",
          "type": "string"
        },
        "message": {
          "description": "Message about the condition for a component. For example, information about a health check.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition for a component.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "default": "Healthy",
          "description": "Type of condition for a component.",
          "enum": [
            "Healthy"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ComponentStatus": {
      "description": "The cluster validation information. *DEPRECATED*: This API is deprecated in v1.19+.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "conditions": {
          "description": "List of component conditions observed",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ComponentStatus"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        }
      },
      "required": [
        "apiVersion",
        "conditions",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ComponentStatusList": {
      "description": "Status of all conditions for system components. *DEPRECATED*: This API is deprecated in v1.19+.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of ComponentStatus objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ComponentStatusList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ComponentStatusList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMap.CREATE": {
      "description": "ConfigMap holds configuration data for Pods to consume. The total size of `data` and `binaryData` must be less than 1 MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The `binaryData` field contains the binary data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. Each key can have at most 253 characters and it cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`. This field can contain byte sequences that are not in the UTF-8 range. The keys stored in `binaryData` must not overlap with the ones in the `data` field.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The `data` field contains the configuration data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. Each key can have at most 253 characters and it cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`. Values with non-UTF-8 byte sequences must use the `binaryData` field. The keys stored in `data` must not overlap with the keys in the `binaryData` field.",
          "type": "object"
        },
        "immutable": {
          "description": "If set to `true`, ensures that data stored in the ConfigMap cannot be updated (only the object metadata can be modified). If not set to `true`, the field can be modified at any time. Defaulted to `null`. This is a Beta field enabled by the `ImmutableEphemeralVolumes` feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMap"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name of a ConfigMap must be a valid DNS subdomain."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMap.GET": {
      "description": "ConfigMap holds configuration data for Pods to consume. The total size of `data` and `binaryData` must be less than 1 MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The `binaryData` field contains the binary data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. Each key can have at most 253 characters and it cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`. This field can contain byte sequences that are not in the UTF-8 range. The keys stored in `binaryData` must not overlap with the ones in the `data` field.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The `data` field contains the configuration data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. Each key can have at most 253 characters and it cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`. Values with non-UTF-8 byte sequences must use the `binaryData` field. The keys stored in `data` must not overlap with the keys in the `binaryData` field.",
          "type": "object"
        },
        "immutable": {
          "description": "If set to `true`, ensures that data stored in the ConfigMap cannot be updated (only the object metadata can be modified). If not set to `true`, the field can be modified at any time. Defaulted to nil. This is a Beta field enabled by the `ImmutableEphemeralVolumes` feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMap"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name of a ConfigMap must be a valid DNS subdomain."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMap.UPDATE": {
      "description": "ConfigMap holds configuration data for Pods to consume. The total size of `data` and `binaryData` must be less than 1 MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "binaryData": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The `binaryData` field contains the binary data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. Each key can have at most 253 characters and it cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`. This field can contain byte sequences that are not in the UTF-8 range. The keys stored in `binaryData` must not overlap with the ones in the `data` field.",
          "type": "object"
        },
        "data": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The `data` field contains the configuration data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. Each key can have at most 253 characters and it cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`. Values with non-UTF-8 byte sequences must use the `binaryData` field. The keys stored in `data` must not overlap with the keys in the `binaryData` field.",
          "type": "object"
        },
        "immutable": {
          "description": "If set to `true`, ensures that data stored in the ConfigMap cannot be updated (only the object metadata can be modified). If not set to `true`, the field can be modified at any time. Defaulted to nil. This is a Beta field enabled by the `ImmutableEphemeralVolumes` feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMap"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name of a ConfigMap must be a valid DNS subdomain."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapEnvSource": {
      "description": "ConfigMapEnvSource populates the environment variables of a container with data from a ConfigMap in the same namespace. The key-value pairs in the ConfigMap's `data` field will be represented as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referenced ConfigMap. The name must be a valid DNS subdomain name.",
          "minLength": 1,
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapKeySelector": {
      "description": "Selects a key from a ConfigMap.",
      "properties": {
        "key": {
          "description": "The key to select. The string must be a valid DNS subdomain name no more than 253 characters. It must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. It cannot be `\".\"` or `\"..\"` or prefixed with `\"..\"`.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced ConfigMap. The name must be a valid DNS subdomain name.",
          "minLength": 1,
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap and its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapList": {
      "description": "A list of ConfigMap objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ConfigMap objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ConfigMapList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ConfigMapList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ConfigMapNodeConfigSource": {
      "description": "The information to reference a ConfigMap as the config source for a Node.",
      "properties": {
        "kubeletConfigKey": {
          "description": "The key of the referenced ConfigMap that corresponds to the `KubeletConfiguration` structure. The string must consists of alphanumeric characters, `'-'`, `'_'` or `'.'`. The string cannot be `\".\"` or `\"..\"` and it cannot start with `\"..\"`.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced ConfigMap. The string must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced ConfigMap. The string must be a valid DNS_LABEL.",
          "minLength": 1,
          "type": "string"
        },
        "resourceVersion": {
          "description": "Resource version of the referenced ConfigMap. This field is forbidden in `node.spec`, and required in `node.status`.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referenced ConfigMap. This field is forbidden in `node.spec`, and required in `node.status`.",
          "type": "string"
        }
      },
      "required": [
        "kubeletConfigKey",
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapProjection": {
      "description": "Adapts a ConfigMap into a projected volume. The contents of the target ConfigMap's `data` field will be presented in a projected volume as files using the keys in the `data` field as the file names, unless the `items` element is populated with specific mappings of keys to paths. Note that this is identical to a configmap volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the `data` field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed `key`s will be projected into the specified `path`s, and unlisted keys will not be present. If a `key` specified is not present in the ConfigMap, the volume setup will error unless it is marked `optional`. Paths must be relative and may not contain the `\"..\"` string or start with `\"..\"`. Each path must be unique in the map.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referenced ConfigMap.",
          "minLength": 1,
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ConfigMapVolumeSource": {
      "description": "Adapts a ConfigMap into a volume. The contents of the target ConfigMap's `data` field will be presented in the volume as files using the keys in the `data` field as the file names, unless the `items` element is populated with specific mappings of `key`s to `path`s. ConfigMap volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "default": "0644",
          "description": "Optional mode bits used to set permissions on created files by default. Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`. YAML accepts both octal and decimal values, JSON requires decimal values. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like `fsGroup`, and the result can be other mode bits set.",
          "format": "int32",
          "type": "integer"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the `data` field of the referenced ConfigMap will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed `key`s will be projected into the specified `path`s, and unlisted keys will not be present. If a key is specified which is not present in the ConfigMap, the volume setup will error unless it is marked `optional`. Paths must be relative and may not contain the `\"..\"` string or start with `\"..\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referenced ConfigMap. The string must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the ConfigMap or its keys must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Container": {
      "description": "A container to run within a Pod.",
      "properties": {
        "args": {
          "description": "Arguments to the `command`. The docker image's CMD is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, i.e: `$$(VAR_NAME)`. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. The docker image's `ENTRYPOINT` is used if this is not provided. The command is **NOT** executed within a shell. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, i.e: `$$(VAR_NAME)`. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a valid DNS subdomain name. They must consist of alphanumeric characters, `'.'`, `'-'`, or `'_'`. They cannot start with `\"..\"` or a digit. They cannot be `\".\"` or `\"..\"`. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an `env` with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. The special value `\" \"` is reserved to allow higher level config management to default or override container images in workload controllers like Deployments and StatefulSets.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. Defaults to `\"Always\"` if the `\":latest\"` tag is specified, or `\"IfNotPresent\"` otherwise. Cannot be updated.",
          "enum": [
            "Always",
            "IfNotPresent",
            "Never"
          ],
          "type": "string"
        },
        "lifecycle": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Lifecycle",
          "description": "Actions that the management system should take in response to container lifecycle events. This cannot be specified on an init container. Cannot be updated."
        },
        "livenessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container liveness. Container will be restarted if the probe fails. Can be NULL. It cannot be used on an init container. Cannot be updated. "
        },
        "name": {
          "description": "Name of the container. Each container in a Pod must have a unique name (DNS_LABEL). Cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "ports": {
          "description": "List of ports to expose from the container. Exposing a port here gives the system additional information about the network connections a container uses, but is primarily informational. Not specifying a port here does **NOT** prevent that port from being exposed. Any port which is listening on the default `\"0.0.0.0\"` address inside a container will be accessible from the network. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerPort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "containerPort",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "containerPort",
          "x-kubernetes-patch-strategy": "merge"
        },
        "readinessProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "Periodic probe of container service readiness. Container will be removed from Service endpoints if the probe fails. This cannot be used against an init container. Cannot be updated."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "Resources required by this container. Cannot be updated."
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecurityContext",
          "description": "Security options the Pod should run with."
        },
        "startupProbe": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Probe",
          "description": "This probe indicates that the Pod has been successfully initialized. If specified, no other probes are executed until this probe completes successfully. If this probe fails, the Pod will be restarted, just as if the `livenessProbe` failed. This can be used to provide different probe parameters at the beginning of a Pod's lifecycle, when it might take a long time to load data or warm a cache, than during steady-state operation. This cannot be set on an init container. This cannot be updated. The `successThreshold`, if specified, must be 1."
        },
        "stdin": {
          "default": false,
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.\n\nThis is a variable for interactive containers. It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.",
          "type": "boolean"
        },
        "stdinOnce": {
          "default": false,
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single `attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions. If `stdinOnce` is set to `true`, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.\n\nThis is a variable for interactive containers. It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.",
          "type": "boolean"
        },
        "terminationMessagePath": {
          "default": "/dev/termination-log",
          "description": "The mount path in the container's filesystem for a termination log file. The container's termination message will be written into this file. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "default": "File",
          "description": "This attribute indicates how the termination message should be populated.\n\n- `\"File\"`: use the contents of `terminationMessagePath` file to populate the container status message on both success and failure.\n- `\"FallbackToLogsOnError\"`: use the last chunk of container log output if the termination message file is empty and the container exited with an error.\n\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller. Cannot be updated.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "default": false,
          "description": "Whether this container should allocate a TTY for itself. When this is set to `true`, the `stdin` attribute has to be `true` as well.\n\nThis is a variable for interactive containers. It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "The list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "image",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerImage": {
      "description": "Describe a container image",
      "properties": {
        "names": {
          "description": "Names by which this image is known.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "sizeBytes": {
          "description": "The size of the image in bytes.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "names",
        "sizeBytes"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerPort": {
      "description": "A network port in a container.",
      "properties": {
        "containerPort": {
          "description": "Port to expose on the Pod's IP address. This must be a valid port number between 1 and 65535.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "hostIP": {
          "description": "What host IP to bind the external port to.",
          "type": "string"
        },
        "hostPort": {
          "description": "Port to expose on the host. If specified, this must be a valid port number between 1 and 65535. If the Pod has `hostNetwork` specified, the `hostPort` must match the `containerPort`. Most containers do not need this. The (`protocol`, `hostIP`, `hostPort`) tunple for all containers must be unique in a Pod.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "name": {
          "description": "Name for the port that can be referred to by services. If specified, the name must be unique within the Pod. The port name can be no more than 15 characters long and it can only contain only `[-a-z0-9]` and must contain at least one letter `[a-z]`. It must not start or end with a hyphen (`'-'`), nor contain adjacent hyphens.",
          "maxLength": 15,
          "type": "string"
        },
        "protocol": {
          "default": "TCP",
          "description": "Protocol for port.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "containerPort",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerState": {
      "description": "A possible state of the Container. Only one of its members may be specified. If none of them is specified, the default one is `\"waiting\"`.",
      "properties": {
        "running": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateRunning",
          "description": "Details about a running Container"
        },
        "terminated": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateTerminated",
          "description": "Details about a terminated Container. When updating, if the Pod's `reatartPolicy` is not `\"Always\"` and the container has terminated, the server checks if the container's exit code is non zero. If the the Pod's `restartPolciy` is `\"OnFailure\"` and the container's exit code is non zero, updating the container to a non-terminated state is allowed, or else the server rejects the update request."
        },
        "waiting": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStateWaiting",
          "description": "Details about a waiting Container"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateRunning": {
      "description": "A running state of a Container.",
      "properties": {
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the Container was last (re-)started"
        }
      },
      "required": [
        "startedAt"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateTerminated": {
      "description": "A terminated state of a Container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format `\"docker://<container_id>\"`",
          "type": "string"
        },
        "exitCode": {
          "description": "Exit status from the last termination of the Container",
          "format": "int32",
          "type": "integer"
        },
        "finishedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which the Container last terminated"
        },
        "message": {
          "description": "Message regarding the last termination of the Container",
          "type": "string"
        },
        "reason": {
          "description": "A (brief) reason from the last termination of the Container",
          "type": "string"
        },
        "signal": {
          "description": "Signal from the last termination of the Container",
          "format": "int32",
          "type": "integer"
        },
        "startedAt": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time at which previous execution of the Container started"
        }
      },
      "required": [
        "containerID",
        "exitCode",
        "finishedAt",
        "message",
        "reason",
        "startedAt"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStateWaiting": {
      "description": "A waiting state of a Container",
      "properties": {
        "message": {
          "description": "Message regarding why the Container is not yet running.",
          "type": "string"
        },
        "reason": {
          "description": "A (brief) reason the Container is not yet running.",
          "type": "string"
        }
      },
      "required": [
        "message",
        "reason"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ContainerStatus": {
      "description": "The detailed status of a Container.",
      "properties": {
        "containerID": {
          "description": "Container's ID in the format `\"docker://<container_id>\"`",
          "type": "string"
        },
        "image": {
          "description": "The name of the image the container is running.",
          "type": "string"
        },
        "imageID": {
          "description": "ID of the container's image.",
          "type": "string"
        },
        "lastState": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's last termination condition."
        },
        "name": {
          "description": "The name for the Container which is unique in the Pod. Cannot be updated.",
          "type": "string"
        },
        "ready": {
          "description": "Specifies whether the Container has passed its readiness probe.",
          "type": "boolean"
        },
        "restartCount": {
          "description": "The number of times the Container has been restarted, currently based on the number of dead Containers that have not yet been removed. Note that this is calculated from dead Containers. But those Containers are subject to garbage collection. This value will get capped at 5 by GC.",
          "format": "int32",
          "type": "integer"
        },
        "started": {
          "description": "Specifies whether the Container has passed its startup probe. Initialized as `false`, becomes `true` after `startupProbe` is considered successful. Resets to `false` when the Container is restarted, or if kubelet loses state temporarily. Is always `true` when no `startupProbe` is defined.",
          "type": "boolean"
        },
        "state": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
          "description": "Details about the container's current condition."
        }
      },
      "required": [
        "containerID",
        "image",
        "imageID",
        "lastState",
        "name",
        "ready",
        "restartCount",
        "started",
        "state"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DaemonEndpoint": {
      "description": "Information about a single daemon endpoint.",
      "properties": {
        "Port": {
          "description": "Port number of the given endpoint.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "Port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIProjection": {
      "description": "The downward API information to project into a projected volume. Note that this is identical to a `downwardAPI` volume source without the default mode.",
      "properties": {
        "items": {
          "description": "A list of DownwardAPIVolumeFile objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "items"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeFile": {
      "description": "Information to create the file containing the Pod field. One and only one of `fieldRef` and `resourceFieldRef` must be specified.",
      "properties": {
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the Pod: only `\"metadata.annotations\"`, `\"metadata.labels\"`, `\"name\"`, `\"namespace\"` and `\"uid\"` are supported."
        },
        "mode": {
          "description": "Mode bits used to set permissions on created files, must be an octal value between `0` and `0777` or a decimal value between `0` and `511`. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. If not specified, the volume `defaultMode` will be used. This might be in conflict with other options that affect the file mode, like `fsGroup`, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "path": {
          "description": "The relative path name of the file to be created. Must not be absolute or contain the `\"..\"` path. Must be UTF-8 encoded. The first item of the relative path must not start with `\"..\"`.",
          "type": "string"
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources `limits` and `requests` (`limits.cpu`, `limits.memory`, `requests.cpu` and `requests.memory`) are currently supported."
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.DownwardAPIVolumeSource": {
      "description": "A volume containing Downward API information. Downward API volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "default": "0644",
          "description": "Mode bits used to set permissions on created files by default. Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like `fsGroup`, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "items": {
          "description": "A list of downward API volume file (DownwardAPIVolumeFile) objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EmptyDirVolumeSource": {
      "description": "Represents an empty directory for a Pod. Empty directory volumes support ownership management and SELinux relabeling.",
      "properties": {
        "medium": {
          "default": "",
          "description": "Type of storage medium backing this directory. The default is `\"\"` which means using the node's default medium.",
          "enum": [
            "",
            "Memory"
          ],
          "type": "string"
        },
        "sizeLimit": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "description": "Total amount of local storage required for this EmptyDir volume. The size limit is also applicable for `\"Memory\"` medium. The maximum usage on `\"Memory\"` medium EmptyDir would be the minimum value between the `sizeLimit` specified here and the sum of memory limits of all containers in a Pod. The default is nil which means that the limit is undefined."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointAddress": {
      "description": "An object that describes a single IP address.",
      "properties": {
        "hostname": {
          "description": "The hostname of this endpoint. Must be valid DNS-1123 label if specified.",
          "type": "string"
        },
        "ip": {
          "description": "The IP of this endpoint. May not be unspecified (`\"0.0.0.0\"`), loopback (`\"127.0.0.0/8\"`), link-local (`\"169.254.0.0/16\"`), or link-local multicast (`\"224.0.0.0/24\"`). IPv6 is accepted but not fully supported on all platforms. Certain kubernetes components, like `kube-proxy`, are not IPv6 ready.",
          "type": "string"
        },
        "nodeName": {
          "description": "Node hosting this endpoint. This can be used to determine endpoints local to a node. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "targetRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Reference to object providing the endpoint."
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointPort": {
      "description": "An object that describes a single port.",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as `\"mycompany.com/my-custom-protocol\"`. This is a Beta field guarded by the `ServiceAppProtocol` feature gate and enabled by default.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port. This must match the `name` field in the corresponding Service port. Must be a valid DNS-1123 label. Optional only if one `port` is defined, otherwise it is required.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The IP protocol for this port.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EndpointSubset": {
      "description": "A group of addresses with a common set of ports. The expanded set of endpoints is the cartesian product of `addresses` and `ports`. For example, given:\n\n```\n{\n  \"Addresses\": [{\n    \"ip\": \"10.10.1.1\"\n  }, {\n    \"ip\": \"10.10.2.2\"\n  }],\n  \"Ports\": [{\n    \"name\": \"a\",\n    \"port\": 8675\n  }, {\n    \"name\": \"b\",\n    \"port\": 309\n  }]\n}\n```\n\nThe resulting set of endpoints can be viewed as:\n\n```a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],\nb: [ 10.10.1.1:309, 10.10.2.2:309 ]\n```\n\nEither `addresses` or `notReadyAddresses` should be specified.",
      "properties": {
        "addresses": {
          "description": "IP addresses which offer the related ports that are marked as ready. These endpoints should be considered safe for load balancers and clients to utilize.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          },
          "type": "array"
        },
        "notReadyAddresses": {
          "description": "IP addresses which offer the related ports but are not currently marked as ready because they have not yet finished starting, have recently failed a readiness check, or have recently failed a liveness check.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointAddress"
          },
          "type": "array"
        },
        "ports": {
          "description": "Port numbers available on the related IP addresses.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointPort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Endpoints.CREATE": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n\n```json\n  \"Name\": \"mysvc\",\n  \"Subsets\": [\n    {\n      \"Addresses\": [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      \"Ports\": [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      \"Addresses\": [{\"ip\": \"10.10.3.3\"}],\n      \"Ports\": [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]\n```\n",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Endpoints"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain if specified."
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all `subsets` items. Addresses are placed into `subsets` according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both `addresses` and `notReadyAddresses` in the same subset.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Endpoints.GET": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n\n```\n  \"Name\": \"mysvc\",\n  \"Subsets\": [\n    {\n      \"Addresses\": [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      \"Ports\": [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      \"Addresses\": [{\"ip\": \"10.10.3.3\"}],\n      \"Ports\": [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]\n```\n",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Endpoints"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all `subsets` items. Addresses are placed into `subsets` according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both `addresses` and `notReadyAddresses` in the same subset.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "subsets"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Endpoints.UPDATE": {
      "description": "Endpoints is a collection of endpoints that implement the actual service. Example:\n\n```\n  \"Name\": \"mysvc\",\n  \"Subsets\": [\n    {\n      \"Addresses\": [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      \"Ports\": [{\"name\": \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n      \"Addresses\": [{\"ip\": \"10.10.3.3\"}],\n      \"Ports\": [{\"name\": \"a\", \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]\n```\n",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Endpoints"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain if specified."
        },
        "subsets": {
          "description": "The set of all endpoints is the union of all `subsets` items. Addresses are placed into `subsets` according to the IPs they share. A single address with multiple ports, some of which are ready and some of which are not (because they come from different containers) will result in the address being displayed in different subsets for the different ports. No address will appear in both `addresses` and `notReadyAddresses` in the same subset.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EndpointSubset"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EndpointsList": {
      "description": "A list of Endpoints objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointsList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EndpointsList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EnvFromSource": {
      "description": "EnvFromSource represents the sources of environment variables for a container. One and only one of `configMapRef` and `secretRef` must be specified.",
      "properties": {
        "configMapRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource",
          "description": "The ConfigMap to source environment variable from"
        },
        "prefix": {
          "description": "An optional identifier to prepend to each key in the ConfigMap or the Secret. The string must consist of alphabetic characters, digits, `'_'`, `'-'`, or `'.'`, and it must not start with a digit. The string cannot be `\".\"`, `\"..\"` and it cannot start with `\"..\"`.",
          "type": "string"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretEnvSource",
          "description": "The Secret to source environment variable from"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVar": {
      "description": "An environment variable present in a Container.",
      "properties": {
        "name": {
          "description": "Name of the environment variable. The string must consists of alphanumeric characters, `'_'`, `'-'` or `'.'`. It cannot be `\".\"`, `\"..\"`, and it cannot start with `\"..\"` or a digit.",
          "minLength": 1,
          "pattern": "[-._a-zA-Z][-._a-zA-Z0-9]*",
          "type": "string"
        },
        "value": {
          "default": "",
          "description": "Variable references `$(VAR_NAME)` are expanded using the already defined environment variables in the container and any service environment variables. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, i.e: `$$(VAR_NAME)`. Escaped references will never be expanded, regardless of whether the variable exists or not.",
          "type": "string"
        },
        "valueFrom": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EnvVarSource",
          "description": "Source for the environment variable's value. Cannot be used if `value` is not empty."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EnvVarSource": {
      "description": "A source for the value of an EnvVar. One and only one of the sources can be specified.",
      "properties": {
        "configMapKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector",
          "description": "Selects a key of a ConfigMap."
        },
        "fieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectFieldSelector",
          "description": "Selects a field of the Pod: supports `\"metadata.name\"`, `\"metadata.namespace\"`, `\"metadata.labels['<KEY>']\"`, `\"metadata.annotations['<KEY>']\"`, `\"spec.nodeName\"`, `\"spec.serviceAccountName\"`, `\"status.hostIP\"`, `\"status.podIP\"`, `\"status.podIPs\"`."
        },
        "resourceFieldRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceFieldSelector",
          "description": "Selects a resource of the container: only resources `limits` and `requests` are suppored: `\"limits.cpu\"`, `\"limits.memory\"`, `\"limits.ephemeral-storage\"`, `\"requests.cpu\"`, `\"requests.memory\"` and `\"requests.ephemeral-storage\"`."
        },
        "secretKeyRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretKeySelector",
          "description": "Selects a key of a Secret in the Pod's namespace"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralContainer": {
      "description": "A container that may be added temporarily to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. If an ephemeral container causes a Pod to exceed its resource allocation, the Pod may be evicted. Ephemeral containers may not be added by directly updating the Pod spec. They must be added via the Pod's `ephemeralcontainers` subresource, and they will appear in the Pod `spec` once added. This is an Alpha feature enabled by the `EphemeralContainers` feature gate.",
      "properties": {
        "args": {
          "description": "Arguments to the `command`. The docker image's `CMD` is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, ie: '`$$(VAR_NAME)`'. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "command": {
          "description": "Entrypoint array. Not executed within a shell. The docker image's `ENTRYPOINT` is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, ie: `$$(VAR_NAME)`. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "env": {
          "description": "List of environment variables to set in the container. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "envFrom": {
          "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a valid DNS subdomain name. They must consist of alphanumeric characters, `'.'`, `'-'`, or `'_'`. They cannot start with `\"..\"` or a digit. They cannot be `\".\"` or `\"..\"`. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an `env` with a duplicate key will take precedence. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "image": {
          "description": "Container image name. The image string cannot contain leading or tracing whitespaces.",
          "type": "string"
        },
        "imagePullPolicy": {
          "description": "Image pull policy. Defaults to `\"Always\"` if the `\":latest\"` tag is specified, or `\"IfNotPresent\"` otherwise. Cannot be updated.",
          "enum": [
            "Always",
            "Never",
            "IfNotPresent"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the ephemeral container specified as a DNS label. This name must be unique among all containers, init containers and ephemeral containers.",
          "minLength": 1,
          "type": "string"
        },
        "stdin": {
          "default": false,
          "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.",
          "type": "boolean"
        },
        "stdinOnce": {
          "default": false,
          "description": "Whether the container runtime should close the stdin channel after it has been opened by a single `attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions. If `stdinOnce` is set to `true`, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.",
          "type": "boolean"
        },
        "targetContainerName": {
          "description": "If set, the name of the Container from the containing Pod that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of the target Container. If not set then the ephemeral container is run in whatever namespaces that are shared for the Pod. Note that the container runtime must support this feature.",
          "type": "string"
        },
        "terminationMessagePath": {
          "default": "/dev/termination-log",
          "description": "File path to which the container's termination message will be written. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Cannot be updated.",
          "type": "string"
        },
        "terminationMessagePolicy": {
          "default": "File",
          "description": "This attribute indicates how the termination message should be populated.\n\n- `\"File\"`: use the contents of `terminationMessagePath` file to populate the container status message on both success and failure.\n- `\"FallbackToLogsOnError\"`: use the last chunk of container log output if the termination message file is empty and the container exited with an error.\n\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller. Cannot be updated.",
          "enum": [
            "FallbackToLogsOnError",
            "File"
          ],
          "type": "string"
        },
        "tty": {
          "default": false,
          "description": "Whether this container should allocate a TTY for itself, also requires `stdin` to be true.",
          "type": "boolean"
        },
        "volumeDevices": {
          "description": "The list of block devices to be used by the container.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "devicePath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumeMounts": {
          "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "mountPath",
          "x-kubernetes-patch-strategy": "merge"
        },
        "workingDir": {
          "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EphemeralVolumeSource": {
      "description": "An ephemeral volume that is handled by a normal storage driver.",
      "properties": {
        "readOnly": {
          "default": false,
          "description": "Specifies a read-only configuration for the volume. Defaults to `false` (read/write).",
          "type": "boolean"
        },
        "volumeClaimTemplate": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate",
          "description": "This template is used to create a stand-alone PVC to provision the volume. The Pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC, i.e. the PVC will be deleted together with the Pod. The name of the PVC will be `\"<pod name>-<volume name>\"` where `\"<volume name>\"` is the name from the `spec.volumes` array entry. Pod validation will reject the Pod if the concatenated name is not valid for a PVC (for example, too long).\n\nAn existing PVC with that name that is not owned by the Pod will **not** be used for the Pod to avoid using an unrelated volume by mistake. Starting the Pod is then blocked until the unrelated PVC is removed. If such a pre-created PVC is meant to be used by the Pod, the PVC has to be updated with an owner reference to the Pod once the Pod exists. Normally this should not be necessary, but it may be useful when manually reconstructing a broken cluster.\n\nThis field is read-only and no changes will be made by Kubernetes to the PVC after it has been created."
        }
      },
      "required": [
        "volumeClaimTemplate"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Event.CREATE": {
      "description": "Event is a report of an event somewhere in the cluster. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the involved object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in `metadata`.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about. The namespace must match that of the Event."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this Event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `\"kubelet-xyzf\"`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this Event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event. New types could be added in the future",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "involvedObject",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Event.GET": {
      "description": "Event is a report of an event somewhere in the cluster. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the involved object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in `metadata`.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about. The namespace must match that of the Event."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this Event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `\"kubelet-xyzf\"`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this Event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event. New types could be added in the future",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "action",
        "apiVersion",
        "count",
        "eventTime",
        "firstTimestamp",
        "involvedObject",
        "kind",
        "lastTimestamp",
        "message",
        "metadata",
        "reason",
        "related",
        "reportingComponent",
        "reportingInstance",
        "series",
        "source",
        "type"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Event.UPDATE": {
      "description": "Event is a report of an event somewhere in the cluster. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the involved object.",
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "count": {
          "description": "The number of times this event has occurred.",
          "format": "int32",
          "type": "integer"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when this Event was first observed."
        },
        "firstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the event was first recorded. (Time of server receipt is in `metadata`.)"
        },
        "involvedObject": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object that this event is about. The namespace must match that of the Event."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "lastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the most recent occurrence of this Event was recorded."
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "reason": {
          "description": "This should be a short, machine understandable string that gives the reason for the transition into the object's current status.",
          "type": "string"
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Optional secondary object for more complex actions."
        },
        "reportingComponent": {
          "description": "Name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "ID of the controller instance, e.g. `\"kubelet-xyzf\"`.",
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "The component reporting this Event. Should be a short machine understandable string."
        },
        "type": {
          "description": "Type of this event. New types could be added in the future",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventList": {
      "description": "A list of Event objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Event objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EventList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.EventSeries": {
      "description": "EventSeries contain information on series of Events, i.e. thing that was/is happening continuously for some time.",
      "properties": {
        "count": {
          "description": "Number of occurrences in this series up to the last heartbeat time",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time of the last occurrence observed"
        }
      },
      "required": [
        "count",
        "lastObservedTime"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.EventSource": {
      "description": "EventSource contains information for an Event.",
      "properties": {
        "component": {
          "description": "Component from which the Event is generated.",
          "type": "string"
        },
        "host": {
          "description": "Node name on which the Event is generated.",
          "type": "string"
        }
      },
      "required": [
        "component",
        "host"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ExecAction": {
      "description": "This describes a \"run in container\" action.",
      "properties": {
        "command": {
          "description": "The command line to execute inside the container. The working directory for the command is root (\"/\") in the container. The command is simply `exec`'ed, it is not run inside a shell, so traditional shell instructions (`'|'`, etc) won't work. To use a shell, you need to explicitly call out to that shell. Exit status of 0 is treated as live/healthy and non-zero is unhealthy.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FCVolumeSource": {
      "description": "A Fibre Channel volume to mount. Fibre Channel volumes can only be mounted as `\"ReadWriteOnce\"`. Fibre Channel volumes support ownership management and SELinux relabeling.  Either `wwids` or combination of `targetWWNs` and `lun` must be set, but not both.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "lun": {
          "description": "FC target LUN number",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mouned in read-only mode",
          "type": "boolean"
        },
        "targetWWNs": {
          "description": "FC target worldwide names (WWNs)",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "wwids": {
          "description": "FC volume world wide identifiers (WWIDs).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexPersistentVolumeSource": {
      "description": "A generic persistent volume resource that is provisioned/attached using an exec-based plugin.",
      "properties": {
        "driver": {
          "description": "The name of the driver to use.",
          "minLength": 1,
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. The default filesystem depends on the FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Extra command options if any. If the key contains `'/'`, the subsring before `'/'` is treated as the namespace. The namespace must not have suffix like `\"k8s.io\"` or `\"kubernetes.io\"` which are reserved.",
          "type": "object"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the plugin scripts. This may be empty if no Secret object is specified. If the Secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlexVolumeSource": {
      "description": "A generic volume resource that is provisioned/attached using an exec based plugin.",
      "properties": {
        "driver": {
          "description": "The name of the driver to use for this volume.",
          "type": "string"
        },
        "fsType": {
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. For example: `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`. The default filesystem depends on the FlexVolume script.",
          "type": "string"
        },
        "options": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Extra command options if any. The option name can be namespaced but the namespace cannot use `\"kubernetes.io\"` or `\".k8s.io\"` as its suffix. The option name cannot use these suffix either.",
          "type": "object"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to `false` (read/write). `readOnly` here will force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "A reference to the Secret object containing sensitive information to pass to the plugin scripts. This may be empty if no Secret object is specified. If the Secret object contains more than one secret, all secrets are passed to the plugin scripts."
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.FlockerVolumeSource": {
      "description": "A Flocker volume mounted by the Flocker agent. One and only one of `datasetName` and `datasetUUID` should be set. Flocker volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "datasetName": {
          "description": "Name of the dataset stored as metadata. This is the name on the dataset for Flocker, should be considered as deprecated. The name cannot contain `'/'` if specified.",
          "type": "string"
        },
        "datasetUUID": {
          "description": "The unique identifier of a Flocker dataset",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.GCEPersistentDiskVolumeSource": {
      "description": "A Persistent Disk resource in Google Compute Engine (GCE). A GCE PD must exist before being mounted to a container. The disk must also be in the same GCE project and zone as the kubelet. A GCE PD can only be mounted as `\"ReadWriteOnce\"` or `\"ReadOnlyMany\"`. GCE PDs support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume. The filesystem type must be supported by the host operating system. For example: `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`.",
          "type": "string"
        },
        "partition": {
          "description": "The partition to mount in the volume. If omitted, the default is to mount by volume name.\n\nExamples: for volume `\"/dev/sda1\"`, you specify the partition as `1`. Similarly, the volume partition for `\"/dev/sda\"` is `0` (or you can leave the property empty).",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "pdName": {
          "description": "Unique name of the PD resource in GCE.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        }
      },
      "required": [
        "pdName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GitRepoVolumeSource": {
      "description": "A volume populated with the contents of a git repository. Git repo volumes do not support ownership management. Git repo volumes support SELinux relabeling. *DEPRECATED*: To provision a container with a git repo, mount an `emptyDir` into an `initContainer` that clones the repo using git, then mount the `emptyDir` into the Pod's container.",
      "properties": {
        "directory": {
          "description": "Target directory name. Must not contain or start with `\"..\"`.  If `\".\"` is supplied, the volume directory will be the git repository. Otherwise, if specified, the volume will contain the git repository in the subdirectory with the given name.",
          "type": "string"
        },
        "repository": {
          "description": "Repository URL",
          "minLength": 1,
          "type": "string"
        },
        "revision": {
          "description": "Commit hash for the specified revision.",
          "type": "string"
        }
      },
      "required": [
        "repository"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsPersistentVolumeSource": {
      "description": "A Glusterfs mount that lasts the lifetime of a Pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "The endpoint name that details the Glusterfs topology.",
          "minLength": 1,
          "type": "string"
        },
        "endpointsNamespace": {
          "description": "The namespace that contains the Glusterfs endpoint. This field defaults to the same namespace as the bound PVC. It must be a valid namespace name if specified.",
          "type": "string"
        },
        "path": {
          "description": "The Glusterfs volume path.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the Glusterfs volume to be mounted with read-only permissions.",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.GlusterfsVolumeSource": {
      "description": "Represents a Glusterfs mount that lasts the lifetime of a Pod. Glusterfs volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "endpoints": {
          "description": "The endpoint name that details Glusterfs topology.",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "The Glusterfs volume path.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the Glusterfs volume to be mounted with read-only permissions.",
          "type": "boolean"
        }
      },
      "required": [
        "endpoints",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPGetAction": {
      "description": "This describes an action based on HTTP GET requests.",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the Pod IP. You probably want to set \"Host\" in `httpHeaders` instead.",
          "type": "string"
        },
        "httpHeaders": {
          "description": "Custom headers to set in the request. HTTP allows repeated headers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HTTPHeader"
          },
          "type": "array"
        },
        "path": {
          "description": "Path to access on the HTTP server.",
          "minLength": 1,
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Name or number of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        },
        "scheme": {
          "default": "HTTP",
          "description": "Scheme to use for connecting to the host.",
          "enum": [
            "HTTP",
            "HTTPS"
          ],
          "type": "string"
        }
      },
      "required": [
        "path",
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HTTPHeader": {
      "description": "A custom header to use in HTTP probes",
      "properties": {
        "name": {
          "description": "The header field name. A valid name consists of alphanumeric characters or `'-'`.",
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "The header field value",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Handler": {
      "description": "Handler defines a specific action that should be taken. One and only one type of actions can be specified per handler.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "This specifies the action to take."
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "This specifies the HTTP request to perform."
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "This specifies an action involving a TCP port. TCP hooks are not supported yet."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.HostAlias": {
      "description": "The mapping between an IP and some hostnames.",
      "properties": {
        "hostnames": {
          "description": "Hostnames for the IP address. Each value must be a valid DNS subdomain.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "ip": {
          "description": "IP address of the host file entry. This value must be a valid IP address.",
          "type": "string"
        }
      },
      "required": [
        "hostnames",
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.HostPathVolumeSource": {
      "description": "A host path mapped into a Pod. Host path volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "Path of the directory on the host. If the `path` is a symlink, it will follow the link to the real path. It cannot contain any backsteps (`\"..\"`). ",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "default": "",
          "description": "Type for HostPath Volume.\n\n- `\"\"`: for backward compatibility, leave it empty if unset.\n- `\"DirectoryOrCreate\"`: If nothing exists at the given `path`, an empty directory will be created there as needed with file mode `0755`, having the same group and ownership with kubelet.\n- `\"Directory\"`: A directory must exist at the given `path`.\n- `\"FileOrCreate\"`: If nothing exists at the given `path`, an empty file will be created there as needed with file mode `0644`, having the same group and ownership with kubelet.\n- `\"File\"`: A file must exist at the given `path`.\n- `\"Socket\"`: A UNIX socket must exist at the given `path`.\n- `\"CharDevice\"`: A character device must exist at the given `path`.\n- `\"BlockDevice\"`: A block device must exist at the given `path`.\n",
          "enum": [
            "",
            "BlockDevice",
            "CharDevice",
            "Directory",
            "DirectoryOrCreate",
            "File",
            "FileOrCreate",
            "Socket"
          ],
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIPersistentVolumeSource": {
      "description": "An ISCSI disk. ISCSI volumes can only be mounted as `\"ReadWriteOnce\"`. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "This indicates whether the volume supports iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "This indicates whether the volume supports iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume that you want to mount. The filesystem type must be supported by the host operating system.",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If `initiatorName` is specified with `iscsiInterface` simultaneously, new iSCSI interface `\"<volume name>:<target portal>\"` will be created for the connection. The length of the interface string cannot exceed 64 characters.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name (IQN). The name must have prefix `\"iqn\"` or `\"eui\"` or `\"naa\"`.",
          "minLength": 1,
          "type": "string"
        },
        "iscsiInterface": {
          "default": "default",
          "description": "The iSCSI Interface that uses an iSCSI transport. Default value `\"default\"`' means TCP.",
          "type": "string"
        },
        "lun": {
          "description": "The target LUN number.",
          "format": "int32",
          "maximum": 255,
          "minimum": 0,
          "type": "integer"
        },
        "portals": {
          "description": "The target portal list. The portal is either an IP or `\"<ip_addr>:<port>\"` if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "default": false,
          "description": "Force the the volume to be mounted in ready-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "CHAP Secret for iSCSI target and initiator authentication. If `chapAuthSession` or `chapAuthDiscovery` is specified, this field cannot be empty."
        },
        "targetPortal": {
          "description": "iSCSI target portal. The portal is either an IP or `\"<ip_addr>:<port>\"` if the port is other than default (typically TCP ports 860 and 3260).",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "iqn",
        "lun",
        "targetPortal"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ISCSIVolumeSource": {
      "description": "An ISCSI disk. ISCSI volumes can only be mounted as `\"ReadWriteOnce\"`. ISCSI volumes support ownership management and SELinux relabeling.",
      "properties": {
        "chapAuthDiscovery": {
          "description": "This indicates whether the volume supports iSCSI Discovery CHAP authentication",
          "type": "boolean"
        },
        "chapAuthSession": {
          "description": "This indicates whether the volume supports iSCSI Session CHAP authentication",
          "type": "boolean"
        },
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume that you want to mount. The filesystem type must be supported by the host operating system. Examples: `\"ext4\"`, `\"xfs\"`, `\"ntfs\"`. Implicitly inferred to be `\"ext4\"` if unspecified.",
          "type": "string"
        },
        "initiatorName": {
          "description": "Custom iSCSI Initiator Name. If `initiatorName` is specified with `iscsiInterface` simultaneously, new iSCSI interface `\"<volume name>:<target portal>\"` will be created for the connection. The length of the interface string cannot exceed 64 characters.",
          "type": "string"
        },
        "iqn": {
          "description": "Target iSCSI Qualified Name (IQN). The name must have prefix `\"iqn\"` or `\"eui\"` or `\"naa\"`.",
          "minLength": 1,
          "type": "string"
        },
        "iscsiInterface": {
          "default": "default",
          "description": "The iSCSI Interface that uses an iSCSI transport. Default value `\"default\"`' means TCP.",
          "type": "string"
        },
        "lun": {
          "description": "The target Lun number.",
          "format": "int32",
          "type": "integer"
        },
        "portals": {
          "description": "The target portal List. The portal is either an IP or `\"<ip_addr>:<port>\"` if the port is other than default (typically TCP ports 860 and 3260).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "readOnly": {
          "default": false,
          "description": "Force the `readOnly` setting in the `volumeMounts`.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "CHAP Secret for iSCSI target and initiator authentication. If `chapAuthSession` or `chapAuthDiscovery` is specified, this field cannot be empty."
        },
        "targetPortal": {
          "description": "iSCSI target portal. The portal is either an IP or `\"<ip_addr>:<port>\"` if the port is other than default (typically TCP ports 860 and 3260).",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "iqn",
        "lun",
        "targetPortal"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.KeyToPath": {
      "description": "Maps a key string to a path within a volume.",
      "properties": {
        "key": {
          "description": "The key to project.",
          "minLength": 1,
          "type": "string"
        },
        "mode": {
          "description": "Mode bits used to set permissions on this file. Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`. YAML accepts both octal and decimal values, JSON requires decimal values for `mode` bits. If not specified, the volume `defaultMode` will be used. This might be in conflict with other options that affect the file mode, like `fsGroup`, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "path": {
          "description": "The relative path of the file to map the key to. May not be an absolute path. May not contain the path element `\"..\"`. May not start with the string `\"..\"`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "key",
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Lifecycle": {
      "description": "Lifecycle describes actions that the management system should take in response to container lifecycle events. For `postStart` and `preStop`, management of the container blocks until the action is complete, unless the container process fails, in which case the handler is aborted.",
      "properties": {
        "postStart": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
          "description": "The `postStart` handler is called immediately after a container is created. If the handler fails, the container is terminated and restarted according to its restart policy. Other management of the container blocks until the hook completes."
        },
        "preStop": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Handler",
          "description": "The `preStop` handler is called immediately before a container is terminated due to an API request or management event such as liveness/startup probe failure, preemption, resource contention, etc. The handler is not called if the container crashes or exits. The reason for termination is passed to the handler. The Pod's termination grace period countdown begins before the `preStop` handler is executed. Regardless of the outcome of the handler, the container will eventually terminate within the Pod's termination grace period. Other management of the container blocks until the hook completes or until the termination grace period is reached."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRange.CREATE": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name if specified. If `name` is not provided, an UUID will be generated and used as its name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRange.GET": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRange.UPDATE": {
      "description": "LimitRange sets resource usage limits for each kind of resource in a namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRange"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeSpec",
          "description": "Spec defines the limits to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeItem": {
      "description": "An item that specifies a min/max usage limit for any resource that matches a kind. For each item, the resource name has to follow some rules. For each resource type:\n\n- the `max` value must be no smaller than the `min` value, if both are specified;\n- the `defaultRequest` value must be greater than the `min` value, if both are specified;\n- the `defaultRequest` value must be smaller than the `max` value, if both are specified.\n- the `defaultRequest` must be smaller than the `default` value, if both are specified.\n- the `default` value must be must be greater than the `min` value, if both are specified.\n- the `default` value must be smaller than the `max` value, if both are specified.\nFor GPU, hugepages and other resources that are not allowed to overcommit, the `default` value and the `defaultRequest` value must match, if both are specified.\n",
      "properties": {
        "default": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Default resource requirement limit value by resource name if resource limits is omitted. This field cannot be specified when `type` is `\"Pod\"`.",
          "type": "object"
        },
        "defaultRequest": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The default resource requirement request value by resource name if resource requests is omitted. This field cannot be specified when `type` is `\"Pod\"`.",
          "type": "object"
        },
        "max": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Max usage constraints on this kind by resource name.",
          "type": "object"
        },
        "maxLimitRequestRatio": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "If specified, the named resource must have requests and limits that are both non-zero where `limits` divided by `requests` is less than or equal to the enumerated value; this represents the max burst for the named resource. The value must be no less than 1.",
          "type": "object"
        },
        "min": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "Min usage constraints on this kind by resource name.",
          "type": "object"
        },
        "type": {
          "description": "Type of resource that this limit applies to. This has to be a qualified resource name (containing at least one `'/'`) or a standard limit type, i.e. one of `\"Pod\"`, `\"Container\"` and `\"PersistentVolumeClaim\"`. The `type` value must be unique in the `limits` list.",
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LimitRangeList": {
      "description": "A list of LimitRange objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of LimitRange objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "LimitRangeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "LimitRangeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.LimitRangeSpec": {
      "description": "The spec defines a min/max usage limit for resources that match a kind.",
      "properties": {
        "limits": {
          "description": "The list of LimitRangeItem that are enforced.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeItem"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "limits"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LoadBalancerIngress": {
      "description": "The status of a load-balancer ingress point. Traffic intended for the Service should be sent to an ingress point.",
      "properties": {
        "hostname": {
          "description": "The `hostname` is set for load-balancer ingress points that are DNS based (typically AWS load-balancers)",
          "type": "string"
        },
        "ip": {
          "description": "The `ip` is set for load-balancer ingress points that are IP based (typically GCE or OpenStack load-balancers).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.LoadBalancerStatus": {
      "description": "The status of a load-balancer.",
      "properties": {
        "ingress": {
          "description": "A list containing ingress points for the load-balancer. Traffic intended for the Service should be sent to these ingress points.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerIngress"
          },
          "type": "array"
        }
      },
      "required": [
        "ingress"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalObjectReference": {
      "description": "Information for locating an object in the same namespace.",
      "properties": {
        "name": {
          "description": "Name of the referent.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.LocalVolumeSource": {
      "description": "A directly-attached storage with node affinity",
      "properties": {
        "fsType": {
          "description": "Filesystem type to mount. It applies only when the `path` is a block device. Must be a filesystem type supported by the host operating system. The default value is to auto-select a fileystem if unspecified.",
          "type": "string"
        },
        "path": {
          "description": "The full path to the volume on the node. It can be either a directory or block device (disk, partition, ...). There can be no `\"..\"` in the path.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NFSVolumeSource": {
      "description": "An NFS mount that lasts the lifetime of a Pod. NFS volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "path": {
          "description": "The path as exported by the NFS server. This must be an absolute path.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the NFS export to be mounted with read-only permissions.",
          "type": "boolean"
        },
        "server": {
          "description": "The hostname or IP address of the NFS server.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "path",
        "server"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Namespace.CREATE": {
      "description": "Namespace provides a scope for names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Namespace"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS label no matter it is generated for explicitly provided."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Namespace.GET": {
      "description": "Namespace provides a scope for names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Namespace"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceStatus",
          "description": "Status describes the current status of a Namespace."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Namespace.UPDATE": {
      "description": "Namespace provides a scope for names. Use of multiple namespaces is optional.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Namespace"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceSpec",
          "description": "Spec defines the behavior of the Namespace."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NamespaceCondition": {
      "description": "Details about the state of the Namespace.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of Namespace controller condition.\n\n- `\"NamespaceDeletionContentFailure\"` contains information about Namespace deleter errors during deletion of resoruces.\n- `\"NamespaceDeletionDiscoveryFailure\"` contains information about Namespace deleter errors during resource discovery.\n- `\"NamespaceDeletionGroupVersionParsingFailure\"` containers information about Namespace deleter errors parsing group-version for legacy types.\n",
          "enum": [
            "NamespaceDeletionContentFailure",
            "NamespaceDeletionDiscoveryFailure",
            "NamespaceDeletionGroupVersionParsingFailure"
          ],
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceList": {
      "description": "A list of Namespace objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Namespace objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NamespaceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NamespaceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NamespaceSpec": {
      "description": "NamespaceSpec describes the attributes of a Namespace.",
      "properties": {
        "finalizers": {
          "description": "An opaque list of values that must be empty to permanently remove object from storage.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NamespaceStatus": {
      "description": "The current status of a Namespace.",
      "properties": {
        "conditions": {
          "description": "The latest available observations of a Namespace's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "The current lifecycle phase of the Namespace.",
          "enum": [
            "Active",
            "Terminating"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Node.CREATE": {
      "description": "Node is a worker node in Kubernetes. Each Node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name of a Node must be a valid DNS subdomain name. A Node can have taints specified using the `\"scheduler.alpha.kubernetes.io/taints\"` annotation key, where the value is a serialized JSON of a valid Taint object. The server validates the deserialized Taint object as if it is specified on the Node's `spec.taints`. A Node can also have the `\"scheduler.alpha.kubernetes.io/preferAvoidPods\"` annotation key specified as a serialized JSON list of `PreferAvoidPods` struct."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a Node."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Node.GET": {
      "description": "Node is a worker node in Kubernetes. Each Node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a Node."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeStatus",
          "description": "Most recently observed status of the Node."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Node.UPDATE": {
      "description": "Node is a worker node in Kubernetes. Each Node will have a unique identifier in the cache (i.e. in etcd).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Node"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSpec",
          "description": "Spec defines the behavior of a Node."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NodeAddress": {
      "description": "Information for the node's address.",
      "properties": {
        "address": {
          "description": "The node address.",
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "Node address type.",
          "enum": [
            "ExternalDNS",
            "ExternalIP",
            "Hostname",
            "InternalDNS",
            "InternalIP"
          ],
          "type": "string"
        }
      },
      "required": [
        "type",
        "address"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeAffinity": {
      "description": "A group of node affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule Pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of `weight`s, i.e. for each node that meets all of the scheduling requirements (resource request, `requiredDuringScheduling` affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding `weight` to the sum if the node matches the corresponding `matchExpressions`; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "The value is a NodeSelector type. If the affinity requirements specified by this field are not met at scheduling time, the Pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during Pod execution (e.g. due to an update), the system may or may not try to eventually evict the Pod from its node."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeCondition": {
      "description": "Condition information for a Node.\n\n**Note**: Currently, there are not enough information to decide node condition. In the future, some new conditions may get added. The proposed condition types are: `\"NodeReady\"`, `\"NodeLive\"`, `\"NodeReachable\"`, `\"NodeSchedulable\"`, `\"NodeRunnable\"`.",
      "properties": {
        "lastHeartbeatTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we got an update on a given condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transit from one status to another."
        },
        "message": {
          "description": "Human readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "A (brief) reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of node condition.",
          "enum": [
            "Ready",
            "MemoryPressure",
            "DiskPressure",
            "NetworkUnavailable",
            "PIDPressure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeConfigSource": {
      "description": "A source of Node configuration. Exactly one subfield (excluding metadata) must be non-nil.",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource",
          "description": "A description about the reference to a Node's ConfigMap"
        }
      },
      "required": [
        "configMap"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeConfigStatus": {
      "description": "The status of the config assigned by `node.spec.configSource`.",
      "properties": {
        "active": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "The checkpointed config the node is actively using. This represents either the current version of the `assigned` config, or the current `lastKnownGood` config, depending on whether attempting to use the `assigned` config results in an `error`."
        },
        "assigned": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "This reports the checkpointed config the node will try to use. When `node.spec.configSource` is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in `assigned`. The `assigned` only updates in the `status` after the record has been checkpointed to disk. When the kubelet is restarted, it tries to make the `assigned` config the `active` config by loading and validating the checkpointed payload identified by `assigned`."
        },
        "error": {
          "description": "This describes any problems in reconciling the `spec.configSource` to the `active` config. Errors may occur, for example, attempting to checkpoint `spec.configSource` to the local `assigned` record, attempting to checkpoint the payload associated with `spec.configSource`, attempting to load or validate the `assigned` config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to `lastKnownGood`, and may resolve across kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to `lastKnownGood`. In the latter case, it is usually possible to resolve the error by fixing the config assigned in `spec.configSource`. You can find additional information for debugging by searching the error message in the kubelet log.\n\n`error` is a human-readable description of the error state; machines can check whether or not `error` is empty, but should not rely on the stability of the `error` text across kubelet versions.",
          "type": "string"
        },
        "lastKnownGood": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "This reports the checkpointed config the node will fall back to when it encounters an error attempting to use the `assigned` config. The `assigned` config becomes the `lastKnownGood` config when the node determines that the `assigned` config is stable and correct.\n\nThis is currently implemented as a 10-minute soak period starting when the local record of `assigned` config is updated. If the `assigned` config is `active` at the end of this period, it becomes the `lastKnownGood`. Note that if `spec.configSource` is reset to nil (use local defaults), the `lastKnownGood` is also immediately reset to nil, because the local default config is always assumed good.\n\nYou should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeDaemonEndpoints": {
      "description": "Ports opened by daemons running on the Node.",
      "properties": {
        "kubeletEndpoint": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DaemonEndpoint",
          "description": "Endpoint on which kubelet is listening."
        }
      },
      "required": [
        "kubeletEndpoint"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeList": {
      "description": "A list of Node objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Node objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NodeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "NodeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.NodeSelector": {
      "description": "A list of label queries over Nodes. The results are OR'ed from all terms.",
      "properties": {
        "nodeSelectorTerms": {
          "description": "A list of NodeSelectorTerms.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "nodeSelectorTerms"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorRequirement": {
      "description": "A selector that contains `values`, a `key`, and an `operator` that relates the `key` and `values`.",
      "properties": {
        "key": {
          "description": "The label key or the field that the selector applies to. This string must be a qualified name, i.e. consist of alphanumeric characters, `'-'`, `'_'`, or `'.'`, and must start and end with an alphanumeric character. It can have domain name prefix like `\"<domain>/\"`, where `<domain>` must be a valid DNS subdomain name. The name part can be no more than 63 characters. When this struct is used to select nodes based on their fields, the currently supported key is `\"metadata.name\"`.",
          "minLength": 1,
          "type": "string"
        },
        "operator": {
          "description": "Represents a key's relationship to a set of values. When this struct is used to select nodes based on their labels, valid operators are `\"In\"`, `\"NotIn\"`, `\"Exists\"`, `\"DoesNotExist\"`. `\"Gt\"`, and `\"Lt\"`. When this struct is used to select nodes based on fields, valid operators are `\"In\"` and `\"NotIn\"`.",
          "enum": [
            "DoesNotExist",
            "Exists",
            "Gt",
            "In",
            "Lt",
            "NotIn"
          ],
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values.\n\n- If the `operator` is `\"In\"` or `\"NotIn\"`, the `values` array must be non-empty.\n- If the `operator` is `\"Exists\"` or `\"DoesNotExist\"`, the `values` array must be empty.\n- If the operator is `\"Gt\"` or `\"Lt\"`, the `values` array must have a single element, which will be interpreted as an integer.\n\nThis array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSelectorTerm": {
      "description": "A Node selection term. A null or empty term matches no Node. The requirements in the term are AND'ed.",
      "properties": {
        "matchExpressions": {
          "description": "A list of Node selector based on Node's labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        },
        "matchFields": {
          "description": "A list of Node selector based on Node's fields.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSpec": {
      "description": "The attributes a Node is created with.",
      "properties": {
        "configSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
          "description": "If specified, the source to get Node configuration from. The `DynamicKubeletConfig` feature gate must be enabled for the kubelet to use this field."
        },
        "podCIDR": {
          "description": "The Pod IP range assigned to the Node.",
          "type": "string"
        },
        "podCIDRs": {
          "description": "The IP ranges assigned to the Node for usage by Pods on that Node. If this field is specified, the 0th entry must match the `podCIDR` field. It may contain at most 1 value for each of IPv4 and IPv6.",
          "items": {
            "type": "string"
          },
          "maxItems": 2,
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "providerID": {
          "description": "ID of the Node assigned by the cloud provider in the format: `\"<ProviderName>://<ProviderSpecificNodeID>\"`.",
          "type": "string"
        },
        "taints": {
          "description": "If specified, the Node's taints. The taints in the list must have `effect` specified. The tuple of (`key`, `effect`) in the list must be unique.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Taint"
          },
          "type": "array"
        },
        "unschedulable": {
          "default": false,
          "description": "Unschedulable controls Node schedulability of new pods. By default, Node is schedulable.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeStatus": {
      "description": "Information about the current status of the Node.",
      "properties": {
        "addresses": {
          "description": "List of addresses reachable to the node. Queried from cloud provider, if available.\n\n**Note**: This field is declared as mergeable, but the merge key is not sufficiently unique, which can cause data corruption when it is merged. Callers should instead use a full-replacement patch.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeAddress"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "allocatable": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The node resources that are available for scheduling. All quantity values must be non-negative. Defaults to value in `capacity'.",
          "type": "object"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The total resources on the node. All quantity values must be non-negative.",
          "type": "object"
        },
        "conditions": {
          "description": "An array of current observed node conditions.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.NodeCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "config": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigStatus",
          "description": "Status of the config assigned to the node via the `DynamicKubeletConfig` feature."
        },
        "daemonEndpoints": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints",
          "description": "Endpoints of daemons running on the Node."
        },
        "images": {
          "description": "List of container images on this node. The number of images that are reported here can be set via the `--node-status-max-images` flag for the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerImage"
          },
          "type": "array"
        },
        "nodeInfo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSystemInfo",
          "description": "Set of IDs/UUIDs to uniquely identify the node."
        },
        "phase": {
          "description": "The recently observed lifecycle phase of the Node. The field is never populated, and now is *DEPRECATED*.",
          "type": "string"
        },
        "volumesAttached": {
          "description": "List of volumes that are attached to the node.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.AttachedVolume"
          },
          "type": "array"
        },
        "volumesInUse": {
          "description": "List of attachable volumes in use (mounted) by the node.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.NodeSystemInfo": {
      "description": "A set of IDs/UUIDs to uniquely identify the node.",
      "properties": {
        "architecture": {
          "description": "The architecture reported by the node",
          "minLength": 1,
          "type": "string"
        },
        "bootID": {
          "description": "Boot ID reported by the node.",
          "minLength": 1,
          "type": "string"
        },
        "containerRuntimeVersion": {
          "description": "Container runtime version as reported by the node through runtime remote API (e.g. `\"docker://1.5.0\"`).",
          "minLength": 1,
          "type": "string"
        },
        "kernelVersion": {
          "description": "Kernel version as reported by the node from `uname -r` (e.g. `\"3.16.0-0.bpo.4-amd64\"`).",
          "minLength": 1,
          "type": "string"
        },
        "kubeProxyVersion": {
          "description": "kube-proxy version reported by the node.",
          "minLength": 1,
          "type": "string"
        },
        "kubeletVersion": {
          "description": "kubelet version reported by the node.",
          "minLength": 1,
          "type": "string"
        },
        "machineID": {
          "description": "Machine ID reported by the node. For unique machine identification in the cluster this field is preferred. Learn more from [man(5) machine-id](http://man7.org/linux/man-pages/man5/machine-id.5.html).",
          "minLength": 1,
          "type": "string"
        },
        "operatingSystem": {
          "description": "The operating system reported by the node",
          "minLength": 1,
          "type": "string"
        },
        "osImage": {
          "description": "OS image reported by the node from /etc/os-release (e.g. `\"Debian GNU/Linux 7 (wheezy)\"`).",
          "minLength": 1,
          "type": "string"
        },
        "systemUUID": {
          "description": "System UUID reported by the node. For unique machine identification, `machineID` is preferred. This field is specific to Red Hat hosts.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "architecture",
        "bootID",
        "containerRuntimeVersion",
        "kernelVersion",
        "kubeletVersion",
        "kubeProxyVersion",
        "machineID",
        "operatingSystem",
        "osImage",
        "systemUUID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectFieldSelector": {
      "description": "This selects an API versioned field of an object.",
      "properties": {
        "apiVersion": {
          "default": "v1",
          "description": "Version of the schema the `fieldPath` is written in terms of. Currently, this must be `\"v1\"`.",
          "type": "string"
        },
        "fieldPath": {
          "description": "Path of the field to select in the specified API version. The supported fields can be `\"metadata.name\"`, `\"metadata.namespace\"`, `\"metadata.uid\"`, `\"spec.nodeName`\", `\"spec.serviceAccountName\"`, `\"status.hostIP\"`, `\"status.podIP\"`, `\"status.podIPs\"` and `\"spec.host\"`. The `\"spec.host\"` is for backword compatibility, and treated as `\"spec.nodeName\"`. For `\"metadata.annotations\"` and `\"metadata.labels\"`, subscripts `\"[<key>]\"` are supported where the `<key>` must be a qualified name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "fieldPath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ObjectReference": {
      "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n\n1. **Ignored fields**. It includes many fields which are not generally honored. For instance, `resourceVersion` and `fieldPath` are both very rarely valid in actual usage.\n1. **Invalid usage help**. It is impossible to add specific help for individual usage. In most embedded usages, there are particular restrictions like, *must refer only to types A and B* or *UID not honored* or *name must be restricted*. Those cannot be well described when embedded.\n1. **Inconsistent validation**. Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n1. **The fields are both imprecise and overly precise**. Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping. In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant.\n1. **We cannot easily change it**. Because this type is embedded in many locations, updates to this type will affect numerous schemas. Don't make new APIs embed an underspecified API type they do not control.\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference. For example, `ServiceReferences` for admission registration.",
      "properties": {
        "apiVersion": {
          "description": "API version of the referenced object",
          "type": "string"
        },
        "fieldPath": {
          "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as `\"desiredState.manifest.containers[2]\"`. For example, if this references a container within a Pod, it would take on a value like `\"spec.containers{name}\"` (where `\"name\"` refers to the name of the container that triggered the event) or if no container name is specified `\"spec.containers[2]\"` (container with index 2 in this Pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of the referenced object",
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced object.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object.",
          "type": "string"
        },
        "resourceVersion": {
          "description": "Specific `resourceVersion` to which this reference is made, if any.",
          "type": "string"
        },
        "uid": {
          "description": "UID of the referenced object.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolume.CREATE": {
      "description": "A storage resource provisioned by an administrator.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "The specification of a persistent volume owned by the cluster."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolume.GET": {
      "description": "A storage resource provisioned by an administrator.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "The specification of a persistent volume owned by the cluster."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus",
          "description": "The current information/status for the persistent volume."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolume.UPDATE": {
      "description": "A storage resource provisioned by an administrator.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolume"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "The specification of a persistent volume owned by the cluster."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim.CREATE": {
      "description": "A user's request for and claim to a PersistentVolume (PV).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name of must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The desired characteristics of a PersistentVolumeClaim."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim.GET": {
      "description": "A user's request for and claim to a PersistentVolume (PV).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The desired characteristics of a PersistentVolumeClaim."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus",
          "description": "The current information/status of a persistent volume claim."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE": {
      "description": "A user's request for and claim to a PersistentVolume (PV).",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaim"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The desired characteristics of a PersistentVolumeClaim."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimCondition": {
      "description": "Detailed state of a PVC",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, this should be a short, machine understandable string that gives the reason for condition's last transition. If it reports `\"ResizeStarted\"` that means the underlying persistent volume is being resized.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknownn"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.\n\n- `\"Resizing\"`: A user triggered resize of PVC has been started.\n- `\"FileSystemResizePending\"`: The controller resize has completed and a file system resize is pending on node.",
          "enum": [
            "Resizing",
            "FileSystemResizePending"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimList": {
      "description": "A list of PersistentVolumeClaim objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PersistentVolumeClaim objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeClaimList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeClaimList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimSpec": {
      "description": "The common attributes and the provider-specific attributes of storage devices",
      "properties": {
        "accessModes": {
          "description": "The desired access modes of the volume",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "dataSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "This field can be used to specify either:\n\n- An existing `VolumeSnapshot` object (`\"snapshot.storage.k8s.io/VolumeSnapshot\"` - beta)\n- An existing PVC (`PersistentVolumeClaim`)\n- An existing custom resource/object that implements data population (alpha).\n\nIn order to use `VolumeSnapshot` object types, the appropriate feature gate must be enabled (`VolumeSnapshotDataSource` or `AnyVolumeDataSource`). If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source.\n\nThe `kind` and the `name` fields in the `dataSource` must be specified. If the `apiGroup` field is not specified or an empty string, the `kind` must be `\"PersistentVolumeClaim\"`. If the specified data source is not supported, the volume will not be created and the failure will be reported as an event."
        },
        "resources": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
          "description": "The minimum resources the volume should have. The `requests.storage` must be specified as a positive quantity value."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over volumes to be considered for binding."
        },
        "storageClassName": {
          "description": "Name of the StorageClass required by the claim. The name must be a valid DNS subdomain, if specified.",
          "type": "string"
        },
        "volumeMode": {
          "default": "Filesystem",
          "description": "Type of volume required by the claim.",
          "enum": [
            "Block",
            "Filesystem"
          ],
          "type": "string"
        },
        "volumeName": {
          "description": "The binding reference to the PersistentVolume backing this claim.",
          "type": "string"
        }
      },
      "required": [
        "accessModes",
        "resources"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimStatus": {
      "description": "The current status of a PersistentVolumeClaim.",
      "properties": {
        "accessModes": {
          "description": "The actual access modes of the volume backing the PVC.",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The actual resource capacity of the underlying volume.",
          "type": "object"
        },
        "conditions": {
          "description": "Current condition of the PVC. If the underlying PV is being resized then the `condition` will be set to `\"ResizeStarted\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "phase": {
          "description": "The current phase of PersistentVolumeClaim.\n\n- `\"Bound\"`: The PVC is already bound;\n - `\"Pending\"`: The PVC is not yet bound;\n- `\"Lost\"`: The PVC has lost its underlying PersistentVolume. The claim was bound to a PersistentVolume and the volume does not exist any longer and all data on it was lost.\n",
          "enum": [
            "Bound",
            "Lost",
            "Pending"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimTemplate": {
      "description": "A template used to produce PersistentVolumeClaim objects as part of an EphemeralVolumeSource.",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "May contain labels and annotations that will be copied into the PVC when creating it. No other fields are allowed during validation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec",
          "description": "The specification for the PersistentVolumeClaim. The entire content is copied unchanged into the PVC that gets created from this template. The same fields as in a PersistentVolumeClaim are also valid here."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource": {
      "description": "PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace. This volume finds the bound PV and mounts that volume for the Pod. A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type of volume that is owned by someone else (the system).",
      "properties": {
        "claimName": {
          "description": "The name of a PersistentVolumeClaim in the same namespace as the Pod.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Whether to force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        }
      },
      "required": [
        "claimName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeList": {
      "description": "A list of PersistentVolume objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PersistentVolume objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PersistentVolumeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadat"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PersistentVolumeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PersistentVolumeSpec": {
      "description": "The specification of a PersistentVolume. One and only one volume type must be specified. The volume source cannot be updated once created.",
      "properties": {
        "accessModes": {
          "description": "The ways the volume can be mounted.",
          "items": {
            "enum": [
              "ReadOnlyMany",
              "ReadWriteMany",
              "ReadWriteOnce"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "An AWS disk resource that is attached to a kubelet's host machine and then exposed to the Pod."
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "An Azure data disk mounted on the node and bind mounted to the Pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource",
          "description": "An Azure file service mounted on the node and bind mounted to the Pod."
        },
        "capacity": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "A description of the persistent volume's resources and capacity. The capacity can only contain `\"storage\"` and the value must be a positive quantity. This must be specified for regular volumes, but CANNOT be specified for inline volumes.",
          "type": "object"
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource",
          "description": "A Ceph FS mounted on the node that shares a Pod's lifetime"
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource",
          "description": "A Cinder volume attached and mounted on node."
        },
        "claimRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Part of a bi-directional binding between a `PersistentVolume` and a `PersistentVolumeClaim`. Expected to be non-nil when bound. `claim.volumeName` is the authoritative binding between a PV and a PVC. This cannot be specified for inline volumes."
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource",
          "description": "Storage that is handled by an external CSI driver. For inline volumes, this has to be specified."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "A FC (fibre channel) resource that is attached to a node and then exposed to the Pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource",
          "description": "A generic volume resource that is provisioned/attached using an exec-based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "A flocker volume attached to a node and exposed to the Pod."
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "A GCE disk resource that is attached to a node and exposed to the Pod."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource",
          "description": "A Glusterfs volume that is attached to a node and exposed to the Pod."
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "A directory on the node. Provisioned by a developer or tester. This is useful for single-node development and testing only! On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster."
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource",
          "description": "An ISCSI disk that is attached to a node and then exposed to the Pod."
        },
        "local": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalVolumeSource",
          "description": "Directly-attached storage with node affinity"
        },
        "mountOptions": {
          "description": "A list of mount options. Not validated - mount will simply fail if one is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "An NFS mount on the node."
        },
        "nodeAffinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity",
          "description": "Constraints that limit what nodes this volume can be accessed from. This field influences the scheduling of Pods that use this volume. This cannot be used on an inline volume. This cannot be used on a `local` volume. This can be updated if not set yet."
        },
        "persistentVolumeReclaimPolicy": {
          "description": "What happens to a persistent volume when released from its claim. Valid options are:\n\n- `\"Retain\"`: default for manually created `PersistentVolume`s. For inline volumes, this is the **only** choice.\n- `\"Delete\"`: default for dynamically provisioned `PersistentVolume`s\n- `\"Recycle\"`': an option that is abandoned. `\"Recycle\"` must be supported by the volume plugin backing this `PersistentVolume`. `hostPath` volume mounts of `\"/\"` cannot be used with the `\"Recycle\"` policy.",
          "enum": [
            "Delete",
            "Recycle",
            "Retain"
          ],
          "type": "string"
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "A PhotonController persistent disk attached and mounted on the node"
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "A portworx volume attached and mounted on the node"
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "A quobyte mount on the node that shares a Pod's lifetime."
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource",
          "description": "A Rados Block Device mounted on the node that shares a Pod's lifetime."
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource",
          "description": "A ScaleIO persistent volume attached and mounted on the nodes."
        },
        "storageClassName": {
          "description": "Name of a StorageClass to which this persistent volume belongs. Empty value means that this volume does not belong to any StorageClass. The string must be a valid DNS subdomain name. This CANNOT be specified on an inline volume.",
          "type": "string"
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource",
          "description": "A StorageOS volume that is attached to the node and mounted into the Pod."
        },
        "volumeMode": {
          "default": "Filesystem",
          "description": "This defines if a volume is intended to be used with a formatted filesystem or to remain in raw block state. This must be `\"Filesystem\"` for inline volumes. This cannot be updated.",
          "enum": [
            "Block",
            "Filesystem"
          ],
          "type": "string"
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "A vSphere volume attached and mounted on the node"
        }
      },
      "required": [
        "accessModes",
        "capacity"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PersistentVolumeStatus": {
      "description": "The current status of a persistent volume.",
      "properties": {
        "message": {
          "description": "A human-readable message indicating details about why the volume is in this state.",
          "type": "string"
        },
        "phase": {
          "description": "This indicates if a volume is available, bound to a claim, or released by a claim.\n\n- `\"Available\"`: the PV is not yet bound, held by the binder to match to a PVC.\n- `\"Bound\"`: the PV is bound to a PVC.\n- `\"Failed\"`: the PV has failed to be correctly recycled or deleted after being released from a PVC.\n- `\"Released\"`: The previously bound PVC for this PV was deleted. Such volumes are supposed to be recycled before becoming available again. This phase is used by the PVC binder to signal to another process to reclaim the resource.\n- `\"Pending\"`: The PV is not yet available.\n",
          "enum": [
            "Available",
            "Bound",
            "Failed",
            "Released",
            "Pending"
          ],
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase string that describes any failure and is meant for machine parsing and tidy display in the CLI.",
          "type": "string"
        }
      },
      "required": [
        "message",
        "phase",
        "reason"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource": {
      "description": "A Photon controller persistent disk resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "pdID": {
          "description": "ID that identifies Photon controller persistent disk",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "pdID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Pod.CREATE": {
      "description": "Pod is a collection of Containers that can run on a host.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name. There are some special requirements for the `annotations` for a Pod:\n\n- The kubelet sets the annotation key `\"kubernetes.io/config.mirror\"` when creating mirror Pods. For mirror Pods, the `spec.nodeName` cannot be empty.\n- The Pod can have `\"scheduler.alpha.kubernetes.io/tolerations\"` annotation set to a serialized JSON data to represent its tolerations. The API server validates if the unmarshaled JSON is a valid `Toleration` object.\n- The Pod can have `\"seccomp.security.alpha.kubernetes.io/pod\"` annotation set to the seccomp profile that is applied to all containers in the Pod. This annotation is deprecated by the `securityContext.seccompProfile` field. This annotation, when specified, is cross verified against the `securityContext.seccompProfile` of the Pod and the `securityContext.seccompProfile` of all containers.\n- The Pod can have annotation keys prefixed with `\"container.seccomp.security.alpha.kubernetes.io/\"`. These annoations are deprecated by the `seccompProfile` field on the container's `securityContext`.\n - The Pod can have annotation keys prefixed with `\"container.apparmor.security.beta.kubernetes.io/\"` for specifying per-container AppArmor profile.\n"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.CREATE",
          "description": "Specification of the desired behavior of the Pod."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Pod.GET": {
      "description": "Pod is a collection of Containers that can run on a host.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.GET",
          "description": "Specification of the desired behavior of the pod."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodStatus",
          "description": "Most recently observed status of the pod. This data may not be up to date. Populated by the system. Read-only."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Pod.UPDATE": {
      "description": "Pod is a collection of Containers that can run on a host.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Pod"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. When updating a Pod,\n\n- If the Pod has an annotation `\"container.apparmor.security.beta.kubernetes.io/\"`, the annotation cannot be removed or changed. If the Pod doesn't have this annotation, it cannot be added.\n- If the Pod alreay has an annotation `\"kubernetes.io/config.mirror\"`, the annotation cannot be changed or removed. If the Pod doesn't have this annotation, it cannot be added.\n"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.UPDATE",
          "description": "Specification of the desired behavior of the pod."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodAffinity": {
      "description": "A group of inter-Pod affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule Pods to nodes that satisfy the affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of `weight`s, i.e. for each node that meets all of the scheduling requirements (resource request, `requiredDuringScheduling` affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding `weight` to the sum if the node has Pods which matches the corresponding `podAffinityTerm`; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the affinity requirements specified by this field are not met at scheduling time, the Pod will not be scheduled onto the node. If the affinity requirements specified by this field cease to be met at some point during Pod execution (e.g. due to a Pod label update), the system may or may not try to eventually evict the Pod from its node. When there are multiple elements, the lists of nodes corresponding to each `podAffinityTerm` are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAffinityTerm": {
      "description": "A set of Pods (namely those matching the `labelSelector` relative to the given namespace(s)) that this Pod should be co-located (affinity) or not co-located (anti-affinity) with, where co-located is defined as running on a node whose value of the label with key `topologyKey` matches that of any node on which a Pod of the set of Pods is running",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of Pods."
        },
        "namespaces": {
          "description": "Which namespaces the `labelSelector` applies to; null or empty list means *this Pod's namespace*.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "topologyKey": {
          "description": "This Pod should be co-located (affinity) or not co-located (anti-affinity) with the Pods matching the `labelSelector` in the specified namespaces, where co-located is defined as running on a node whose value of the label with key `topologyKey` matches that of any node on which any of the selected Pods is running. Empty `topologyKey` is not allowed.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "topologyKey"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodAntiAffinity": {
      "description": "A group of inter-Pod anti-affinity scheduling rules.",
      "properties": {
        "preferredDuringSchedulingIgnoredDuringExecution": {
          "description": "The scheduler will prefer to schedule Pods to nodes that satisfy the anti-affinity expressions specified by this field, but it may choose a node that violates one or more of the expressions. The node that is most preferred is the one with the greatest sum of `weight`s, i.e. for each node that meets all of the scheduling requirements (resource request, `requiredDuringScheduling` anti-affinity expressions, etc.), compute a sum by iterating through the elements of this field and adding `weight` to the sum if the node has Pods which matches the corresponding `podAffinityTerm`; the node(s) with the highest sum are the most preferred.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm"
          },
          "type": "array"
        },
        "requiredDuringSchedulingIgnoredDuringExecution": {
          "description": "If the anti-affinity requirements specified by this field are not met at scheduling time, the Pod will not be scheduled onto the node. If the anti-affinity requirements specified by this field cease to be met at some point during Pod execution (e.g. due to a Pod label update), the system may or may not try to eventually evict the Pod from its node. When there are multiple elements, the lists of nodes corresponding to each `podAffinityTerm` are intersected, i.e. all terms must be satisfied.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodCondition": {
      "description": "The details for the current condition of this pod.",
      "properties": {
        "lastProbeTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time we probed the condition."
        },
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.\n\n-`\"ContainersReady\"`: all containers in the Pod are ready.\n- `\"Initialized\"`: all init-containers in the Pod have successfully started.\n- `\"PodScheduled\"`: the Pod has been scheduled to run on a node.\n- `\"Ready\"`: the Pod is able to service requests and should be added to the load balancing pools of all matching Services.\n",
          "enum": [
            "ContainersReady",
            "Initialized",
            "PodScheduled",
            "Ready"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfig": {
      "description": "The DNS parameters of a pod in addition to those generated from dnsPolicy.",
      "properties": {
        "nameservers": {
          "description": "A list of DNS name server IP addresses. This will be appended to the base `nameservers` generated from `dnsPolicy`. Duplicated `nameservers` will be removed. When `dnsPolicy` is set to `\"None\"`, there must be at least one name server specified here. Each item must be a valid IP address.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "maxItems": 3,
          "type": "array"
        },
        "options": {
          "description": "A list of DNS resolver options. This will be merged with the base options generated from `dnsPolicy`. Duplicated entries will be removed. Resolution options given in `options` will override those that appear in the base `dnsPolicy`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfigOption"
          },
          "type": "array"
        },
        "searches": {
          "description": "A list of DNS search domains for hostname lookup. This will be appended to the base search paths generated from `dnsPolicy`. Duplicated search paths will be removed. The search list, when joined using `\" \"`, cannot exceed 256 characters. It is okay for an item to have a trailing `'.'`. Every item must be a valid DNS subdomain name, excluding the trailing `'.'`.",
          "items": {
            "type": "string"
          },
          "maxItems": 6,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodDNSConfigOption": {
      "description": "This defines a DNS resolver option for a pod.",
      "properties": {
        "name": {
          "description": "Name of the host entry",
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodIP": {
      "description": "IP address information for a Pod.",
      "properties": {
        "ip": {
          "description": "An IP address (IPv4 or IPv6) assigned to the Pod, routable at least within the cluster.",
          "type": "string"
        }
      },
      "required": [
        "ip"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodList": {
      "description": "A list of Pod objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Pod objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodReadinessGate": {
      "description": "This contains the reference to a Pod condition",
      "properties": {
        "conditionType": {
          "description": "This refers to a condition in the Pod's `condition` list with matching type. The string must be a qualified name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "conditionType"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSecurityContext": {
      "description": "Pod-level security attributes and settings common to all containers. Some fields are also present in the `securityContext` field of a container's `spec`. Container level settings take precedence over field values specified at Pod level.",
      "properties": {
        "fsGroup": {
          "description": "A special supplemental group that applies to all containers in a Pod. Some volume types allow the kubelet to change the ownership of that volume to be owned by the Pod:\n\n1. The owning GID will be the `fsGroup`;\n1. The `setgid` bit is set (new files created in the volume will be owned by `fsGroup`);\n1. The permission bits are OR'd with `\"rw-rw----\"`;\n\nIf unset, the kubelet will not modify the ownership and permissions of any volume. The group ID must be between 0 and 1^32 - 1.",
          "format": "int64",
          "type": "integer"
        },
        "fsGroupChangePolicy": {
          "default": "Always",
          "description": "The behavior of changing ownership and permission of the volume before being exposed inside Pod. This field will only apply to volume types which support `fsGroup` based ownership (and permissions). It will have no effect on ephemeral volume types such as: `\"secret\"`, `\"configmap\"` and `\"emptydir\"`.",
          "enum": [
            "Always",
            "OnRootMismatch"
          ],
          "type": "string"
        },
        "runAsGroup": {
          "description": "The group ID (GID) to run the entry point of the container process. Uses runtime default if unset. May also be set in `securityContext` of a container. The group ID must be between 0 and 1^32 - 1.",
          "format": "int64",
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container must run as a non-root user. If true, the Kubelet will validate the image at runtime to ensure that it does not run as UID 0 (root) and fail to start the container if it does. If unset or false, no such validation will be performed. May also be set in `container.securityContext`.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The user ID (UID) to run the entry point of the container process. Defaults to user specified in image metadata if unspecified. May also be set in `securityContext` of a container. The user ID must be between 0 and 1^32 - 1.",
          "format": "int64",
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to all containers. If unspecified, the container runtime will allocate a random SELinux context for each container.  May also be set in `container.securityContext`."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by the containers in this Pod."
        },
        "supplementalGroups": {
          "description": "A list of groups applied to the first process run in each container, in addition to the container's primary GID.  If unspecified, no groups will be added to any container. Each group ID must be between 0 and 1^32 - 1.",
          "items": {
            "format": "int64",
            "type": "integer"
          },
          "type": "array"
        },
        "sysctls": {
          "description": "A list of namespaced sysctls used for the Pod. Pods with unsupported sysctls (by the container runtime) might fail to launch. The `name` of each item must be unique in the array.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Sysctl"
          },
          "type": "array"
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": " The Windows specific settings applied to all containers. If unspecified, the options within a container's `securityContext` will be used."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec.CREATE": {
      "description": "The specification for a Pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Duration in seconds the Pod may be active on the node relative to `startTime` before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer. This is not supported in `ReplicationController`, `Deployment`, `ReplicaSet`, `DaemonSet` or `StatefulSet`.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the Pod's scheduling constraints."
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers in the Pod. Containers currently cannot be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a Pod. Parameters specified here will be merged to the generated DNS configuration based on `dnsPolicy`. If `dnsPolicy` is set to `\"None\"`, this must be provided."
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Set DNS policy for the Pod. DNS parameters given in `dnsConfig` will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with `hostNetwork`, you have to specify DNS policy explicitly to `\"ClusterFirstWithHostNet\"`. If `dnsPolicy` is set to `\"None\"`, `dnsConfig` must be specified.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "This flag indicates whether information about services should be injected into Pod's environment variables, matching the syntax of Docker links.",
          "type": "boolean"
        },
        "hostAliases": {
          "description": "A list of hosts and IPs that will be injected into the Pod's `hosts` file. This is only valid for non-`hostNetwork` Pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "default": false,
          "description": "Use the host's IPC namespace.",
          "type": "boolean"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host networking requested for this Pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
          "type": "boolean"
        },
        "hostPID": {
          "default": false,
          "description": "Use the host's PID namespace.",
          "type": "boolean"
        },
        "hostname": {
          "description": "The hostname of the Pod. When specified, the value must be a valid DNS label. If not specified, the Pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "A list of references to Secrets in the same namespace for pulling images used by this Pod. If specified, these Secrets will be passed to individual puller implementations. For example, in the case of docker, only `\"kubernetes.io/dockerconfigjson\"` type of Secrets are honored. For each entry in the list, only the `name` field may be set.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers in the Pod. Init containers are executed in order prior to application containers being started. If any init container fails, the Pod is considered to have failed and is handled according to its `restartPolicy`. Init containers may not have `lifecycle` actions, `readinessProbe`, `livenessProbe` or `startupProbe`. The `resources.requests` of an init container are taken into account during scheduling by finding the highest `request`/`limit` for each resource type, and then using the max of of that value or the sum of the application containers. `resources.limits` are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or application containers. Init containers currently cannot be added, removed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "If this is not empty, the scheduler simply schedules this Pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A selector which must match a node's labels for the Pod to be scheduled on that node. Each key in the map must be a qualified name. Each value in the map must be no more than 63 characters. It is either an empty strying or consists of alphanumeric characters, `'-'`, `'_'`, or `'.'`, and must start and end with an alphanumeric character.",
          "type": "object"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod `spec`, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is Beta field, and is only honored by servers that enable the `PodOverhead` feature.",
          "type": "object"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: the Pod never preempts other Pods with lower priority;\n- `\"PreemptLowerPriority\"`: the Pod can preempt other Pods with lower priority.\n\nThis field is Beta, gated by the `NonPreemptingPriority` feature gate.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the Pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "The Pod's priority class. The value must be a valid DNS subdomain. The value `\"system-node-critical\"` and `\"system-cluster-critical\"` are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the Pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for Pod readiness. A Pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to `\"True\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "default": "Always",
          "description": "Restart policy for all containers within the Pod. For ReplicationController, Deployment, DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be `\"Always\"`. For Job, the `restartPolicy` must be `\"OnFailure\"` or `\"Never\"`.",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "This refers to a RuntimeClass object in the `node.k8s.io` group, which should be used to run this Pod.  If no RuntimeClass resource matches the name, the Pod will not run. If unset or empty, the `\"legacy\"` RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value must be a valid DNS subdomain. This is a Beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the Pod will be dispatched by specified scheduler. If not specified, the Pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "Pod-level security attributes and settings common to all containers. Defaults to empty."
        },
        "serviceAccountName": {
          "description": "The name of the ServiceAccount to use to run this Pod. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "default": false,
          "description": "If `true` the Pod's hostname will be configured as the Pod's fully qualified domain name (FQDN), rather than the leaf name which is the default. For Linux containers, this means setting the FQDN in the `hostname` field of the kernel (the `nodename` field of struct `utsname`). In Windows containers, this means setting the registry value of hostname for the registry key `\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\"` to FQDN. If a Pod does not have FQDN, this has no effect. This field is Alpha, gated by the `SetHostnameAsFQDN` feature gate.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "default": false,
          "description": "Share a single process namespace between all of the containers in a Pod. When this is set containers will be able to view and signal processes from other containers in the same Pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `\"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\"`. If not specified, the Pod will not have a domain name at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "A period of time during which the Pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the Pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "tolerations": {
          "description": "The Pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. All items in the list are AND'ed. The tuple `(topologyKey, whenUnsatisfiable)` must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers in the Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec.GET": {
      "description": "The specification of a Pod.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Duration in seconds the Pod may be active on the node relative to `startTime` before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer. This is not supported in `ReplicationController`, `Deployment`, `ReplicaSet`, `DaemonSet` or `StatefulSet`.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the Pod's scheduling constraints"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers in the Pod. Containers currently cannot be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a Pod. Parameters specified here will be merged to the generated DNS configuration based on `dnsPolicy`. If `dnsPolicy` is set to `\"None\"`, this must be provided."
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Set DNS policy for the Pod. DNS parameters given in `dnsConfig` will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with `hostNetwork`, you have to specify DNS policy explicitly to `\"ClusterFirstWithHostNet\"`. If `dnsPolicy` is set to `\"None\"`, `dnsConfig` must be specified.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "This flag indicates whether information about services should be injected into Pod's environment variables, matching the syntax of Docker links.",
          "type": "boolean"
        },
        "ephemeralContainers": {
          "description": "List of ephemeral containers to run in this Pod. Ephemeral containers may be run in an existing Pod to perform user-initiated actions such as debugging. This list cannot be specified when creating a Pod, and it cannot be modified by updating the Pod spec. In order to add an ephemeral container to an existing Pod, use the Pod's `ephemeralcontainers` subresource. This field is Alpha-level and is only honored by servers that enable the `EphemeralContainers` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralContainer"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostAliases": {
          "description": "A list of hosts and IPs that will be injected into the Pod's `hosts` file. This is only valid for non-`hostNetwork` Pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "default": false,
          "description": "Use the host's IPC namespace.",
          "type": "boolean"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host networking requested for this Pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
          "type": "boolean"
        },
        "hostPID": {
          "default": false,
          "description": "Use the host's PID namespace.",
          "type": "boolean"
        },
        "hostname": {
          "description": "The hostname of the Pod. When specified, the value must be a valid DNS label. If not specified, the Pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "A list of references to Secrets in the same namespace for pulling images used by this Pod. If specified, these Secrets will be passed to individual puller implementations. For example, in the case of docker, only `\"kubernetes.io/dockerconfigjson\"` type of Secrets are honored. For each entry in the list, only the `name` field may be set.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers in the Pod. Init containers are executed in order prior to application containers being started. If any init container fails, the Pod is considered to have failed and is handled according to its `restartPolicy`. Init containers may not have `lifecycle` actions, `readinessProbe`, `livenessProbe` or `startupProbe`. The `resources.requests` of an init container are taken into account during scheduling by finding the highest `request`/`limit` for each resource type, and then using the max of of that value or the sum of the application containers. `resources.limits` are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or application containers. Init containers currently cannot be added, removed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "If this is not empty, the scheduler simply schedules this Pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A selector which must match a node's labels for the Pod to be scheduled on that node. Each key in the map must be a qualified name. Each value in the map must be no more than 63 characters. It is either an empty strying or consists of alphanumeric characters, `'-'`, `'_'`, or `'.'`, and must start and end with an alphanumeric character.",
          "type": "object"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod `spec`, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is Beta field, and is only honored by servers that enable the `PodOverhead` feature.",
          "type": "object"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: the Pod never preempts other Pods with lower priority;\n- `\"PreemptLowerPriority\"`: the Pod can preempt other Pods with lower priority.\n\nThis field is Beta, gated by the `NonPreemptingPriority` feature gate.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the Pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "The Pod's priority class. The value must be a valid DNS subdomain. The value `\"system-node-critical\"` and `\"system-cluster-critical\"` are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the Pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for Pod readiness. A Pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to `\"True\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "default": "Always",
          "description": "Restart policy for all containers within the Pod. For ReplicationController, Deployment, DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be `\"Always\"`. For Job, the `restartPolicy` must be `\"OnFailure\"` or `\"Never\"`.",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "This refers to a RuntimeClass object in the `node.k8s.io` group, which should be used to run this Pod.  If no RuntimeClass resource matches the name, the Pod will not run. If unset or empty, the `\"legacy\"` RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value must be a valid DNS subdomain. This is a Beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the Pod will be dispatched by specified scheduler. If not specified, the Pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "Pod-level security attributes and settings common to all containers. Defaults to empty."
        },
        "serviceAccountName": {
          "description": "The name of the ServiceAccount to use to run this Pod. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "default": false,
          "description": "If `true` the Pod's hostname will be configured as the Pod's fully qualified domain name (FQDN), rather than the leaf name which is the default. For Linux containers, this means setting the FQDN in the `hostname` field of the kernel (the `nodename` field of struct `utsname`). In Windows containers, this means setting the registry value of hostname for the registry key `\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\"` to FQDN. If a Pod does not have FQDN, this has no effect. This is a Alpha field gated by the `SetHostnameFQDN` feature gate.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "default": false,
          "description": "Share a single process namespace between all of the containers in a Pod. When this is set containers will be able to view and signal processes from other containers in the same Pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `\"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\"`. If not specified, the Pod will not have a domain name at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "A period of tie during which the Pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the Pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "tolerations": {
          "description": "The Pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. All items in the list are AND'ed. The tuple `(topologyKey, whenUnsatisfiable)` must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers in the Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodSpec.UPDATE": {
      "description": "The new specification of a Pod. When updating a Pod, only the `containers[*].image`, `initContainers[*].image`,`activeDeadlineSeconds` or the `tolerations` fields can be changed.",
      "properties": {
        "activeDeadlineSeconds": {
          "description": "Duration in seconds the Pod may be active on the node relative to `startTime` before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer. This is not supported in `ReplicationController`, `Deployment`, `ReplicaSet`, `DaemonSet` or `StatefulSet`. When updating, this field can be updated from nil to a positive value, or from a positive value to a smaller, non-negative value.",
          "format": "int64",
          "minimum": 1,
          "type": "integer"
        },
        "affinity": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
          "description": "If specified, the Pod's scheduling constraints."
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether a service account token should be automatically mounted.",
          "type": "boolean"
        },
        "containers": {
          "description": "List of containers in the Pod. Containers currently cannot be added or removed. There must be at least one container in a Pod. Cannot be updated.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "dnsConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
          "description": "Specifies the DNS parameters of a Pod. Parameters specified here will be merged to the generated DNS configuration based on `dnsPolicy`. If `dnsPolicy` is set to `\"None\"`, this must be provided."
        },
        "dnsPolicy": {
          "default": "ClusterFirst",
          "description": "Set DNS policy for the Pod. DNS parameters given in `dnsConfig` will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with `hostNetwork`, you have to specify DNS policy explicitly to `\"ClusterFirstWithHostNet\"`. If `dnsPolicy` is set to `\"None\"`, `dnsConfig` must be specified.",
          "enum": [
            "ClusterFirst",
            "ClusterFirstWithHostNet",
            "Default",
            "None"
          ],
          "type": "string"
        },
        "enableServiceLinks": {
          "default": true,
          "description": "This flag indicates whether information about services should be injected into Pod's environment variables, matching the syntax of Docker links.",
          "type": "boolean"
        },
        "hostAliases": {
          "description": "A list of hosts and IPs that will be injected into the Pod's `hosts` file. This is only valid for non-`hostNetwork` Pods.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "hostIPC": {
          "default": false,
          "description": "Use the host's IPC namespace.",
          "type": "boolean"
        },
        "hostNetwork": {
          "default": false,
          "description": "Host networking requested for this Pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
          "type": "boolean"
        },
        "hostPID": {
          "default": false,
          "description": "Use the host's PID namespace.",
          "type": "boolean"
        },
        "hostname": {
          "description": "The hostname of the Pod. When specified, the value must be a valid DNS label. If not specified, the Pod's hostname will be set to a system-defined value.",
          "type": "string"
        },
        "imagePullSecrets": {
          "description": "A list of references to Secrets in the same namespace for pulling images used by this Pod. If specified, these Secrets will be passed to individual puller implementations. For example, in the case of docker, only `\"kubernetes.io/dockerconfigjson\"` type of Secrets are honored. For each entry in the list, only the `name` field may be set.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "initContainers": {
          "description": "List of initialization containers in the Pod. Init containers are executed in order prior to application containers being started. If any init container fails, the Pod is considered to have failed and is handled according to its `restartPolicy`. Init containers may not have `lifecycle` actions, `readinessProbe`, `livenessProbe` or `startupProbe`. The `resources.requests` of an init container are taken into account during scheduling by finding the highest `request`/`limit` for each resource type, and then using the max of of that value or the sum of the application containers. `resources.limits` are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or application containers. Init containers currently cannot be added, removed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Container"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        },
        "nodeName": {
          "description": "If this is not empty, the scheduler simply schedules this Pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name. When updating, this field cannot be changed directly.",
          "type": "string"
        },
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A selector which must match a node's labels for the Pod to be scheduled on that node. Each key in the map must be a qualified name. Each value in the map must be no more than 63 characters. It is either an empty string or consists of alphanumeric characters, `'-'`, `'_'`, or `'.'`, and must start and end with an alphanumeric character.",
          "type": "object"
        },
        "overhead": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod `spec`, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is Alpha level, and is only honored by servers that enable the `PodOverhead` feature.",
          "type": "object"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: the Pod never preempts other Pods with lower priority;\n- `\"PreemptLowerPriority\"`: the Pod can preempt other Pods with lower priority.\n\nThis field is Beta, gated by the `NonPreemptingPriority` feature gate.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "priority": {
          "description": "The priority value. Various system components use this field to find the priority of the Pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
          "format": "int32",
          "type": "integer"
        },
        "priorityClassName": {
          "description": "The Pod's priority class. The value must be a valid DNS subdomain. The value `\"system-node-critical\"` and `\"system-cluster-critical\"` are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the Pod priority will be default or zero if there is no default.",
          "type": "string"
        },
        "readinessGates": {
          "description": "If specified, all readiness gates will be evaluated for Pod readiness. A Pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to `\"True\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
          },
          "type": "array"
        },
        "restartPolicy": {
          "default": "Always",
          "description": "Restart policy for all containers within the Pod. For ReplicationController, Deployment, DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be `\"Always\"`. For Job, the `restartPolicy` must be `\"OnFailure\"` or `\"Never\"`.",
          "enum": [
            "Always",
            "Never",
            "OnFailure"
          ],
          "type": "string"
        },
        "runtimeClassName": {
          "description": "This refers to a RuntimeClass object in the `node.k8s.io` group, which should be used to run this Pod.  If no RuntimeClass resource matches the name, the Pod will not run. If unset or empty, the `\"legacy\"` RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value must be a valid DNS subdomain. This is a Beta feature as of Kubernetes v1.14.",
          "type": "string"
        },
        "schedulerName": {
          "description": "If specified, the Pod will be dispatched by specified scheduler. If not specified, the Pod will be dispatched by default scheduler.",
          "type": "string"
        },
        "securityContext": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
          "description": "Pod-level security attributes and settings common to all containers. Defaults to empty."
        },
        "serviceAccountName": {
          "description": "The name of the ServiceAccount to use to run this Pod. The value must be a valid DNS subdomain name.",
          "type": "string"
        },
        "setHostnameAsFQDN": {
          "default": false,
          "description": "If `true` the Pod's hostname will be configured as the Pod's fully qualified domain name (FQDN), rather than the leaf name which is the default. For Linux containers, this means setting the FQDN in the `hostname` field of the kernel (the `nodename` field of struct `utsname`). In Windows containers, this means setting the registry value of hostname for the registry key `\"HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\Services\\Tcpip\\Parameters\"` to FQDN. If a Pod does not have FQDN, this has no effect. This field is Alpha, gated by the `SetHostnameAsFQDN` feature gated.",
          "type": "boolean"
        },
        "shareProcessNamespace": {
          "default": false,
          "description": "Share a single process namespace between all of the containers in a Pod. When this is set containers will be able to view and signal processes from other containers in the same Pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set.",
          "type": "boolean"
        },
        "subdomain": {
          "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `\"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>\"`. If not specified, the Pod will not have a domain name at all.",
          "type": "string"
        },
        "terminationGracePeriodSeconds": {
          "default": 30,
          "description": "A period of time during which the Pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the Pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "tolerations": {
          "description": "The Pod's tolerations.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array"
        },
        "topologySpreadConstraints": {
          "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. All items in the list are AND'ed. The tuple `(topologyKey, whenUnsatisfiable)` must be unique in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "topologyKey",
            "whenUnsatisfiable"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "topologyKey",
          "x-kubernetes-patch-strategy": "merge"
        },
        "volumes": {
          "description": "List of volumes that can be mounted by containers in the Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge,retainKeys"
        }
      },
      "required": [
        "containers"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodStatus": {
      "description": "Information about the status of a Pod. Status may trail the actual state of a system, especially if the node that hosts the Pod cannot contact the control plane.",
      "properties": {
        "conditions": {
          "description": "Current service state of Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "containerStatuses": {
          "description": "The list has one entry per container in the manifest. Each entry is currently the output of `docker inspect`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "ephemeralContainerStatuses": {
          "description": "Status for any ephemeral containers that have run in this Pod. This field is Alpha-level and is only populated by servers that enable the `EphemeralContainers` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "hostIP": {
          "description": "IP address of the node to which the Pod is assigned. Empty if not yet scheduled.",
          "type": "string"
        },
        "initContainerStatuses": {
          "description": "The list has one entry per init container in the manifest. The most recent successful init container will have `ready: true`, the most recently started container will have `startTime` set.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ContainerStatus"
          },
          "type": "array"
        },
        "message": {
          "description": "A human readable message indicating details about why the Pod is in this condition.",
          "type": "string"
        },
        "nominatedNodeName": {
          "description": "This is set only when this Pod preempts other Pods on the node, but it cannot be scheduled right away as preemption victims receive their graceful termination periods. This field does not guarantee that the Pod will be scheduled on this node. Scheduler may decide to place the Pod elsewhere if other nodes become available sooner. Scheduler may also decide to give the resources on this node to a higher priority Pod that is created after preemption. As a result, this field may be different than `spec.nodeName` when the Pod is scheduled.",
          "type": "string"
        },
        "phase": {
          "description": "A simple, high-level summary of where the Pod is in its lifecycle. The `conditions` array, the `reason` and `message` fields, and the individual `containerStatuses` arrays contain more details about the Pod's status. Possible phase values:\n\n- `\"Pending\"`: The Pod has been accepted by the Kubernetes system, but one or more of the Container images has not been created. This includes time before being scheduled as well as time spent downloading images over the network, which could take a while.\n- `\"Running\"`: The Pod has been bound to a Node, and all of the Containers have been created. At least one Container is still running, or is in the process of starting or restarting.\n- `\"Succeeded\"`: All Containers in the Pod have terminated in success, and will not be restarted.\n- `\"Failed\"`: All Containers in the Pod have terminated, and at least one Container has terminated in failure. The Container either exited with non-zero status or was terminated by the system.\n- `\"Unknown\"`: For some reason the state of the Pod could not be obtained, typically due to an error in communicating with the Node of the Pod.",
          "enum": [
            "Failed",
            "Pending",
            "Running",
            "Succeeded",
            "Unknown"
          ],
          "type": "string"
        },
        "podIP": {
          "description": "The IP address allocated to the Pod. Routable at least within the cluster. Empty if not yet allocated.",
          "type": "string"
        },
        "podIPs": {
          "description": "The IP addresses allocated to the Pod. If this field is specified, the 0th entry must match the `podIP` field. Pods may be allocated at most 1 value for each of IPv4 and IPv6. This list is empty if no IPs have been allocated yet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodIP"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "ip",
          "x-kubernetes-patch-strategy": "merge"
        },
        "qosClass": {
          "description": "The Quality of Service (QOS) classification assigned to the Pod based on resource requirements.",
          "enum": [
            "BestEffort",
            "Burstable",
            "Guaranteed"
          ],
          "type": "string"
        },
        "reason": {
          "description": "A brief CamelCase message indicating details about why the Pod is in this state. e.g. `\"Evicted\"`.",
          "type": "string"
        },
        "startTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "RFC 3339 date and time at which the Pod was acknowledged by the kubelet. This is before the kubelet pulled the container image(s) for the Pod."
        }
      },
      "required": [
        "conditions",
        "containerStatuses",
        "message",
        "phase",
        "reason"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplate.CREATE": {
      "description": "A template for creating copies of a predefined Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplate"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "Template defines the Pods that will be created from this Pod template."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "template"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplate.GET": {
      "description": "A template for creating copies of a predefined Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplate"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "Template defines the Pods that will be created from this Pod template."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "template"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplate.UPDATE": {
      "description": "A template for creating copies of a predefined Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplate"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be a valid DNS subdomain name."
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "Template defines the Pods that will be created from this Pod template."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplateList": {
      "description": "A list of PodTemplate objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PodTemplate objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodTemplateList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "PodTemplateList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.PodTemplateSpec.CREATE": {
      "description": "The specification a Pod should have when created from the template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERCREATE",
          "description": "Object metadata for nested Pod template."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.CREATE",
          "description": "Specification of the desired behavior of the Pod."
        }
      },
      "required": [
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplateSpec.GET": {
      "description": "The specification a Pod should have when created from the template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERGET",
          "description": "Object metadata for nested Pod template."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.GET",
          "description": "Specification of the desired behavior of the Pod."
        }
      },
      "required": [
        "metadata",
        "spec"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PodTemplateSpec.UPDATE": {
      "description": "The specification a Pod should have when created from the template",
      "properties": {
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERUPDATE",
          "description": "Object metadata for nested Pod template."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodSpec.UPDATE",
          "description": "Specification of the desired behavior of the Pod."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.PortworxVolumeSource": {
      "description": "A Portworx volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "The filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "volumeID": {
          "description": "Unique ID that identifies a Portworx volume",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumeID"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.PreferredSchedulingTerm": {
      "description": "An empty term matches all objects with implicit weight 0 (i.e. it's a no-op). A null term matches no objects (i.e. is also a no-op).",
      "properties": {
        "preference": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelectorTerm",
          "description": "A node selector term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding preference.",
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "preference",
        "weight"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Probe": {
      "description": "A health check to be performed against a container to determine whether it is alive or ready to receive traffic. One and only one of the `exec`, `httpGet` and `tcpSocket` action can be specified.",
      "properties": {
        "exec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ExecAction",
          "description": "This specifies the action to take."
        },
        "failureThreshold": {
          "default": 3,
          "description": "Minimum consecutive failures for the probe to be considered failed after having succeeded.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "httpGet": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HTTPGetAction",
          "description": "This specifies the HTTP request to perform."
        },
        "initialDelaySeconds": {
          "description": "Number of seconds after the container has started before liveness probes are initiated.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "periodSeconds": {
          "default": 10,
          "description": "How often (in seconds) to perform the probe.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "successThreshold": {
          "default": 1,
          "description": "Minimum consecutive successes for the probe to be considered successful after having failed. Must be 1 for liveness and startup probes.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "tcpSocket": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TCPSocketAction",
          "description": "This specifies an action involving a TCP port. TCP hooks not yet supported"
        },
        "timeoutSeconds": {
          "default": 1,
          "description": "Number of seconds after which the probe times out.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ProjectedVolumeSource": {
      "description": "A projected volume source",
      "properties": {
        "defaultMode": {
          "description": "Mode bits used to set permissions on created files by default. Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like `fsGroup`, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "sources": {
          "description": "List of VolumeProjection structs",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeProjection"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "sources"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.QuobyteVolumeSource": {
      "description": "A Quobyte mount that lasts the lifetime of a Pod. Quobyte volumes do not support ownership management or SELinux relabeling.",
      "properties": {
        "group": {
          "description": "Group to map volume access to. Default is no group",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the Quobyte volume to be mounted with read-only permissions.",
          "type": "boolean"
        },
        "registry": {
          "description": "A single or multiple Quobyte registry services which act as the central registries for volumes, specified as a string as `\"host:port\"` pair (multiple entries are separated with commas).",
          "minLength": 1,
          "type": "string"
        },
        "tenant": {
          "description": "Tenant owning the given Quobyte volume in the backend. This is used with dynamically provisioned Quobyte volumes, value is set by the plugin",
          "maxLength": 64,
          "type": "string"
        },
        "user": {
          "description": "User to map volume access to. Defaults to SerivceAccount user",
          "type": "string"
        },
        "volume": {
          "description": "A string that references the name of an existing Quobyte volume.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "registry",
        "volume"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDPersistentVolumeSource": {
      "description": "A Rados Block Device (RBD) mount that lasts the lifetime of a Pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume to mount. The filesystem type must be supported by the host operating system.",
          "type": "string"
        },
        "image": {
          "description": "The rados image name.",
          "minLength": 1,
          "type": "string"
        },
        "keyring": {
          "default": "/etc/ceph/keyring",
          "description": "The path to key ring for RBDUser.",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "pool": {
          "default": "rbd",
          "description": "The rados pool name.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the disk to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "The name of the authentication Secret for RBDUser. If provided overrides `keyring`."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name.",
          "type": "string"
        }
      },
      "required": [
        "image",
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.RBDVolumeSource": {
      "description": "Represents a Rados Block Device (RBD) mount that lasts the lifetime of a Pod. RBD volumes support ownership management and SELinux relabeling.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type of the volume that you want to mount. The filesystem type must be supported by the host operating system. Implicitly inferred to be `\"ext4\"` if unspecified.",
          "type": "string"
        },
        "image": {
          "description": "The rados image name",
          "minLength": 1,
          "type": "string"
        },
        "keyring": {
          "default": "/etc/ceph/keyring",
          "description": "Keyring is the path to key ring for RBDUser.",
          "type": "string"
        },
        "monitors": {
          "description": "A collection of Ceph monitors.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "pool": {
          "default": "rbd",
          "description": "The rados pool name.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "Name of the authentication Secret for RBDUser. If provided overrides `keyring`."
        },
        "user": {
          "default": "admin",
          "description": "The rados user name",
          "type": "string"
        }
      },
      "required": [
        "image",
        "monitors"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationController.CREATE": {
      "description": "The configuration of a ReplicationController.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. If the `labels` of a ReplicationController are empty, they are defaulted to that of the Pod(s) the ReplicationController manages. The `name`, if specified, must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.CREATE",
          "description": "The specification of the desired behavior of the ReplicationController."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationController.GET": {
      "description": "The configuration of a ReplicationController.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.GET",
          "description": "The specification of the desired behavior of the ReplicationController."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus",
          "description": "The most recently observed status of the ReplicationController. This data may be out of date by some window of time."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationController.UPDATE": {
      "description": "The configuration of a ReplicationController.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationController"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. If the `labels` of a ReplicationController are empty, they are defaulted to that of the Pod(s) the ReplicationController manages. The `name`, if specified, must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.UPDATE",
          "description": "The specification of the desired behavior of the ReplicationController."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerCondition": {
      "description": "The state of the ReplicationController at a certain point in time.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human readable message indicating details about the transition.",
          "type": "string"
        },
        "reason": {
          "description": "The reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "Status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type of ReplicationController condition.",
          "enum": [
            "ReplicaFailure"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerList": {
      "description": "A list of ReplicationController objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ReplicationController objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ReplicationControllerList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ReplicationControllerList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec.CREATE": {
      "description": "The specification of a ReplicationController.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its Container crashing for it to be considered available. The default value 0 meands a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Label keys and values for Pods that must match in order to be controlled by this ReplicationController. If `selector` is empty, it defaults to the labels present on the `template`. If `selector` is not empty, it must match the `labels` defined on the `template`.",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE",
          "description": "The object that describes the Pod to create if insufficient replicas are detected."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec.GET": {
      "description": "The specification of a ReplicationController.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its Container crashing for it to be considered available. The default value 0 meands a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Label keys and values for Pods that must match in order to be controlled by this ReplicationController. If `selector` is empty, it defaults to the labels present on the `template`. If `selector` is not empty, it must match the `labels` defined on the `template`.",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET",
          "description": "The object that describes the Pod to create if insufficient replicas are detected."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerSpec.UPDATE": {
      "description": "The specification of a ReplicationController.",
      "properties": {
        "minReadySeconds": {
          "default": 0,
          "description": "Minimum number of seconds for which a newly created Pod should be ready without any of its Container crashing for it to be considered available. The default value 0 meands a Pod will be considered available as soon as it is ready.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "replicas": {
          "default": 1,
          "description": "The number of desired replicas.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Label keys and values for Pods that must match in order to be controlled by this ReplicationController. If `selector` is empty, it defaults to the labels present on the `template`. If `selector` is not empty, it must match the `labels` defined on the `template`.",
          "type": "object"
        },
        "template": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE",
          "description": "The object that describes the Pod to create if insufficient replicas are detected."
        }
      },
      "required": [
        "template"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ReplicationControllerStatus": {
      "description": "The current status of the ReplicationController.",
      "properties": {
        "availableReplicas": {
          "description": "The number of available replicas (ready for at least `minReadySeconds`) for this ReplicationController.",
          "format": "int32",
          "type": "integer"
        },
        "conditions": {
          "description": "The latest observations of a ReplicationController's current state.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        },
        "fullyLabeledReplicas": {
          "description": "The number of Pods that have labels matching the `labels` of the Pod `template` of the ReplicationController.",
          "format": "int32",
          "type": "integer"
        },
        "observedGeneration": {
          "description": "The generation of the most recently observed ReplicationController.",
          "format": "int64",
          "type": "integer"
        },
        "readyReplicas": {
          "description": "The number of ready replicas for this ReplicationController.",
          "format": "int32",
          "type": "integer"
        },
        "replicas": {
          "description": "The most recently observed number of replicas.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "replicas"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceFieldSelector": {
      "description": "ResourceFieldSelector represents container resources (`cpu`, `memory`) and their output format",
      "properties": {
        "containerName": {
          "description": "The container name. This is required when injecting the data as volume into Pods, and it is optional when injecting the data as environment variables into Pods.",
          "type": "string"
        },
        "divisor": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity",
          "default": "1",
          "description": "Specifies the output format of the exposed resources. For `\"cpu\"`, it can be `\"1m\"` or `\"1\"`; for `\"memory\"`, `\"ephemeral-storage\"` or hugepage resources (i.e. prefixed with `\"requests.hugepages-\"` or `\"limits.hugepages-\"`), it can be one of `\"1\"`, `\"1k\"`, `\"1M\"`, `\"1G\"`, `\"1T\"`, `\"1P\"`, `\"1E\"`, `\"1Ki\"`, `\"1Mi\"`, `\"1Gi\"`, `\"1Ti\"`, `\"1Pi\"`, `\"1Ei\"`'."
        },
        "resource": {
          "description": "Resource to select. It can be `\"limits.cpu\"`, `\"requests.cpu\"`, `\"limits.memory\"`, `\"requests.memory\"`, `\"limits.ephemeral-storage\"`, `\"requests.ephemeral-storage\"`. If the feature gate `DownwardAPIHugePages` is enabled, the resource can be prefixed by `\"requests.hugepages-\"` or `\"limits.hugepages-\"`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "resource"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuota.CREATE": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuota"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuota.GET": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuota"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus",
          "description": "The actual enforced quota and its current usage."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuota.UPDATE": {
      "description": "ResourceQuota sets aggregate quota restrictions enforced per namespace",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuota"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec",
          "description": "Spec defines the desired quota."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuotaList": {
      "description": "A list of ResourceQuota objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ResourceQuota objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ResourceQuotaList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ResourceQuotaList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ResourceQuotaSpec": {
      "description": "The desired hard limits to enforce as quota.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The set of desired hard limits for each named resource. The resource name must be a standard quota resources or fully qualified name. All quantity values must be non-negative. For integer resources, the value cannot contain milli-value. The standard quota resources are `\"cpu\"`, `\"memory\"`, `\"ephemeral-storage\"`, `\"requests.cpu\"`, `\"requests.memory\"`, `\"requests.storage\"`, `\"requests.ephemeral-storage\"`, `\"limits.cpu\"`, `\"limits.memory\"`, `\"limits.ephemeral-storage\"`, `\"pods\"`, `\"resourcequotas\"`, `\"services\"`, `\"replicationcontrollers\"`, `\"secrets\"`, `\"persistentvolumeclaims\"`, `\"configmaps\"`, `\"services.nodeports\"`, `\"services.loadbalancers\"`.",
          "type": "object"
        },
        "scopeSelector": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScopeSelector",
          "description": "A collection of filters like `scopes` for matching objects tracked by a quota but expressed using scope selectors operator in combination with possible values. For a resource to match, both `scopes` AND `scopeSelector` (if specified) must match."
        },
        "scopes": {
          "description": "A collection of filters that for matching objects tracked by a quota. An empty list matches all objects. For a resource to match, both `scopes` AND `scopeSelector` (if specified) must match. For standard resources, when `scopes` contain `\"Terminating\"`, `\"NotTerminating\"`, `\"NotBestEffort\"` or `\"PriorityClass\"`, the resource in `hard` can be one of `\"cpu\"`, `\"memory\"`, `\"limits.cpu\"`, `\"limits.memory\"`, `\"requests.cpu\"`, `\"requests.memory\"` or `\"pods\"`. When `scopes` contain `\"BestEffort\"`, the resource name in `hard` can only be `\"pods\"`. `\"Terminating\"` conflicts with `\"NonTerminating\"` and `\"BestEffort\"` conflicts with `\"NotBestEffort\"`. This field is immutable so cannot be updated.",
          "items": {
            "enum": [
              "BestEffort",
              "NotBestEffort",
              "NotTerminating",
              "PriorityClass",
              "Terminating"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceQuotaStatus": {
      "description": "The enforced hard limits and observed use.",
      "properties": {
        "hard": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The set of desired hard limits for each named resource. The resource name must be a standard quota resources or fully qualified name. All quantity values must be non-negative. For integer resources, the value cannot contain milli-value. The standard quota resources are `\"cpu\"`, `\"memory\"`, `\"ephemeral-storage\"`, `\"requests.cpu\"`, `\"requests.memory\"`, `\"requests.storage\"`, `\"requests.ephemeral-storage\"`, `\"limits.cpu\"`, `\"limits.memory\"`, `\"limits.ephemeral-storage\"`, `\"pods\"`, `\"resourcequotas\"`, `\"services\"`, `\"replicationcontrollers\"`, `\"secrets\"`, `\"persistentvolumeclaims\"`, `\"configmaps\"`, `\"services.nodeports\"`, `\"services.loadbalancers\"`.",
          "type": "object"
        },
        "used": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The current observed total usage of the resource in the namespace. The resource name must be a standard quota resources or fully qualified name. All quantity values must be non-negative. For integer resources, the value cannot contain milli-value. The standard quota resources are `\"cpu\"`, `\"memory\"`, `\"ephemeral-storage\"`, `\"requests.cpu\"`, `\"requests.memory\"`, `\"requests.storage\"`, `\"requests.ephemeral-storage\"`, `\"limits.cpu\"`, `\"limits.memory\"`, `\"limits.ephemeral-storage\"`, `\"pods\"`, `\"resourcequotas\"`, `\"services\"`, `\"replicationcontrollers\"`, `\"secrets\"`, `\"persistentvolumeclaims\"`, `\"configmaps\"`, `\"services.nodeports\"`, `\"services.loadbalancers\"`.",
          "type": "object"
        }
      },
      "required": [
        "hard",
        "used"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ResourceRequirements": {
      "description": "The resource requirements. Resources can be `\"cpu\"`, `\"memory\"`, `\"ephemeral-storage\"` or prefixed with `\"hugepages-\"`. Resource names prefixed with `\"kubernetes.io/\"` are valid but reserved by Kubernetes. Extended resources can be specified if the name follows the standard: not prefixed with `\"requests.\"`; can form quota if prefixed with `\"requests.\"`. When hugepages resource is specified in `requests` or `limits`, CPU or memory resource must be specified in `limits` or `requests`. If `requests` is omitted for a container, it defaults to `limits` if that is explicitly specified, otherwise to an implementation-defined value. For native resources other than huge pages, overcommit is allowed, the `requests` value must be lower or equal to that of the `limits`. For other resources, overcommit is disallowed, their `limits` must be set and the `requests` must equal to the `limits`.",
      "properties": {
        "limits": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The maximum amount of compute resources allowed. The values in the map must be non-negative quantity values. For extended resources, the value must be a full integer.",
          "type": "object"
        },
        "requests": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The minimum amount of compute resources required. The values in the map must be non-negative quantity values. For extended resources, the value must be a full integer.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SELinuxOptions": {
      "description": "The SELinux labels to be applied to a container",
      "properties": {
        "level": {
          "description": "The SELinux level label to be applies to the container.",
          "type": "string"
        },
        "role": {
          "description": "A SELinux role label to be applied to the container.",
          "type": "string"
        },
        "type": {
          "description": "A SELinux type label to be applied to the container.",
          "type": "string"
        },
        "user": {
          "description": "A SELinux user label to be applied to the container.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOPersistentVolumeSource": {
      "description": "A persistent ScaleIO volume",
      "properties": {
        "fsType": {
          "default": "xfs",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API gateway.",
          "minLength": 1,
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO protection domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretReference",
          "description": "Reference to the Secret for ScaleIO user and other sensitive information. If this is not provided, Login operation will fail."
        },
        "sslEnabled": {
          "default": false,
          "description": "Flag to enable/disable SSL communication with `gateway`",
          "type": "boolean"
        },
        "storageMode": {
          "default": "ThinProvisioned",
          "description": "Indicates whether the storage for a volume should be `\"ThickProvisioned\"` or `\"ThinProvisioned\"`.",
          "enum": [
            "ThickProvisioned",
            "ThinProvisioned"
          ],
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO storage pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "minLength": 1,
          "type": "string"
        },
        "volumeName": {
          "description": "The name of an existing volume in the ScaleIO system that is associated with this volume source.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "secretRef",
        "system",
        "volumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScaleIOVolumeSource": {
      "description": "ScaleIOVolumeSource represents a ScaleIO volume",
      "properties": {
        "fsType": {
          "default": "xfs",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "gateway": {
          "description": "The host address of the ScaleIO API gateway.",
          "minLength": 1,
          "type": "string"
        },
        "protectionDomain": {
          "description": "The name of the ScaleIO Protection Domain for the configured storage.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to `false` (read/write). `readOnly` here will force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "SecretRef references to the Secret for ScaleIO user and other sensitive information. If this is not provided, login operation will fail."
        },
        "sslEnabled": {
          "default": false,
          "description": "Flag to enable/disable SSL communication with `gateway`",
          "type": "boolean"
        },
        "storageMode": {
          "default": "ThinProvisioned",
          "description": "Indicates whether the storage for a volume should be thick provisioned or thin provisioned.",
          "enum": [
            "ThickProvisioned",
            "ThinProvisioned"
          ],
          "type": "string"
        },
        "storagePool": {
          "description": "The ScaleIO Storage Pool associated with the protection domain.",
          "type": "string"
        },
        "system": {
          "description": "The name of the storage system as configured in ScaleIO.",
          "minLength": 1,
          "type": "string"
        },
        "volumeName": {
          "description": "The name of a volume already created in the ScaleIO system that is associated with this volume source.",
          "type": "string"
        }
      },
      "required": [
        "gateway",
        "secretRef",
        "system"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopeSelector": {
      "description": "The AND of all the selectors represented by the `matchExpressions` selectors. This is currently only used in ResourceQuota.",
      "properties": {
        "matchExpressions": {
          "description": "A list of scope selector requirements by `scope` of the resources. Note that the `\"BestEffort\"` and `\"NotBestEffort\"` scopes conflicts with each other, and the `\"Terminating\"` and the `\"NotTerminating\"` scopes conflict with each other.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ScopedResourceSelectorRequirement": {
      "description": "A selector that contains `values`, a `scopeName`, and an `operator` that relates the `scopeName` and `values`.",
      "properties": {
        "operator": {
          "description": "Represents a scope's relationship to a set of values. Valid operators are `\"In\"`, `\"NotIn\"`, `\"Exists\"`, `\"DoesNotExist\"`. When scope is one of `\"Terminating\"`, `\"NotTerminating\"`, `\"BestEffort\"`, `\"NotBestEffort\"`, the operator can only be `\"Exists\"`.",
          "enum": [
            "DoesNotExist",
            "Exists",
            "In",
            "NotIn"
          ],
          "type": "string"
        },
        "scopeName": {
          "description": "The name of the scope that the selector applies to.",
          "enum": [
            "BestEffort",
            "NotBestEffort",
            "NotTerminating",
            "PriorityClass",
            "Terminating"
          ],
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the operator is `\"In\"` or `\"NotIn\"`, the values array must be non-empty. If the operator is `\"Exists\"` or `\"DoesNotExist\"`, the values array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "operator",
        "scopeName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SeccompProfile": {
      "description": "The SeccompProfile defines the seccomp profile settings for a container or a Pod. Only one profile source may be set.",
      "properties": {
        "localhostProfile": {
          "description": "This indicates a profile defined in a file on the node should be used. The profile must be preconfigured on the node to work. Must be a descending path, relative to the kubelet's configured seccomp profile location. Must only be set if type is `\"Localhost\"`.",
          "type": "string"
        },
        "type": {
          "description": "The type of seccomp profile to apply. Valid options are:\n\n- `\"Localhost\"`: a profile defined in a file on the node should be used.\n- `\"RuntimeDefault\"`: the container runtime default profile should be used.\n- `\"Unconfined\"`: no profile should be applied.\n",
          "enum": [
            "Localhost",
            "RuntimeDefault",
            "Unconfined"
          ],
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "localhostProfile": "LocalhostProfile"
          }
        }
      ]
    },
    "io.k8s.api.core.v1.Secret.CREATE": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the `data` or `stringData` field must be less than 1MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The secret data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. The serialized form of the Secret data is a [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded string, representing the arbitrary (possibly non-string) data value here.",
          "type": "object"
        },
        "immutable": {
          "description": "If set to `true`, ensures that data stored in the Secret cannot be updated (only `metadata` can be modified). If not set to `true`, the field can be modified at any time. Defaulted to nil. This is a Beta field enabled by the `ImmutableEphemeralVolumes` feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The Secret name must be a valid DNS subdomain value. Note that some Secret types may have additional requirements on the `annotations` or assumptions on the Secret name."
        },
        "stringData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The `stringData` field allows for specifying non-binary Secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the `data` field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object"
        },
        "type": {
          "default": "Opaque",
          "description": "Used to facilitate programmatic handling of secret data. The `type` field can take one of the following builtin values. You can add your own type as well.\n\n- `\"Opaque\"` (default): arbitrary user-defined data.\n- `\"kubernetes.io/service-account-token\"`: a token that identifies a service acccount. This type requires that the `\"kubernetes.io/service-account.name\"` annotation set to an existing service account name and the `data.token` field set to the token content.\n- `\"kubernetes.io/dockercfg\"`: reserved for a serialized `\"~/.dockercfg\"` file. This type requires that the `data` field contains a `.dockercfg` key for the config content.\n- `\"kubernetes.io/dockerconfigjson\"`: reserved for serialized JSON data that follows the same format rules as the `\"~/.docker/config.json\"` file. This type requires that the `data` field contains a `.dockerconfigjson` key for the config data.\n- `\"kubernetes.io/basic-auth\"`: a builtin type for storing credentials needed for basic authentication. This type requires the `data` field contains the `username` and `password` key for user name and password (or token) for authentication, respectively.\n- `\"kubernetes.io/ssh-auth\"`: reserved for data used in SSH authentication. This type requires that the `data` field contains a `ssh-privatekey` key as the SSH credential to use.\n- `\"kubernetes.io/tls\"`: reserved to store information about a TLS client or server. It is primarily used with TLS termination of the Ingress resource, but may be used in other types. This type requires the settings of the `tls.key` and the `tls.crt` keys in the `data` field, although the server doesn't actually validate the contents.\n- `\"bootstrap.kubernetes.io/token\"`: reserved for tokens used during the bootstrap process for a node. It stores tokens used to sign well known ConfigMaps. This type of a Secret is usually created in the `\"kube-system\"` namespace and named as `\"bootstrap-token-<token-id>\"`.\n\nA Secret of bootstrap token type has the following keys specified under `data`:\n\n- `\"token_id\"`: A random 6 character string as the token identifier. Required.\n- `\"token-secret\"`: A random 16 character string as the actual token secret. Required.\n- `\"description\"`: A human-readable string that describes what the token is used for. Optional.\n- `\"expiration\"`: An absolute UTC time using RFC3339 specifying when the token should be expired. Optional.\n- `\"usage-bootstrap-<usage>\"`: A boolean flag  indicating additional usage for the bootstrap token.\n- `\"auth-extra-groups\"`: A comma-separated list of group names that will be authenticated as in addition to `\"system:bootstrappers\"` group.\n\n",
          "enum": [
            "bootstrap.kubernetes.io/token",
            "kubernetes.io/service-account-token",
            "kubernetes.io/dockercfg",
            "kubernetes.io/dockerconfigjson",
            "kubernetes.io/basic-auth",
            "kubernetes.io/ssh-auth",
            "kubernetes.io/tls",
            "Opaque"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Secret.GET": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the `data` or `stringData` field must be less than 1MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The secret data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. The serialized form of the Secret data is a [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded string, representing the arbitrary (possibly non-string) data value here.",
          "type": "object"
        },
        "immutable": {
          "description": "If set to `true`, ensures that data stored in the Secret cannot be updated (only `metadata` can be modified). If not set to `true`, the field can be modified at any time. Defaulted to nil. This is a Beta field enabled by the `ImmutableEphemeralVolumes` feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "type": {
          "default": "Opaque",
          "description": "Used to facilitate programmatic handling of secret data. The `type` field can take one of the following builtin values. You can add your own type as well.\n\n- `\"Opaque\"` (default): arbitrary user-defined data.\n- `\"kubernetes.io/service-account-token\"`: a token that identifies a service acccount. This type requires that the `\"kubernetes.io/service-account.name\"` annotation set to an existing service account name and the `data.token` field set to the token content.\n- `\"kubernetes.io/dockercfg\"`: reserved for a serialized `\"~/.dockercfg\"` file. This type requires that the `data` field contains a `.dockercfg` key for the config content.\n- `\"kubernetes.io/dockerconfigjson\"`: reserved for serialized JSON data that follows the same format rules as the `\"~/.docker/config.json\"` file. This type requires that the `data` field contains a `.dockerconfigjson` key for the config data.\n- `\"kubernetes.io/basic-auth\"`: a builtin type for storing credentials needed for basic authentication. This type requires the `data` field contains the `username` and `password` key for user name and password (or token) for authentication, respectively.\n- `\"kubernetes.io/ssh-auth\"`: reserved for data used in SSH authentication. This type requires that the `data` field contains a `ssh-privatekey` key as the SSH credential to use.\n- `\"kubernetes.io/tls\"`: reserved to store information about a TLS client or server. It is primarily used with TLS termination of the Ingress resource, but may be used in other types. This type requires the settings of the `tls.key` and the `tls.crt` keys in the `data` field, although the server doesn't actually validate the contents.\n- `\"bootstrap.kubernetes.io/token\"`: reserved for tokens used during the bootstrap process for a node. It stores tokens used to sign well known ConfigMaps. This type of a Secret is usually created in the `\"kube-system\"` namespace and named as `\"bootstrap-token-<token-id>\"`.\n\nA Secret of bootstrap token type has the following keys specified under `data`:\n\n- `\"token_id\"`: A random 6 character string as the token identifier. Required.\n- `\"token-secret\"`: A random 16 character string as the actual token secret. Required.\n- `\"description\"`: A human-readable string that describes what the token is used for. Optional.\n- `\"expiration\"`: An absolute UTC time using RFC3339 specifying when the token should be expired. Optional.\n- `\"usage-bootstrap-<usage>\"`: A boolean flag  indicating additional usage for the bootstrap token.\n- `\"auth-extra-groups\"`: A comma-separated list of group names that will be authenticated as in addition to `\"system:bootstrappers\"` group.\n\n",
          "enum": [
            "bootstrap.kubernetes.io/token",
            "kubernetes.io/service-account-token",
            "kubernetes.io/dockercfg",
            "kubernetes.io/dockerconfigjson",
            "kubernetes.io/basic-auth",
            "kubernetes.io/ssh-auth",
            "kubernetes.io/tls",
            "Opaque"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "data",
        "immutable",
        "kind",
        "metadata",
        "type"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Secret.UPDATE": {
      "description": "Secret holds secret data of a certain type. The total bytes of the values in the `data` or `stringData` field must be less than 1MB.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "data": {
          "additionalProperties": {
            "format": "byte",
            "type": "string"
          },
          "description": "The secret data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`. The serialized form of the Secret data is a [base64](https://tools.ietf.org/html/rfc4648#section-4) encoded string, representing the arbitrary (possibly non-string) data value here.",
          "type": "object"
        },
        "immutable": {
          "description": "If set to `true`, ensures that data stored in the Secret cannot be updated (only `metadata` can be modified). If not set to `true`, the field can be modified at any time. Defaulted to nil. This is a Beta field enabled by the `ImmutableEphemeralVolumes` feature gate.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Secret"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The Secret name must be a valid DNS subdomain value. Note that some Secret types may have additional requirements on the `annotations` or assumptions on the Secret name."
        },
        "stringData": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The `stringData` field allows for specifying non-binary Secret data in string form. It is provided as a write-only convenience method. All keys and values are merged into the `data` field on write, overwriting any existing values. It is never output when reading from the API.",
          "type": "object"
        },
        "type": {
          "default": "Opaque",
          "description": "Used to facilitate programmatic handling of secret data. The `type` field can take one of the following builtin values. You can add your own type as well.\n\n- `\"Opaque\"` (default): arbitrary user-defined data.\n- `\"kubernetes.io/service-account-token\"`: a token that identifies a service acccount. This type requires that the `\"kubernetes.io/service-account.name\"` annotation set to an existing service account name and the `data.token` field set to the token content.\n- `\"kubernetes.io/dockercfg\"`: reserved for a serialized `\"~/.dockercfg\"` file. This type requires that the `data` field contains a `.dockercfg` key for the config content.\n- `\"kubernetes.io/dockerconfigjson\"`: reserved for serialized JSON data that follows the same format rules as the `\"~/.docker/config.json\"` file. This type requires that the `data` field contains a `.dockerconfigjson` key for the config data.\n- `\"kubernetes.io/basic-auth\"`: a builtin type for storing credentials needed for basic authentication. This type requires the `data` field contains the `username` and `password` key for user name and password (or token) for authentication, respectively.\n- `\"kubernetes.io/ssh-auth\"`: reserved for data used in SSH authentication. This type requires that the `data` field contains a `ssh-privatekey` key as the SSH credential to use.\n- `\"kubernetes.io/tls\"`: reserved to store information about a TLS client or server. It is primarily used with TLS termination of the Ingress resource, but may be used in other types. This type requires the settings of the `tls.key` and the `tls.crt` keys in the `data` field, although the server doesn't actually validate the contents.\n- `\"bootstrap.kubernetes.io/token\"`: reserved for tokens used during the bootstrap process for a node. It stores tokens used to sign well known ConfigMaps. This type of a Secret is usually created in the `\"kube-system\"` namespace and named as `\"bootstrap-token-<token-id>\"`.\n\nA Secret of bootstrap token type has the following keys specified under `data`:\n\n- `\"token_id\"`: A random 6 character string as the token identifier. Required.\n- `\"token-secret\"`: A random 16 character string as the actual token secret. Required.\n- `\"description\"`: A human-readable string that describes what the token is used for. Optional.\n- `\"expiration\"`: An absolute UTC time using RFC3339 specifying when the token should be expired. Optional.\n- `\"usage-bootstrap-<usage>\"`: A boolean flag  indicating additional usage for the bootstrap token.\n- `\"auth-extra-groups\"`: A comma-separated list of group names that will be authenticated as in addition to `\"system:bootstrappers\"` group.\n\n",
          "enum": [
            "bootstrap.kubernetes.io/token",
            "kubernetes.io/service-account-token",
            "kubernetes.io/dockercfg",
            "kubernetes.io/dockerconfigjson",
            "kubernetes.io/basic-auth",
            "kubernetes.io/ssh-auth",
            "kubernetes.io/tls",
            "Opaque"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretEnvSource": {
      "description": "SecretEnvSource populates the environment variables of a container with data from the named Secret. The key-value pairs from the the Secret's `data` field will be represented as environment variables.",
      "properties": {
        "name": {
          "description": "Name of the referenced Secret. The name must be a valid DNS subdomain name.",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretKeySelector": {
      "description": "SecretKeySelector selects a key of a Secret.",
      "properties": {
        "key": {
          "description": "The key of the Secret to select from. The string must be a valid DNS subdomain name, no more than 253 characters. It must consist of alphanumeric characters, `'.'`, `'-'` or `'-'`. It cannot be `\".\"`, `\"..\"` or start with `\"..\"`.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced Secret. The name must be a valid DNS subdomain name.",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "key",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretList": {
      "description": "A list of Secret objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Secret objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "SecretList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "SecretList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.SecretProjection": {
      "description": "Adapts a Secret into a projected volume. The contents of the target Secret's `data` field will be presented in a projected volume as files using the keys in the `data` field as the file names. Note that this is identical to a Secret volume source without the default mode.",
      "properties": {
        "items": {
          "description": "If unspecified, each key-value pair in the `data` field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked `optional`. Paths must be relative and may not contain the `\"..\"` string or start with `\"..\"`. Each path in the map must be unique.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "name": {
          "description": "Name of the referenced Secret",
          "type": "string"
        },
        "optional": {
          "description": "Specify whether the Secret or its key must be defined",
          "type": "boolean"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretReference": {
      "description": "A reference to a Secret. It has enough information to retrieve Secret in any namespace",
      "properties": {
        "name": {
          "description": "Name of the referenced Secret resource.",
          "type": "string"
        },
        "namespace": {
          "description": "Namespace name of the referenced Secret resource.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecretVolumeSource": {
      "description": "Adapts a Secret into a volume. The contents of the target Secret's `data` field will be presented in a volume as files using the keys in the `data` field as the file names. Secret volumes support ownership management and SELinux relabeling.",
      "properties": {
        "defaultMode": {
          "default": 420,
          "description": "Mode bits used to set permissions on created files by default. Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`. YAML accepts both octal and decimal values, JSON requires decimal values for mode bits. Defaults to `0644`. Directories within the path are not affected by this setting. This might be in conflict with other options that affect the file mode, like `fsGroup`, and the result can be other mode bits set.",
          "format": "int32",
          "maximum": 511,
          "minimum": 0,
          "type": "integer"
        },
        "items": {
          "description": "If unspecified, each key-value pair in the `data` field of the referenced Secret will be projected into the volume as a file whose name is the key and content is the value. If specified, the listed keys will be projected into the specified paths, and unlisted keys will not be present. If a key is specified which is not present in the Secret, the volume setup will error unless it is marked optional. Paths must be relative and may not contain the \"..\" string or start with \"..\".",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.KeyToPath"
          },
          "type": "array"
        },
        "optional": {
          "description": "Specify whether the Secret or its keys must be defined",
          "type": "boolean"
        },
        "secretName": {
          "description": "Name of the Secret to use.",
          "type": "string"
        }
      },
      "required": [
        "secretName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.SecurityContext": {
      "description": "The security configuration for the container. Some fields are present in both `securityContext` of the container and the `securityContext` of the enclosing Pod. When both are set, the values in container's `securityContext` take precedence.",
      "properties": {
        "allowPrivilegeEscalation": {
          "description": "This controls whether a process can gain more privileges than its parent process. This bool directly controls if the `no_new_privs` flag will be set on the container process. `allowPrivilegeEscalation` is always `true` when the container: 1) runs with as `securityContext.privileged` set to `true`, 2) has `CAP_SYS_ADMIN` in its `securityContext.capabilities.add`. If `privileged` is set to `true`, this cannot be `false`.",
          "type": "boolean"
        },
        "capabilities": {
          "$ref": "#/definitions/io.k8s.api.core.v1.Capabilities",
          "description": "The capabilities to add/drop when running the container. Defaults to the default set of capabilities granted by the container runtime."
        },
        "privileged": {
          "default": false,
          "description": "Run the container in privileged mode. Processes in a privileged container are essentially equivalent to `root` on the host. The API server must have `--allow--privileged` flag set to `true` to allow privileged containers.",
          "type": "boolean"
        },
        "procMount": {
          "default": "Default",
          "description": "This denotes the type of proc mount to use for the containers. The valid options are:\n\n- `\"Default\"`: use the container runtime defaults for read-only paths and masked paths for `\"/proc\"`. Most container runtimes mask certain paths in `\"/proc\"` to avoid accidental security exposure of special devices or information. This requires the `ProcMountType` feature gate to be enabled.\n- `\"Unmasked\"`: bypass the default masking behavior of the container runtime and ensures the newly created `\"/proc\"` the container stays intact with no modifications.",
          "enum": [
            "Default",
            "Unmasked"
          ],
          "type": "string"
        },
        "readOnlyRootFilesystem": {
          "default": false,
          "description": "Whether this container has a read-only root filesystem. This allows a container to restrict the locations that an application can write files to, ensuring the persistent data can only be written to mounted volumes.",
          "type": "boolean"
        },
        "runAsGroup": {
          "description": "The group ID (GID) to run the entry point of the container process. Uses runtime default if unset. May also be set in the `securityContext` of the enclosing Pod. The value must be within the scope of a 32-bit non-negative integer.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "runAsNonRoot": {
          "description": "Indicates that the container **MUST** run as a non-root user. If `true`, the kubelet will validate the image at runtime to ensure that it does not run as UID `0` (`root`). It will fail to start the container if it does. If unset or `false`, no such validation will be performed. May also be set in the `securityContext` of the enclosing Pod.",
          "type": "boolean"
        },
        "runAsUser": {
          "description": "The user ID (UID) to run the entrypoint of the container process. Defaults to user specified in image metadata if unspecified. May also be set in the `securityContext` of the enclosing Pod. The value must be within the scope of a 32-bit non-negative integer.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "The SELinux context to be applied to the container. If unspecified, the container runtime will allocate a random SELinux context for each container. May also be set in the `securityContext` of the enclosing Pod."
        },
        "seccompProfile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SeccompProfile",
          "description": "The seccomp options to use by this container. May also be set in the `securityContext` of the enclosing Pod."
        },
        "windowsOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions",
          "description": "The Windows specific settings to apply to the container. If unspecified, the options from the `securityContext` of the enclosing Pod will be used."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.Service.CREATE": {
      "description": "Service is a named abstraction of software service consisting of local port that the proxy listens on, and the selector that determines which Pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The service name must be valid DNS label. The annotation `\"service.beta.kubernetes.io/load-balancer-source-ranges\"` can be set to specify the Ingress range allowed when Service `type` is `\"LoadBalancer\"`. The annotation value should be a comma separated list of CIDRs. Default value is `\"0.0.0.0/0\"` which allows full access. Not all cloud-providers support this annotation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec",
          "description": "Spec defines the behavior of the Service."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Service.GET": {
      "description": "Service is a named abstraction of software service consisting of local port that the proxy listens on, and the selector that determines which Pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec",
          "description": "Spec defines the behavior of a service."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceStatus",
          "description": "Most recently observed status of the service."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.Service.UPDATE": {
      "description": "Service is a named abstraction of software service consisting of local port that the proxy listens on, and the selector that determines which Pods will answer requests sent through the proxy.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Service"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The service name must be valid DNS label. The annotation `\"service.beta.kubernetes.io/load-balancer-source-ranges\"` can be set to specify the Ingress range allowed when Service `type` is `\"LoadBalancer\"`. The annotation value should be a comma separated list of CIDRs. Default value is `\"0.0.0.0/0\"` which allows full access. Not all cloud-providers support this annotation."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceSpec",
          "description": "Spec defines the behavior of the Service."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount.CREATE": {
      "description": "A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for an identity, a principal that can be authenticated and authorized and a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether Pods running as this ServiceAccount should have an API token automatically mounted. Can be overridden at the Pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "A list of references to Secrets in the same namespace for pulling images for Pods that reference this ServiceAccount. Image pull Secrets are distinct from Secrets because Secrets can be mounted in the Pod, but image pull Secrets are only accessed by the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "secrets": {
          "description": "A list of Secrets that can be used by Pods running using this ServiceAccount.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount.GET": {
      "description": "A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for an identity, a principal that can be authenticated and authorized and a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether Pods running as this ServiceAccount should have an API token automatically mounted. Can be overridden at the Pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "A list of references to Secrets in the same namespace for pulling images for Pods that reference this ServiceAccount. Image pull Secrets are distinct from Secrets because Secrets can be mounted in the Pod, but image pull Secrets are only accessed by the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "secrets": {
          "description": "A list of Secrets that can be used by Pods running using this ServiceAccount.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "secrets"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccount.UPDATE": {
      "description": "A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for an identity, a principal that can be authenticated and authorized and a set of secrets",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "automountServiceAccountToken": {
          "description": "Flag indicating whether Pods running as this ServiceAccount should have an API token automatically mounted. Can be overridden at the Pod level.",
          "type": "boolean"
        },
        "imagePullSecrets": {
          "description": "A list of references to Secrets in the same namespace for pulling images for Pods that reference this ServiceAccount. Image pull Secrets are distinct from Secrets because Secrets can be mounted in the Pod, but image pull Secrets are only accessed by the kubelet.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccount"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "secrets": {
          "description": "A list of Secrets that can be used by Pods running using this ServiceAccount.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountList": {
      "description": "A list of ServiceAccount objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "List of ServiceAccounts.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceAccountList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "items",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceAccountList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServiceAccountTokenProjection": {
      "description": "ServiceAccountTokenProjection projects a service account token to a volume. This projection can be used to insert a service account token into the Pods runtime filesystem for use against APIs (Kubernetes API server or otherwise).",
      "properties": {
        "audience": {
          "description": "The intended audience of the token. A recipient of a token must identify itself with an identifier specified in the `audience` of the token, and otherwise should reject the token. The `audience` defaults to the identifier of the API server.",
          "type": "string"
        },
        "expirationSeconds": {
          "default": 3600,
          "description": "The requested duration of validity of the service account token. As the token approaches expiration, the kubelet volume plugin will proactively rotate the service account token. The kubelet will start trying to rotate the token if the token is older than 80 percent of its time to live (TTL) or if the token is older than 24 hours.",
          "format": "int32",
          "minimum": 600,
          "type": "integer"
        },
        "path": {
          "description": "The path relative to the mount point of the file to project the token into.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "path"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceList": {
      "description": "A list of Service objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Service objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ServiceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "ServiceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.core.v1.ServicePort": {
      "description": "Information on service's port.",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as `\"mycompany.com/my-custom-protocol\"`. This is a Beta field that is guarded by the `ServiceAppProtocol` feature gate.",
          "type": "string"
        },
        "name": {
          "description": "The name of this port within the Service. This must be a DNS label and unique among all ports within a Service `spec` when specified. When considering the endpoints for a Service, this must match the `name` field in the EndpointPort objects. This field is optional if only one `ports` is defined on this Service.",
          "type": "string"
        },
        "nodePort": {
          "description": "The port on each node on which this Service is exposed when `type` is `\"NodePort\"` or `\"LoadBalancer\"`. This cannot be specified if the Service type is `\"ClusterIP\"`. Usually assigned by the system if the Service requires one. If a value is manually specified, in-range, and not in use it will be used, otherwise the operation will fail. If this field is specified when creating a Service which does not need it, the Service creation will fail. This field will be wiped when updating a Service to a type which no longer needs it (e.g. changing `type` from `\"NodePort\"` to `\"ClusterIP\"`).",
          "format": "int32",
          "type": "integer"
        },
        "port": {
          "description": "The port that is exposed by the Service. The value cannot be the port number used by the kubelet which defaults to `10250`. The (`port`, `protocol`) tuple must be unique in the `ports` list for the Service.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The protocol for this port. When the Service `type` is `\"LoadBalancer\"`, all ports must have the same protocol.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        },
        "targetPort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port used to access Pods targeted by the Service. The port number must be in the range of 1 to 65535. If it is a string, it must be not empty and no more than 15 characters. It must contain only alphanumeric characters and hyphens. Port name will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the `port` field is used (an identity map). This field is ignored for Services with `clusterIP` set to `\"None\"` (i.e. *headless*), and should be omitted or set equal to the `port` field."
        }
      },
      "required": [
        "port",
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceSpec": {
      "description": "The specification of a Service.",
      "properties": {
        "clusterIP": {
          "description": "The IP address of the Service. It is usually assigned randomly by the system. If an address is manually specified, is in-range (as per system configuration), and is not in use, it will be allocated to the Service; otherwise creation of the Service will fail.\n\nThis field may not be changed through updates unless the `type` field is also being changed to `\"ExternalName\"` (which requires this field to be blank) or the `type` field is being changed from `\"ExternalName\"` (in which case this field may optionally be specified, as describe above).\n\nValid values are `\"None\"`, empty string (`\"\"`), or a valid IP address. Setting this to `\"None\"` makes a *headless service* (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types `\"ClusterIP\"`, `\"NodePort\"`, and `\"LoadBalancer\"`. This field cannot be set to `\"None\"` if Service type is `\"NodePort\"` or `\"LoadBalancer\"`. If this field is specified when creating a Service of type `\"ExternalName\"`, the Service creation will fail. This field will be wiped when updating a Service to type `\"ExternalName\"`.",
          "type": "string"
        },
        "externalIPs": {
          "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. The IP address provided cannot be `\"0.0.0.0\"` or loopback addresses (`\"127.0.0.0/8\"`) or link-local addresses (`\"169.254.0.0/16\"`) or link-local multicast addresses (`\"244.0.0.0/24\"`).",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "externalName": {
          "description": "The external reference that discovery mechanisms will return as an alias for this Service (e.g. a DNS CNAME record). No proxying will be involved. Must be a lowercase [RFC-1123 hostname](https://tools.ietf.org/html/rfc1123) when `type` is `\"ExternalName\"`. Having a trailing dot is acceptable.",
          "type": "string"
        },
        "externalTrafficPolicy": {
          "description": "This denotes if this Service desires to route external traffic to node-local or cluster-wide endpoints.\n\n- `\"Local\"`: preserves the client source IP and avoids a second hop for `\"LoadBalancer\"` and `\"Nodeport\"` type of services, but risks potentially imbalanced traffic spreading.\n- `\"Cluster\"`: obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.\n",
          "enum": [
            "Cluster",
            "Local"
          ],
          "type": "string"
        },
        "healthCheckNodePort": {
          "description": "The health-check node port for the Service. This only applies when `type` is set to `\"LoadBalancer\"` and `externalTrafficPolicy` is set to `\"Local\"`. If a value is specified, is in-range, and is not in use, it will be used. If not specified, a value will be automatically allocated. External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this Service or not. If this field is specified when creating a Service which does not need it, the Service creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing `type`).",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "ipFamily": {
          "description": "This specifies whether this Service has a preference for a particular IP family (e.g. `\"IPv4\"` vs. `\"IPv6\"`) when the `IPv6DualStack` feature gate is enabled. In a dual-stack cluster, you can specify `ipFamily` when creating a `\"ClusterIP\"` Service to determine whether the controller will allocate an IPv4 or IPv6 IP for it, and you can specify `ipFamily` when creating a headless Service to determine whether it will have IPv4 or IPv6 Endpoints. In either case, if you do not specify an `ipFamily` explicitly, it will default to the cluster's primary IP family. This field is part of an Alpha feature, and you should not make any assumptions about its semantics other than those described above. In particular, you should not assume that it can (or cannot) be changed after creation time; that it can only have the values `\"IPv4\"` and `\"IPv6\"`; or that its current value on a given Service correctly reflects the current state of that Service. (For `\"ClusterIP\"` Services, look at `clusterIP` to see if the Service is IPv4 or IPv6. For headless Services, look at the `endpoints`, which may be dual-stack in the future. For `\"ExternalName\"` Services, `ipFamily` has no meaning, but it may be set to an irrelevant value anyway.)",
          "enum": [
            "IPv4",
            "IPv6"
          ],
          "type": "string"
        },
        "loadBalancerIP": {
          "description": "Only applies to `\"LoadBalancer\"` type of Services. A load balancer will be created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. It is ignored if the cloud-provider does not support the feature.",
          "type": "string"
        },
        "loadBalancerSourceRanges": {
          "description": "Only applies to `\"LoadBalancer\"` type of Services. If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. Every entry must be a valid CIDR expression. This field will be ignored if the cloud-provider does not support the feature.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "ports": {
          "description": "The list of ports that are exposed by this Service. Required when the Service is not a *headless service* and it is not of type `\"ExternalName\"`. The tuple of (`protocol`, `nodePort`) must be unique among all port records and the tuple of (`protocol`, `port`) must be unique as well.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "port",
            "protocol"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "port",
          "x-kubernetes-patch-strategy": "merge"
        },
        "publishNotReadyAddresses": {
          "default": false,
          "description": "This indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's *headless Service* to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered **ready** even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
          "type": "boolean"
        },
        "selector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Service traffic will be routed to Pods with label keys and values matching this selector. If empty or not present, the Service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. This field is ignored if Service `type` is `\"ExternalName\"`.",
          "type": "object"
        },
        "sessionAffinity": {
          "default": "None",
          "description": "Used to maintain session affinity. Setting this to `\"ClientIP\"` enables client IP based session affinity.",
          "enum": [
            "ClientIP",
            "None"
          ],
          "minLength": 1,
          "type": "string"
        },
        "sessionAffinityConfig": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
          "description": "The configurations of session affinity. It is required when `sessionAffinity` is set to `\"ClientIP\"` and it cannot be set when `sessionAffinity` is set to `\"None\"`."
        },
        "topologyKeys": {
          "description": "A preference-order list of topology keys which implementations of Services should use to preferentially sort endpoints when accessing this Service. This field cannot be set when `externalTrafficPolicy=\"Local\"`. Topology keys must be valid label keys. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value `\"*\"` may be used to mean *any topology*. This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is Alpha-level and is only honored by servers that enable the `ServiceTopology` feature.",
          "items": {
            "type": "string"
          },
          "maxItems": 16,
          "type": "array"
        },
        "type": {
          "default": "ClusterIP",
          "description": "This field determines how the Service is exposed.\n\n- `\"ClusterIP\"`: allocates a cluster internal IP address for load-balancing to endpoints. Endpoints are determined by the `selector` or if that is not specified, by manual construction of an Endpoints object or EndpointSlice ojbects. If `clusterIP` is `\"None\"`, no virtual IP is allocated and the endpoints are published as a set of Endpoints rather than a virtual IP.\n- `\"NodePort\"`: builds on `\"ClusterIP\"` and allocates a port on every node which routes to the same endpoints as the `clusterIP`.\n- `\"LoadBalancer\"`: builds on `\"NodePort\"` and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the `clusterIP`.\n- `\"ExternalName\"` - aliases this Service to the specified `externalName`. Several other fields do not apply to `\"ExternalName\"` Services.\n",
          "enum": [
            "ClusterIP",
            "ExternalName",
            "LoadBalancer",
            "NodePort"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.ServiceStatus": {
      "description": "The current status of a Service.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "The current status of the load-balancer, if one is present."
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.SessionAffinityConfig": {
      "description": "The configuration for session affinity.",
      "properties": {
        "clientIP": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ClientIPConfig",
          "description": "The configuration for client IP based session affinity."
        }
      },
      "required": [
        "clientIP"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSPersistentVolumeSource": {
      "description": "A StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Force the volume to be mounted in read-only mode.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "Referende to a Secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. When specified, the `name` and `namespace` fields must be specified as valid DNS_LABEL strings."
        },
        "volumeName": {
          "description": "The human-readable name of the StorageOS volume. Volume names are only unique within a namespace. The string must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "volumeNamespace": {
          "description": "The scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set `volumeName` to any name to override the default behaviour. Set to `\"default\"` if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. When specified, the string must be a valid DNS label.",
          "type": "string"
        }
      },
      "required": [
        "volumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.StorageOSVolumeSource": {
      "description": "A StorageOS persistent volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system. Implicitly inferred to be `\"ext4\"` if unspecified.",
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Defaults to `false` (read/write). `readOnly` here will force the `readOnly` setting in `volumeMounts`.",
          "type": "boolean"
        },
        "secretRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference",
          "description": "The Secret to use for obtaining the StorageOS API credentials. If not specified, default values will be attempted. When specified, the `name` cannot be empty."
        },
        "volumeName": {
          "description": "The human-readable name of the StorageOS volume. Volume names are only unique within a namespace and must be a valid DNS label.",
          "type": "string"
        },
        "volumeNamespace": {
          "description": "The scope of the volume within StorageOS. If no namespace is specified then the Pod's namespace will be used. This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration. Set `volumeName` to any name to override the default behaviour. Set to `\"default\"` if you are not using namespaces within StorageOS. Namespaces that do not pre-exist within StorageOS will be created. The string, if specified, must be a valid DNS label.",
          "type": "string"
        }
      },
      "required": [
        "volumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Sysctl": {
      "description": "A kernel parameter to set",
      "properties": {
        "name": {
          "description": "Name of a property to set. The name contains several segments separated with dots where each segment can contain alphanumeric characters, `'-'` and `'_'`. `'-'` and `'_'` cannot appear at the start or end, though.",
          "maxLength": 253,
          "minLength": 1,
          "type": "string"
        },
        "value": {
          "description": "Value of a property to set",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name",
        "value"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TCPSocketAction": {
      "description": "TCPSocketAction describes an action based on opening a socket",
      "properties": {
        "host": {
          "description": "Host name to connect to, defaults to the Pod IP.",
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "Number or name of the port to access on the container. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME."
        }
      },
      "required": [
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Taint": {
      "description": "The node this Taint is attached to has the `effect` on any Pod that does not tolerate the Taint.",
      "properties": {
        "effect": {
          "description": "The effect of the taint on Pods that do not tolerate the taint.",
          "enum": [
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "description": "The taint key to be applied to a node. The string must be a qualified name. It must consist of alphanumeric characters, `'-'`, `'_'`, or `'.'` and must start and end with an alphanumeric character. The prefix, if exists, must be a valid DNS subdomain name. The name part may have at most 63 characters.",
          "minLength": 1,
          "type": "string"
        },
        "timeAdded": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The time at which the taint was added. It is only written for `\"NoExecute\"` taints."
        },
        "value": {
          "description": "The taint value corresponding to the taint key. The value must be an empty string or consists of alphanumeric characters, `'-'`, `'_'` or `'.'`, and it must start and end with an alphanumeric character.",
          "maxLength": 63,
          "type": "string"
        }
      },
      "required": [
        "effect",
        "key"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Toleration": {
      "description": "The Pod this toleration attached to can tolerate any Taint that matches the triple (`key`,`value`,`effect`) using the matching `operator`.",
      "properties": {
        "effect": {
          "description": "The taint effect to match.\n\n- `\"\"`: Empty string means matching all taint effects.\n- `\"NoSchedule\"`: Do not allow new Pods to schedule onto the Node unlesss they tolerate the taint, but allow Pods submitted to kubelet without going through the scheduler to start, and allow all already-running Pods to continue running.\n- `\"NoExecute\"`: Evict any already-running Pods that do not tolerate the taint. Currently enforced by the NodeController.\n- `\"PreferNoSchedule\"`: The scheduler tries not to schedule new Pods onto the node, rather than prohibiting new Pods from being scheduled to the node entirely. This is enforced by the scheduler.\n",
          "enum": [
            "",
            "NoExecute",
            "NoSchedule",
            "PreferNoSchedule"
          ],
          "type": "string"
        },
        "key": {
          "description": "The taint key that the toleration applies to. If the `key` is empty, `operator` must be `\"Exists\"`; this combination means to match all values and all keys. If it is not empty, it must be a valid label name.",
          "type": "string"
        },
        "operator": {
          "default": "Equal",
          "description": "A key's relationship to the value. The value can be\n\n- `\"Equal\"` (default), the `value` property must be a valid label value.\n- `\"Exists\"`: equivalent to wildcard for `value`, it means a Pod can tolerate all taints of a particular category, so the `value` field must be empty.\n- `\"\"`: An empty `operator` is equivalent to `\"Equal\"`.\n",
          "enum": [
            "Equal",
            "Exists"
          ],
          "type": "string"
        },
        "tolerationSeconds": {
          "description": "A period of time the toleration tolerates the taint. When this field is set, the `effect` must be `\"NoExecute\"`. By default, it is not set, which means tolerating the taint forever (do not evict). Zero and negative values will be treated as 0 (evict immediately) by the system.",
          "format": "int64",
          "type": "integer"
        },
        "value": {
          "description": "The taint value the toleration matches to. If the operator is `\"Exists\"`, the value should be empty (`\"\"`), otherwise just a regular string.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorLabelRequirement": {
      "description": "A topology selector requirement is a selector that matches given label. This is an Alpha feature and may change in the future.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values. One value must match the label to be selected. Each entry in Values is ORed.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "key",
        "values"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySelectorTerm": {
      "description": "A topology selector term represents the result of label queries. A null or empty term matches no objects. The requirements of them are ANDed. It provides a subset of functionality as NodeSelectorTerm. This is an Alpha feature and may change in the future.",
      "properties": {
        "matchLabelExpressions": {
          "description": "A list of topology selector requirements by labels.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.TopologySpreadConstraint": {
      "description": "How to spread matching Pods among the given topology.",
      "properties": {
        "labelSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label selector used to find matching Pods. Pods that match this label selector are counted to determine the number of Pods in their corresponding topology domain."
        },
        "maxSkew": {
          "default": 1,
          "description": "The degree to which Pods may be unevenly distributed. When `whenUnsatisfiable=\"DoNotSchedule\"`, It's the maximum permitted difference between the number of matching Pods in the target topology and the global minimum. For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as '1/1/0'.\n\n```\n+-------+--------+--------+\n| zone1 | zone2 | zone3 |\n+------+------+------+\n|   P   |   P   |       |\n+-------+--------+--------+\n```\n\n- If `maxSkew` is 1, incoming Pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1 would make the actual skew (2-0) on zone1(zone2) violate `maxSkew(1)`.\n- If `maxSkew` is 2, incoming Pod can be scheduled onto any zone.\n\nWhen `whenUnsatisfiable=\"ScheduleAnyway\"`, it is used to give higher precedence to topologies that satisfy it.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "topologyKey": {
          "description": "The key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each `(key, value)` as a bucket, and try to put balanced number of Pods into each bucket.",
          "type": "string"
        },
        "whenUnsatisfiable": {
          "default": "DoNotSchedule",
          "description": "This indicates how to deal with a Pod if it doesn't satisfy the spread constraint.\n\n- `\"DoNotSchedule\"` (default) tells the scheduler not to schedule it.\n- `\"ScheduleAnyway\"` tells the scheduler to schedule the Pod in any location, but giving higher precedence to topologies that would help reduce the skew.\n\nA constraint is considered \"Unsatisfiable\" for an incoming Pod if and only if every possible node assigment for that Pod would violate `maxSkew` on some topology. For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as 3/1/1:\n\n```\n+-------+--------+--------+\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\n+-------+--------+--------+\n```\n\n If `whenUnsatisfiable` is set to `\"DoNotSchedule\"`, incoming Pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as actualSkew(2-1) on zone2(zone3) satisfies maxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it **more** imbalanced.",
          "enum": [
            "DoNotSchedule",
            "ScheduleAnyway"
          ],
          "type": "string"
        }
      },
      "required": [
        "maxSkew",
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.TypedLocalObjectReference": {
      "description": "Information for locating the typed referenced object inside the same namespace.",
      "properties": {
        "apiGroup": {
          "description": "The group for the resource being referenced. If not specified, the specified `kind` must be in the `\"core\"` API group.",
          "type": "string"
        },
        "kind": {
          "description": "The kind for the resoruce being referenced.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name of resource being referenced",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.Volume": {
      "description": "Volume represents a named volume in a Pod that may be accessed by any container in the Pod.",
      "properties": {
        "awsElasticBlockStore": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource",
          "description": "An AWS Disk resource that is attached to a kubelet's host machine and then exposed to the Pod."
        },
        "azureDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource",
          "description": "An Azure Data Disk mount on the host and bind mount to the Pod."
        },
        "azureFile": {
          "$ref": "#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource",
          "description": "An Azure File Service mount on the host and bind mount to the Pod."
        },
        "cephfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CephFSVolumeSource",
          "description": "A Ceph FS mount on the host that shares a Pod's lifetime."
        },
        "cinder": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CinderVolumeSource",
          "description": "A Cinder volume attached and mounted on kubelets host machine."
        },
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource",
          "description": "A ConfigMap that should populate this volume."
        },
        "csi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.CSIVolumeSource",
          "description": "An ephemeral storage that is handled by certain external CSI drivers (Beta feature)."
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource",
          "description": "Downward API about the Pod that should populate this volume."
        },
        "emptyDir": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource",
          "description": "A temporary directory that shares a Pod's lifetime."
        },
        "ephemeral": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource",
          "description": "A volume that is handled by a cluster storage driver (Alpha feature). The volume's lifecycle is tied to the Pod that defines it - it will be created before the Pod starts, and deleted when the Pod is removed.\n\nUse this if:\n\n1. the volume is only needed while the Pod runs,\n1. features of normal volumes like restoring from snapshot or capacity tracking are needed,\n1. the storage driver is specified through a storage class, and\n1.the storage driver supports dynamic volume provisioning through a PersistentVolumeClaim (see EphemeralVolumeSource for more information on the connection between this volume type and PersistentVolumeClaim).\n\nUse PersistentVolumeClaim or one of the vendor-specific APIs for volumes that persist for longer than the lifecycle of an individual Pod.\n\nUse CSI for light-weight local ephemeral volumes if the CSI driver is meant to be used that way - see the documentation of the driver for more information.\n\nA Pod can use both types of ephemeral volumes and persistent volumes at the same time."
        },
        "fc": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FCVolumeSource",
          "description": "A Fibre Channel resource that is attached to a kubelet's host machine and then exposed to the Pod."
        },
        "flexVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlexVolumeSource",
          "description": "A generic volume resource that is provisioned/attached using an exec based plugin."
        },
        "flocker": {
          "$ref": "#/definitions/io.k8s.api.core.v1.FlockerVolumeSource",
          "description": "A Flocker volume attached to a kubelet's host machine. This depends on the Flocker control service being running."
        },
        "gcePersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource",
          "description": "A GCE Disk resource that is attached to a kubelet's host machine and then exposed to the Pod."
        },
        "gitRepo": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource",
          "description": "A git repository at a particular revision. *DEPRECATED*: To provision a container with a git repo, mount an `emptyDir` into an `initContainer` that clones the repo using `git`, then mount the `emptyDir` into the Pod's container."
        },
        "glusterfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource",
          "description": "A Glusterfs mount on the host that shares a Pod's lifetime."
        },
        "hostPath": {
          "$ref": "#/definitions/io.k8s.api.core.v1.HostPathVolumeSource",
          "description": "A pre-existing file or directory on the host machine that is directly exposed to the container. This is generally used for system agents or other privileged things that are allowed to see the host machine. Most containers will NOT need this."
        },
        "iscsi": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource",
          "description": "An ISCSI Disk resource that is attached to a kubelet's host machine and then exposed to the Pod."
        },
        "name": {
          "description": "Volume's name. Must be a DNS_LABEL and unique within the Pod.",
          "minLength": 1,
          "type": "string"
        },
        "nfs": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NFSVolumeSource",
          "description": "A NFS mount on the host that shares a Pod's lifetime."
        },
        "persistentVolumeClaim": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource",
          "description": "A reference to a existing PersistentVolumeClaim in the same namespace."
        },
        "photonPersistentDisk": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource",
          "description": "A PhotonController persistent disk attached and mounted on the host machine."
        },
        "portworxVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PortworxVolumeSource",
          "description": "A Portworx volume attached and mounted on the host machine."
        },
        "projected": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource",
          "description": "Items for all in one resources Secrets, ConfigMaps, and Downward APIs."
        },
        "quobyte": {
          "$ref": "#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource",
          "description": "A Quobyte mount on the host that shares a Pod's lifetime."
        },
        "rbd": {
          "$ref": "#/definitions/io.k8s.api.core.v1.RBDVolumeSource",
          "description": "A Rados Block Device (RBD) mount on the host that shares a Pod's lifetime."
        },
        "scaleIO": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource",
          "description": "A ScaleIO persistent volume attached and mounted on Kubernetes nodes."
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretVolumeSource",
          "description": "A Secret that should populate this volume."
        },
        "storageos": {
          "$ref": "#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource",
          "description": "A StorageOS volume attached and mounted on the node."
        },
        "vsphereVolume": {
          "$ref": "#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource",
          "description": "A vSphere volume attached and mounted on the host machine."
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeDevice": {
      "description": "VolumeDevice describes a mapping of a raw block device within a container.",
      "properties": {
        "devicePath": {
          "description": "The path inside the container that the device will be mapped to. The path must be unique inside a container. The path cannot contain `\"..\"` in it. It cannot overlap with the paths in the container's `volumeMounts`.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name must match the `name` of a `persistentVolumeClaim` volume in the Pod. It must be unique in the scope of the container. It cannot overlap with names in the container's `volumeMounts`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "devicePath",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeMount": {
      "description": "The mounting of a volume into a container.",
      "properties": {
        "mountPath": {
          "description": "Path within the container at which the volume should be mounted. Must not contain `\":\"`. The mounting point must be unique in the container and it cannot overlap with those from the container's `volumeDevices`.",
          "minLength": 1,
          "type": "string"
        },
        "mountPropagation": {
          "default": "None",
          "description": "This attribute determines how mounts are propagated from the host to container and the other way around. `\"Bidirectional\"` mount propagation is only available to privileged containers, i.e., the `securityContext.privileged` is `true`. This field is Beta in 1.10.",
          "enum": [
            "Bidirectional",
            "HostToContainer",
            "None"
          ],
          "type": "string"
        },
        "name": {
          "description": "This must match the `name` of a volume. The name cannot overlap with any of the container's `volumeDevices`.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "default": false,
          "description": "Mounted read-only if `true`, read-write otherwise (`false` or unspecified).",
          "type": "boolean"
        },
        "subPath": {
          "default": "",
          "description": "Path within the volume from which the container's volume should be mounted. Default value `\"\"` means the volume's root. This path cannot contain `\"..\"` or prefixed with `\"/\"`. This `subPath` property is mutual exclusive to the `subPathExpr` property.",
          "type": "string"
        },
        "subPathExpr": {
          "description": "Expanded path within the volume from which the container's volume should be mounted. Behaves similarly to the `subPath` property but environment variable references `$(VAR_NAME)` are expanded using the container's environment. Defaults to `\"\"` (volume's root). `subPathExpr` and `subPath` are mutually exclusive. The path must be relative path and it cannot contain `\"..\"` or prefix with `\"..\"`.",
          "type": "string"
        }
      },
      "required": [
        "mountPath",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeNodeAffinity": {
      "description": "The constraints that limit which nodes this volume can be accessed from.",
      "properties": {
        "required": {
          "$ref": "#/definitions/io.k8s.api.core.v1.NodeSelector",
          "description": "This specifies the hard constraints that nodes must meet."
        }
      },
      "required": [
        "required"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.VolumeProjection": {
      "description": "Data that are projected into a container as part of a projected volume. The data projected cannot have duplicated paths. One and only one of the fields can be specified per-volume.",
      "properties": {
        "configMap": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapProjection",
          "description": "Information about a ConfigMap whose data will be projected"
        },
        "downwardAPI": {
          "$ref": "#/definitions/io.k8s.api.core.v1.DownwardAPIProjection",
          "description": "Information about the downwardAPI data to project"
        },
        "secret": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SecretProjection",
          "description": "Information about a Secret whose data will be projected"
        },
        "serviceAccountToken": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection",
          "description": "Information about the ServiceAccountToken whose data will be projected"
        }
      },
      "type": "object"
    },
    "io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource": {
      "description": "A vSphere volume resource.",
      "properties": {
        "fsType": {
          "default": "ext4",
          "description": "Filesystem type to mount. Must be a filesystem type supported by the host operating system.",
          "type": "string"
        },
        "storagePolicyID": {
          "description": "Storage Policy Based Management (SPBM) profile ID associated with the `storagePolicyName`.",
          "type": "string"
        },
        "storagePolicyName": {
          "description": "Storage Policy Based Management (SPBM) profile name.",
          "type": "string"
        },
        "volumePath": {
          "description": "Path that identifies vSphere volume VMDK",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "volumePath"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WeightedPodAffinityTerm": {
      "description": "The `weight`s of all of the matched `podAffinityTerm`s are added per-node to find the most preferred node(s)",
      "properties": {
        "podAffinityTerm": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PodAffinityTerm",
          "description": "A Pod affinity term, associated with the corresponding weight."
        },
        "weight": {
          "description": "Weight associated with matching the corresponding term.",
          "format": "int32",
          "maximum": 100,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "podAffinityTerm",
        "weight"
      ],
      "type": "object"
    },
    "io.k8s.api.core.v1.WindowsSecurityContextOptions": {
      "description": "Windows-specific options and credentials.",
      "properties": {
        "gmsaCredentialSpec": {
          "description": "Where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa) inlines the contents of the GMSA credential spec named by the `gmsaCredentialSpecName` field. This field cannot be an empty string and its maximum length is 64 K. This field is Beta-level and is only honored by servers that enable the `WindowsGMSA` feature flag.",
          "type": "string"
        },
        "gmsaCredentialSpecName": {
          "description": "The name of the GMSA credential spec to use. The string must be a valid DNS subdomain name. This field is Beta-level and is only honored by servers that enable the `WindowsGMSA` feature flag.",
          "type": "string"
        },
        "runAsUserName": {
          "description": "The Windows user name to run the entrypoint of the container. Defaults to the `user` defined in image metadata if unspecified. May also be set in the `securityContext` of the enclosing Pod. This string cannot be empty string; it cannot contain control characters; it cannot contain more than one backslash. The domain name, when specified, must be no more than 256 characters and it must either match the NetBios or the DNS format. The user name part can be no more than 104 characters. The name cannot only contain periods or spaces and it cannot contain characters like `/\\:;|=,+*?<>@[]`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1beta1.Endpoint": {
      "description": "A logical backend implementing a Service.",
      "properties": {
        "addresses": {
          "description": "Addresses of this endpoint. The contents of this field are interpreted according to the corresponding EndpointSlice `addressType` field. This allows for cases like dual-stack (IPv4 and IPv6) networking. Consumers (e.g. `kube-proxy`) must handle different types of addresses in the context of their own capabilities. This must contain at least one address but no more than 100.",
          "items": {
            "type": "string"
          },
          "maxItems": 100,
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "conditions": {
          "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointConditions",
          "description": "Information about the current status of the Endpoint."
        },
        "hostname": {
          "description": "The hostname of this Endpoint. This field may be used by consumers of endpoints to distinguish endpoints from each other (e.g. in DNS names). Multiple endpoints which use the same `hostname` should be considered fungible (e.g. multiple A values in DNS). The value must be lowercase and a valid DNS label when specified.",
          "type": "string"
        },
        "targetRef": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "A reference to a Kubernetes object that represents this endpoint."
        },
        "topology": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Arbitrary topology information associated with the endpoint. These key/value pairs must conform with the [label format](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/). Topology may include a maximum of 16 key/value pairs. This includes, but is not limited to the following well known keys:\n\n- `\"kubernetes.io/hostname\"`: the hostname of the Node where the endpoint is located. This should match the corresponding label on the Node.\n- `\"topology.kubernetes.io/zone\"`: the zone where the endpoint is located. This should match the corresponding label on the Node.\n- `\"topology.kubernetes.io/region\"`: the region where the endpoint is located. This should match the corresponding label on the Node.\n\nThis field is *DEPRECATED* and will be removed in future API versions.",
          "type": "object"
        }
      },
      "required": [
        "addresses"
      ],
      "type": "object"
    },
    "io.k8s.api.discovery.v1beta1.EndpointConditions": {
      "description": "The current condition of an Endpoint.",
      "properties": {
        "ready": {
          "description": "This indicates that this endpoint is prepared to receive traffic, according to whatever system is managing the endpoint. A `nil` value indicates an unknown state. In most cases consumers should interpret this unknown state as *ready*. For compatibility reasons, `ready` should never be `true` for terminating endpoints.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.api.discovery.v1beta1.EndpointPort": {
      "description": "A port used by an EndpointSlice",
      "properties": {
        "appProtocol": {
          "description": "The application protocol for this port. This field follows standard Kubernetes label syntax. Un-prefixed names are reserved for IANA standard service names (as per RFC-6335 and http://www.iana.org/assignments/service-names). Non-standard protocols should use prefixed names such as `\"mycompany.com/my-custom-protocol\"`. The value must be a qualified name.",
          "type": "string"
        },
        "name": {
          "default": "",
          "description": "The name of this port. All ports in an EndpointSlice must have a unique name. If the EndpointSlice is dervied from a Service, this corresponds to the `service.ports[].name`. Name must either be an empty string or pass IANA_SVC_NAME validation which means it must be no more than 15 characters long; it may contain only `\"[-a-z0-9]\"`; it must contain at least one letter `\"[a-z]\"`; it must not start or end with a hyphen, nor contain adjacent hyphens.",
          "type": "string"
        },
        "port": {
          "description": "The port number of the endpoint. If this is not specified, ports are not restricted and must be interpreted in the context of the specific consumer.",
          "format": "int32",
          "type": "integer"
        },
        "protocol": {
          "default": "TCP",
          "description": "The IP protocol for this port.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "protocol"
      ],
      "type": "object"
    },
    "io.k8s.api.discovery.v1beta1.EndpointSlice.CREATE": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a Service. For a given Service there may be multiple EndpointSlice objects, selected by `labels`, which must be joined to produce the full set of Endpoints.",
      "properties": {
        "addressType": {
          "description": "The type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This cannot be updated.",
          "enum": [
            "FQDN",
            "IPv4",
            "IPv6"
          ],
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "endpoints": {
          "description": "A list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.Endpoint"
          },
          "maxItems": 1000,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSlice"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "ports": {
          "description": "The list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When `ports` is empty, it indicates that there are no defined ports. When a port is defined with a `nil` port value, it indicates 'all ports'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointPort"
          },
          "maxItems": 100,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "addressType",
        "apiVersion",
        "endpoints",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.discovery.v1beta1.EndpointSlice.GET": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a Service. For a given Service there may be multiple EndpointSlice objects, selected by `labels`, which must be joined to produce the full set of Endpoints.",
      "properties": {
        "addressType": {
          "description": "The type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This cannot be updated.",
          "enum": [
            "IPv4",
            "IPv6",
            "FQDN"
          ],
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "endpoints": {
          "description": "A list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.Endpoint"
          },
          "maxItems": 1000,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSlice"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "ports": {
          "description": "The list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When `ports` is empty, it indicates that there are no defined ports. When a port is defined with a `nil` port value, it indicates 'all ports'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointPort"
          },
          "maxItems": 100,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "addressType",
        "apiVersion",
        "endpoints",
        "kind",
        "metadata",
        "ports"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.discovery.v1beta1.EndpointSlice.UPDATE": {
      "description": "EndpointSlice represents a subset of the endpoints that implement a Service. For a given Service there may be multiple EndpointSlice objects, selected by `labels`, which must be joined to produce the full set of Endpoints.",
      "properties": {
        "addressType": {
          "description": "The type of address carried by this EndpointSlice. All addresses in this slice must be the same type. This cannot be updated.",
          "enum": [
            "FQDN",
            "IPv4",
            "IPv6"
          ],
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "endpoints": {
          "description": "A list of unique endpoints in this slice. Each slice may include a maximum of 1000 endpoints.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.Endpoint"
          },
          "maxItems": 1000,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSlice"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "ports": {
          "description": "The list of network ports exposed by each endpoint in this slice. Each port must have a unique name. When `ports` is empty, it indicates that there are no defined ports. When a port is defined with a `nil` port value, it indicates 'all ports'.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointPort"
          },
          "maxItems": 100,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "addressType",
        "apiVersion",
        "endpoints",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.discovery.v1beta1.EndpointSliceList": {
      "description": "A list of EndpointSlice objects",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "discovery.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of EndpointSlice objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EndpointSliceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "discovery.k8s.io",
          "kind": "EndpointSliceList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1.Event.CREATE": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the `regarding` object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The optional secondary object for more complex actions. E.g. when the `regarding` object triggers a creation or deletion of the `related` object."
        },
        "reportingController": {
          "description": "The name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "The ID of the controller instance, e.g. `\"kubelet-xyzf\"`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "The type of this event (`\"Normal\"`, `\"Warning\"`), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "action",
        "apiVersion",
        "eventTime",
        "kind",
        "metadata",
        "reason",
        "regarding",
        "reportingController",
        "reportingInstance",
        "type"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.events.v1.Event.GET": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the `regarding` object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The optional secondary object for more complex actions. E.g. when the `regarding` object triggers a creation or deletion of the `related` object."
        },
        "reportingController": {
          "description": "The name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "The ID of the controller instance, e.g. `\"kubelet-xyzf\"`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "The type of this event (`\"Normal\"`, `\"Warning\"`), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "action",
        "apiVersion",
        "eventTime",
        "kind",
        "metadata",
        "reason",
        "regarding",
        "reportingController",
        "reportingInstance",
        "type"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.events.v1.Event.UPDATE": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the `regarding` object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The optional secondary object for more complex actions. E.g. when the `regarding` object triggers a creation or deletion of the `related` object."
        },
        "reportingController": {
          "description": "The name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "The ID of the controller instance, e.g. `\"kubelet-xyzf\"`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "The type of this event (`\"Normal\"`, `\"Warning\"`), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.events.v1.EventList": {
      "description": "A list of Event objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Event objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EventList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "EventList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.events.v1.EventSeries": {
      "description": "EventSeries contain information on series of Events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in `\"k8s.io/client-go/tools/events/event_broadcaster.go\"` shows how this struct is updated on heartbeats and can guide customized reporter implementations.",
      "properties": {
        "count": {
          "description": "The number of occurrences in this series up to the last heartbeat time.",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when last Event from the series was seen before last heartbeat."
        }
      },
      "required": [
        "count",
        "lastObservedTime"
      ],
      "type": "object"
    },
    "io.k8s.api.events.v1beta1.Event.CREATE": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the `regarding` object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The optional secondary object for more complex actions. E.g. when the `regarding` object triggers a creation or deletion of the `related` object."
        },
        "reportingController": {
          "description": "The name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "The ID of the controller instance, e.g. `\"kubelet-xyzf\"`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "The type of this event (`\"Normal\"`, `\"Warning\"`), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "action",
        "apiVersion",
        "eventTime",
        "kind",
        "metadata",
        "reason",
        "regarding",
        "reportingController",
        "reportingInstance",
        "type"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.Event.GET": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the `regarding` object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The optional secondary object for more complex actions. E.g. when the `regarding` object triggers a creation or deletion of the `related` object."
        },
        "reportingController": {
          "description": "The name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "The ID of the controller instance, e.g. `\"kubelet-xyzf\"`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "The type of this event (`\"Normal\"`, `\"Warning\"`), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "action",
        "apiVersion",
        "eventTime",
        "kind",
        "metadata",
        "reason",
        "regarding",
        "reportingController",
        "reportingInstance",
        "type"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.Event.UPDATE": {
      "description": "Event is a report of an event somewhere in the cluster. It generally denotes some state change in the system. Events have a limited retention time and triggers and messages may evolve with time. Event consumers should not rely on the timing of an event with a given `reason` reflecting a consistent underlying trigger, or the continued existence of events with that `reason`. Events should be treated as informative, best-effort, supplemental data.",
      "properties": {
        "action": {
          "description": "What action was taken/failed regarding to the `regarding` object. It is machine-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "deprecatedCount": {
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type",
          "format": "int32",
          "type": "integer"
        },
        "deprecatedFirstTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedLastTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "deprecatedSource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.EventSource",
          "description": "*DEPRECATED* field assuring backward compatibility with `\"core.v1\"` Event type"
        },
        "eventTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "The time when this Event was first observed."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Event"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "note": {
          "description": "A human-readable description of the status of this operation. Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.",
          "type": "string"
        },
        "reason": {
          "description": "Why the action was taken. It is human-readable. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "regarding": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The object this Event is about. In most cases it's an object reporting controller implements, e.g. ReplicaSetController implements ReplicaSets and this event is emitted because it acts on some changes in a ReplicaSet object."
        },
        "related": {
          "$ref": "#/definitions/io.k8s.api.core.v1.ObjectReference",
          "description": "The optional secondary object for more complex actions. E.g. when the `regarding` object triggers a creation or deletion of the `related` object."
        },
        "reportingController": {
          "description": "The name of the controller that emitted this Event, e.g. `\"kubernetes.io/kubelet\"`. This field cannot be empty for new Events.",
          "type": "string"
        },
        "reportingInstance": {
          "description": "The ID of the controller instance, e.g. `\"kubelet-xyzf\"`. This field cannot be empty for new Events and it can have at most 128 characters.",
          "maxLength": 128,
          "type": "string"
        },
        "series": {
          "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventSeries",
          "description": "Data about the Event series this Event represents or nil if it's a singleton Event."
        },
        "type": {
          "description": "The type of this event (`\"Normal\"`, `\"Warning\"`), new types could be added in the future. It is machine-readable. This field cannot be empty for new Events.",
          "enum": [
            "Normal",
            "Warning"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.EventList": {
      "description": "A list of Event objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "events.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Event objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "EventList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "events.k8s.io",
          "kind": "EventList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.events.v1beta1.EventSeries": {
      "description": "EventSeries contain information on series of Events, i.e. thing that was/is happening continuously for some time. How often to update the EventSeries is up to the event reporters. The default event reporter in `\"k8s.io/client-go/tools/events/event_broadcaster.go\"` shows how this struct is updated on heartbeats and can guide customized reporter implementations.",
      "properties": {
        "count": {
          "description": "The number of occurrences in this series up to the last heartbeat time.",
          "format": "int32",
          "type": "integer"
        },
        "lastObservedTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime",
          "description": "Time when last Event from the series was seen before last heartbeat."
        }
      },
      "required": [
        "count",
        "lastObservedTime"
      ],
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.HTTPIngressPath": {
      "description": "A path regex with a backend. Incoming URLs matching the `path` are forwarded to the `backend`.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend",
          "description": "The referenced service endpoint to which the traffic will be forwarded to."
        },
        "path": {
          "description": "An extended POSIX regex (as defined by IEEE Std 1003.1) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. The path must begin with a `'/'`. When unspecified, all paths from incoming requests are matched.",
          "type": "string"
        },
        "pathType": {
          "default": "ImplementationSpecific",
          "description": "This determines the interpretation of the `path` matching. `pathType` can be one of the following values:\n\n- `\"Exact\"`: Matches the URL path exactly.\n- `\"Prefix\"`: Matches based on a URL path prefix split by `'/'`. Matching is done on a path element by element basis. Path elements are the list of labels in the path split by the `'/'` separator. A request is a match for path *p* if every *p* is an element-wise prefix of *p* of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. `\"/foo/bar\"` matches `\"/foo/bar/baz\"`, but does not match `\"/foo/barbaz\"`).\n- `\"ImplementationSpecific\"`: Interpretation of the `path` matching is up to the IngressClass. Implementations can treat this as a separate `pathType` or treat it identically to `\"Prefix\"` or `\"Exact\"` path types.\n\nImplementations are required to support all path types.",
          "enum": [
            "Exact",
            "ImplementationSpecific",
            "Prefix"
          ],
          "type": "string"
        }
      },
      "required": [
        "backend"
      ],
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue": {
      "description": "A list of HTTP selectors pointing to backends. In the example `\"http://<host>/<path>?<searchpart> -> backend\"` where parts of the URL correspond to RFC 3986, this resource will be used to match against everything after the last `'/'` and before the first `'?'` or `'#'`.",
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressPath"
          },
          "type": "array"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.Ingress.CREATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc. *DEPRECATED* - This group version of Ingress is deprecated by `\"networking.k8s.io/v1beta1\"` Ingress.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "extensions/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.Ingress.GET": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc. *DEPRECATED* - This group version of Ingress is deprecated by `\"networking.k8s.io/v1beta1\"` Ingress.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "extensions/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressStatus",
          "description": "The current state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.Ingress.UPDATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc. *DEPRECATED* - This group version of Ingress is deprecated by `\"networking.k8s.io/v1beta1\"` Ingress.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "extensions/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.IngressBackend": {
      "description": "Information about the Service serving the backend for a given Ingress. Either `resource` should be specified, or `serviceName` and `servicePort` should be specified, but not both.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "An object reference to another Kubernetes resource in the namespace of the Ingress object. If `resource` is specified, `serviceName` and `servicePort` must not be specified."
        },
        "serviceName": {
          "description": "The name of the referenced Service.",
          "type": "string"
        },
        "servicePort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The port of the referenced Service."
        }
      },
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.IngressList": {
      "description": "A list of Ingress objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "extensions/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Ingress objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "extensions",
          "kind": "IngressList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.extensions.v1beta1.IngressRule": {
      "description": "A rule mapping the paths under a specified `host` to the related backend Services. Incoming requests are first evaluated for a `host` match, then routed to the backend associated with the matching `http` backend.",
      "properties": {
        "host": {
          "description": "The fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986:\n\n1. IPs are not allowed. Currently an entry in the `http` list can only apply to the IP in the `spec` of the parent Ingress.\n\n1. The `':'` delimiter is not respected because ports are not allowed. The port of an Ingress is implicitly 80 for HTTP and 443 for HTTPS.\n\nBoth may change in the future. Incoming requests are matched against the `host` before the `http`. If the `host` is unspecified, the Ingress routes all traffic based on the specified `http` backend. Host can be *precise* which is a domain name without the terminating dot of a network host (e.g. `\"foo.bar.com\"`) or *wildcard*, which is a domain name prefixed with a single wildcard label (e.g. `\"*.foo.com\"`). The wildcard character `'*'` must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. `host == \"*\"`). Requests will be matched against the `host` field in the following way:\n\n1. If `host` is precise, the request matches this rule if the HTTP `\"host\"` header is equal to `host` value.\n\n2. If `host` value is a wildcard, then the request matches this rule if the HTTP `\"host\"` header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.HTTPIngressRuleValue"
        }
      },
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.IngressSpec": {
      "description": "The desired state of the Ingress. At least one of `backend` or `rules` must be specified.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressBackend",
          "description": "A default backend capable of servicing requests that don't match any rule. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default."
        },
        "ingressClassName": {
          "description": "The name of a IngressClass cluster resource. The name must be a valid DNS subdomain if specified. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `\"kubernetes.io/ingress.class\"` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field. The controller may emit a warning if the field and annotation have different values. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as *default*, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressRule"
          },
          "type": "array"
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressTLS"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.IngressStatus": {
      "description": "The current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "The current status of the load-balancer."
        }
      },
      "type": "object"
    },
    "io.k8s.api.extensions.v1beta1.IngressTLS": {
      "description": "The transport layer security (TLS) associated with an Ingress.",
      "properties": {
        "hosts": {
          "description": "A list of hosts included in the TLS certificate. The values in this list must match the name/s used in the TLS Secret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretName": {
          "description": "The name of the Secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the `\"Host\"` header field used by an entry in the `rules` list, the SNI host is used for termination and value of the `\"Host\"` header is used for routing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod": {
      "description": "The method of a flow distinguisher.",
      "properties": {
        "type": {
          "description": "The type of flow distinguisher method.\n\n- `\"ByUser\"`: Use the username in the request as the flow distinguisher so that requests from different users can be insulated.\n- `\"ByNamespace\"`: Use the namespace of the object targeted by the request as the flow distinguisher. If the object is not namespaced, or if the request is a non-resoruce request, the distinguisher will be an empty string. An example usage of this type is to provide some insulation between projects in a multi-tenant environment.",
          "enum": [
            "ByNamespace",
            "ByUser"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchema.CREATE": {
      "description": "FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a *flow distinguisher*.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "FlowSchema"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec",
          "description": "The specification of the desired behavior of a FlowSchema."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET": {
      "description": "FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a *flow distinguisher*.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "FlowSchema"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec",
          "description": "The specification of the desired behavior of a FlowSchema."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus",
          "description": "The current status of a FlowSchema."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchema.UPDATE": {
      "description": "FlowSchema defines the schema of a group of flows. Note that a flow is made up of a set of inbound API requests with similar attributes and is identified by a pair of strings: the name of the FlowSchema and a *flow distinguisher*.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "FlowSchema"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec",
          "description": "The specification of the desired behavior of a FlowSchema."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition": {
      "description": "Conditions for a FlowSchema.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "A unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "True",
            "False",
            "Unknown"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList": {
      "description": "A list of FlowSchema objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of FlowSchema objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "FlowSchemaList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "The standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchemaList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaSpec": {
      "description": "The FlowSchema's specification",
      "properties": {
        "distinguisherMethod": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowDistinguisherMethod",
          "description": "This defines how to compute the flow distinguisher for requests that match this schema. `nil` means that the distinguisher is disabled and thus will always be an empty string."
        },
        "matchingPrecedence": {
          "default": 1000,
          "description": "This is used to choose among the FlowSchemas that match a given request. The chosen FlowSchema is among those with the numerically lowest (which we take to be logically highest) `matchingPrecedence`. Each `matchingPrecedence` value must be in the range `[1,10000]`. Only when the name of the FlowSchema is `\"exempt\"` can the `matchingPrecedence` be set to 1.",
          "format": "int32",
          "maximum": 10000,
          "minimum": 1,
          "type": "integer"
        },
        "priorityLevelConfiguration": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference",
          "description": "Reference to a PriorityLevelConfiguration in the cluster. If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid in its status."
        },
        "rules": {
          "description": "This describes which requests will match this FlowSchema. A request is matched if and only if at least one member of `rules` matches the request. If it is an empty slice, there will be no requests matching the `FlowSchema`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "priorityLevelConfiguration"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.FlowSchemaStatus": {
      "description": "The current state of a FlowSchema.",
      "properties": {
        "conditions": {
          "description": "A list of the current states of FlowSchema.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.GroupSubject": {
      "description": "Detailed information for Group type of subject.",
      "properties": {
        "name": {
          "description": "The user group that matches, or `\"*\"` to match all user groups.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.LimitResponse": {
      "description": "This defines how to handle requests that cannot be executed right now.",
      "properties": {
        "queuing": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration",
          "description": "The configuration parameters for queuing. This field must be non-empty only if `type` is `\"Queue\"`."
        },
        "type": {
          "description": "`\"Queue\"` means that requests that cannot be executed upon arrival are held in a queue until they can be executed or a queuing limit is reached. `\"Reject\"` means that requests that can not be executed upon arrival are rejected.",
          "enum": [
            "Queue",
            "Reject"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "queuing": "Queuing"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration": {
      "description": "This specifies how to handle requests that are subject to limits. It addresses two issues:\n\n- How are requests for this priority level limited?\n- What should be done with requests that exceed the limit?\n",
      "properties": {
        "assuredConcurrencyShares": {
          "default": 30,
          "description": "`assuredConcurrencyShares` (ACS) configures the execution limit, which is a limit on the number of requests of this priority level that may be processed at a given time. ACS must be a positive number. The server's concurrency limit (SCL) is divided among the concurrency-controlled priority levels in proportion to their assured concurrency shares. This produces the assured concurrency value (ACV) for each such priority level where the ACV means the number of requests that may be executing at a time:\n\n```\nACV(l) = ceil( SCL * ACS(l) / ( sum[priority levels k] ACS(k) ) )\n```\n\nBigger numbers of ACS mean more reserved concurrent requests (at the expense of every other PL).",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "limitResponse": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.LimitResponse",
          "description": "This indicates what to do with requests that can not be executed right now."
        }
      },
      "required": [
        "limitResponse"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule": {
      "description": "A predicate that matches non-resource requests according to their verb and the target non-resource URL. A `nonResourcePolicyRule` matches a request if and only if both:\n\n- at least one member of `verbs` matches the request, and\n- at least one member of `nonResourceURLs` matches the request.\n",
      "properties": {
        "nonResourceURLs": {
          "description": "A set of URL prefixes that a user should have access to and may not be empty. For example:\n\n- `\"/healthz\"` is legal\n- `\"/hea*\"` is illegal\n- `\"/hea\"` is legal but matches nothing\n- `\"/hea/*\"` also matches nothing\n- `\"/healthz/*\"` matches all per-component health checks\n- `\"*\"` matches all non-resource URLs. If it is present, it must be the only entry.\n",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "A list of matching verbs and may not be empty. `\"*\"` matches all verbs. If it is present, it must be the only entry.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "nonResourceURLs",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.PolicyRulesWithSubjects": {
      "description": "PolicyRulesWithSubjects prescribes a test on an API request. The test considers the subject making the request, the verb being requested, and the resource to be acted upon. A request is matched if and only if both (a) at least one member of `subjects` matches the request and (b) at least one member of `resourceRules` or `nonResourceRules` matches the request.\n\nAt least one of `resourceRules` and `nonResourceRules` has to be specified.",
      "properties": {
        "nonResourceRules": {
          "description": "A list of NonResourcePolicyRules that identify matching requests according to their verb and the target non-resource URL.  At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.NonResourcePolicyRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "resourceRules": {
          "description": "A list of `ResourcePolicyRule`s that identify matching requests according to their verb and the target resource. At least one of `resourceRules` and `nonResourceRules` has to be non-empty.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "subjects": {
          "description": "The list of normal user, ServiceAccount, or group that this rule cares about. A slice that includes both the `\"system:authenticated\"` and `\"system:unauthenticated\"` user groups matches every request.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.Subject"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "subjects"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.CREATE": {
      "description": "The configuration of a priority level.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityLevelConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec",
          "description": "The desired behavior of a PriorityLevelConfiguration"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET": {
      "description": "The configuration of a priority level.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityLevelConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec",
          "description": "The desired behavior of a PriorityLevelConfiguration"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus",
          "description": "The current status of a PriorityLevelConfiguration"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.UPDATE": {
      "description": "The configuration of a priority level.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityLevelConfiguration"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec",
          "description": "The desired behavior of a PriorityLevelConfiguration"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition": {
      "description": "The condition of a PriorityLevelConfiguration.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "A human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "A unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "minLength": 1,
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList": {
      "description": "A list of PriorityLevelConfiguration objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "flowcontrol.apiserver.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PriorityLevelConfiguration objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityLevelConfigurationList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfigurationList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationReference": {
      "description": "Information about the priority level used.",
      "properties": {
        "name": {
          "description": "The name of a PriorityLevelConfiguration resource. The name must be a valid DNS subdomain name.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationSpec": {
      "description": "The configuration for a priority level.",
      "properties": {
        "limited": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.LimitedPriorityLevelConfiguration",
          "description": "This specifies how requests are handled for a *limited* priority level. This field must be non-empty if and only if `type` is `\"Limited\"`."
        },
        "type": {
          "description": "This indicates whether this priority level is subject to limitation on request processing.\n\n- `\"Exempt\"` means that requests of this priority level are not subject to a limit (and thus are never queued) and do not detract from the capacity made available to other priority levels.\n- `\"Limited\"` means that (a) requests of this priority level *are* subject to limits and (b) some of the server's limited capacity is made available exclusively to this priority level.\n\nThis field must be `\"Exempt\"` if the FlowoSchema's name is `\"exempt\"`.",
          "enum": [
            "Exempt",
            "Limited"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "type"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "type",
          "fields-to-discriminateBy": {
            "limited": "Limited"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationStatus": {
      "description": "The current state of a PriorityLevelConfigurationCondition.",
      "properties": {
        "conditions": {
          "description": "The current conditions of the PriorityLevelConfigurationCondition.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.QueuingConfiguration": {
      "description": "The configuration parameters for request queuing",
      "properties": {
        "handSize": {
          "default": 8,
          "description": "A small positive number that configures the shuffle sharding of requests into queues. When enqueuing a request at this priority level, the request's flow identifier (a string pair) is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size specified here. The request is put into one of the shortest queues in that hand. `handSize` must be no larger than `queues`, and should be significantly smaller (so that a few heavy flows do not saturate most of the queues).",
          "format": "int32",
          "type": "integer"
        },
        "queueLengthLimit": {
          "default": 50,
          "description": "The maximum number of requests allowed to be waiting in a given queue of this priority level at a time; excess requests are rejected.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        },
        "queues": {
          "default": 64,
          "description": "The number of queues for this priority level. The queues exist independently at each API server. Setting it to 1 effectively precludes shuffle sharding and thus makes the distinguisher method of associated flow schemas irrelevant.",
          "format": "int32",
          "minimum": 1,
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.ResourcePolicyRule": {
      "description": "A predicate that matches some resource requests, testing the request's verb and the target resource. A resource request is matched if and only if:\n\n- at least one member of `verbs` matches the request,\n- at least one member of `apiGroups` matches the request,\n- at least one member of `resources` matches the request, and\n- least one member of `namespaces` matches the request.\n\n",
      "properties": {
        "apiGroups": {
          "description": "A list of matching API groups and may not be empty. `\"*\"` matches all API groups and, if present, must be the only entry.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "clusterScope": {
          "description": "This indicates whether to match requests that do not specify a namespace (which happens either because the resource is not namespaced or the request targets all namespaces). If this field is omitted or `false` then the `namespaces` field must contain a non-empty list.",
          "type": "boolean"
        },
        "namespaces": {
          "description": "A list of target namespaces that restricts matches. A request that specifies a target namespace matches only if either:\n\n1. this list contains that target namespace or\n1. this list contains `\"*\"`.\n\nNote that `\"*\"` matches any specified namespace but does not match a request that does NOT specify a namespace (see the `clusterScope` field for that). This list may be empty only if `clusterScope` is `true`.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "resources": {
          "description": "A list of matching resources (i.e., lowercase and plural) with, if desired, subresource. For example, `[\"services\", \"nodes/status\"]`. This list may not be empty. `\"*\"` matches all resources and, if present, must be the only entry.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        },
        "verbs": {
          "description": "A list of matching verbs. `\"*\"` matches all verbs and, if present, must be the only entry.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "apiGroups",
        "resources",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject": {
      "description": "The detailed information for ServiceAccount type of subject.",
      "properties": {
        "name": {
          "description": "The name of matching ServiceAccount objects, or `\"*\"` to match regardless of name.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of matching ServiceAccount objects.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "namespace",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.flowcontrol.v1alpha1.Subject": {
      "description": "Subject matches the originator of a request, as identified by the request authentication system. There are three ways of matching an originator: by user, group, or service account. One and only one of the subject kind must be specified.",
      "properties": {
        "group": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.GroupSubject",
          "description": "The group of the request originator. Required when `type` is set to `\"Group\"` and invalid otherwise."
        },
        "kind": {
          "description": "A string representing the kind of the subject.",
          "enum": [
            "Group",
            "ServiceAccount",
            "User"
          ],
          "minLength": 1,
          "type": "string"
        },
        "serviceAccount": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.ServiceAccountSubject",
          "description": "The ServiceAccount of the request originator. Required when `type` is set to `\"ServiceAccount\"` and invalid otherwise."
        },
        "user": {
          "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.UserSubject",
          "description": "The user of the request originator. Required when `type` is set to `\"User\"` and invalid otherwise."
        }
      },
      "required": [
        "kind"
      ],
      "type": "object",
      "x-kubernetes-unions": [
        {
          "discriminator": "kind",
          "fields-to-discriminateBy": {
            "group": "Group",
            "serviceAccount": "ServiceAccount",
            "user": "User"
          }
        }
      ]
    },
    "io.k8s.api.flowcontrol.v1alpha1.UserSubject": {
      "description": "The detailed information for User type of subject.",
      "properties": {
        "name": {
          "description": "The username that matches, or `\"*\"` to match all usernames.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.HTTPIngressPath": {
      "description": "A path regex with a backend. Incoming URLs matching the `path` are forwarded to the `backend`.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend",
          "description": "The referenced service endpoint to which the traffic will be forwarded to."
        },
        "path": {
          "description": "An extended POSIX regex (as defined by IEEE Std 1003.1) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. The path must begin with a `'/'`. When unspecified, all paths from incoming requests are matched.",
          "type": "string"
        },
        "pathType": {
          "description": "This determines the interpretation of the `path` matching. `pathType` can be one of the following values:\n\n- `\"Exact\"`: Matches the URL path exactly.\n- `\"Prefix\"`: Matches based on a URL path prefix split by `'/'`. Matching is done on a path element by element basis. Path elements are the list of labels in the path split by the `'/'` separator. A request is a match for path *p* if every *p* is an element-wise prefix of *p* of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. `\"/foo/bar\"` matches `\"/foo/bar/baz\"`, but does not match `\"/foo/barbaz\"`).\n- `\"ImplementationSpecific\"`: Interpretation of the `path` matching is up to the IngressClass. Implementations can treat this as a separate `pathType` or treat it identically to `\"Prefix\"` or `\"Exact\"` path types.\n\nImplementations are required to support all path types.",
          "enum": [
            "Exact",
            "ImplementationSpecific",
            "Prefix"
          ],
          "type": "string"
        }
      },
      "required": [
        "backend"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.HTTPIngressRuleValue": {
      "description": "A list of HTTP selectors pointing to backends. In the example `\"http://<host>/<path>?<searchpart> -> backend\"` where parts of the URL correspond to RFC 3986, this resource will be used to match against everything after the last `'/'` and before the first `'?'` or `'#'`.",
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressPath"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IPBlock": {
      "description": "A particular CIDR (e.g. `\"192.168.1.1/24\"`,`\"2001:db9::/64\"`) that is allowed for the Pods matched by a NetworkPolicySpec's `podSelector`. The `except` entry describes CIDRs that should not be included within this rule.",
      "properties": {
        "cidr": {
          "description": "A string representing the IP Block. Valid examples are `\"192.168.1.1/24\"` or `\"2001:db9::/64\"`.",
          "minLength": 1,
          "type": "string"
        },
        "except": {
          "description": "A list of CIDRs that should not be included within an IP Block. Valid examples are `\"192.168.1.1/24\"` or `\"2001:db9::/64\"`. `except` values will be rejected if they are outside the `cidr` range.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "cidr"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.Ingress.CREATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec",
          "description": "The desired state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.Ingress.GET": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec",
          "description": "The desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressStatus",
          "description": "The current state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.Ingress.UPDATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressSpec",
          "description": "The desired state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressBackend": {
      "description": "IngressBackend describes all endpoints for a given service and port. One and only one of `resource` and `service` backends must be specified.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "An object reference to another Kubernetes resource in the namespace of the Ingress object. This is a mutual exclusive setting with `service`. The `kind` and `name` fields are required and they must be valid path segment names. The `apiGroup`, when specified, must be a valid DNS subdomain name."
        },
        "service": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressServiceBackend",
          "description": "A reference to a Service as a backend. This is a mutually exclusive setting with `resource`."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressClass.CREATE": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress spec. The `\"ingressclass.kubernetes.io/is-default-class\"` annotation can be used to indicate that an IngressClass should be considered *default*. When a single IngressClass resource has this annotation set to `true`, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec",
          "description": "The desired state of the IngressClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressClass.GET": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress spec. The `\"ingressclass.kubernetes.io/is-default-class\"` annotation can be used to indicate that an IngressClass should be considered *default*. When a single IngressClass resource has this annotation set to `true`, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec",
          "description": "The desired state of the IngressClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressClass.UPDATE": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress spec. The `\"ingressclass.kubernetes.io/is-default-class\"` annotation can be used to indicate that an IngressClass should be considered *default*. When a single IngressClass resource has this annotation set to `true`, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassSpec",
          "description": "The desired state of the IngressClass."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressClassList": {
      "description": "A list of IngressClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for this representation of an object.",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of IngressClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressClassSpec": {
      "description": "Information about the IngressClass.",
      "properties": {
        "controller": {
          "description": "The name of the controller that should handle this class. This allows for different *flavors* to be controlled by the same controller. For example, you may have different `parameters` for the same controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. `\"acme.io/ingress-controller\". This field is immutable.",
          "maxLength": 250,
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "A link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters. When specified, the `apiGroup` field must be a valid DNS subdomain name; the `kind` and the `name` fields are required and they must be valid path segment names."
        }
      },
      "required": [
        "controller"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressList": {
      "description": "A list of Ingress objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Ingress objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.IngressRule": {
      "description": "A rule mapping the paths under a specified `host` to the related backend Services. Incoming requests are first evaluated for a `host` match, then routed to the backend associated with the matching `http` backend.",
      "properties": {
        "host": {
          "description": "The fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986:\n\n1. IPs are not allowed. Currently an entry in the `http` list can only apply to the IP in the `spec` of the parent Ingress.\n\n1. The `':'` delimiter is not respected because ports are not allowed. The port of an Ingress is implicitly 80 for HTTP and 443 for HTTPS.\n\nBoth may change in the future. Incoming requests are matched against the `host` before the `http`. If the `host` is unspecified, the Ingress routes all traffic based on the specified `http` backend. Host can be *precise* which is a domain name without the terminating dot of a network host (e.g. `\"foo.bar.com\"`) or *wildcard*, which is a domain name prefixed with a single wildcard label (e.g. `\"*.foo.com\"`). The wildcard character `'*'` must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. `host == \"*\"`). Requests will be matched against the `host` field in the following way:\n\n1. If `host` is precise, the request matches this rule if the HTTP `\"host\"` header is equal to `host` value.\n\n2. If `host` value is a wildcard, then the request matches this rule if the HTTP `\"host\"` header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressServiceBackend": {
      "description": "A reference to a Kubernetes Service as an Ingress backend.",
      "properties": {
        "name": {
          "description": "Name of the referenced Service. The Service must exist in the same namespace as the Ingress object. The string must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "port": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.ServiceBackendPort",
          "description": "Port of the referenced Service. A port name or port number is required."
        }
      },
      "required": [
        "name",
        "port"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressSpec": {
      "description": "The desired state of the Ingress. At least one of `defaultBackend` and `rules` must be specified.",
      "properties": {
        "defaultBackend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend",
          "description": "A default backend that should handle requests that don't match any rule. If `defaultBackend` is not set, the handling of requests that do not match any of the `rules` will be up to the Ingress controller."
        },
        "ingressClassName": {
          "description": "The name of a IngressClass cluster resource. The name must be a valid DNS subdomain if specified. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `\"kubernetes.io/ingress.class\"` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field and the `ingressClassName` cannot be set. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as *default*, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressStatus": {
      "description": "The current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "The current status of the load-balancer."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.IngressTLS": {
      "description": "The transport layer security (TLS) associated with an Ingress.",
      "properties": {
        "hosts": {
          "description": "A list of hosts included in the TLS certificate. The values in this list must match the name/s used in the TLS Secret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress.",
          "items": {
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        },
        "secretName": {
          "description": "The name of the Secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the `\"Host\"` header field used by an entry in the `rules` list, the SNI host is used for termination and value of the `\"Host\"` header is used for routing. The string must be a valid DNS subdomain name if specified.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicy.CREATE": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "Specification of the desired behavior for this NetworkPolicy."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicy.GET": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "Specification of the desired behavior for this NetworkPolicy."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicy.UPDATE": {
      "description": "NetworkPolicy describes what network traffic is allowed for a set of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec",
          "description": "Specification of the desired behavior for this NetworkPolicy."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicyEgressRule": {
      "description": "A set of traffic that is allowed out of Pods matched by a NetworkPolicySpec's `podSelector`. The traffic must match both `ports` and `to`. This type is Beta in 1.8",
      "properties": {
        "ports": {
          "description": "List of destination ports for outgoing traffic. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          },
          "type": "array"
        },
        "to": {
          "description": "List of destinations for outgoing traffic of Pods selected for this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all destinations (traffic not restricted by destination). If this field is present and contains at least one item, this rule allows traffic only if the traffic matches at least one item in the to list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyIngressRule": {
      "description": "A particular set of traffic that is allowed to the Pods matched by a NetworkPolicy's `podSelector`. The traffic must match both `ports` and `from`.",
      "properties": {
        "from": {
          "description": "List of sources which should be able to access the Pods selected by this rule. Items in this list are combined using a logical OR operation. If this field is empty or missing, this rule matches all sources (traffic not restricted by source). If this field is present and contains at least on item, this rule allows traffic only if the traffic matches at least one item in the `from` list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer"
          },
          "type": "array"
        },
        "ports": {
          "description": "List of ports which should be made accessible on the Pods selected by this rule. Each item in this list is combined using a logical OR. If this field is empty or missing, this rule matches all ports (traffic not restricted by port). If this field is present and contains at least one item, then this rule allows traffic only if the traffic matches at least one port in the list.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyList": {
      "description": "A list of NetworkPolicy objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of NetworkPolicy objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "NetworkPolicyList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicyList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.networking.v1.NetworkPolicyPeer": {
      "description": "A peer to allow traffic to/from. If `ipBlock` is specified, the `namespaceSelector` or the `podSelector` cannot be specified.",
      "properties": {
        "ipBlock": {
          "$ref": "#/definitions/io.k8s.api.networking.v1.IPBlock",
          "description": "This defines a policy on a particular IP block. If this field is set then neither of the other fields can be set."
        },
        "namespaceSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selects namespaces using cluster-scoped labels. This field follows standard label selector semantics; if present but empty, it selects all namespaces. If `podSelector` is also set, then the NetworkPolicyPeer as a whole selects the Pods matching `podSelector` in the namespaces selected by `namespaceSelector`. Otherwise it selects all Pods in the namespaces selected by `namespaceSelector`."
        },
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "This is a label selector which selects Pods. This field follows standard label selector semantics; if present but empty, it selects all Pods. If `namespaceSelector` is also set, then the NetworkPolicyPeer as a whole selects the Pods matching `podSelector` in the namespaces selected by `namespaceSelector`. Otherwise it selects the Pods matching `podSelector` in the policy's own namespace."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicyPort": {
      "description": "A port on which traffic is allowed",
      "properties": {
        "port": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The port on the given protocol. This can either be a numerical or named port on a Pod. The port number must be between 1 and 65535, if specified. If it is a port name, the name string subject to validation. If this field is not provided, this matches all port names and numbers. If present, only traffic on the specified `protocol` AND `port` will be matched."
        },
        "protocol": {
          "default": "TCP",
          "description": "The protocol which traffic must match.",
          "enum": [
            "SCTP",
            "TCP",
            "UDP"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1.NetworkPolicySpec": {
      "description": "The specification of the NetworkPolicy",
      "properties": {
        "egress": {
          "description": "List of egress rules to be applied to the selected Pods. Outgoing traffic is allowed if there are no NetworkPolicies selecting the Pod (and cluster policy otherwise allows the traffic), OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects whose `podSelector` matches the Pod. If this field is empty then this NetworkPolicy limits all outgoing traffic (and serves solely to ensure that the Pods it selects are isolated by default). This field is Beta in 1.8",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule"
          },
          "type": "array"
        },
        "ingress": {
          "description": "List of ingress rules to be applied to the selected Pods. Traffic is allowed to a Pod if there are no NetworkPolicies selecting the Pod (and cluster policy otherwise allows the traffic), OR if the traffic source is the Pod's local node, OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects whose `podSelector` matches the Pod. If this field is empty then this NetworkPolicy does not allow any traffic (and serves solely to ensure that the Pods it selects are isolated by default)",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule"
          },
          "type": "array"
        },
        "podSelector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Selects the Pods to which this NetworkPolicy object applies. The array of `ingress` rules is applied to all Pods selected by this field. Multiple network policies can select the same set of Pods. In this case, the `ingress` rules for each are combined additively. An empty `podSelector` matches all Pods in this namespace."
        },
        "policyTypes": {
          "description": "List of rule types that the NetworkPolicy relates to. If this field is not specified, it will default based on the existence of `ingress` or `egress` rules; policies that contain an `egress` section are assumed to affect `egress`, and all policies (whether or not they contain an `ingress` section) are assumed to affect `ingress`. If you want to write an egress-only policy, you must explicitly set `policyTypes` to `[\"Egress\"]`. Likewise, if you want to write a policy that specifies that no egress is allowed, you must specify a `policyTypes` value that include `\"Egress\"` (since such a policy would not include an `egress` section and would otherwise default to just `[\"Ingress\"]`). This field is Beta in 1.8",
          "items": {
            "enum": [
              "Egress",
              "Ingress"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "podSelector"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1.ServiceBackendPort": {
      "description": "The Service port referenced. Either `name` or `number` must be specified.",
      "properties": {
        "name": {
          "description": "The name of the port on the Service. This is a mutually exclusive setting with `number`. When specified, the name string must be a non-empty string and no more than 15 characters long. It must contain only `\"[-a-z0-9]\"` and must contain at least one letter `\"[a-z]\"`. It must not start or end with a hyphen, or contain adjacent hyphens. **Note**: Kubernetes only allow lower-case characters, even though RFC 6335 is case insensitive.",
          "type": "string"
        },
        "number": {
          "description": "The numerical port number (e.g. 80) on the Service. This is a mutually exclusive setting with `name`.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.HTTPIngressPath": {
      "description": "A path regex with a backend. Incoming URLs matching the `path` are forwarded to the `backend`.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend",
          "description": "The referenced service endpoint to which the traffic will be forwarded to."
        },
        "path": {
          "description": "An extended POSIX regex (as defined by IEEE Std 1003.1) matched against the path of an incoming request. Currently it can contain characters disallowed from the conventional \"path\" part of a URL as defined by RFC 3986. The path must begin with a `'/'`. When unspecified, all paths from incoming requests are matched.",
          "type": "string"
        },
        "pathType": {
          "default": "ImplementationSpecific",
          "description": "This determines the interpretation of the `path` matching. `pathType` can be one of the following values:\n\n- `\"Exact\"`: Matches the URL path exactly.\n- `\"Prefix\"`: Matches based on a URL path prefix split by `'/'`. Matching is done on a path element by element basis. Path elements are the list of labels in the path split by the `'/'` separator. A request is a match for path *p* if every *p* is an element-wise prefix of *p* of the request path. Note that if the last element of the path is a substring of the last element in request path, it is not a match (e.g. `\"/foo/bar\"` matches `\"/foo/bar/baz\"`, but does not match `\"/foo/barbaz\"`).\n- `\"ImplementationSpecific\"`: Interpretation of the `path` matching is up to the IngressClass. Implementations can treat this as a separate `pathType` or treat it identically to `\"Prefix\"` or `\"Exact\"` path types.\n\nImplementations are required to support all path types.",
          "enum": [
            "Exact",
            "ImplementationSpecific",
            "Prefix"
          ],
          "type": "string"
        }
      },
      "required": [
        "backend"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.HTTPIngressRuleValue": {
      "description": "A list of HTTP selectors pointing to backends. In the example `\"http://<host>/<path>?<searchpart> -> backend\"` where parts of the URL correspond to RFC 3986, this resource will be used to match against everything after the last `'/'` and before the first `'?'` or `'#'`.",
      "properties": {
        "paths": {
          "description": "A collection of paths that map requests to backends.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressPath"
          },
          "type": "array"
        }
      },
      "required": [
        "paths"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.Ingress.CREATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.Ingress.GET": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressStatus",
          "description": "The current state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.Ingress.UPDATE": {
      "description": "Ingress is a collection of rules that allow inbound connections to reach the endpoints defined by a backend. An Ingress can be configured to give services externally-reachable URLs, load balance traffic, terminate SSL, offer name-based virtual hosting etc.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Ingress"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressSpec",
          "description": "The desired state of the Ingress."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressBackend": {
      "description": "Information about the Service serving the backend for a given Ingress. Either `resource` should be specified, or `serviceName` and `servicePort` should be specified, but not both.",
      "properties": {
        "resource": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "An object reference to another Kubernetes resource in the namespace of the Ingress object. If `resource` is specified, `serviceName` and `servicePort` must not be specified."
        },
        "serviceName": {
          "description": "The name of the referenced Service.",
          "type": "string"
        },
        "servicePort": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "The port of the referenced Service."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressClass.CREATE": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress spec. The `\"ingressclass.kubernetes.io/is-default-class\"` annotation can be used to indicate that an IngressClass should be considered *default*. When a single IngressClass resource has this annotation set to `true`, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassSpec",
          "description": "The desired state of the IngressClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressClass.GET": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress spec. The `\"ingressclass.kubernetes.io/is-default-class\"` annotation can be used to indicate that an IngressClass should be considered *default*. When a single IngressClass resource has this annotation set to `true`, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassSpec",
          "description": "The desired state of the IngressClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressClass.UPDATE": {
      "description": "IngressClass represents the class of the Ingress, referenced by the Ingress spec. The `\"ingressclass.kubernetes.io/is-default-class\"` annotation can be used to indicate that an IngressClass should be considered *default*. When a single IngressClass resource has this annotation set to `true`, new Ingress resources without a class specified will be assigned this default class.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassSpec",
          "description": "The desired state of the IngressClass."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressClassList": {
      "description": "A list of IngressClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for this representation of an object.",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of IngressClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressClassSpec": {
      "description": "Information about the IngressClass.",
      "properties": {
        "controller": {
          "description": "The name of the controller that should handle this class. This allows for different *flavors* to be controlled by the same controller. For example, you may have different `parameters` for the same controller. This should be specified as a domain-prefixed path no more than 250 characters in length, e.g. `\"acme.io/ingress-controller\". This field is immutable.",
          "maxLength": 250,
          "type": "string"
        },
        "parameters": {
          "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
          "description": "A link to a custom resource containing additional configuration for the controller. This is optional if the controller does not require extra parameters. When specified, the `apiGroup` field must be a valid DNS subdomain name; the `kind` and the `name` fields are required and they must be valid path segment names."
        }
      },
      "required": [
        "controller"
      ],
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressList": {
      "description": "A list of Ingress objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "networking.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Ingress objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "IngressList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "networking.k8s.io",
          "kind": "IngressList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.networking.v1beta1.IngressRule": {
      "description": "A rule mapping the paths under a specified `host` to the related backend Services. Incoming requests are first evaluated for a `host` match, then routed to the backend associated with the matching `http` backend.",
      "properties": {
        "host": {
          "description": "The fully qualified domain name of a network host, as defined by RFC 3986. Note the following deviations from the \"host\" part of the URI as defined in RFC 3986:\n\n1. IPs are not allowed. Currently an entry in the `http` list can only apply to the IP in the `spec` of the parent Ingress.\n\n1. The `':'` delimiter is not respected because ports are not allowed. The port of an Ingress is implicitly 80 for HTTP and 443 for HTTPS.\n\nBoth may change in the future. Incoming requests are matched against the `host` before the `http`. If the `host` is unspecified, the Ingress routes all traffic based on the specified `http` backend. Host can be *precise* which is a domain name without the terminating dot of a network host (e.g. `\"foo.bar.com\"`) or *wildcard*, which is a domain name prefixed with a single wildcard label (e.g. `\"*.foo.com\"`). The wildcard character `'*'` must appear by itself as the first DNS label and matches only a single label. You cannot have a wildcard label by itself (e.g. `host == \"*\"`). Requests will be matched against the `host` field in the following way:\n\n1. If `host` is precise, the request matches this rule if the HTTP `\"host\"` header is equal to `host` value.\n\n2. If `host` value is a wildcard, then the request matches this rule if the HTTP `\"host\"` header is to equal to the suffix (removing the first label) of the wildcard rule.",
          "type": "string"
        },
        "http": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.HTTPIngressRuleValue"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressSpec": {
      "description": "The desired state of the Ingress. At least one of `backend` or `rules` must be specified.",
      "properties": {
        "backend": {
          "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressBackend",
          "description": "A default backend capable of servicing requests that don't match any rule. This field is optional to allow the loadbalancer controller or defaulting logic to specify a global default."
        },
        "ingressClassName": {
          "description": "The name of a IngressClass cluster resource. The name must be a valid DNS subdomain if specified. The associated IngressClass defines which controller will implement the resource. This replaces the deprecated `\"kubernetes.io/ingress.class\"` annotation. For backwards compatibility, when that annotation is set, this field cannot be set. Implementations of this API should ignore Ingresses without a class specified. An IngressClass resource may be marked as *default*, which can be used to set a default value for this field. For more information, refer to the IngressClass documentation.",
          "type": "string"
        },
        "rules": {
          "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressRule"
          },
          "type": "array"
        },
        "tls": {
          "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressTLS"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressStatus": {
      "description": "The current state of the Ingress.",
      "properties": {
        "loadBalancer": {
          "$ref": "#/definitions/io.k8s.api.core.v1.LoadBalancerStatus",
          "description": "The current status of the load-balancer."
        }
      },
      "type": "object"
    },
    "io.k8s.api.networking.v1beta1.IngressTLS": {
      "description": "The transport layer security (TLS) associated with an Ingress.",
      "properties": {
        "hosts": {
          "description": "A list of hosts included in the TLS certificate. The values in this list must match the name/s used in the TLS Secret. Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "secretName": {
          "description": "The name of the Secret used to terminate TLS traffic on port 443. Field is left optional to allow TLS routing based on SNI hostname alone. If the SNI host in a listener conflicts with the `\"Host\"` header field used by an entry in the `rules` list, the SNI host is used for termination and value of the `\"Host\"` header is used for routing.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1alpha1.Overhead": {
      "description": "The resource overhead associated with running a Pod.",
      "properties": {
        "podFixed": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The fixed resource overhead associated with running a Pod. Data in this map are validated as if they are specified as `limits` for Pod resource requirements.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1alpha1.RuntimeClass.CREATE": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec. The kubelet is responsible for resolving the `name` reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClassSpec",
          "description": "Specification of the RuntimeClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.node.v1alpha1.RuntimeClass.GET": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec. The Kubelet is responsible for resolving the `name` reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClassSpec",
          "description": "Specification of the RuntimeClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.node.v1alpha1.RuntimeClass.UPDATE": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec. The Kubelet is responsible for resolving the `name` reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClassSpec",
          "description": "Specification of the RuntimeClass."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.node.v1alpha1.RuntimeClassList": {
      "description": "A list of RuntimeClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RuntimeClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClassList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.node.v1alpha1.RuntimeClassSpec": {
      "description": "The specification of a RuntimeClass. It contains parameters required to describe the RuntimeClass to the Container Runtime Interface (CRI) implementation, as well as any other components that need to understand how the Pod will be run. The RuntimeClassSpec is immutable.",
      "properties": {
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1alpha1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field is Beta-level since v1.18, and is only honored by servers that enable the `PodOverhead` feature."
        },
        "runtimeHandler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called `\"runc\"` might specify that the `runc` OCI runtime (using native Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "type": "string"
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1alpha1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "runtimeHandler"
      ],
      "type": "object"
    },
    "io.k8s.api.node.v1alpha1.Scheduling": {
      "description": "The scheduling constraints for Nodes supporting a RuntimeClass.",
      "properties": {
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels that must be present on Nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a Node matched by this selector. The RuntimeClass `nodeSelector` is merged with a Pod's existing `nodeSelector`. Any conflicts will cause the Pod to be rejected during admission.",
          "type": "object"
        },
        "tolerations": {
          "description": "The tolerations to be appended (excluding duplicates) to Pods running with this RuntimeClass during admission, effectively unioning the set of Nodes tolerated by the Pod and the RuntimeClass.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1beta1.Overhead": {
      "description": "The resource overhead associated with running a Pod.",
      "properties": {
        "podFixed": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
          },
          "description": "The fixed resource overhead associated with running a Pod. Data in this map are validated as if they are specified as `limits` for Pod resource requirements.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.api.node.v1beta1.RuntimeClass.CREATE": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec. The Kubelet is responsible for resolving the `name` reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "handler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called `\"runc\"` might specify that the `runc` OCI runtime (using native Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field is Beta-level since v1.18, and is only honored by servers that enable the `PodOverhead` feature gate."
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "apiVersion",
        "handler",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClass.GET": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec. The Kubelet is responsible for resolving the `name` reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "handler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called `\"runc\"` might specify that the `runc` OCI runtime (using native Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field is Beta-level since v1.18, and is only honored by servers that enable the `PodOverhead` feature gate."
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "apiVersion",
        "handler",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClass.UPDATE": {
      "description": "RuntimeClass defines a class of container runtime supported in the cluster. The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod. RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec. The Kubelet is responsible for resolving the `name` reference before running the Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "handler": {
          "description": "The underlying runtime and configuration that the CRI implementation will use to handle Pods of this class. The possible values are specific to the node & CRI configuration. It is assumed that all handlers are available on every node, and handlers of the same name are equivalent on every node. For example, a handler called `\"runc\"` might specify that the `runc` OCI runtime (using native Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase, conform to the DNS Label (RFC 1123) requirements, and is immutable.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "overhead": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Overhead",
          "description": "The resource overhead associated with running a Pod for a given RuntimeClass. This field is Beta-level since v1.18, and is only honored by servers that enable the `PodOverhead` feature gate."
        },
        "scheduling": {
          "$ref": "#/definitions/io.k8s.api.node.v1beta1.Scheduling",
          "description": "The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to nodes that support it. If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes."
        }
      },
      "required": [
        "apiVersion",
        "handler",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.RuntimeClassList": {
      "description": "A list of RuntimeClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "node.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RuntimeClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RuntimeClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "node.k8s.io",
          "kind": "RuntimeClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.node.v1beta1.Scheduling": {
      "description": "The scheduling constraints for Nodes supporting a RuntimeClass.",
      "properties": {
        "nodeSelector": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Labels that must be present on Nodes that support this RuntimeClass. Pods using this RuntimeClass can only be scheduled to a Node matched by this selector. The RuntimeClass `nodeSelector` is merged with a Pod's existing `nodeSelector`. Any conflicts will cause the Pod to be rejected during admission.",
          "type": "object"
        },
        "tolerations": {
          "description": "The tolerations to be appended (excluding duplicates) to Pods running with this RuntimeClass during admission, effectively unioning the set of Nodes tolerated by the Pod and the RuntimeClass. Duplications in the list is treated as invalid.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
          },
          "type": "array",
          "x-kubernetes-list-type": "atomic"
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.AllowedCSIDriver": {
      "description": "A CSI Driver that is allowed to be used inline.",
      "properties": {
        "name": {
          "description": "The registered name of the CSI driver",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.AllowedFlexVolume": {
      "description": "A FlexVolume that is allowed.",
      "properties": {
        "driver": {
          "description": "The name of a FlexVolume driver",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "driver"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.AllowedHostPath": {
      "description": "The conditions to determine whether a `hostPath` volume can be used by Pods.",
      "properties": {
        "pathPrefix": {
          "description": "The path prefix that the `hostPath` volume must match. It does not support `\"*\"` and it can not contain `\"..\"`. Trailing slashes are trimmed when validating the path prefix. Examples: `\"/foo\"` would allow `\"/foo\"`, `\"/foo/\"` and `\"/foo/bar\"`. `\"/foo\"` would not allow `\"/food\"` or `\"/etc/foo\"`.",
          "minLength": 1,
          "type": "string"
        },
        "readOnly": {
          "description": "When set to true, will allow `hostPath` volumes matching the `pathPrefix` only if all volume mounts are read-only.",
          "type": "boolean"
        }
      },
      "required": [
        "pathPrefix"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.Eviction": {
      "description": "Eviction evicts a Pod from its Node subject to certain policies and safety constraints. This is a subresource of Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "deleteOptions": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions",
          "description": "DeleteOptions may be provided"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Eviction"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. This is used to refer to the Pod."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "Eviction",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.FSGroupStrategyOptions": {
      "description": "The rule and options related to `fsGroup` to use in the `securityContext`.",
      "properties": {
        "ranges": {
          "description": "The allowed ranges of `fsGroup`s. If you would like to force a single `fsGroup` then supply a single range with the same `start` and `end`. This is required when `rule` is set to `\"MustRunAs\"`. Each item in the list must be a supported `fsGroup` ID or `\"*\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate what fsGroup is used in the SecurityContext.",
          "enum": [
            "MayRunAs",
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.HostPortRange": {
      "description": "HostPortRange defines a range of host ports that can be used by Pods. It requires both the `start` and `end` to be defined.",
      "properties": {
        "max": {
          "description": "The end of the range, inclusive.",
          "format": "int32",
          "type": "integer"
        },
        "min": {
          "description": "The start of the range, inclusive.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "max",
        "min"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.IDRange": {
      "description": "The allowed range of IDs.",
      "properties": {
        "max": {
          "description": "The end of the range, inclusive. Cannot be less than `min`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "min": {
          "description": "The start of the range, inclusive. Cannot be greater than `max`.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        }
      },
      "required": [
        "max",
        "min"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget.CREATE": {
      "description": "An object that defines the max disruption that can be caused to a collection of Pods.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudget"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET": {
      "description": "An object that defines the max disruption that can be caused to a collection of Pods.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudget"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus",
          "description": "Most recently observed status of the PodDisruptionBudget."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudget.UPDATE": {
      "description": "An object that defines the max disruption that can be caused to a collection of Pods",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudget"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec",
          "description": "Specification of the desired behavior of the PodDisruptionBudget."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetList": {
      "description": "A list of PodDisruptionBudget objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PodDisruptionBudget objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodDisruptionBudgetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodDisruptionBudgetList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetSpec": {
      "description": "Specification for a PodDisruptionBudget.",
      "properties": {
        "maxUnavailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "An eviction is allowed if at most `maxUnavailable` Pods selected by `selector` are unavailable after the eviction, i.e. even in absence of the evicted Pod. The valid value is an integer or a percentage string. A percentage value can be no more than `\"100%\"`. One can prevent all voluntary evictions by specifying `0`. This is a mutually exclusive setting with `minAvailable`."
        },
        "minAvailable": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString",
          "description": "An eviction is allowed if at least `minAvailable` Pods selected by `selector` will still be available after the eviction, i.e. even in the absence of the evicted Pod. The valid value is an integer or a percentage string. A percentage can be no more than `\"100%\"`. You can prevent all voluntary evictions by specifying `\"100%\"`."
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "Label query over Pods whose evictions are managed by this PDB."
        }
      },
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.PodDisruptionBudgetStatus": {
      "description": "The status of a PodDisruptionBudget which may trail the actual state of a system.",
      "properties": {
        "currentHealthy": {
          "description": "The current number of healthy Pods",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "desiredHealthy": {
          "description": "The minimum desired number of healthy Pods",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "disruptedPods": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time"
          },
          "description": "Information about Pods whose eviction was processed by the API server but has not yet been observed by the PodDisruptionBudget controller. A Pod will be in this map from the time when the API server processed the eviction request to the time when the Pod is seen by PDB controller as having been marked for deletion (or after a timeout). The key in the map is the name of the Pod and the value is the time when the API server processed the eviction request. If the deletion didn't occur and a Pod is still there it will be removed from the list automatically by PodDisruptionBudget controller after some time. If everything goes smooth this map should be empty for the most of the time. Large number of entries in the map may indicate problems with Pod deletions.",
          "type": "object"
        },
        "disruptionsAllowed": {
          "description": "Number of Pod disruptions that are currently allowed.",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "expectedPods": {
          "description": "Total number of Pods counted by this disruption budget",
          "format": "int32",
          "minimum": 0,
          "type": "integer"
        },
        "observedGeneration": {
          "description": "Most recent generation observed when updating this status field. `disruptionsAllowed` and other status information is valid only if `observedGeneration` equals to PDB's object `generation`.",
          "format": "int64",
          "type": "integer"
        }
      },
      "required": [
        "currentHealthy",
        "disruptionsAllowed",
        "desiredHealthy",
        "expectedPods"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy.CREATE": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the security context that will be applied to a Pod and container.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name.\n\nUser can specify the default AppArmor profile to use, if allowed, using the `\"apparmor.security.beta.kubernetes.io/defaultProfileName\"` annotation. The *default* profile specified must be `\"runtime/default\"` or `\"unconfined\"` or have a prefix `\"localhost/\"`. User can specify the allowed AppArmor profile to use, if allowed, using the `\"apparmor.security.beta.kubernetes.io/allowedProfileNames\"`. The annotation value is a comma separated list of profile names, each of which is either `\"runtime/default\"`, `\"unconfined\"`, or prefixed with `\"localhost/\"`.\n\nSimilarly, users can specify the default profile for seccomp, if enabled, using the `\"seccomp.security.alpha.kubernetes.io/defaultProfileName\"` annotation and the allowed profiles using the `\"seccomp.security.alpha.kubernetes.io/allowedProfileNames\"` annotation. The value for allowed profiles can contain `\"*\"` which means allowing all profiles. The value of `\"runtime/default\"`, `\"docker/default\"` and `\"unconfined\"` is acceptable, in addition to profiles names prefixed with `\"localhost/\"`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
          "description": "The policy to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the security context that will be applied to a Pod and container.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
          "description": "The policy to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicy.UPDATE": {
      "description": "PodSecurityPolicy governs the ability to make requests that affect the security context that will be applied to a Pod and container.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicy"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name.\n\nUser can specify the default AppArmor profile to use, if allowed, using the `\"apparmor.security.beta.kubernetes.io/defaultProfileName\"` annotation. The *default* profile specified must be `\"runtime/default\"` or `\"unconfined\"` or have a prefix `\"localhost/\"`. User can specify the allowed AppArmor profile to use, if allowed, using the `\"apparmor.security.beta.kubernetes.io/allowedProfileNames\"`. The annotation value is a comma separated list of profile names, each of which is either `\"runtime/default\"`, `\"unconfined\"`, or prefixed with `\"localhost/\"`.\n\nSimilarly, users can specify the default profile for seccomp, if enabled, using the `\"seccomp.security.alpha.kubernetes.io/defaultProfileName\"` annotation and the allowed profiles using the `\"seccomp.security.alpha.kubernetes.io/allowedProfileNames\"` annotation. The value for allowed profiles can contain `\"*\"` which means allowing all profiles. The value of `\"runtime/default\"`, `\"docker/default\"` and `\"unconfined\"` is acceptable, in addition to profiles names prefixed with `\"localhost/\"`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicySpec",
          "description": "The policy to enforce."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicyList": {
      "description": "A list of PodSecurityPolicy objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "policy/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of schema objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodSecurityPolicyList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "policy",
          "kind": "PodSecurityPolicyList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.policy.v1beta1.PodSecurityPolicySpec": {
      "description": "The policy to enforce.",
      "properties": {
        "allowPrivilegeEscalation": {
          "default": true,
          "description": "Flag indicating whether a Pod can request privilege escalation. This must be set to `true` if `defaultAllowPrivilegeEscalation` is set to `true`.",
          "type": "boolean"
        },
        "allowedCSIDrivers": {
          "description": "A list of allowed inline CSI drivers that must be explicitly set to be embedded within a Pod spec. An empty value indicates that any CSI driver can be used for inline ephemeral volumes. This is a Beta field, and is only honored if the API server enables the `CSIInlineVolume` feature gate.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedCSIDriver"
          },
          "type": "array"
        },
        "allowedCapabilities": {
          "description": "A list of capabilities that can be requested to add to a Container. Capabilities in this field may be added at the Pod author's discretion. You must not list a capability in both `allowedCapabilities` and `requiredDropCapabilities`. If `\"*\"` is in the list, then the `requiredDropCapabilities` list must be empty.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "allowedFlexVolumes": {
          "description": "A list of allowed FlexVolumes. Empty or nil indicates that all FlexVolumes may be used. This parameter is effective only when the usage of the FlexVolumes is allowed in the `volumes` field.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedFlexVolume"
          },
          "type": "array"
        },
        "allowedHostPaths": {
          "description": "A list of permitted host paths. Empty indicates that all host paths may be used.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedHostPath"
          },
          "type": "array"
        },
        "allowedProcMountTypes": {
          "description": "An allowlist of proc mount types. Empty or nil indicates that only the `\"Default\"` may be used. This is an Alpha field that requires the `ProcMountType` feature flag to be enabled.",
          "items": {
            "description": "The type of proc mount to use for containers. The `\"Default\"` value means to use the container runtime defaults for read-only paths and masked paths.",
            "enum": [
              "Default",
              "Unmasked"
            ],
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "allowedUnsafeSysctls": {
          "description": "A list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in `\"*\"` in which case it is considered as a prefix of allowed sysctls. Single `\"*\"` means all unsafe sysctls are allowed. Kubelet has to allowlist all allowed unsafe sysctls explicitly to avoid rejection. This field cannot conflict with the value of `forbiddenSysctls`.",
          "items": {
            "description": "The name of sysctl must start with lower case character or digit and end with lower case character or digit. It can have dots (`'.'`), `'_'` and `'-'` in it.",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "([a-z0-9]([-_a-z0-9]*[a-z0-9])?.)*[a-z0-9]([-_a-z0-9]*[a-z0-9])?",
            "type": "string"
          },
          "type": "array"
        },
        "defaultAddCapabilities": {
          "description": "The default set of capabilities that will be added to a Container unless the Pod spec specifically drops the capability. You may not list a capability in both `defaultAddCapabilities` and `requiredDropCapabilities` lists. Capabilities added here are implicitly allowed, and need not be included in the `allowedCapabilities` list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultAllowPrivilegeEscalation": {
          "description": "The default setting for whether a process can gain more privileges than its parent process. If this is set to `true`, `allowPrivilegeEscalation` must be set to `true` as well.",
          "type": "boolean"
        },
        "forbiddenSysctls": {
          "description": "A list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in `\"*\"` in which case it is considered as a prefix of forbidden sysctls. Single `\"*\"` means all sysctls are forbidden. This field cannot conflict with `allowedUnsafeSysctls`.",
          "items": {
            "description": "The name of sysctl must start with lower case character or digit and end with lower case character or digit. It can have dots (`'.'`), `'_'` and `'-'` in it.",
            "maxLength": 253,
            "minLength": 1,
            "pattern": "([a-z0-9]([-_a-z0-9]*[a-z0-9])?.)*[a-z0-9]([-_a-z0-9]*[a-z0-9])?",
            "type": "string"
          },
          "type": "array"
        },
        "fsGroup": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.FSGroupStrategyOptions",
          "description": "The strategy defines what `fsGroup` is used by the security context."
        },
        "hostIPC": {
          "description": "Whether using `hostIPC` in a Pod spec is allowed.",
          "type": "boolean"
        },
        "hostNetwork": {
          "description": "Whether using `hostNetwork` in a Pod spec is allowed.",
          "type": "boolean"
        },
        "hostPID": {
          "description": "Whether using `hostPID` in a Pod spec is allowed.",
          "type": "boolean"
        },
        "hostPorts": {
          "description": "The host port ranges that are allowed to be exposed.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.HostPortRange"
          },
          "type": "array"
        },
        "privileged": {
          "description": "Whether a Pod can request to be run as privileged.",
          "type": "boolean"
        },
        "readOnlyRootFilesystem": {
          "description": "Whether kubelet will force Containers to run with a read-only root file system. If a Container specifically requests to run with a non-read only root file system the PSP should deny the Pod. If set to `false`, a Container may run with a read-only root file system if it wishes but it will not be forced to.",
          "type": "boolean"
        },
        "requiredDropCapabilities": {
          "description": "The capabilities to drop from a Container. These are required to be dropped and cannot be added.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "runAsGroup": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions",
          "description": "The strategy that dictates the valid `runAsGroup` values that may be set. If this field is omitted, the Pod's `runAsGroup` can take any value. This field requires the `RunAsGroup` feature gate to be enabled."
        },
        "runAsUser": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions",
          "description": "The strategy that dictates the valid `runAsUser` values that may be set."
        },
        "runtimeClass": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions",
          "description": "The strategy that will dictate the allowable RuntimeClasses for a Pod. If this field is omitted, the Pod's `runtimeClassName` field is unrestricted. Enforcement of this field depends on the `RuntimeClass` feature gate being enabled."
        },
        "seLinux": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SELinuxStrategyOptions",
          "description": "The strategy that dictates the allowable SELinux labels that may be set."
        },
        "supplementalGroups": {
          "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions",
          "description": "The strategy that dictates what supplemental groups are used by the `securityContext`."
        },
        "volumes": {
          "description": "An allow list of volume plugins. Empty list indicates that no volumes may be used. To allow all volumes you may use `\"*\"`. Each item in the list must be a valid volume type name.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "fsGroup",
        "runAsUser",
        "seLinux",
        "supplementalGroups"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions": {
      "description": "The rule and options related to the groups to run workloads as.",
      "properties": {
        "ranges": {
          "description": "List of the allowed GIDs. If you would like to force a single GID then supply a single range with the same `start` and `end`. This is required when `rule` is set to `\"MustRunAs\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate the allowable runAsGroup values that may be set. When the rule is `\"RunAsAny\"`, the list of `ranges` must be empty. When the rule is `\"MayRunAs\"` or `\"MustRunAs\"`, the `ranges` list cannot be empty.",
          "enum": [
            "MayRunAs",
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions": {
      "description": "The rule and options for running workloads as some users.",
      "properties": {
        "ranges": {
          "description": "List of allowed UIDs. If you would like to force a single UID then supply a single range with the same `start` and `end`. Required when `rule` is set to `\"MustRunAs\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy that will dictate the allowable runAsUser values that may be set.",
          "enum": [
            "MustRunAs",
            "MustRunAsNonRoot",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.RuntimeClassStrategyOptions": {
      "description": "The strategy that dictates the allowable RuntimeClasses.",
      "properties": {
        "allowedRuntimeClassNames": {
          "description": "A list of allowed RuntimeClass names that may be specified on a Pod. A value of `\"*\"` means that any RuntimeClass name is allowed, and must be the only item in the list. An empty list requires the `defaultRuntimeClassName` field to be unset.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "defaultRuntimeClassName": {
          "description": "The default `runtimeClassName` to set on the Pod. The default **MUST** be included in the `allowedRuntimeClassNames` list. A value of nil does not mutate the Pod.",
          "type": "string"
        }
      },
      "required": [
        "allowedRuntimeClassNames"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.SELinuxStrategyOptions": {
      "description": "The rule and options related to SELinux settings.",
      "properties": {
        "rule": {
          "description": "The strategy that will dictate the allowable SELinux labels that may be set.",
          "enum": [
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        },
        "seLinuxOptions": {
          "$ref": "#/definitions/io.k8s.api.core.v1.SELinuxOptions",
          "description": "SELinux options required to run as. This is required when `rule` is set to `\"MustRunAs\"`."
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions": {
      "description": "The rule and options related to the supplemental groups.",
      "properties": {
        "ranges": {
          "description": "The allowed ranges of supplemental groups. If you would like to force a single supplemental group then supply a single range with the same `start` and `end`. This is required when `rule` is set to `\"MustRunAs\"`.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.policy.v1beta1.IDRange"
          },
          "type": "array"
        },
        "rule": {
          "description": "The strategy dictates what supplemental groups is used in the SecurityContext.",
          "enum": [
            "MayRunAs",
            "MustRunAs",
            "RunAsAny"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "rule"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.AggregationRule": {
      "description": "This describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "A list of LabelSelectors used to find ClusterRoles and create the `rules`. If any of the selectors match, the ClusterRole's permissions will be added.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1.ClusterRole.CREATE": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid path segment name."
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRole.GET": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "rules"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRole.UPDATE": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding.CREATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding.GET": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a ClusterRole."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef",
        "subjects"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBinding.UPDATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleBindingList": {
      "description": "A list of ClusterRoleBinding objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRoleBinding objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.ClusterRoleList": {
      "description": "A list of ClusterRole objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRole objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.PolicyRule": {
      "description": "Information that describes a policy rule. Rules can either apply to API resources (such as `\"pods\"` or `\"secrets\"`) or non-resource URL paths (such as '\"/api\"'),  but not both.",
      "properties": {
        "apiGroups": {
          "description": "The name of the API group that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. This field is required when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards (`\"*\"`) are allowed, but only as the full, final step in the path. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. If this field is not empty, other fields including `apiGroups`, `resources`, `resourceNames` must be empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "A list of resource names the rule applies to. An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. `\"*\"` represents all resources. This field cannot be empty when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "verbs": {
          "description": "A list of verbs that apply to **ALL** the resource kinds and attribute restrictions contained in this rule. `\"*\"` means all verbs.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "apiGroups",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.Role.CREATE": {
      "description": "Role is a namespaced, logical group of policy rules.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.Role.GET": {
      "description": "Role is a namespaced, logical group of policy rules.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "rules"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.Role.UPDATE": {
      "description": "Role is a namespaced, logical group of policy rules.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding.CREATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace, and binds it to some subjects in the namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding.GET": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace, and binds it to some subjects in the namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef",
        "subjects"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBinding.UPDATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace, and binds it to some subjects in the namespace.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleBindingList": {
      "description": "A list of RoleBinding objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RoleBinding objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleList": {
      "description": "A list of Role objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Role objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadta"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.rbac.v1.RoleRef": {
      "description": "Information for referencing a Role or a ClusteRole",
      "properties": {
        "apiGroup": {
          "description": "The API group for the referenced resource. Currently this must be `\"rbac.authorization.k8s.io\"`.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "The kind of the targer resource referenced.",
          "enum": [
            "ClusterRole",
            "Role"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name of the referenced resource. This value must be a valid path segment name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1.Subject": {
      "description": "A reference to a subject or user identity. This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiGroup": {
          "description": "The API group of the referenced subject. When `kind` is `\"ServiceAccount\"`, this field must be empty string (`\"\"`) or nil. When `kind` is `\"User\"` or `\"Group\"`, this field must be `\"rbac.authorization.k8s.io\"`.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. If the authorizer does not recognize the `kind` value, it should report an error.",
          "enum": [
            "Group",
            "ServiceAccount",
            "User"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced object. If `kind` is `\"ServiceAccount\"`, the `name` must be a valid ServiceAccount name.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object. If the object kind is `\"User\"` or `\"Group\"` which are not namespaced, this value must be empty.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1alpha1.AggregationRule": {
      "description": "This describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "A list of LabelSelectors used to find ClusterRoles and create the `rules`. If any of the selectors match, the ClusterRole's permissions will be added.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRole.CREATE": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"1 ClusterRole, and will no longer be served in v1.22.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid path segment name."
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRole.GET": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRole, and will no longer be served in v1.22.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "rules"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRole.UPDATE": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRole, and will no longer be served in v1.22.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "rules",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.CREATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef",
          "description": "The reference to a ClusterRole."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef",
        "subjects"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.UPDATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList": {
      "description": "A list of ClusterRoleBinding objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBindings, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRoleBinding objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.ClusterRoleList": {
      "description": "A list of ClusterRole objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoles, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRole objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.PolicyRule": {
      "description": "Information that describes a policy rule. Rules can either apply to API resources (such as `\"pods\"` or `\"secrets\"`) or non-resource URL paths (such as '\"/api\"'),  but not both.",
      "properties": {
        "apiGroups": {
          "description": "The name of the API group that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. This field is required when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards (`\"*\"`) are allowed, but only as the full, final step in the path. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. Rules can either apply to API resources (such as `\"pods\"` or `\"secrets\"`) or non-resource URL paths (such as `\"/api\"`), but not both.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "A list of resource names the rule applies to. An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. `\"*\"` represents all resources. This field cannot be empty when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "verbs": {
          "description": "A list of verbs that apply to **ALL** the resource kinds and attribute restrictions contained in this rule. `\"*\"` means all verbs.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "apiGroups",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1alpha1.Role.CREATE": {
      "description": "Role is a namespaced, logical group of policy rules. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` Role, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.Role.GET": {
      "description": "Role is a namespaced, logical group of policy rules. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` Role, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "rules"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.Role.UPDATE": {
      "description": "Role is a namespaced, logical group of policy rules. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` Role, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "rules",
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.RoleBinding.CREATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via `subjects` and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.RoleBinding.GET": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via `subjects` and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef",
        "subjects"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.RoleBinding.UPDATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via `subjects` and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.RoleBindingList": {
      "description": "A list of RoleBinding objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBindingList, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RoleBinding objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.RoleList": {
      "description": "A list of Role objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleList, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Role objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadta"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.rbac.v1alpha1.RoleRef": {
      "description": "Information for referencing a Role or a ClusteRole",
      "properties": {
        "apiGroup": {
          "description": "The API group for the referenced resource. Currently this must be `\"rbac.authorization.k8s.io\"`.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "The kind of the targer resource referenced.",
          "enum": [
            "ClusterRole",
            "Role"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name of the referenced resource. This value must be a valid path segment name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1alpha1.Subject": {
      "description": "A reference to a subject or user identity. This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiVersion": {
          "description": "The API group and version of the referenced subject. Defaults to `\"v1\"` for ServiceAccount subjects. Defaults to `\"rbac.authorization.k8s.io/v1alpha1\"` for User and Group subjects.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. If the authorizer does not recognize the `kind` value, it should report an error.",
          "enum": [
            "Group",
            "ServiceAccount",
            "User"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced object. If `kind` is `\"ServiceAccount\"`, the `name` must be a valid ServiceAccount name.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object. If the object kind is `\"User\"` or `\"Group\"` which are not namespaced, this value must be empty.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1beta1.AggregationRule": {
      "description": "This describes how to locate ClusterRoles to aggregate into the ClusterRole",
      "properties": {
        "clusterRoleSelectors": {
          "description": "A list of LabelSelectors used to find ClusterRoles and create the `rules`. If any of the selectors match, the ClusterRole's permissions will be added.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "type": "object"
    },
    "io.k8s.api.rbac.v1beta1.ClusterRole.CREATE": {
      "description": "A cluster level logical grouping of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource. *DEPRECATED* in v1.17 in favor of rbac.authorization.k8s.io/v1 ClusterRole, and will no longer be served in v1.22.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid path segment name."
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRole.GET": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRole, and will no longer be served in v1.22.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "rules"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRole.UPDATE": {
      "description": "A cluster level group of policy rules that can be referenced as a unit by a RoleBinding or ClusterRoleBinding resource. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRole, and will no longer be served in v1.22.",
      "properties": {
        "aggregationRule": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.AggregationRule",
          "description": "A field that describes how to build the `rules` for this ClusterRole. If `aggregationRule` is set, then the `rules` are controller managed and direct changes to `rules` will be stomped by the controller."
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRole"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this ClusterRole",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBinding.CREATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef",
          "description": "The reference to a ClusterRole."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "roleRef",
        "subjects"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBinding.UPDATE": {
      "description": "ClusterRoleBinding represents a binding between a ClusterRole and some subjects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef",
          "description": "The reference to a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error. This field cannot be updated."
        },
        "subjects": {
          "description": "References to the subjects the ClusterRole applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleBindingList": {
      "description": "A list of ClusterRoleBinding objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoleBindingList, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRoleBinding objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBindingList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.ClusterRoleList": {
      "description": "A list of ClusterRole objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` ClusterRoles, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of ClusterRole objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "ClusterRoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.PolicyRule": {
      "description": "Information that describes a policy rule. Rules can either apply to API resources (such as `\"pods\"` or `\"secrets\"`) or non-resource URL paths (such as '\"/api\"'),  but not both.",
      "properties": {
        "apiGroups": {
          "description": "The name of the API group that contains the resources. If multiple API groups are specified, any action requested against one of the enumerated resources in any API group will be allowed. This field is required when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "nonResourceURLs": {
          "description": "A set of partial URLs that a user should have access to. Wildcards (`\"*\"`) are allowed, but only as the full, final step in the path. Since non-resource URLs are not namespaced, this field is only applicable for ClusterRoles referenced from a ClusterRoleBinding. If this field is not empty, other fields including `apiGroups`, `resources`, `resourceNames` must be empty.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resourceNames": {
          "description": "A list of resource names the rule applies to. An empty set means that everything is allowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "resources": {
          "description": "A list of resources this rule applies to. `\"*\"` represents all resources in the specified API groups. `\"*/foo\"` represents the subresource `\"foo\"` for all resources in the specified API groups. This field cannot be empty when `nonResourceURLs` is empty.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "verbs": {
          "description": "A list of verbs that apply to **ALL** the resource kinds and attribute restrictions contained in this rule. `\"*\"` means all verbs.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1beta1.Role.CREATE": {
      "description": "Role is a namespaced, logical group of policy rules. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` Role, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.Role.GET": {
      "description": "Role is a namespaced, logical group of policy rules. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` Role, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "rules"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.Role.UPDATE": {
      "description": "Role is a namespaced, logical group of policy rules. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` Role, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Role"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "rules": {
          "description": "All the policy rules for this Role",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.PolicyRule"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleBinding.CREATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via `subjects` and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleBinding.GET": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via `subjects` and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleBinding.UPDATE": {
      "description": "RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace. It adds who information via `subjects` and namespace information by which namespace it exists in. RoleBindings in a given namespace only have effect in that namespace. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBinding, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBinding"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "roleRef": {
          "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleRef",
          "description": "The reference to a Role in the current namespace or a ClusterRole. If the `roleRef` cannot be resolved, the authorizer must return an error."
        },
        "subjects": {
          "description": "References to the subjects the Role applies to.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Subject"
          },
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "roleRef"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleBindingList": {
      "description": "A list of RoleBinding objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleBindingList, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of RoleBinding objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleBindingList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBindingList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleList": {
      "description": "A list of Role objects. *DEPRECATED* in v1.17 in favor of `\"rbac.authorization.k8s.io/v1\"` RoleList, and will no longer be served in v1.22.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "rbac.authorization.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of Role objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "RoleList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadta"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.rbac.v1beta1.RoleRef": {
      "description": "Information for referencing a Role or a ClusteRole",
      "properties": {
        "apiGroup": {
          "description": "The API group for the referenced resource. Currently this must be `\"rbac.authorization.k8s.io\"`.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "The kind of the targer resource referenced.",
          "enum": [
            "ClusterRole",
            "Role"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The name of the referenced resource. This value must be a valid path segment name.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiGroup",
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.rbac.v1beta1.Subject": {
      "description": "A reference to a subject or user identity. This can either hold a direct API object reference, or a value for non-objects such as user and group names.",
      "properties": {
        "apiGroup": {
          "description": "The API group of the referenced subject. When `kind` is `\"ServiceAccount\"`, this field must be empty string (`\"\"`) or nil. When `kind` is `\"User\"` or `\"Group\"`, this field must be `\"rbac.authorization.k8s.io\"`.",
          "type": "string"
        },
        "kind": {
          "description": "Kind of object being referenced. If the authorizer does not recognize the `kind` value, it should report an error.",
          "enum": [
            "Group",
            "ServiceAccount",
            "User"
          ],
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced object. If `kind` is `\"ServiceAccount\"`, the `name` must be a valid ServiceAccount name.",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "Namespace of the referenced object. If the object kind is `\"User\"` or `\"Group\"` which are not namespaced, this value must be empty.",
          "type": "string"
        }
      },
      "required": [
        "kind",
        "name"
      ],
      "type": "object"
    },
    "io.k8s.api.scheduling.v1.PriorityClass.CREATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain. Name prefixed with `\"system-\"` are reserved for predefined system priority classes, i.e.\n\n- `\"system-cluster-critical\"` (2000000000): used for system critical Pods that must run in the cluster, but can be moved to another node if necessary.\n- `\"system-node-critical\"` (2000001000): used for system critical Pods that must not be moved from their current node.\n"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClass.GET": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClass.UPDATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain. Name prefixed with `\"system-\"` are reserved for predefined system priority classes, i.e.\n\n- `\"system-cluster-critical\"` (2000000000): used for system critical Pods that must run in the cluster, but can be moved to another node if necessary.\n- `\"system-node-critical\"` (2000001000): used for system critical Pods that must not be moved from their current node.\n"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1.PriorityClassList": {
      "description": "A list of PriorityClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PriorityClass objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1alpha1.PriorityClass.CREATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. *DEPRECATED* - This group version of PriorityClass is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClass.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain. Name prefixed with `\"system-\"` are reserved for predefined system priority classes, i.e.\n\n- `\"system-cluster-critical\"` (2000000000): used for system critical Pods that must run in the cluster, but can be moved to another node if necessary.\n- `\"system-node-critical\"` (2000001000): used for system critical Pods that must not be moved from their current node.\n"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1alpha1.PriorityClass.GET": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. *DEPRECATED* - This group version of PriorityClass is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClass.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1alpha1.PriorityClass.UPDATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. *DEPRECATED* - This group version of PriorityClass is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClass.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain. Name prefixed with `\"system-\"` are reserved for predefined system priority classes, i.e.\n\n- `\"system-cluster-critical\"` (2000000000): used for system critical Pods that must run in the cluster, but can be moved to another node if necessary.\n- `\"system-node-critical\"` (2000001000): used for system critical Pods that must not be moved from their current node.\n"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1alpha1.PriorityClassList": {
      "description": "A list of PriorityClass objects. *DEPRECATED* - This group version of PriorityClassList is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClassList.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PriorityClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClass.CREATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. *DEPRECATED* - This group version of PriorityClass is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClass.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain. Name prefixed with `\"system-\"` are reserved for predefined system priority classes, i.e.\n\n- `\"system-cluster-critical\"` (2000000000): used for system critical Pods that must run in the cluster, but can be moved to another node if necessary.\n- `\"system-node-critical\"` (2000001000): used for system critical Pods that must not be moved from their current node.\n"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClass.GET": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. *DEPRECATED* - This group version of PriorityClass is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClass.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority. This field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClass.UPDATE": {
      "description": "PriorityClass defines mapping from a priority class name to the priority integer value. The value can be any valid integer. *DEPRECATED* - This group version of PriorityClass is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClass.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "description": {
          "description": "An arbitrary string that usually provides guidelines on using this priority class.",
          "type": "string"
        },
        "globalDefault": {
          "description": "Flag indicating whether this PriorityClass should be considered as the default priority for Pods. Only one PriorityClass can be marked as `globalDefault`. However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`, the smallest value of such global default PriorityClasses will be used as the default one.",
          "type": "boolean"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain. Name prefixed with `\"system-\"` are reserved for predefined system priority classes, i.e.\n\n- `\"system-cluster-critical\"` (2000000000): used for system critical Pods that must run in the cluster, but can be moved to another node if necessary.\n- `\"system-node-critical\"` (2000001000): used for system critical Pods that must not be moved from their current node.\n"
        },
        "preemptionPolicy": {
          "default": "PreemptLowerPriority",
          "description": "The policy for preempting Pods with lower priority.\n\n- `\"Never\"`: Pod never preempts other Pods with lower priority.\n- `\"PreemptLowerPriority\"`: Pod can preempt other Pods with lower priority.\n\nThis field is Beta-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
          "enum": [
            "Never",
            "PreemptLowerPriority"
          ],
          "type": "string"
        },
        "value": {
          "description": "The value of this priority class. This is the actual priority that Pods receive when they have the name of this class in their Pod spec. Other than the system predefined priority classes, user defined priority classes cannot have `value` greater than 1000000000. The value cannot be changed in an update operation.",
          "format": "int32",
          "type": "integer"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "value"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.scheduling.v1beta1.PriorityClassList": {
      "description": "A list of PriorityClass objects. *DEPRECATED* - This group version of PriorityClassList is deprecated by `\"scheduling.k8s.io/v1\"` PriorityClassList.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "scheduling.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PriorityClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PriorityClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPreset.CREATE": {
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPreset"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetSpec",
          "description": "Specification for the PodPreset resource."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPreset.GET": {
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPreset"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetSpec",
          "description": "Specification for the PodPreset resource."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPreset.UPDATE": {
      "description": "PodPreset is a policy resource that defines additional runtime requirements for a Pod.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPreset"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetSpec",
          "description": "Specification for the PodPreset resource."
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPresetList": {
      "description": "A list of PodPreset objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "settings.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of PodPreset objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "PodPresetList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "settings.k8s.io",
          "kind": "PodPresetList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.settings.v1alpha1.PodPresetSpec": {
      "description": "The description of a PodPreset object. At least one of `volumes`, `env`, `envFrom`, `volumeMounts` must be specified.",
      "properties": {
        "env": {
          "description": "The collection of EnvVar to inject into containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
          },
          "type": "array"
        },
        "envFrom": {
          "description": "The collection of EnvFromSource to inject into containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
          },
          "type": "array"
        },
        "selector": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
          "description": "A label query over a set of resources, in this case pods. Defaule value is Empty selector."
        },
        "volumeMounts": {
          "description": "The collection of VolumeMount to inject into containers.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
          },
          "type": "array"
        },
        "volumes": {
          "description": "The collection of Volume to inject into the Pod.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
          },
          "type": "array"
        }
      },
      "required": [
        "selector"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.CSIDriver.CREATE": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the \"cluster-driver-registrar\" sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach/detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` indicates the name of the CSI driver that this object refers to. It **must** be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`\"[a-z0-9A-Z]\"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriver.GET": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the \"cluster-driver-registrar\" sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach/detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The `name` indicates the name of the CSI driver that this object refers to. It **must** be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`\"[a-z0-9A-Z]\"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriver.UPDATE": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the \"cluster-driver-registrar\" sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach/detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` indicates the name of the CSI driver that this object refers to. It **must** be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`\"[a-z0-9A-Z]\"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriverList": {
      "description": "A list of CSIDriver objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CSIDriver objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriverList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriverList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSIDriverSpec": {
      "description": "The specification of a CSIDriver. The whole spec is immutable.",
      "properties": {
        "attachRequired": {
          "default": true,
          "description": "Flag indicating this CSI volume driver requires an `attach` operation because it implements the CSI `ControllerPublishVolume()` method. The Kubernetes attach/detach controller should call the `attach` volume interface which checks the `volumeattachment` status and waits until the volume is attached before proceeding to mounting. The CSI \"external-attacher\" coordinates with CSI volume driver and updates the `volumeattachment` status when the `attach` operation is complete. If the `CSIDriverRegistry` feature gate is enabled and the value is specified to `false`, the `attach` operation will be skipped. Otherwise the `attach` operation will be called.",
          "type": "boolean"
        },
        "fsGroupPolicy": {
          "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted.\n\n- `\"File\"`: the CSI driver supports volume ownership and permission change via `fsGroup`, and Kubernetes may use `fsGroup` to change permissions and ownership of the volume to match user requested `fsGroup` in the PodSecurityPolicy regardless of fstype or access mode. This mode should be defined if the `fsGroup` is expected to always change on mount.\n- `\"None\"`: Volumes will be mounted without performing any ownership or permission modifications, as the CSIDriver does not support these operations. This mode should be selected if the CSIDriver does not support `fsGroup` modifications. For example, when Kubernetes cannot change ownership and permission on a volume due to root-squash settings on a NFS volume.\n- `\"ReadWriteOnceWithFSType\"`: Each volume will be examined to determine if the volume ownership and permissions should be modified. If a fstype is defined and the volume's access mode contains `\"ReadWriteOnce\"`, then the defined `fsGroup` will be applied. This mode should be defined if it's expected that the `fsGroup` may need to be modified depending on the Pod's security policy. This is the default behavior if no other policy is defined.\n\nThis field is Alpha-level, and is only honored by servers that enable the `CSIVolumeFSGroupPolicy` feature gate.",
          "enum": [
            "File",
            "None",
            "ReadWriteOnceWithFSType"
          ],
          "type": "string"
        },
        "podInfoOnMount": {
          "default": false,
          "description": "If set to `true`, `podInfoOnMount` indicates this CSI volume driver requires additional Pod information (like `\"podName\"`, `\"podUID\"`, etc.) during `mount` operations. If set to `false`, Pod information will not be passed on `mount`. The CSI driver specifies `podInfoOnMount` as part of the driver deployment. If `true`, Kubelet will pass Pod information as `VolumeContext` in the CSI `NodePublishVolume()` calls. The CSI driver is responsible for parsing and validating the information passed in as `VolumeContext`. The following `VolumeConext` will be passed if `podInfoOnMount` is set to `true`. This list might grow, but the prefix will be used.\n\n- `\"csi.storage.k8s.io/pod.name\"`: `pod.Name`\n- `\"csi.storage.k8s.io/pod.namespace\"`: `pod.Namespace`\n- `\"csi.storage.k8s.io/pod.uid\"`: `string(pod.UID)`\n- `\"csi.storage.k8s.io/ephemeral\"`: `true` iff the volume is an ephemeral inline volume defined by a `CSIVolumeSource`, otherwise `false`\n- `\"csi.storage.k8s.io/ephemeral\"`: A new feature in Kubernetes 1.16. It is only required for drivers which support both the `\"Persistent\"` and `\"Ephemeral\"` `volumeLifecycleMode`. Other drivers can leave Pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\n",
          "type": "boolean"
        },
        "storageCapacity": {
          "default": false,
          "description": "If set to `true`, `storageCapacity` indicates that the CSI volume driver wants Pod scheduling to consider the storage capacity that the driver deployment will report by creating `CSIStorageCapacity` objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable `CSIStorageCapacity` object.\n\nAlternatively, the driver can be deployed with the field unset or `false` and it can be flipped later when storage capacity information has been published.\n\nThis is an Alpha field and only available when the `CSIStorageCapacity` feature is enabled.",
          "type": "boolean"
        },
        "volumeLifecycleModes": {
          "default": [
            "Persistent"
          ],
          "description": "This defines what kind of volumes this CSI volume driver supports. The default if the list is empty is `[\"Persistent\"]`, which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is `\"Ephemeral\"`. In this mode, volumes are defined inline inside the Pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that Pod. A driver has to be aware of this because it is only going to get a `NodePublishVolume()` call for such a volume. For more information about implementing this mode, see [CSI doc](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html). A driver can support one or more of these modes and more modes may be added in the future. This field is Beta-level.",
          "items": {
            "enum": [
              "Ephemeral",
              "Persistent"
            ],
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-list-type": "set"
        }
      },
      "required": [
        "attachRequired",
        "podInfoOnMount"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.CSINode.CREATE": {
      "description": "CSINode holds information about all CSI drivers installed on a Node. CSI drivers do not need to create the CSINode object directly. As long as they use the `\"node-driver-registrar\"` sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a Node. If the object is missing, it means either there are no CSI Drivers available on the Node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be the Kubernetes Node name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSINode.GET": {
      "description": "CSINode holds information about all CSI drivers installed on a Node. CSI drivers do not need to create the CSINode object directly. As long as they use the `\"node-driver-registrar\"` sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a Node. If the object is missing, it means either there are no CSI Drivers available on the Node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSINode.UPDATE": {
      "description": "CSINode holds information about all CSI drivers installed on a Node. CSI drivers do not need to create the CSINode object directly. As long as they use the `\"node-driver-registrar\"` sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a Node. If the object is missing, it means either there are no CSI Drivers available on the Node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be the Kubernetes Node name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSINodeDriver": {
      "description": "Information about the specification of one CSI driver installed on a Node",
      "properties": {
        "allocatable": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeNodeResources",
          "description": "The volume resources of a Node that are available for scheduling. This field is Beta-level."
        },
        "name": {
          "description": "The name of the CSI driver that this object refers to. This **MUST** be the same name returned by the CSI `GetPluginName()` call for that driver. The value must be a valid DNS subdomain. The name must be unique in the same CSINode.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeID": {
          "description": "ID of the Node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for Nodes. For example, Kubernetes may refer to a given Node as `\"node1\"`, but the storage system may refer to the same node as `\"nodeA\"`. When Kubernetes issues a command to the storage system to attach a volume to a specific Node, it can use this field to refer to the Node name using the ID that the storage system will understand, e.g. `\"nodeA\"` instead of `\"node1\"`.",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "topologyKeys": {
          "description": "The list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. `\"company.com/zone\"`, `\"company.com/region\"`). When a driver is initialized on a Node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own Node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the Node object and pass back to the driver. It is possible for different Nodes to use different topology keys. This can be empty if driver does not support topology.",
          "items": {
            "description": "The key must be a qualified name",
            "minLength": 1,
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "name",
        "nodeID"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.CSINodeList": {
      "description": "A list of CSINode objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CSINode objects",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINodeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINodeList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.CSINodeSpec": {
      "description": "Information about the specification of all CSI drivers installed on a Node",
      "properties": {
        "drivers": {
          "description": "A list of information of all CSI Drivers existing on a Node. If all drivers in the list are uninstalled, this can become empty. Items in the list must have unique names.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeDriver"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "drivers"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.StorageClass.CREATE": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in `matadata.name`.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the Node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. `[\"ro\", \"soft\"]`. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this StorageClass. Keys cannot be empty. The total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "maxItems": 512,
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy. It is up to the volume plugin to reject provisioning for StorageClasses with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound.\n\n- `\"Immediate\"`: this indicates that PersistentVolumeClaims should be immediately provisioned and bound;\n- `\"WaitForFirstConsumer\"`: this indicates that PersistentVolumeClaims should not be provisioned and bound until the first Pod is created that references the PersistentVolumeClaim. The volume provisioning and binding will occur during Pod scheduling.\n\nThis field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClass.GET": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in `matadata.name`.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the Node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. `[\"ro\", \"soft\"]`. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this StorageClass. Keys cannot be empty. The total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "maxItems": 512,
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy. It is up to the volume plugin to reject provisioning for StorageClasses with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClass.UPDATE": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in `matadata.name`.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the Node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. `[\"ro\", \"soft\"]`. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this StorageClass. Keys cannot be empty. The total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "maxItems": 512,
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy. It is up to the volume plugin to reject provisioning for StorageClasses with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.StorageClassList": {
      "description": "A list of StorageClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of StorageClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment.CREATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment.GET": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus",
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachment.UPDATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachmentList": {
      "description": "A list of VolumeAttachment objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of VolumeAttachment objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachmentList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSource": {
      "description": "A volume that should be attached. Only PersistenVolumes can be attached via external attacher. Exactly one member can be set.",
      "properties": {
        "inlineVolumeSpec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "Information for attaching a persistent volume defined by a Pod's inline VolumeSource. This field is populated only for the `CSIMigration` feature. It contains translated fields from a Pod's inline VolumeSource to a PersistentVolumeSpec. This field is Alpha-level and is only honored by servers that enabled the `CSIMigration` feature."
        },
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach. The name must be a valid DNS subdomain. This must be specified when the `CSIMigration` feature gate is not enabled.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "persistentVolumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentSpec": {
      "description": "The specification of a VolumeAttachment request.",
      "properties": {
        "attacher": {
          "description": "The name of the volume driver that must handle this request. This is the name returned by `GetPluginName()`. The value must be a valid DNS subdomain.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to. The value must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSource",
          "description": "The volume that should be attached."
        }
      },
      "required": [
        "attacher",
        "nodeName",
        "source"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeAttachmentStatus": {
      "description": "The status of a VolumeAttachment request.",
      "properties": {
        "attachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError",
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Upon successful attach operation, this field is populated with information returned by the `attach` operation that must be passed into subsequent `WaitForAttach` or `Mount` calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. The maximum size of the map is 256 KB.",
          "type": "object"
        },
        "detachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeError",
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "attached"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeError": {
      "description": "An error encountered during a volume operation.",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during `attach` or `detach` operation. This string may be logged, so it should not contain sensitive information.",
          "maxLength": 1024,
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time the error was encountered."
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1.VolumeNodeResources": {
      "description": "A set of resource limits for the scheduling of volumes.",
      "properties": {
        "count": {
          "description": "Maximum number of unique volumes managed by the CSI driver that can be used on a Node. A volume that is both attached and mounted on a Node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple Pods on the same Node. If this field is not specified, then the supported number of volumes on this Node is unbounded.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachment.CREATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachment.GET": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus",
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachment.UPDATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachmentList": {
      "description": "A list of VolumeAttachment objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1alpha1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of VolumeAttachment objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachmentList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1alpha1"
        }
      ]
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachmentSource": {
      "description": "A volume that should be attached. Only PersistenVolumes can be attached via external attacher. Exactly one member can be set.",
      "properties": {
        "inlineVolumeSpec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "Information for attaching a persistent volume defined by a Pod's inline VolumeSource. This field is populated only for the `CSIMigration` feature. It contains translated fields from a Pod's inline VolumeSource to a PersistentVolumeSpec. This field is Beta-level and is only honored by servers that enabled the `CSIMigration` feature."
        },
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach. The name must be a valid DNS subdomain. This must be specified when the `CSIMigration` feature gate is not enabled.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "persistentVolumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachmentSpec": {
      "description": "The specification of a VolumeAttachment request.",
      "properties": {
        "attacher": {
          "description": "The name of the volume driver that must handle this request. This is the name returned by `GetPluginName()`. The value must be a valid DNS subdomain.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to. The value must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentSource",
          "description": "The volume that should be attached."
        }
      },
      "required": [
        "attacher",
        "nodeName",
        "source"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1alpha1.VolumeAttachmentStatus": {
      "description": "The status of a VolumeAttachment request.",
      "properties": {
        "attachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeError",
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Upon successful attach operation, this field is populated with information returned by the `attach` operation that must be passed into subsequent `WaitForAttach` or `Mount` calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. The maximum size of the map is 256 KB.",
          "type": "object"
        },
        "detachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeError",
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "attached"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1alpha1.VolumeError": {
      "description": "An error encountered during a volume operation.",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during `attach` or `detach` operation. This string may be logged, so it should not contain sensitive information.",
          "maxLength": 1024,
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time the error was encountered."
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.CSIDriver.CREATE": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the \"cluster-driver-registrar\" sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach/detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` **must** be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`\"[a-z0-9A-Z]\"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriver.GET": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the \"cluster-driver-registrar\" sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach/detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The `name` indicates the name of the CSI driver that this object refers to. It **must** be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`\"[a-z0-9A-Z]\"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriver.UPDATE": {
      "description": "CSIDriver captures information about a Container Storage Interface (CSI) volume driver. CSI drivers do not need to create the CSIDriver object directly. Instead they may use the \"cluster-driver-registrar\" sidecar container. When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver. Kubernetes attach/detach controller uses this object to determine whether attach is required. Kubelet uses this object to determine whether Pod information needs to be passed on mount. CSIDriver objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriver"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` **must** be the same name returned by the CSI `GetPluginName()` call for that driver. The driver name must be 63 characters or less, beginning and ending with an alphanumeric character (`\"[a-z0-9A-Z]\"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverSpec",
          "description": "Specification of the CSI Driver."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriverList": {
      "description": "A list of CSIDriver objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CSIDriver objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSIDriverList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSIDriverList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSIDriverSpec": {
      "description": "The specification of a CSIDriver. The whole spec is immutable.",
      "properties": {
        "attachRequired": {
          "default": true,
          "description": "Flag indicating this CSI volume driver requires an `attach` operation because it implements the CSI `ControllerPublishVolume()` method. The Kubernetes attach/detach controller should call the `attach` volume interface which checks the `volumeattachment` status and waits until the volume is attached before proceeding to mounting. The CSI \"external-attacher\" coordinates with CSI volume driver and updates the `volumeattachment` status when the `attach` operation is complete. If the `CSIDriverRegistry` feature gate is enabled and the value is specified to `false`, the `attach` operation will be skipped. Otherwise the `attach` operation will be called.",
          "type": "boolean"
        },
        "fsGroupPolicy": {
          "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted.\n\n- `\"File\"`: the CSI driver supports volume ownership and permission change via `fsGroup`, and Kubernetes may use `fsGroup` to change permissions and ownership of the volume to match user requested `fsGroup` in the PodSecurityPolicy regardless of fstype or access mode. This mode should be defined if the `fsGroup` is expected to always change on mount.\n- `\"None\"`: Volumes will be mounted without performing any ownership or permission modifications, as the CSIDriver does not support these operations. This mode should be selected if the CSIDriver does not support `fsGroup` modifications. For example, when Kubernetes cannot change ownership and permission on a volume due to root-squash settings on a NFS volume.\n- `\"ReadWriteOnceWithFSType\"`: Each volume will be examined to determine if the volume ownership and permissions should be modified. If a fstype is defined and the volume's access mode contains `\"ReadWriteOnce\"`, then the defined `fsGroup` will be applied. This mode should be defined if it's expected that the `fsGroup` may need to be modified depending on the Pod's security policy. This is the default behavior if no other policy is defined.\n\nThis field is Alpha-level, and is only honored by servers that enable the `CSIVolumeFSGroupPolicy` feature gate.",
          "enum": [
            "File",
            "None",
            "ReadWriteOnceWithFSType"
          ],
          "type": "string"
        },
        "podInfoOnMount": {
          "default": false,
          "description": "If set to `true`, `podInfoOnMount` indicates this CSI volume driver requires additional Pod information (like `\"podName\"`, `\"podUID\"`, etc.) during `mount` operations. If set to `false`, Pod information will not be passed on `mount`. The CSI driver specifies `podInfoOnMount` as part of the driver deployment. If `true`, Kubelet will pass Pod information as `VolumeContext` in the CSI `NodePublishVolume()` calls. The CSI driver is responsible for parsing and validating the information passed in as `VolumeContext`. The following `VolumeConext` will be passed if `podInfoOnMount` is set to `true`. This list might grow, but the prefix will be used.\n\n- `\"csi.storage.k8s.io/pod.name\"`: `pod.Name`\n- `\"csi.storage.k8s.io/pod.namespace\"`: `pod.Namespace`\n- `\"csi.storage.k8s.io/pod.uid\"`: `string(pod.UID)`\n- `\"csi.storage.k8s.io/ephemeral\"`: `true` iff the volume is an ephemeral inline volume defined by a `CSIVolumeSource`, otherwise `false`\n- `\"csi.storage.k8s.io/ephemeral\"`: A new feature in Kubernetes 1.16. It is only required for drivers which support both the `\"Persistent\"` and `\"Ephemeral\"` `volumeLifecycleMode`. Other drivers can leave Pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\n",
          "type": "boolean"
        },
        "storageCapacity": {
          "default": false,
          "description": "If set to `true`, `storageCapacity` indicates that the CSI volume driver wants Pod scheduling to consider the storage capacity that the driver deployment will report by creating `CSIStorageCapacity` objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable `CSIStorageCapacity` object.\n\nAlternatively, the driver can be deployed with the field unset or `false` and it can be flipped later when storage capacity information has been published.\n\nThis is an Alpha field and only available when the `CSIStorageCapacity` feature is enabled.",
          "type": "boolean"
        },
        "volumeLifecycleModes": {
          "default": [
            "Persistent"
          ],
          "description": "This defines what kind of volumes this CSI volume driver supports. The default if the list is empty is `[\"Persistent\"]`, which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is `\"Ephemeral\"`. In this mode, volumes are defined inline inside the Pod spec with CSIVolumeSource and their lifecycle is tied to the lifecycle of that Pod. A driver has to be aware of this because it is only going to get a `NodePublishVolume()` call for such a volume. For more information about implementing this mode, see [CSI doc](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html). A driver can support one or more of these modes and more modes may be added in the future. This field is Beta-level.",
          "items": {
            "enum": [
              "Ephemeral",
              "Persistent"
            ],
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "attachRequired",
        "podInfoOnMount"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.CSINode.CREATE": {
      "description": "CSINode holds information about all CSI drivers installed on a Node. CSI drivers do not need to create the CSINode object directly. As long as they use the `\"node-driver-registrar\"` sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a Node. If the object is missing, it means either there are no CSI Drivers available on the Node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object. *DEPRECATED* - This group version of CSINode is deprecated by `\"storage/v1\"` CSINode.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be the Kubernetes Node name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINode.GET": {
      "description": "CSINode holds information about all CSI drivers installed on a Node. CSI drivers do not need to create the CSINode object directly. As long as they use the `\"node-driver-registrar\"` sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a Node. If the object is missing, it means either there are no CSI Drivers available on the Node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object. *DEPRECATED* - This group version of CSINode is deprecated by `\"storage/v1\"` CSINode.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINode.UPDATE": {
      "description": "CSINode holds information about all CSI drivers installed on a Node. CSI drivers do not need to create the CSINode object directly. As long as they use the `\"node-driver-registrar\"` sidecar container, the kubelet will automatically populate the CSINode object for the CSI driver as part of kubelet plugin registration. CSINode has the same name as a Node. If the object is missing, it means either there are no CSI Drivers available on the Node, or the kubelet version is too low to create this object. CSINode has an `ownerReference` pointing to the corresponding Node object. *DEPRECATED* - This group version of CSINode is deprecated by `\"storage/v1\"` CSINode.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINode"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be the Kubernetes Node name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeSpec",
          "description": "The specification of CSINode"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINodeDriver": {
      "description": "Information about the specification of one CSI driver installed on a Node",
      "properties": {
        "allocatable": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeNodeResources",
          "description": "The volume resources of a Node that are available for scheduling. This field is Beta-level."
        },
        "name": {
          "description": "The name of the CSI driver that this object refers to. This **MUST** be the same name returned by the CSI `GetPluginName()` call for that driver. The value must be a valid DNS subdomain. The name must be unique in the same CSINode.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeID": {
          "description": "ID of the Node from the driver point of view. This field enables Kubernetes to communicate with storage systems that do not share the same nomenclature for Nodes. For example, Kubernetes may refer to a given Node as `\"node1\"`, but the storage system may refer to the same node as `\"nodeA\"`. When Kubernetes issues a command to the storage system to attach a volume to a specific Node, it can use this field to refer to the Node name using the ID that the storage system will understand, e.g. `\"nodeA\"` instead of `\"node1\"`.",
          "maxLength": 128,
          "minLength": 1,
          "type": "string"
        },
        "topologyKeys": {
          "description": "The list of keys supported by the driver. When a driver is initialized on a cluster, it provides a set of topology keys that it understands (e.g. `\"company.com/zone\"`, `\"company.com/region\"`). When a driver is initialized on a Node, it provides the same topology keys along with values. Kubelet will expose these topology keys as labels on its own Node object. When Kubernetes does topology aware provisioning, it can use this list to determine which labels it should retrieve from the Node object and pass back to the driver. It is possible for different Nodes to use different topology keys. This can be empty if driver does not support topology.",
          "items": {
            "description": "The key must be a qualified name",
            "minLength": 1,
            "type": "string"
          },
          "type": "array",
          "uniqueItems": true
        }
      },
      "required": [
        "name",
        "nodeID"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.CSINodeList": {
      "description": "A list of CSINode objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CSINode objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CSINodeList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "CSINodeList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.CSINodeSpec": {
      "description": "Information about the specification of all CSI drivers installed on a Node",
      "properties": {
        "drivers": {
          "description": "A list of information of all CSI Drivers existing on a Node. If all drivers in the list are uninstalled, this can become empty. Items in the list must have unique names.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeDriver"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "name",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "required": [
        "drivers"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.StorageClass.CREATE": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in `matadata.name`.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the Node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. `[\"ro\", \"soft\"]`. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this StorageClass. Keys cannot be empty. The total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "maxItems": 512,
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy. It is up to the volume plugin to reject provisioning for StorageClasses with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound.\n\n- `\"Immediate\"`: this indicates that PersistentVolumeClaims should be immediately provisioned and bound;\n- `\"WaitForFirstConsumer\"`: this indicates that PersistentVolumeClaims should not be provisioned and bound until the first Pod is created that references the PersistentVolumeClaim. The volume provisioning and binding will occur during Pod scheduling.\n\nThis field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.StorageClass.GET": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in `matadata.name`.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the Node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. `[\"ro\", \"soft\"]`. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this StorageClass. Keys cannot be empty. The total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "maxItems": 512,
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy. It is up to the volume plugin to reject provisioning for StorageClasses with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.StorageClass.UPDATE": {
      "description": "The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned. StorageClasses are non-namespaced; the name of the storage class according to etcd is in `matadata.name`.",
      "properties": {
        "allowVolumeExpansion": {
          "description": "Flag indicating whether the storage class allows volume expand",
          "type": "boolean"
        },
        "allowedTopologies": {
          "description": "Restrict the Node topologies where volumes can be dynamically provisioned. Each volume plugin defines its own supported topology specifications. An empty list means there is no topology restriction. This field is only honored by servers that enable the `VolumeScheduling` feature.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.core.v1.TopologySelectorTerm"
          },
          "type": "array"
        },
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClass"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata"
        },
        "mountOptions": {
          "description": "Dynamically provisioned PersistentVolumes of this storage class are created with these mount options, e.g. `[\"ro\", \"soft\"]`. Not validated - mount of the PVs will simply fail if an option is invalid.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "parameters": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "The parameters for the provisioner that creates volumes of this StorageClass. Keys cannot be empty. The total length including keys and values must not exceed 256 KB. This field cannot be updated.",
          "maxItems": 512,
          "type": "object"
        },
        "provisioner": {
          "description": "The type of the provisioner. The value must be a qualified name. This field cannot be updated.",
          "minLength": 1,
          "type": "string"
        },
        "reclaimPolicy": {
          "default": "Delete",
          "description": "Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy. It is up to the volume plugin to reject provisioning for StorageClasses with impossible reclaim policies. This field cannot be updated.",
          "enum": [
            "Delete",
            "Retain"
          ],
          "type": "string"
        },
        "volumeBindingMode": {
          "default": "Immediate",
          "description": "How PersistentVolumeClaims should be provisioned and bound. This field is only honored by servers that enable the `VolumeScheduling` feature. This field cannot be updated.",
          "enum": [
            "Immediate",
            "WaitForFirstConsumer"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "provisioner"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.StorageClassList": {
      "description": "A list of StorageClass objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of StorageClass objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "StorageClassList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "StorageClassList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachment.CREATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name must be a valid DNS subdomain name."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachment.GET": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentStatus",
          "description": "Status of the VolumeAttachment request. Populated by the entity completing the attach or detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachment.UPDATE": {
      "description": "The intent to attach or detach the specified volume to/from the specified Node. VolumeAttachment objects are non-namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachment"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec",
          "description": "Specification of the desired attach/detach volume behavior. Populated by the Kubernetes system. This field cannot be updated."
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentList": {
      "description": "A list of VolumeAttachment objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "storage.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of VolumeAttachment objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "VolumeAttachmentList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachmentList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentSource": {
      "description": "A volume that should be attached. Only PersistenVolumes can be attached via external attacher. Exactly one member can be set.",
      "properties": {
        "inlineVolumeSpec": {
          "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec",
          "description": "Information for attaching a persistent volume defined by a Pod's inline VolumeSource. This field is populated only for the `CSIMigration` feature. It contains translated fields from a Pod's inline VolumeSource to a PersistentVolumeSpec. This field is Beta-level and is only honored by servers that enabled the `CSIMigration` feature."
        },
        "persistentVolumeName": {
          "description": "Name of the persistent volume to attach. The name must be a valid DNS subdomain. This must be specified when the `CSIMigration` feature gate is not enabled.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "persistentVolumeName"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentSpec": {
      "description": "The specification of a VolumeAttachment request.",
      "properties": {
        "attacher": {
          "description": "The name of the volume driver that must handle this request. This is the name returned by `GetPluginName()`. The value must be a valid DNS subdomain.",
          "maxLength": 63,
          "minLength": 1,
          "type": "string"
        },
        "nodeName": {
          "description": "The node that the volume should be attached to. The value must be a valid DNS subdomain.",
          "minLength": 1,
          "type": "string"
        },
        "source": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSource",
          "description": "The volume that should be attached."
        }
      },
      "required": [
        "attacher",
        "nodeName",
        "source"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.VolumeAttachmentStatus": {
      "description": "The status of a VolumeAttachment request.",
      "properties": {
        "attachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError",
          "description": "The last error encountered during attach operation, if any. This field must only be set by the entity completing the attach operation, i.e. the external-attacher."
        },
        "attached": {
          "description": "Indicates the volume is successfully attached. This field must only be set by the entity completing the attach operation, i.e. the external-attacher.",
          "type": "boolean"
        },
        "attachmentMetadata": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Upon successful attach operation, this field is populated with information returned by the `attach` operation that must be passed into subsequent `WaitForAttach` or `Mount` calls. This field must only be set by the entity completing the attach operation, i.e. the external-attacher. The maximum size of the map is 256 KB.",
          "type": "object"
        },
        "detachError": {
          "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeError",
          "description": "The last error encountered during detach operation, if any. This field must only be set by the entity completing the detach operation, i.e. the external-attacher."
        }
      },
      "required": [
        "attached"
      ],
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.VolumeError": {
      "description": "An error encountered during a volume operation.",
      "properties": {
        "message": {
          "description": "String detailing the error encountered during `attach` or `detach` operation. This string may be logged, so it should not contain sensitive information.",
          "maxLength": 1024,
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Time the error was encountered."
        }
      },
      "type": "object"
    },
    "io.k8s.api.storage.v1beta1.VolumeNodeResources": {
      "description": "A set of resource limits for the scheduling of volumes.",
      "properties": {
        "count": {
          "description": "Maximum number of unique volumes managed by the CSI driver that can be used on a Node. A volume that is both attached and mounted on a Node is considered to be used once, not twice. The same rule applies for a unique volume that is shared among multiple Pods on the same Node. If this field is not specified, then the supported number of volumes on this Node is unbounded.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition": {
      "description": "A column for server side printing.",
      "properties": {
        "description": {
          "description": "A human readable description of the column.",
          "type": "string"
        },
        "format": {
          "description": "An OpenAPI type definition for this column. The `\"name\"` format is applied to the primary identifier column to assist in clients identifying column for the resource name.",
          "enum": [
            "byte",
            "date",
            "date-time",
            "double",
            "float",
            "int32",
            "int64",
            "password"
          ],
          "type": "string"
        },
        "jsonPath": {
          "description": "A simple JSON path (i.e. with array notation) which is evaluated against each custom resource to produce the value for this column. A valid JSON path always starts with `'.'`.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "A human readable name for the column.",
          "minLength": 1,
          "type": "string"
        },
        "priority": {
          "description": "An integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a priority greater than 0.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "An OpenAPI type definition for this column.",
          "enum": [
            "boolean",
            "date",
            "integer",
            "number",
            "string"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "jsonPath",
        "name",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion": {
      "description": "This describes how to convert different versions of a CustomResource.",
      "properties": {
        "strategy": {
          "description": "The conversion strategy.\n\n- `\"None\"` means the converter only change the `\"apiVersion\"` and would not touch any other fields in the CustomResource;\n- `\"Webhook\"` means that the API server will call an external webhook to do the conversion. Additional information is specified in `webhook`. This requires `preserveUnknownFields` to be `false` and `spec.conversion.webhook` to be set.\n\nIf `spec.preserveUnknownFields` is `true`, this must be `\"None\"`.",
          "enum": [
            "None",
            "Webhook"
          ],
          "minLength": 1,
          "type": "string"
        },
        "webhook": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion",
          "description": "This describes how to call the conversion webhook. Required when `strategy` is set to \"`Webhook`\"."
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.CREATE": {
      "description": "A resource that should be exposed on the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name MUST be in the format `\"<.spec.names.plural>.<.spec.group>\"`. The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET": {
      "description": "A resource that should be exposed on the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata"
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE": {
      "description": "A resource that should be exposed on the API server.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name MUST be in the format `\"<.spec.names.plural>.<.spec.group>\"`. The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition": {
      "description": "Details for the current condition of a resource.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.\n\n- `\"Established\"`: The resource has become active. A resource is established when all names are accepted without a conflict for the first time. A resource stays established until deleted, even during a later `\"NamesAccepted\"` due to changed names. Note that not all names can be changed.\n- `\"NamesAccepted\"`: The names chosen for this CustomResourceDefinition do not conflict with others in the group and are therefore accepted.\n- `\"NoStructuralSchema\"`: This means that one or more OpenAPI schema is not structural. A schema is structural if it specifies types for all values, with the only exceptions of those with `x-kubernetes-int-or-string: true`(for fields which can be either integer or string), or `x-kubernetes-preserve-unknown-fields: true` (for raw, unspecified JSON values). In a structural schema, there is no `type`, `additionalProperties`, `nullable` or `x-kubernetes-*` vendor extensions specified under `allOf`, `anyOf`, `oneOf` or `not`. In the v1 API version, non-structural schemas are not allowed.\n- `\"Terminating\"`: This means the CustomResourceDefinition has been deleted and is cleaning up.\n- `\"KubernetesAPIApprovalPolicyConformant\"`: This indicates that an API in `\"*.k8s.io\"` or `\"*.kubernetes.io\"` is or is not approved. For CRDs outside tohse groups, this condition will not be set. For CRDs inside those groups, the condition will be true if `.metadata.annotations[\"api-approved.kubernetes.io\"]` is set to a URL, othersise it will be false.\n",
          "enum": [
            "Established",
            "KubernetesAPIApprovalPolicyConformant",
            "NamesAccepted",
            "NoStructuralSchema",
            "Terminating"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList": {
      "description": "A list of CustomResourceDefinition objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CustomResourceDefinition objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinitionList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinitionList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames": {
      "description": "The names to serve this CustomResourceDefinition",
      "properties": {
        "categories": {
          "description": "A list of grouped resources this custom resource belongs to (e.g. `\"all\"`). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`. Each entry must be a valid DNS label.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource. The string can be mixed case, but should other wise be a valid DNS label. The value must be different from `listKind`.",
          "minLength": 1,
          "type": "string"
        },
        "listKind": {
          "description": "The serialized `kind` of the list for this resource. The string can be mixed case, but should otherwise be a valid DNS label. The value must be different from `kind`. Defaults to \"`kind`List\".",
          "minLength": 1,
          "type": "string"
        },
        "plural": {
          "description": "The plural name of the resource to serve. The custom resources are served under `\"/apis/<group>/<version>/.../<plural>\"`. It must match the name of the CustomResourceDefinition (in the form `\"<names.plural>.<group>\"`). Must be all lowercase. The value must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "shortNames": {
          "description": "Short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. Each must be all lowercase and valid DNS labels.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singular": {
          "description": "The singular name of the resource. It must be all lowercase and valid DNS label. Defaults to lowercased `kind`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "listKind",
        "plural",
        "singular"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec": {
      "description": "This describes how a user wants their resource to appear",
      "properties": {
        "conversion": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion",
          "description": "The conversion settings for the CRD."
        },
        "group": {
          "description": "The API group of the defined custom resource. The custom resources are served under `\"/apis/<group>/...\"`. Must match the name of the CustomResourceDefinition (in the form `\"<names.plural>.<group>\"`). The value must be a valid DNS subdomain and it must contain at least one dot.",
          "minLength": 1,
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
          "description": "The resource and kind names for the custom resource."
        },
        "preserveUnknownFields": {
          "default": false,
          "description": "This indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. `apiVersion`, `kind`, `metadata` and known fields inside `metadata` are always preserved. This field is *DEPRECATED* in favor of setting `x-preserve-unknown-fields` to `true` in `spec.versions[*].schema.openAPIV3Schema`. If this field is set to `true`, the OpenAPI schema is mandatory. If this field is nil or `false`, the OpenAPI schema is required for the served versions, or else all fields may get pruned. This field must be `false` in order to use defaults in the OpenAPI schema.",
          "type": "boolean"
        },
        "scope": {
          "description": "This indicates whether the defined custom resource is cluster- or namespace-scoped.",
          "enum": [
            "Cluster",
            "Namespaced"
          ],
          "type": "string"
        },
        "versions": {
          "description": "The list of all supported versions for this resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as '`beta`' or '`alpha`'), and then by comparing major version, then minor version. An example sorted list of versions: '`v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "group",
        "names",
        "scope",
        "versions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus": {
      "description": "The state of the CustomResourceDefinition",
      "properties": {
        "acceptedNames": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
          "description": "The names that are actually used to serve discovery. They may be different than the `names` in the `spec`."
        },
        "conditions": {
          "description": "The state for particular aspect of the CustomResourceDefinition",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition"
          },
          "type": "array"
        },
        "storedVersions": {
          "description": "A list of all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in the storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "acceptedNames",
        "storedVersions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion": {
      "description": "A version for CustomResourceDefinition.",
      "properties": {
        "additionalPrinterColumns": {
          "description": "Additional columns returned in table output. If no columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition"
          },
          "type": "array"
        },
        "deprecated": {
          "default": false,
          "description": "This indicates this version of the custom resource API is deprecated. When set to `true`, API requests to this version receive a warning header in the server response.",
          "type": "boolean"
        },
        "deprecationWarning": {
          "description": "This overrides the default warning returned to API clients. May only be set when `deprecated` is `true`. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists. This string may only contain printable UTF-8 characters.",
          "maxLength": 256,
          "minLenght": 1,
          "type": "string"
        },
        "name": {
          "description": "The version name, e.g. `\"v1\"`, `\"v2beta1\"`, etc. The custom resources are served under this version at `\"/apis/<group>/<version>/...\"` if `served` is `true`. The value must be a valid DNS label and it must be unique among all versions.",
          "minLength": 1,
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation",
          "description": "The schema used for validation, pruning, and defaulting of this version of the custom resource."
        },
        "served": {
          "description": "A flag enabling/disabling this version to be served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "This flag indicates that this version should be used when persisting custom resources to storage. There must be exactly one version with `storage` set to `true`.",
          "type": "boolean"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources",
          "description": "What subresources this version of the defined custom resource have."
        }
      },
      "required": [
        "name",
        "served",
        "storage"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale": {
      "description": "This defines how to serve the `scale` subresource for CustomResources.",
      "properties": {
        "labelSelectorPath": {
          "description": "The JSON path inside a custom resource that corresponds to `scale.status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to an empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "The JSON path inside a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "minLength": 1,
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "The JSON path inside a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus": {
      "description": "This defines how to serve the `status` subresource for CustomResources. Status is represented by the `.status` JSON path inside a CustomResource. When set, the server exposes a `/status` subresource for the custom resource. PUT requests to the `/status` subresource take a custom resource object, and ignore changes to anything except the status stanza. PUT/POST/PATCH requests to the custom resource ignore changes to the `status` stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources": {
      "description": "The `status` and `scale` subresources for CustomResources.",
      "properties": {
        "scale": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale",
          "description": "This indicates that the custom resource should serve a `/scale` subresource that returns an `\"autoscaling/v1\"` Scale object."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus",
          "description": "This indicates the custom resource should serve a `/status` subresource. When enabled, requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object, requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation": {
      "description": "A list of validation methods for CustomResources.",
      "properties": {
        "openAPIV3Schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps",
          "description": "The OpenAPI v3 schema to use for validation and pruning. If the `status` subresource is enabled, the root of the schema must be a `\"object\"` and it can only contain fields like `\"description\"`, `\"type\"`, `\"format\"`, `\"title\"`, `\"maximum\"`, `\"exclusiveMaximum\"`, `\"minimum\"`, `\"exclusiveMinimum\"`, `\"maxLength\"`, `\"minLength\"`, `\"pattern\"`, `\"maxItems\"`, `\"minItems\"`, `\"uniqueItems\"`, `\"multipleOf\"`, `\"required\"`, `\"items\"`, `\"properties\"`, `\"externalDocs\"`, `\"example\"`, `\"x-preserve-unknown-fields\"`. The root element cannot be nullable."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation": {
      "description": "Reference to an external resource for extended documentation.",
      "properties": {
        "description": {
          "description": "A short description of the target documentation. CommonMark syntax MAY be used for rich text representation.",
          "type": "string"
        },
        "url": {
          "description": "The URL for the target documentation. Value MUST be in the format of a URL.",
          "type": "string"
        }
      },
      "required": [
        "url"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON": {
      "description": "This represents any valid JSON value. These types are supported: `bool`, `int64`, `float64`, `string`, `array`, `object` and `none`."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps": {
      "description": "A JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "properties": {
        "$ref": {
          "description": "Reference to another definition in the specification.",
          "type": "string"
        },
        "$schema": {
          "description": "Inlined schema for a property.",
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool",
          "description": "A struct for additional items or a boolean indicating whether additional items are allowed."
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool",
          "description": "The map definition of a property or a boolean indicating whether additional properties are allowed. This is mutual exclusive to `properties` because otherwise they contradict Kubernetes's API convention to ignore unknown fields."
        },
        "allOf": {
          "description": "A key indicating the union of all items listed are part of the definition.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array"
        },
        "anyOf": {
          "description": "A key indicating the subset of provided items are part of the definition.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array"
        },
        "default": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON",
          "description": "A default value for undefined object fields. Defaulting is a Beta feature under the `CustomResourceDefaulting` feature gate. Defaulting requires `spec.preserveUnknownFields` to be false."
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray"
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
          },
          "type": "array"
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "format": "int64",
          "type": "integer"
        },
        "maxLength": {
          "format": "int64",
          "type": "integer"
        },
        "maxProperties": {
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "format": "double",
          "type": "number"
        },
        "minItems": {
          "format": "int64",
          "type": "integer"
        },
        "minLength": {
          "format": "int64",
          "type": "integer"
        },
        "minProperties": {
          "format": "int64",
          "type": "integer"
        },
        "minimum": {
          "format": "double",
          "type": "number"
        },
        "multipleOf": {
          "format": "double",
          "type": "number"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "array"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps"
          },
          "type": "object"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "A human readable description for the property.",
          "type": "string"
        },
        "type": {
          "description": "The type of the property.",
          "type": "string"
        },
        "uniqueItems": {
          "description": "A flag indicating whether items are treated as unique in a map. This cannot be `true` because the runtime doesn't support it.",
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "This flag indicates that the value is an embedded Kubernetes `runtime.Object`, with `TypeMeta` and `ObjectMeta`. The type must be `\"object\"`. It is allowed to further restrict the embedded object. `kind`, `apiVersion` and `metadata` are validated automatically. `x-kubernetes-preserve-unknown-fields` is allowed to be true, but does not have to be if the object is fully specified (up to `kind`, `apiVersion`, `metadata`).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "This flag indicates that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of `\"anyOf\"` is permitted if following one of the following patterns:\n\n1. `\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"}]`\n1. `\"allOf\": [{\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"} ...]}]`\n",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "This annotates an array with the `x-kubernetes-list-type: map` by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to `\"map\"`. Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). The properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "x-kubernetes-list-type": {
          "description": "This annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1. `\"atomic\"`: the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...).\n1. `\"set\"`: Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with `x-kubernetes-map-type: atomic` or an array with `x-kubernetes-list-type: atomic`.\n1. `\"map\"`: These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type `\"object\"`. Defaults to `\"atomic\"` for arrays.",
          "enum": [
            "atomic",
            "map",
            "set"
          ],
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "This annotates an object to further describe its topology. This extension must only be used when type is `\"object\"` and may have 2 possible values:\n\n1. `\"granular\"`: These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps.\n1. `\"atomic\"`: the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated.",
          "enum": [
            "atomic",
            "granular"
          ],
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "This flag stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested `properties` or `additionalProperties` are specified in the schema. This can either be true or undefined. False means forbidden.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray": {
      "description": "A value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool": {
      "description": "A JSONSchemaProps or a boolean value. Defaults to `true` for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray": {
      "description": "A JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference": {
      "description": "A reference to a Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An URL path at which the webhook will be contacted. The path must start with a `'/'` and it cannot be `\"//\"`.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "An optional service port at which the webhook will be contacted.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig": {
      "description": "Information to make a TLS connection with a webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference",
          "description": "A reference to the Service for this webhook."
        },
        "url": {
          "description": "The location of the webhook, in standard URL form (`\"scheme://host:port/path\"`). The `host` should not refer to a Service running in the cluster; use the `service` field instead. The `host` might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using `\"localhost\"` or `\"127.0.0.1\"` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be `\"https\"`. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. `\"user:password@\"` is not allowed. Fragments (`\"#...\"`) and query parameters (`\"?...\"`) are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion": {
      "description": "This describes how to call a conversion webhook",
      "properties": {
        "clientConfig": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig",
          "description": "The instructions for calling the webhook if strategy is `\"Webhook\"`. This cannot be set if the conversion strategy is not `\"Webhook\"`."
        },
        "conversionReviewVersions": {
          "description": "An ordered list of preferred `ConversionReview` versions the Webhook expects. The API server will use the first version in the list which it supports. If none of the versions specified in this list are supported by API server, conversion will fail for the custom resource. If a persisted webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail. The acceptable versions are [`\"v1\"`, `\"v1beta1\"`].",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "conversionReviewVersions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition": {
      "description": "A column for server side printing.",
      "properties": {
        "JSONPath": {
          "description": "A simple JSON path, i.e. with array notation.",
          "minLength": 1,
          "type": "string"
        },
        "description": {
          "description": "A human readable description of the column.",
          "type": "string"
        },
        "format": {
          "description": "An OpenAPI type definition for this column. The `\"name\"` format is applied to the primary identifier column to assist in clients identifying column for the resource name.",
          "enum": [
            "byte",
            "date",
            "date-time",
            "double",
            "float",
            "int32",
            "int64",
            "password"
          ],
          "type": "string"
        },
        "name": {
          "description": "A human readable name for the column.",
          "minLength": 1,
          "type": "string"
        },
        "priority": {
          "description": "An integer defining the relative importance of this column compared to others. Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios should be given a higher priority.",
          "format": "int32",
          "type": "integer"
        },
        "type": {
          "description": "An OpenAPI type definition for this column.",
          "enum": [
            "boolean",
            "date",
            "integer",
            "number",
            "string"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "JSONPath",
        "name",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion": {
      "description": "This describes how to convert different versions of a CustomResource.",
      "properties": {
        "conversionReviewVersions": {
          "default": [
            "v1beta1"
          ],
          "description": "An ordered list of preferred conversion review versions the Webhook expects. API server will try to use first version in the list which it supports. If none of the versions specified in this list supported by API server, conversion will fail for this object. If a persisted Webhook configuration specifies allowed versions and does not include any versions known to the API Server, calls to the webhook will fail.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "strategy": {
          "description": "The conversion strategy.\n\n- `\"None\"` means the converter only change the `\"apiVersion\"` and would not touch any other fields in the CustomResource;\n- `\"Webhook\"` means that the API server will call an external webhook to do the conversion. Additional information is specified in `webhookClientConfig`. This requires the `preserveUnknownFields` to be false.",
          "enum": [
            "None",
            "Webhook"
          ],
          "minLength": 1,
          "type": "string"
        },
        "webhookClientConfig": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig",
          "description": "This describes how to call the conversion webhook. Required when `strategy` is set to `\"Webhook\"`."
        }
      },
      "required": [
        "strategy"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.CREATE": {
      "description": "A resource that should be exposed on the API server. *DEPRECATED* in v1.16, planned for removal in v1.22. Use `\"apiextensions.k8s.io/v1\"` CustomResourceDefinition instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The name MUST be in the format `\"<.spec.names.plural>.<.spec.group>\"`. The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET": {
      "description": "A resource that should be exposed on the API server. *DEPRECATED* in v1.16, planned for removal in v1.22. Use `\"apiextensions.k8s.io/v1\"` CustomResourceDefinition instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The name MUST be in the format `\"<.spec.names.plural>.<.spec.group>\"`. The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus",
          "description": "The actual state of the CustomResourceDefinition"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.UPDATE": {
      "description": "A resource that should be exposed on the API server. *DEPRECATED* in v1.16, planned for removal in v1.22. Use `\"apiextensions.k8s.io/v1\"` CustomResourceDefinition instead.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinition"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The name MUST be in the format `\"<.spec.names.plural>.<.spec.group>\"`. The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec",
          "description": "How the user wants the resources to appear"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition": {
      "description": "Details for the current condition of a resource.",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition.",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "The type of the condition.\n\n- `\"Established\"`: The resource has become active. A resource is established when all names are accepted without a conflict for the first time. A resource stays established until deleted, even during a later `\"NamesAccepted\"` due to changed names. Note that not all names can be changed.\n- `\"NamesAccepted\"`: The names chosen for this CustomResourceDefinition do not conflict with others in the group and are therefore accepted.\n- `\"NoStructuralSchema\"`: This means that one or more OpenAPI schema is not structural. A schema is structural if it specifies types for all values, with the only exceptions of those with `x-kubernetes-int-or-string: true`(for fields which can be either integer or string), or `x-kubernetes-preserve-unknown-fields: true` (for raw, unspecified JSON values). In a structural schema, there is no `type`, `additionalProperties`, `nullable` or `x-kubernetes-*` vendor extensions specified under `allOf`, `anyOf`, `oneOf` or `not`. In the v1 API version, non-structural schemas are not allowed.\n- `\"Terminating\"`: This means the CustomResourceDefinition has been deleted and is cleaning up.\n- `\"KubernetesAPIApprovalPolicyConformant\"`: This indicates that an API in `\"*.k8s.io\"` or `\"*.kubernetes.io\"` is or is not approved. For CRDs outside tohse groups, this condition will not be set. For CRDs inside those groups, the condition will be true if `.metadata.annotations[\"api-approved.kubernetes.io\"]` is set to a URL, othersise it will be false.\n",
          "enum": [
            "Established",
            "KubernetesAPIApprovalPolicyConformant",
            "NamesAccepted",
            "NoStructuralSchema",
            "Terminating"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList": {
      "description": "A list of CustomResourceDefinition objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiextensions.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of CustomResourceDefinition objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "CustomResourceDefinitionList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinitionList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames": {
      "description": "The names to serve this CustomResourceDefinition",
      "properties": {
        "categories": {
          "description": "A list of grouped resources this custom resource belongs to (e.g. `\"all\"`). This is published in API discovery documents, and used by clients to support invocations like `kubectl get all`. Each entry must be a valid DNS label.",
          "items": {
            "minLength": 1,
            "type": "string"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource. The string can be mixed case, but should other wise be a valid DNS label. The value must be different from `listKind`.",
          "minLength": 1,
          "type": "string"
        },
        "listKind": {
          "description": "The serialized `kind` of the list for this resource. The string can be mixed case, but should otherwise be a valid DNS label. The value must be different from `kind`. Defaults to \"`kind`List\".",
          "minLength": 1,
          "type": "string"
        },
        "plural": {
          "description": "The plural name of the resource to serve. The custom resources are served under `\"/apis/<group>/<version>/.../<plural>\"`. It must match the name of the CustomResourceDefinition (in the form `\"<names.plural>.<group>\"`). Must be all lowercase. The value must be a valid DNS label.",
          "minLength": 1,
          "type": "string"
        },
        "shortNames": {
          "description": "Short names for the resource, exposed in API discovery documents, and used by clients to support invocations like `kubectl get <shortname>`. Each must be all lowercase and valid DNS labels.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singular": {
          "description": "The singular name of the resource. It must be all lowercase and valid DNS label. Defaults to lowercased `kind`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "kind",
        "listKind",
        "plural",
        "singular"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionSpec": {
      "description": "This describes how a user wants their resource to appear",
      "properties": {
        "additionalPrinterColumns": {
          "description": "Additional columns returned in table output. If present, this field configures columns for all versions. Top-level and per-version columns are mutually exclusive. If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
          },
          "type": "array"
        },
        "conversion": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceConversion",
          "description": "The conversion settings for the CRD."
        },
        "group": {
          "description": "The API group of the defined custom resource. The custom resources are served under `\"/apis/<group>/...\"`. Must match the name of the CustomResourceDefinition (in the form `\"<names.plural>.<group>\"`). The value must be a valid DNS subdomain and it must contain at least one dot.",
          "minLength": 1,
          "type": "string"
        },
        "names": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
          "description": "The resource and kind names for the custom resource."
        },
        "preserveUnknownFields": {
          "default": true,
          "description": "This indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. `apiVersion`, `kind`, `metadata` and known fields inside `metadata` are always preserved. If false, schemas must be defined for all versions. Defaults to `true` in v1beta for backwards compatibility. *DEPRECATED*: will be required to be false in v1. Preservation of unknown fields can be specified in the validation schema using the `\"x-kubernetes-preserve-unknown-fields: true\"` extension.",
          "type": "boolean"
        },
        "scope": {
          "default": "Namespaced",
          "description": "Scope indicates whether this custom resource is cluster or namespace scoped.",
          "enum": [
            "Cluster",
            "Namespaced"
          ],
          "type": "string"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
          "description": "What subresources the defined custom resource has. If present, this field configures subresources for all versions. Top-level and per-version subresources are mutually exclusive."
        },
        "validation": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
          "description": "The schema used for validation and pruning of the custom resource. If present, this validation schema is used to validate all versions. Top-level and per-version schemas are mutually exclusive."
        },
        "version": {
          "description": "The API version of the defined custom resource. The custom resources are served under `/apis/<group>/<version>/...`. Must match the name of the first item in the `versions` list if `version` and `versions` are both specified. Optional if `versions` is specified. *DEPRECATED*: use `versions` instead.",
          "type": "string"
        },
        "versions": {
          "description": "The list of all supported versions for this resource. If `version` field is provided, this field is optional. All versions must use the same validation schema for now. i.e., top level `validation` field is applied to all of these `versions`. The version `name` will be used to compute the order. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as '`beta`' or '`alpha`'), and then by comparing major version, then minor version. An example sorted list of versions: '`v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10`'.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion"
          },
          "type": "array"
        }
      },
      "required": [
        "group",
        "names",
        "scope"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionStatus": {
      "description": "The state of the CustomResourceDefinition",
      "properties": {
        "acceptedNames": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionNames",
          "description": "The names that are actually used to serve discovery. They may be different than the `names` in the `spec`."
        },
        "conditions": {
          "description": "The state for particular aspect of the CustomResourceDefinition",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionCondition"
          },
          "type": "array"
        },
        "storedVersions": {
          "description": "A list of all versions of CustomResources that were ever persisted. Tracking these versions allows a migration path for stored versions in etcd. The field is mutable so a migration controller can finish a migration to another version (ensuring no old objects are left in the storage), and then remove the rest of the versions from this list. Versions may not be removed from `spec.versions` while they exist in this list.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "conditions",
        "acceptedNames",
        "storedVersions"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionVersion": {
      "description": "A version for CustomResourceDefinition.",
      "properties": {
        "additionalPrinterColumns": {
          "description": "Additional columns returned in table output. Top-level and per-version columns are mutually exclusive. Per-version columns must not all be set to identical values (top-level columns should be used instead). If no top-level or per-version columns are specified, a single column displaying the age of the custom resource is used.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceColumnDefinition"
          },
          "type": "array"
        },
        "deprecated": {
          "default": false,
          "description": "This indicates this version of the custom resource API is deprecated. When set to `true`, API requests to this version receive a warning header in the server response.",
          "type": "boolean"
        },
        "deprecationWarning": {
          "description": "This overrides the default warning returned to API clients. May only be set when `deprecated` is `true`. The default warning indicates this version is deprecated and recommends use of the newest served version of equal or greater stability, if one exists. This string may only contain printable UTF-8 characters.",
          "maxLength": 256,
          "minLenght": 1,
          "type": "string"
        },
        "name": {
          "description": "The version name, e.g. `\"v1\"`, `\"v2beta1\"`, etc. The custom resources are served under this version at `\"/apis/<group>/<version>/...\"` if `served` is `true`. The value must be a valid DNS label and it must be unique among all versions.",
          "minLength": 1,
          "type": "string"
        },
        "schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation",
          "description": "The schema used for validation and pruning of this version of the custom resource. Top-level and per-version schemas are mutually exclusive. Per-version schemas must not all be set to identical values (top-level validation schema should be used instead)."
        },
        "served": {
          "description": "A flag enabling/disabling this version to be served via REST APIs",
          "type": "boolean"
        },
        "storage": {
          "description": "This flag indicates that this version should be used when persisting custom resources to storage. There must be exactly one version with `storage` set to `true`.",
          "type": "boolean"
        },
        "subresources": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources",
          "description": "The subresources for this version of the defined custom resource. Top-level and per-version subresources are mutually exclusive. Per-version subresources must not all be set to identical values (top-level subresources should be used instead)."
        }
      },
      "required": [
        "name",
        "served",
        "storage"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale": {
      "description": "This defines how to serve the `scale` subresource for CustomResources.",
      "properties": {
        "labelSelectorPath": {
          "description": "The JSON path inside a custom resource that corresponds to `scale.status.selector`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status` or `.spec`. Must be set to work with HorizontalPodAutoscaler. The field pointed by this JSON path must be a string field (not a complex selector struct) which contains a serialized label selector in string form. If there is no value under the given path in the custom resource, the `status.selector` value in the `/scale` subresource will default to an empty string.",
          "type": "string"
        },
        "specReplicasPath": {
          "description": "The JSON path inside a custom resource that corresponds to Scale `spec.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`. If there is no value under the given path in the custom resource, the `/scale` subresource will return an error on GET.",
          "minLength": 1,
          "type": "string"
        },
        "statusReplicasPath": {
          "description": "The JSON path inside a custom resource that corresponds to Scale `status.replicas`. Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`. If there is no value under the given path in the custom resource, the `status.replicas` value in the `/scale` subresource will default to 0.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "specReplicasPath",
        "statusReplicasPath"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus": {
      "description": "This defines how to serve the `status` subresource for CustomResources. Status is represented by the `.status` JSON path inside a CustomResource. When set, the server exposes a `/status` subresource for the custom resource. PUT requests to the `/status` subresource take a custom resource object, and ignore changes to anything except the status stanza. PUT/POST/PATCH requests to the custom resource ignore changes to the `status` stanza",
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresources": {
      "description": "The `status` and `scale` subresources for CustomResources.",
      "properties": {
        "scale": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceScale",
          "description": "This indicates that the custom resource should serve a `/scale` subresource that returns an `\"autoscaling/v1\"` Scale object."
        },
        "status": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceSubresourceStatus",
          "description": "This indicates the custom resource should serve a `/status` subresource. When enabled, requests to the custom resource primary endpoint ignore changes to the `status` stanza of the object, requests to the custom resource `/status` subresource ignore changes to anything other than the `status` stanza of the object."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceValidation": {
      "description": "A list of validation methods for CustomResources.",
      "properties": {
        "openAPIV3Schema": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps",
          "description": "The OpenAPI v3 schema to use for validation and pruning. If the `status` subresource is enabled, the root of the schema must be a `\"object\"` and it can only contain fields like `\"description\"`, `\"type\"`, `\"format\"`, `\"title\"`, `\"maximum\"`, `\"exclusiveMaximum\"`, `\"minimum\"`, `\"exclusiveMinimum\"`, `\"maxLength\"`, `\"minLength\"`, `\"pattern\"`, `\"maxItems\"`, `\"minItems\"`, `\"uniqueItems\"`, `\"multipleOf\"`, `\"required\"`, `\"items\"`, `\"properties\"`, `\"externalDocs\"`, `\"example\"`, `\"x-preserve-unknown-fields\"`. The root element cannot be nullable."
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation": {
      "description": "Reference to an external resource for extended documentation.",
      "properties": {
        "description": {
          "description": "A short description of the target documentation. CommonMark syntax MAY be used for rich text representation.",
          "type": "string"
        },
        "url": {
          "description": "The URL for the target documentation. Value MUST be in the format of a URL.",
          "type": "string"
        }
      },
      "require": [
        "url"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON": {
      "description": "This represents any valid JSON value. These types are supported: `bool`, `int64`, `float64`, `string`, `array`, `object` and `none`."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps": {
      "description": "A JSON-Schema following Specification Draft 4 (http://json-schema.org/).",
      "properties": {
        "$ref": {
          "description": "Reference to another definition in the specification.",
          "type": "string"
        },
        "$schema": {
          "description": "Inlined schema for a property.",
          "type": "string"
        },
        "additionalItems": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool",
          "description": "A struct for additional items or a boolean indicating whether additional items are allowed."
        },
        "additionalProperties": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool",
          "description": "The map definition of a property or a boolean indicating whether additional properties are alloed. This is mutual exclusive to `properties` because otherwise they contradict Kubernetes's API convention to ignore unknown fields."
        },
        "allOf": {
          "description": "A key indicating the union of all items listed are part of the definition.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          },
          "type": "array"
        },
        "anyOf": {
          "description": "A key indicating the subset of provided items are part of the definition.",
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          },
          "type": "array"
        },
        "default": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON",
          "description": "A default value for undefined object fields. Defaulting is a Beta feature under the `CustomResourceDefaulting` feature gate. CustomResourceDefinitions with defaults must be created using the v1 (or newer) CustomResourceDefinition API."
        },
        "definitions": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          },
          "type": "object"
        },
        "dependencies": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray"
          },
          "type": "object"
        },
        "description": {
          "type": "string"
        },
        "enum": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
          },
          "type": "array"
        },
        "example": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSON"
        },
        "exclusiveMaximum": {
          "type": "boolean"
        },
        "exclusiveMinimum": {
          "type": "boolean"
        },
        "externalDocs": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ExternalDocumentation"
        },
        "format": {
          "description": "format is an OpenAPI v3 format string. Unknown formats are ignored. The following formats are validated:\n\n- bsonobjectid: a bson object ID, i.e. a 24 characters hex string - uri: an URI as parsed by Golang net/url.ParseRequestURI - email: an email address as parsed by Golang net/mail.ParseAddress - hostname: a valid representation for an Internet host name, as defined by RFC 1034, section 3.1 [RFC1034]. - ipv4: an IPv4 IP as parsed by Golang net.ParseIP - ipv6: an IPv6 IP as parsed by Golang net.ParseIP - cidr: a CIDR as parsed by Golang net.ParseCIDR - mac: a MAC address as parsed by Golang net.ParseMAC - uuid: an UUID that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid3: an UUID3 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$ - uuid4: an UUID4 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - uuid5: an UUID5 that allows uppercase defined by the regex (?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$ - isbn: an ISBN10 or ISBN13 number string like \"0321751043\" or \"978-0321751041\" - isbn10: an ISBN10 number string like \"0321751043\" - isbn13: an ISBN13 number string like \"978-0321751041\" - creditcard: a credit card number defined by the regex ^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35\\d{3})\\d{11})$ with any non digit characters mixed in - ssn: a U.S. social security number following the regex ^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$ - hexcolor: an hexadecimal color code like \"#FFFFFF: following the regex ^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$ - rgbcolor: an RGB color code like rgb like \"rgb(255,255,2559\" - byte: base64 encoded binary data - password: any kind of string - date: a date string like \"2006-01-02\" as defined by full-date in RFC3339 - duration: a duration string like \"22 ns\" as parsed by Golang time.ParseDuration or compatible with Scala duration format - datetime: a date time string like \"2014-12-15T19:30:20.000Z\" as defined by date-time in RFC3339.",
          "type": "string"
        },
        "id": {
          "type": "string"
        },
        "items": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray"
        },
        "maxItems": {
          "format": "int64",
          "type": "integer"
        },
        "maxLength": {
          "format": "int64",
          "type": "integer"
        },
        "maxProperties": {
          "format": "int64",
          "type": "integer"
        },
        "maximum": {
          "format": "double",
          "type": "number"
        },
        "minItems": {
          "format": "int64",
          "type": "integer"
        },
        "minLength": {
          "format": "int64",
          "type": "integer"
        },
        "minProperties": {
          "format": "int64",
          "type": "integer"
        },
        "minimum": {
          "format": "double",
          "type": "number"
        },
        "multipleOf": {
          "format": "double",
          "type": "number"
        },
        "not": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
        },
        "nullable": {
          "type": "boolean"
        },
        "oneOf": {
          "items": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          },
          "type": "array"
        },
        "pattern": {
          "type": "string"
        },
        "patternProperties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          },
          "type": "object"
        },
        "properties": {
          "additionalProperties": {
            "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaProps"
          },
          "type": "object"
        },
        "required": {
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "title": {
          "description": "A human readable description for the property.",
          "type": "string"
        },
        "type": {
          "description": "The type of the property.",
          "type": "string"
        },
        "uniqueItems": {
          "description": "A flag indicating whether items are treated as unique in a map. This cannot be `true` because the runtime doesn't support it.",
          "type": "boolean"
        },
        "x-kubernetes-embedded-resource": {
          "description": "This flag indicates that the value is an embedded Kubernetes `runtime.Object`, with `TypeMeta` and `ObjectMeta`. The type must be `\"object\"`. It is allowed to further restrict the embedded object. `kind`, `apiVersion` and `metadata` are validated automatically. `x-kubernetes-preserve-unknown-fields` is allowed to be true, but does not have to be if the object is fully specified (up to `kind`, `apiVersion`, `metadata`).",
          "type": "boolean"
        },
        "x-kubernetes-int-or-string": {
          "description": "This flag indicates that this value is either an integer or a string. If this is true, an empty type is allowed and type as child of `\"anyOf\"` is permitted if following one of the following patterns:\n\n1. `\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"}]`\n1. `\"allOf\": [{\"anyOf\": [{\"type\": \"integer\"}, {\"type\": \"string\"} ...]}]`\n",
          "type": "boolean"
        },
        "x-kubernetes-list-map-keys": {
          "description": "This annotates an array with the `x-kubernetes-list-type: map` by specifying the keys used as the index of the map. This tag MUST only be used on lists that have the \"x-kubernetes-list-type\" extension set to `\"map\"`. Also, the values specified for this attribute must be a scalar typed field of the child structure (no nesting is supported). The properties specified must either be required or have a default value, to ensure those properties are present for all list items.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "x-kubernetes-list-type": {
          "description": "This annotates an array to further describe its topology. This extension must only be used on lists and may have 3 possible values:\n\n1. `\"atomic\"`: the list is treated as a single entity, like a scalar. Atomic lists will be entirely replaced when updated. This extension may be used on any type of list (struct, scalar, ...).\n1. `\"set\"`: Sets are lists that must not have multiple items with the same value. Each value must be a scalar, an object with `x-kubernetes-map-type: atomic` or an array with `x-kubernetes-list-type: atomic`.\n1. `\"map\"`: These lists are like maps in that their elements have a non-index key used to identify them. Order is preserved upon merge. The map tag must only be used on a list with elements of type `\"object\"`. Defaults to `\"atomic\"` for arrays.",
          "enum": [
            "atomic",
            "set",
            "map"
          ],
          "type": "string"
        },
        "x-kubernetes-map-type": {
          "description": "This annotates an object to further describe its topology. This extension must only be used when type is `\"object\"` and may have 2 possible values:\n\n1. `\"granular\"`: These maps are actual maps (key-value pairs) and each fields are independent from each other (they can each be manipulated by separate actors). This is the default behaviour for all maps.\n1. `\"atomic\"`: the list is treated as a single entity, like a scalar. Atomic maps will be entirely replaced when updated.",
          "enum": [
            "atomic",
            "granular"
          ],
          "type": "string"
        },
        "x-kubernetes-preserve-unknown-fields": {
          "description": "This flag stops the API server decoding step from pruning fields which are not specified in the validation schema. This affects fields recursively, but switches back to normal pruning behaviour if nested `properties` or `additionalProperties` are specified in the schema. This can either be true or undefined. False means forbidden.",
          "type": "boolean"
        }
      },
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrArray": {
      "description": "A value that can either be a JSONSchemaProps or an array of JSONSchemaProps. Mainly here for serialization purposes."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrBool": {
      "description": "A JSONSchemaProps or a boolean value. Defaults to `true` for the boolean property."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.JSONSchemaPropsOrStringArray": {
      "description": "A JSONSchemaProps or a string array."
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference": {
      "description": "A reference to a Service",
      "properties": {
        "name": {
          "description": "The name of the Service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the Service",
          "minLength": 1,
          "type": "string"
        },
        "path": {
          "description": "An URL path at which the webhook will be contacted. The path must start with a `'/'` and it cannot be `\"//\"`.",
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "An optional service port at which the webhook will be contacted.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.WebhookClientConfig": {
      "description": "Information to make a TLS connection with a webhook. Either `service` or `url` must be specified. If the webhook is running within the cluster, then you should use `service`.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle which will be used to validate the webhook's server certificate. If unspecified, system trust roots on the apiserver are used.",
          "format": "byte",
          "type": "string"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.ServiceReference",
          "description": "A reference to the Service for this webhook."
        },
        "url": {
          "description": "The location of the webhook, in standard URL form (`\"scheme://host:port/path\"`). The `host` should not refer to a Service running in the cluster; use the `service` field instead. The `host` might be resolved via external DNS in some apiservers (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation). `host` may also be an IP address. Please note that using `\"localhost\"` or `\"127.0.0.1\"` as a `host` is risky unless you take great care to run this webhook on all hosts which run an apiserver which might need to make calls to this webhook. Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster. The scheme must be `\"https\"`. A path is optional, and if present may be any string permissible in a URL. You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier. Attempting to use a user or basic auth e.g. `\"user:password@\"` is not allowed. Fragments (`\"#...\"`) and query parameters (`\"?...\"`) are not allowed, either.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.api.resource.Quantity": {
      "description": "Quantity is a fixed-point representation of a number. It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to `String()` and `AsInt64()` accessors.\n\nThe serialization format is:\n\n```\n<quantity> ::= <signedNumber><suffix>\n   (Note that <suffix> may be empty, from the \"\" case in <decimalSI>.)\n<digit> ::= 0 | 1 | ... | 9\n<digits> ::= <digit> | <digit><digits>\n<number> ::= <digits> | <digits>.<digits> | <digits>. | .<digits>\n<sign> ::= \"+\" | \"-\"\n<signedNumber> ::= <number> | <sign><number>\n<suffix> ::= <binarySI> | <decimalExponent> | <decimalSI>\n<binarySI> ::= Ki | Mi | Gi | Ti | Pi | Ei\n    (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)\n<decimalSI> ::= m | \"\" | k | M | G | T | P | E\n    (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)\n<decimalExponent> ::= \"e\" <signedNumber> | \"E\" <signedNumber>\n```\n\nNo matter which of the three exponent forms is used, no quantity may represent a number greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places. Numbers larger or more precise will be capped or rounded up. (E.g.: `\"0.1m\"` will rounded up to `\"1m\"`.) This may be extended in the future if we require larger or smaller quantities.\n\nWhen a Quantity is parsed from a string, it will remember the type of suffix it had, and will use the same type again when it is serialized.\n\nBefore serializing, Quantity will be put in \"canonical form\". This means that exponent/suffix will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that:\n\n- No precision is lost\n- No fractional digits will be emitted\n- The exponent (or suffix) is as large as possible.\n\nThe sign will be omitted unless the number is negative.\n\nExamples:\n\n- `1.5` will be serialized as `\"1500m\"`\n- `\"1.5Gi\"` will be serialized as `\"1536Mi\"`\"\n\nNote that the quantity will **NEVER** be internally represented by a floating point number. That is the whole point of this exercise.\n\nNon-canonical values will still parse as long as they are well formed, but will be re-emitted in their canonical form. (So always use canonical form, or don't diff.)\n\nThis format is intended to make it difficult to use these numbers without writing some sort of special handling code in the hopes that that will cause implementors to also use a fixed point implementation.",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup": {
      "description": "The information about an API group.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIGroup"
          ],
          "type": "string"
        },
        "name": {
          "description": "The name of the group.",
          "minLength": 1,
          "type": "string"
        },
        "preferredVersion": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery",
          "description": "The version preferred by the API server, which probably is the storage version."
        },
        "serverAddressByClientCIDRs": {
          "description": "A map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at `X-Forwarded-For` header or `X-Real-Ip` header or `request.RemoteAddr` (in that order) to get the client IP.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "minItems": 1,
          "type": "array"
        },
        "versions": {
          "description": "The versions supported in this API group.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "versions"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroup",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList": {
      "description": "A list of APIGroup objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "groups": {
          "description": "A list of APIGroup objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
          },
          "minItems": 1,
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIGroupList"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "groups",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIGroupList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResource": {
      "description": "The name of a resource and whether it is namespaced.",
      "properties": {
        "categories": {
          "description": "A list of the grouped resources this resource belongs to. E.g. `\"all\"`.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "group": {
          "description": "The preferred group of the resource. Empty implies the group of the containing resource list. For subresources, this may have a different value. For example, `Scale`.",
          "type": "string"
        },
        "kind": {
          "description": "The kind of the resource. E.g. `\"Foo\"` is the kind for a resource `foo`.",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "The plural name of the resource.",
          "minLength": 1,
          "type": "string"
        },
        "namespaced": {
          "description": "This indicates if the resource is namespaced or not.",
          "type": "boolean"
        },
        "shortNames": {
          "description": "A list of suggested short names of the resource.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "singularName": {
          "description": "The singular name of the resource. This allows clients to handle plural and singular opaquely. The `singularName` is more correct for reporting status on a single item and both singular and plural are allowed by the kubectl CLI interface",
          "minLength": 1,
          "type": "string"
        },
        "storageVersionHash": {
          "description": "The hash value of the storage version, the version this resource is converted to when written to the data store. Value must be treated as opaque by clients. Only equality comparison on the value is valid. This is an Alpha feature and may change or be removed in the future. The field is populated by the apiserver only if the `StorageVersionHash` feature gate is enabled. This field will remain optional even if it graduates.",
          "type": "string"
        },
        "verbs": {
          "description": "A list of supported kube verbs",
          "items": {
            "enum": [
              "create",
              "delete",
              "deletecollection",
              "get",
              "list",
              "patch",
              "proxy",
              "update",
              "watch"
            ],
            "minLength": 1,
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        },
        "version": {
          "description": "The preferred version of the resource. Empty implies the version of the containing resource list. For subresources, this may have a different value. For example, `\"v1\"` (while inside a `\"v1beta1\"` version of the core resource's group).",
          "type": "string"
        }
      },
      "required": [
        "name",
        "singularName",
        "namespaced",
        "kind",
        "verbs"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList": {
      "description": "A list of APIResource objects. It is used to expose the name of the resources supported in a specific group and version, and if the resource is namespaced.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "groupVersion": {
          "description": "The group and version this APIResourceList is for.",
          "minLength": 1,
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIResourceList"
          ],
          "type": "string"
        },
        "resources": {
          "description": "A list of APIResource objects and if they are namespaced.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "groupVersion",
        "kind",
        "resources"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIResourceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions": {
      "description": "APIVersions lists the versions that are available, to allow clients to discover the API at `\"/api\"`, which is the root path of the legacy `v1` API.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIVersions"
          ],
          "type": "string"
        },
        "serverAddressByClientCIDRs": {
          "description": "A map of client CIDR to server address that is serving this group. This is to help clients reach servers in the most network-efficient way possible. Clients can use the appropriate server address as per the CIDR that they match. In case of multiple matches, clients should use the longest matching CIDR. The server returns only those CIDRs that it thinks that the client can match. For example: the master will return an internal IP CIDR only, if the client reaches the server using an internal IP. Server looks at `X-Forwarded-For` header or `X-Real-Ip` header or `request.RemoteAddr` (in that order) to get the client IP.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR"
          },
          "minItems": 1,
          "type": "array"
        },
        "versions": {
          "description": "The API versions that are available.",
          "items": {
            "type": "string"
          },
          "minItems": 1,
          "type": "array"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "serverAddressByClientCIDRs",
        "versions"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "APIVersions",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions": {
      "description": "DeleteOptions may be provided when deleting an API object.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "type": "string"
        },
        "dryRun": {
          "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized dryRun directive will result in an error response and no further processing of the request. Valid values are:\n\n- `\"All\"`: all dry run stages will be processed.\n",
          "items": {
            "enum": [
              "All"
            ],
            "type": "string"
          },
          "type": "array"
        },
        "gracePeriodSeconds": {
          "description": "The duration in seconds before the object should be deleted. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified.",
          "format": "int64",
          "minimum": 0,
          "type": "integer"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "type": "string"
        },
        "orphanDependents": {
          "description": "Should the dependent objects be orphaned. If true/false, the `\"orphan\"` finalizer will be added to/removed from the object's `finalizers list.Either this field or `propagationPolicy` may be set, but not both. *DEPRECATED*: please use the `propagationPolicy`.",
          "type": "boolean"
        },
        "preconditions": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions",
          "description": "Must be fulfilled before a deletion is carried out. If not possible, a `\"409 Conflict\"` status will be returned."
        },
        "propagationPolicy": {
          "description": "Whether and how garbage collection will be performed. Either this field or `orphanDependents` may be set, but not both. The default policy is decided by the existing finalizer set in the `metadata.finalizers` and the resource-specific default policy. Acceptable values are:\n\n- `\"Orphan\"` - orphan the dependents;\n- `\"Background\"` - allow the garbage collector to delete the dependents in the background;\n- `\"Foreground\"` - a cascading policy that deletes all dependents in the foreground.\n",
          "enum": [
            "Background",
            "Foreground",
            "Orphan"
          ],
          "type": "string"
        }
      },
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "DeleteOptions",
          "version": "v1beta2"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "DeleteOptions",
          "version": "v2beta2"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "DeleteOptions",
          "version": "v2alpha1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "events.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "policy",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "DeleteOptions",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1": {
      "description": "FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format. Each key is either a `\".\"` representing the field itself, and will always map to an empty set, or a string representing a sub-field or item. The string will follow one of these four formats:\n\n- `\"f:<name>\"`, where `\"<name>\"` is the name of a field in a struct, or key in a map;\n- `\"v:<value>\"`, where `\"<value>\"` is the exact JSON formatted value of a list item;\n- `\"i:<index>\"`, where `\"<index>\"` is position of an item in a list;\n- `\"k:<keys>\"`, where `\"<keys>\"` is a map of a list item's key fields to their unique values.\n\nIf a key maps to an empty fields value, the field that key represents is part of the set.\n\nThe exact format is defined in `\"sigs.k8s.io/structured-merge-diff\"`.",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery": {
      "description": "The `\"group/version\"` and `\"version\"` string of a version. It is made a struct to keep extensibility.",
      "properties": {
        "groupVersion": {
          "description": "The API group and version in the form `\"group/version\"`.",
          "minLength": 1,
          "type": "string"
        },
        "version": {
          "description": "The version in the form of `\"version\"`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "groupVersion",
        "version"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector": {
      "description": "A label selector is a label query over a set of resources. The result of `matchLabels` and `matchExpressions` are ANDed. An empty label selector matches all objects. A null label selector matches no objects. Note that there are two different styles of label selectors used in versioned types:\n\n- an older style which is represented as just a string in versioned types;- a newer style that is structured.\n\nLabelSelector is an internal representation for the latter (newer) style.",
      "properties": {
        "matchExpressions": {
          "description": "A list of label selector requirements. The requirements are ANDed.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement"
          },
          "type": "array"
        },
        "matchLabels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A map of `<key, value>` pairs. A single `<key,value>` in the `matchLabels` map is equivalent to an element of `matchExpressions`, whose `key` field is `\"key\"`, the `operator` is `\"In\"`, and the `values` array contains only `[\"value\"]`. The requirements are ANDed.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement": {
      "description": "A label selector requirement is a selector that contains `values`, a `key`, and an `operator` that relates the `key` and `values`.",
      "properties": {
        "key": {
          "description": "The label key that the selector applies to.",
          "type": "string",
          "x-kubernetes-patch-merge-key": "key",
          "x-kubernetes-patch-strategy": "merge"
        },
        "operator": {
          "description": "This represents the key's relationship to a set of values.",
          "enum": [
            "DoesNotExist",
            "Exists",
            "In",
            "NotIn"
          ],
          "minLength": 1,
          "type": "string"
        },
        "values": {
          "description": "An array of string values. If the `operator` is `\"In\"` or `\"NotIn\"`, the `values` array must be non-empty. If the `operator` is `\"Exists\"` or `\"DoesNotExist\"`, the `values` array must be empty. This array is replaced during a strategic merge patch.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "required": [
        "key",
        "operator"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta": {
      "description": "ListMeta describes metadata that synthetic resources must have, including lists and various status objects. A resource may have only one of ObjectMeta and ListMeta.",
      "properties": {
        "continue": {
          "description": "`continue` may be set if the user set a `limit` on the number of items returned, and indicates that the server has more data available. The value is opaque and may be used to issue another request to the endpoint that served this list to retrieve the next set of available objects. Continuing a consistent list may not be possible if the server configuration has changed or more than a few minutes have passed. The `resourceVersion` field returned when using this `continue` value will be identical to the value in the first response, unless you have received this token from an error message.",
          "type": "string"
        },
        "remainingItemCount": {
          "description": "The number of subsequent items in the list which are not included in this response. If the list request contained label or field selectors, then the number of remaining items is unknown and the field will be left unset and omitted during serialization. If the list is complete (either because it is not chunking or because this is the last chunk), then there are no more remaining items and this field will be left unset and omitted during serialization. Clients should not rely on the `remainingItemCount` to be set or to be exact.",
          "format": "int64",
          "type": "integer"
        },
        "resourceVersion": {
          "description": "String that identifies the server's internal version of this object that can be used by clients to determine when objects have changed. Value must be treated as opaque by clients and passed unmodified back to the server. Populated by the system. Read-only.",
          "type": "string"
        },
        "selfLink": {
          "description": "A URL representing this object. Populated by the system. Read-only. *DEPRECATED*: Kubernetes will stop populating this field in 1.20 and the field is planned to be removed in 1.21.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry": {
      "description": "A workflow-id, a field set and the group version of the resource that the field set applies to.",
      "properties": {
        "apiVersion": {
          "description": "The version of the resource that this field set applies to. The format is `\"group/version\"` just like the top-level of `apiVersion` field. It is necessary to track the version of a field set because it cannot be automatically converted.",
          "type": "string"
        },
        "fieldsType": {
          "description": "The discriminator for the different fields format and version. There is currently only one possible value: `\"FieldsV1\"`",
          "type": "string"
        },
        "fieldsV1": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1",
          "description": "The first JSON version format as described in the `\"FieldsV1\"` type."
        },
        "manager": {
          "description": "An identifier of the workflow managing these fields.",
          "type": "string"
        },
        "operation": {
          "description": "The type of operation which lead to the creation of this object.",
          "enum": [
            "Apply",
            "Update"
          ],
          "minLength": 1,
          "type": "string"
        },
        "time": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "The timestamp when these fields were set. It should always be empty if `operation` is `\"Apply\"`."
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime": {
      "description": "MicroTime is version of Time with microsecond level precision.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE": {
      "description": "Metadata that all persisted resources must have, which includes all objects users create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now. It can be provided in a `PATCH` operation, but the value provided must be identical to the existing value.",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. `\"kubernetes\"`, `\"orphan\"`, `\"foregroundDeletion\"`), or it contains at least one slash (`'/'`).",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. If this field is used, the `name` returned to the client will be different than the `name` passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the `name` field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will **NOT** return a `\"409\"`. Instead, it will either return `\"201 Created\"` or `\"500\"` with reason `\"ServerTimeout\"` indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the `\"Retry-After\"` header).",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "managedFields": {
          "description": "This maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated.",
          "type": "string"
        },
        "namespace": {
          "default": "default",
          "description": "The space within which each `name` must be unique. An empty `namespace` is equivalent to the `\"default\"` namespace. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL. Cannot be updated.",
          "type": "string"
        }
      },
      "required": [
        "name"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET": {
      "description": "Metadata that all persisted resources must have, which includes all objects users create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now.",
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A timestamp representing the server time when this object was created. It is not guaranteed to be set in \"happens-before\" order across separate operations. It is represented in RFC3339 form and is in UTC. It is populated by the system, read-only. Null for lists."
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when `deletionTimestamp` is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the `finalizers` list is empty. As long as the `finalizers` list contains items, deletion is blocked. Once the `deletionTimestamp` is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time.\n\nFor example, a user may request that a Pod is deleted in 30 seconds. The kubelet will react by sending a graceful termination signal to the Containers in the Pod. After that 30 seconds, the kubelet will send a hard termination signal (`SIGKILL`) to the Container and after cleanup, remove the Pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated.\n\nIf not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. `\"kubernetes\"`, `\"orphan\"`, `\"foregroundDeletion\"`), or it contains at least one slash (`'/'`).",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. If this field is used, the `name` returned to the client will be different than the `name` passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the `name` field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will **NOT** return a `\"409\"`. Instead, it will either return `\"201 Created\"` or `\"500\"` with reason `\"ServerTimeout\"` indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the `\"Retry-After\"` header).",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "managedFields": {
          "description": "This maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "Name must be unique within a namespace. Is required when creating resources, although some resources may allow a client to request the generation of an appropriate name automatically. Name is primarily intended for creation idempotence and configuration definition. Cannot be updated.",
          "type": "string"
        },
        "namespace": {
          "default": "default",
          "description": "The space within which each `name` must be unique. An empty `namespace` is equivalent to the `\"default\"` namespace. Not all objects are required to be scoped to a namespace - the value of this field for those objects will be empty. Must be a DNS_LABEL.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If **all** objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the `controller` field set to `true`. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only.",
          "type": "string"
        },
        "selfLink": {
          "description": "A URL representing this object. Populated by the system. Read-only. *DEPRECATED*: Kubernetes will stop propagating this field in 1.20 release and the field is planned to be removed in 1.21 release.",
          "type": "string"
        },
        "uid": {
          "description": "A value unique in time and space for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on `PUT` operations. Populated by the system. Read-only.",
          "type": "string"
        }
      },
      "required": [
        "creationTimestamp",
        "generation",
        "name",
        "resourceVersion",
        "selfLink",
        "uid"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERCREATE": {
      "description": "Metadata for nested Pod template.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. Ignored for nested Pod templates.",
          "type": "string"
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. `\"kubernetes\"`, `\"orphan\"`, `\"foregroundDeletion\"`), or it contains at least one slash (`'/'`).",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. For embedded Pod templates, this field is ignored.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "name": {
          "description": "The name can be specified, but it will be overwritten by the workload controller anyway.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace for the Pod. This can be specified, but its value is ignored.",
          "type": "string"
        }
      },
      "required": [
        "labels"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERGET": {
      "description": "Metadata for nested Pod template.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. Ignored for nested Pod templates.",
          "type": "string"
        },
        "creationTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A timestamp representing the server time when this object was created. It is not guaranteed to be set in \"happens-before\" order across separate operations. It is represented in RFC3339 form and is in UTC. It is populated by the system, read-only. Null for lists."
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when `deletionTimestamp` is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested by the user, and is not directly settable by a client. The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name) after the time in this field, once the `finalizers` list is empty. As long as the `finalizers` list contains items, deletion is blocked. Once the `deletionTimestamp` is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time.\n\nFor example, a user may request that a Pod is deleted in 30 seconds. The kubelet will react by sending a graceful termination signal to the Containers in the Pod. After that 30 seconds, the kubelet will send a hard termination signal (`SIGKILL`) to the Container and after cleanup, remove the Pod from the API. In the presence of network partitions, this object may still exist after this timestamp, until an administrator or automated process can determine the resource is fully terminated.\n\nIf not set, graceful deletion of the object has not been requested. Populated by the system when a graceful deletion is requested. Read-only."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. `\"kubernetes\"`, `\"orphan\"`, `\"foregroundDeletion\"`), or it contains at least one slash (`'/'`).",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. For embedded Pod templates, this field is ignored.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "name": {
          "description": "The name can be specified, but it will be overwritten by the workload controller anyway.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace for the Pod. This can be specified, but its value is ignored.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If **all** objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the `controller` field set to `true`. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "resourceVersion": {
          "description": "An opaque value that represents the internal version of this object that can be used by clients to determine when objects have changed. May be used for optimistic concurrency, change detection, and the watch operation on a resource or set of resources. Clients must treat these values as opaque and passed unmodified back to the server. They may only be valid for a particular resource or set of resources. Populated by the system. Read-only.",
          "type": "string"
        },
        "uid": {
          "description": "A value unique in time and space for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on `PUT` operations. Populated by the system. Read-only.",
          "type": "string"
        }
      },
      "required": [
        "creationTimestamp",
        "generateName",
        "labels",
        "name",
        "namespace",
        "ownerReferences",
        "resourceVersion",
        "uid"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERUPDATE": {
      "description": "Metadata for nested Pod template.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. Ignored for nested Pod templates.",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when `deletionTimestamp` is also set. May only be shortened.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested and is not directly settable by a client. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. `\"kubernetes\"`, `\"orphan\"`, `\"foregroundDeletion\"`), or it contains at least one slash (`'/'`).",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. For embedded Pod templates, this field is ignored.",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "name": {
          "description": "The name can be specified, but it will be overwritten by the workload controller anyway.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace for the Pod. This can be specified, but its value is ignored.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If **all** objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the `controller` field set to `true`. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "uid": {
          "description": "A value unique in time and space for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. When updating an existing object, its value must match the current value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE": {
      "description": "Metadata that all persisted resources must have, which includes all objects users create.",
      "properties": {
        "annotations": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "An unstructured key value map stored with a resource that may be set by external tools to store and retrieve arbitrary metadata. They are not queryable and should be preserved when modifying objects. The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with an alphanumeric character. The key must be less than 63 characters. The total size of the keys and values cannot exceed 256 KB.",
          "type": "object"
        },
        "clusterName": {
          "description": "The name of the cluster which the object belongs to. This is used to distinguish resources with same name and namespace in different clusters. This field is not set anywhere right now. It can be provided in a `PATCH` operation, but the value provided must be identical to the existing value.",
          "type": "string"
        },
        "deletionGracePeriodSeconds": {
          "description": "Number of seconds allowed for this object to gracefully terminate before it will be removed from the system. Only set when `deletionTimestamp` is also set. May only be shortened. Read-only.",
          "format": "int64",
          "type": "integer"
        },
        "deletionTimestamp": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "A RFC 3339 date and time at which this resource will be deleted. This field is set by the server when a graceful deletion is requested and is not directly settable by a client. Once the deletionTimestamp is set, this value may not be unset or be set further into the future, although it may be shortened or the resource may be deleted prior to this time."
        },
        "finalizers": {
          "description": "Must be empty before the object is deleted from the registry. Each entry is an identifier for the responsible component that will remove the entry from the list. If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed. Finalizers may be processed and removed in any order. Order is NOT enforced because it introduces significant risk of stuck finalizers. `finalizers` is a shared field, any actor with permission can reorder it. If the finalizer list is processed in order, then this can lead to a situation in which the component responsible for the first finalizer in the list is waiting for a signal (field value, external system, or other) produced by a component responsible for a finalizer later in the list, resulting in a deadlock. Without enforced ordering finalizers are free to order amongst themselves and are not vulnerable to ordering changes in the list.",
          "items": {
            "description": "The name of the finalizer must is either a standard finalizer name (e.g. \"`kubernetes`\", \"`orphan`\", \"`foregroundDeletion`\"), or it contains at least one slash (\"`/`\").",
            "type": "string"
          },
          "type": "array",
          "x-kubernetes-patch-strategy": "merge"
        },
        "generateName": {
          "description": "An optional prefix, used by the server, to generate a unique name **only if** the `name` field has not been provided. If this field is used, the `name` returned to the client will be different than the `name` passed. This value will also be combined with a unique suffix. The provided value has the same validation rules as the `name` field, and may be truncated by the length of the suffix required to make the value unique on the server. If this field is specified and the generated name exists, the server will **NOT** return a `\"409\"`. Instead, it will either return `\"201 Created\"` or `\"500\"` with reason `\"ServerTimeout\"` indicating a unique name could not be found in the time allotted, and the client should retry (optionally after the time indicated in the `\"Retry-After\"` header).",
          "type": "string"
        },
        "generation": {
          "description": "A sequence number representing a specific generation of the desired state. Populated by the system. It cannot be decremented.",
          "format": "int64",
          "type": "integer"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Map of string keys and values that can be used to organize and categorize (scope and select) objects. Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and must start and end with an alphanumeric character. The key must be between 1 and 63 characters. The key can have `'/'` in it thus referred to as *qualified name*. The prefix part of a qualified name must be a valid DNS subdomain name. The value must be less than 64 characters with empty string allowed.",
          "type": "object"
        },
        "managedFields": {
          "description": "This maps workflow-id and version to the set of fields that are managed by that workflow. This is mostly for internal housekeeping, and users typically shouldn't need to set or understand this field. A workflow can be the user's name, a controller's name, or the name of a specific apply path like 'ci-cd'. The set of fields is always in the version that the workflow used when modifying the object.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry"
          },
          "type": "array"
        },
        "name": {
          "description": "The name cannot be updated so the value (if provided) must match the current name.",
          "type": "string"
        },
        "namespace": {
          "description": "The namespace cannot be updated so the value (if provided) must match the current namespace.",
          "type": "string"
        },
        "ownerReferences": {
          "description": "List of objects depended by this object. If **all** objects in the list have been deleted, this object will be garbage collected. If this object is managed by a controller, an entry in this list will point to the controller, with the `controller` field set to `true`. There cannot be more than one managing controller.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference"
          },
          "type": "array",
          "x-kubernetes-patch-merge-key": "uid",
          "x-kubernetes-patch-strategy": "merge"
        },
        "uid": {
          "description": "A value unique in time and space for this object. It is typically generated by the server on successful creation of a resource and is not allowed to change on PUT operations. Populated by the system. Read-only. When updating an existing object, its value must match the current value.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference": {
      "description": "OwnerReference contains enough information to let you identify an owning object. An owning object must be in the same namespace as the dependent, or be cluster-scoped, so there is no namespace field.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "minLength": 1,
          "type": "string"
        },
        "blockOwnerDeletion": {
          "default": false,
          "description": "If `true`, AND if the owner has the `\"foregroundDeletion\"` finalizer, then the owner cannot be deleted from the key-value store until this reference is removed. To set this field, a user needs *delete* permission of the owner, otherwise `\"422 Unprocessable Entity\"` will be returned.",
          "type": "boolean"
        },
        "controller": {
          "description": "If `true`, this reference points to the managing controller.",
          "type": "boolean"
        },
        "kind": {
          "description": "Kind of the referenced resource",
          "minLength": 1,
          "type": "string"
        },
        "name": {
          "description": "Name of the referenced resource",
          "minLength": 1,
          "type": "string"
        },
        "uid": {
          "description": "UID of the referenced resource",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "name",
        "uid"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Patch": {
      "description": "Patch is provided to give a concrete name and type to the Kubernetes PATCH request body. The actual content in the body depends on the patch type.\n\n- For `\"application/merge-patch+json\"`, `\"application/strategic-merge-patch+json\"` and `\"application/apply-patch+yaml\"`, please check the GET variant of the target resource for the schema. E.g. the <a href=\"/apis/definition/1.20/core/v1/Node.GET\">core/v1 Node (Get)</a> definition.\n- For `\"application/json-patch+json\"`, the schema is different. However, you can still check the CREATE variant of the target resource for references. E.g. the <a href=\"/apis/definition/1.20/core/v1/Node.GET\">core/v1 Node (Get)</a> definition.\n\nFor more information about the different patch types, please check [the help page on this topic](/page/patches/)."
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions": {
      "description": "Preconditions must be fulfilled before an operation (*update*, *delete*, etc.) is carried out.",
      "properties": {
        "resourceVersion": {
          "description": "The target `resourceVersion`",
          "type": "string"
        },
        "uid": {
          "description": "The target UID",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR": {
      "description": "A map between the server address and client IP ranges.",
      "properties": {
        "clientCIDR": {
          "description": "The CIDR with which clients can match their IP to figure out the server address that they should use.",
          "minLength": 1,
          "type": "string"
        },
        "serverAddress": {
          "description": "Address of this server, suitable for a client that matches the above CIDR. This can be a `\"<hostname>\"`, `\"<hostname>:<port>\"`, `\"<ip>\"` or `\"<ip>:<port>\"`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "clientCIDR",
        "serverAddress"
      ],
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Status": {
      "description": "Status is a return value for calls that don't return other objects. This object is returned by the API in two cases:\n\n- When an operation is not successful;\n- When a HTTP `DELETE` call is successful.\n",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "v1"
          ],
          "type": "string"
        },
        "code": {
          "description": "Suggested HTTP return code for this status, 0 if not set.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails",
          "description": "Extended data associated with the `reason`. Each `reason` may define its own extended details. This field is optional and the data returned is not guaranteed to conform to any schema except that defined by the reason type."
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "Status"
          ],
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the status of this operation.",
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata."
        },
        "reason": {
          "description": "A machine-readable description of why this operation is in the `\"Failure\"` status. If this value is empty there is no information available. A reason clarifies an HTTP status code but does not override it. The reasons defined are:\n\n- `\"\"`: The server has declined to indicate a specific reason. The `details` field may contain other information about this error. Status code: 500.\n- `\"Unauthorized\"`: The server can be reached and understood the request, but requires the user to present appropriate authorization credentials (identified by the `\"WWW-Authenticate\"` header) in order for the action to be completed. If the user has specified credentials on the request, the server considers them insufficient. Status code: 401.\n- `\"Forbidden\"`: The server can be reached and understood the request, but refuses to take any further action. It is the result of the server being configured to deny access for some reason to the requested resource by the client. In the `details`, you can check the `kind` field for a string representing the `kind` of the forbidden resource. On some operations, this may differ from the requested resource. The `id` field in the `details may contain the identifier of the forbidden resource. Status code: 403.\n- `\"Not Found\"`: One or more resources required for the operation cannot be found. In the `details`, you can check the `kind` string which is the `kind` of the missing resource. On some operations, this may differ from the requested resource. The `details.id` may have the identifier of the missing resource. Status code: 404.\n- `\"AlreadyExists\"`: The resource you are creating already exists. The `details.kind` has the `kind` of the conflicting resource, and the `details.id` may have the identifier of the conflicting resource. Status code: 409.\n- `\"Conflict\"`: The requested operation cannot be completed due to a conflict in the operation. The client may need to alter the request. Each resource may define custom `details` that indicate the nature of the conflict. Status code: 409.\n- `\"Gone\"`: The mans the item is no longer available at the server and no forwarding address is known. Status code: 410.\n- `\"Invalid\"`: The requested create or update operation cannot be completed due to invalid data provided as part of the request. The client may need to alter the request. When set, the client may use the `details.message` field as a summary of the issues encountered. The `details.kind` field contains the `kind` of the invalid resource; the `details.id` field contains the identifer of the invalid resource; and the `details.causes` may contain one or more entires indicating the data in the provided resource that was invalid. Status code: 422.\n- `\"ServerTimeout\"`: The server can be reached and understood the request, but cannot complete the action in a reasonable time. The client should retry the request. This is may be due to temporary server load or a transient communication issue with another server. Status code 500 is used because the HTTP spec provides no suitable server-requested client retry and the 5xx class represents actionable errors. The `details.kind` provides the `kind` of the resource being acted on. The `details.id` string has the operation that is being attempted. The `details.retryAfterSeconds` contains the number of seconds before the operation should be retried. Status code: 500.\n- `\"Timeout\"`: The request could not be completed within the given time. Clients can get this response only when they specified a `timeout` param in the request, or if the server cannot complete the operation within a reasonable amount of time. The request might succeed with an increased value of `timeout` param. The client *should* wait at least the number of seconds specified by the `details.retryAfterSeconds` field. Status code: 504.\n - `\"TooManyRequests\"`: The server experienced too many requests within a given window and that the client must wait to perform the action again. A client may always retry the request that led to this error, although the client should wait at least the number of seconds specified by the `details.retryAfterSeconds` field. Status code: 429.\n- `\"BadRequest\"`: The request itself was invalid, because the request doesn't make any sense, for example deleting a read-only object. This is different than `\"Invalid\"` above which indicates that the API call could possibly succeed, but the data was invalid. API calls that return `\"BadRequest\"` can never succeed. Status code: 400.\n- `\"MethodNotAllowed\"`: The action the client attempted to perform on the resource was not supported by the code - for instance, attempting to delete a resource that can only be created. API calls that return `\"MethodNotAllowed\"` can never succeed. Status code: 405.\n- `\"NotAcceptable\"`: The `accept` types indicated by the client were not acceptable to the server - for instance, attempting to receive \"protobuf\" for a resource that supports only JSON and YAML. API calls that return `\"NotAcceptable\"` can never succeed. Status code: 406.\n- `\"RequestEntityTooLarge\"`: The request entity is too large. Status code: 413.\n- `\"UnsupportedMediaType\"`: The `\"content-type\"` sent by the client is not acceptable to the server - for instance, attempting to send \"protobuf\" for a resource that supports only JSON and YAML. API calls that return `\"UnsupportedMediaType\"` can never succeed. Status code: 415.\n- `\"InternalError\"`: An internal error occurred, it is unexpected and the outcome of the call is unknown. The `details.causes` field has the original error. Status code: 50 \n- `\"Expired\"`: The request is invalid because the content you are requesting has expired and is no longer available. It is typically associated with watches that can't be serviced. Status code: 410.\n- `\"ServiceUnavailable\"`: The request itself was valid, but the requested service is unavailable at this time. Retrying the request after some time might succeed. Status code: 503.\n",
          "enum": [
            "",
            "Unauthorized",
            "Forbidden",
            "NotFound",
            "AlreadyExists",
            "Conflict",
            "Gone",
            "Invalid",
            "ServerTimeout",
            "Timeout",
            "TooManyRequests",
            "BadRequest",
            "MethodNotAllowed",
            "NotAcceptable",
            "RequestEntityTooLarge",
            "UnsupportedMediaType",
            "InternalError",
            "Expired",
            "ServiceUnavailable"
          ],
          "type": "string"
        },
        "status": {
          "description": "Status of the operation.",
          "enum": [
            "Failure",
            "Success"
          ],
          "type": "string"
        }
      },
      "required": [
        "apiVersion",
        "kind"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "Status",
          "version": "v1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause": {
      "description": "StatusCause provides more information about a failure Status, including cases when multiple errors are encountered.",
      "properties": {
        "field": {
          "description": "The field of the resource that has caused this error, as named by its JSON serialization. May include dot and postfix notation for nested attributes. Arrays are zero-indexed. Fields may appear more than once in an array of causes due to fields having multiple errors. Optional.\n\nExamples:\n\n- `\"name\"` - the field `name` on the current resource\n- `\"items[0].name\"` - the field `name` on the first array entry in `\"items\"`.\n",
          "type": "string"
        },
        "message": {
          "description": "A human-readable description of the cause of the error. This field may be presented as-is to a reader.",
          "type": "string"
        },
        "reason": {
          "description": "A machine-readable description of the cause of the error. If this value is empty there is no information available.",
          "enum": [
            "FieldManagerConflict",
            "FieldValueDuplicate",
            "FieldValueInvalid",
            "FieldValueNotFound",
            "FieldValueNotSupported",
            "FieldValueRequired",
            "ResourceVersionTooLarge",
            "UnexpectedServerResponse"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails": {
      "description": "StatusDetails is a set of additional properties that MAY be set by the server to provide additional information about a response. The `reason` field of a Status object defines what attributes will be set. Clients must ignore fields that do not match the defined type of each attribute, and should assume that any attribute may be empty, invalid, or under defined.",
      "properties": {
        "causes": {
          "description": "The `causes` array includes more details associated with the status `reason`. Not all reasons may provide detailed causes.",
          "items": {
            "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause"
          },
          "type": "array"
        },
        "group": {
          "description": "The group attribute of the resource associated with the status `reason.",
          "type": "string"
        },
        "kind": {
          "description": "The kind attribute of the resource associated with the status `reason`. On some operations may differ from the requested resource `kind`.",
          "type": "string"
        },
        "name": {
          "description": "The name attribute of the resource associated with the status `reason` (when there is a single name which can be described).",
          "type": "string"
        },
        "retryAfterSeconds": {
          "description": "If specified, the time in seconds before the operation should be retried. Some errors may indicate the client must take an alternate action - for those errors this field may indicate how long to wait before taking the alternate action.",
          "format": "int32",
          "type": "integer"
        },
        "uid": {
          "description": "UID of the resource. (when there is a single resource which can be described).",
          "type": "string"
        }
      },
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.Time": {
      "description": "Time is a wrapper around GoLang `time.Time` which supports correct marshaling to YAML and JSON.",
      "format": "date-time",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent": {
      "description": "Event represents a single event to a watched resource.",
      "properties": {
        "object": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension",
          "description": "Object is:\n\n- new state of the object if `type` is `\"ADDED\"` or `\"MODIFIED\"`\n- the state of the object immediately before deletion if `type` is `\"DELETED\"`.\n- If `type` is `\"ERROR\"`, *status* is recommended; other types may make sense depending on context."
        },
        "type": {
          "type": "string"
        }
      },
      "required": [
        "type",
        "object"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admission.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "admissionregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apiextensions.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apiregistration.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "apps",
          "kind": "WatchEvent",
          "version": "v1beta2"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authentication.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta1"
        },
        {
          "group": "autoscaling",
          "kind": "WatchEvent",
          "version": "v2beta2"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "batch",
          "kind": "WatchEvent",
          "version": "v2alpha1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "certificates.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "coordination.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "discovery.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "events.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "extensions",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "imagepolicy.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "networking.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "node.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "policy",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "rbac.authorization.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "scheduling.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        },
        {
          "group": "settings.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1alpha1"
        },
        {
          "group": "storage.k8s.io",
          "kind": "WatchEvent",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.apimachinery.pkg.runtime.RawExtension": {
      "description": "RawExtension is used to hold extensions in external versions.\n\nTo use this, make a field which has `RawExtension` as its type in your external, versioned struct, and `Object` in your internal struct. You also need to register your various plugin types.\n\n```\n// Internal package:\ntype MyAPIObject struct {\n  runtime.TypeMeta `json:\",inline\"`\n  MyPlugin runtime.Object `json:\"myPlugin\"`\n}\ntype PluginA struct {\n  AOption string `json:\"aOption\"`\n}\n\n// External package:\ntype MyAPIObject struct {\n  runtime.TypeMeta `json:\",inline\"`\n  MyPlugin runtime.RawExtension `json:\"myPlugin\"`\n}\ntype PluginA struct {\n  AOption string `json:\"aOption\"`\n}\n\n```\n\nOn the wire, the JSON will look something like this:\n\n```\n{\n  \"kind\":\"MyAPIObject\",\n  \"apiVersion\":\"v1\",\n  \"myPlugin\": {\n    \"kind\": \"PluginA\",\n    \"aOption\": \"foo\",\n  },\n}\n```\n\nDecode first uses JSON or YAML to unmarshal the serialized data into your external object. That causes the raw JSON to be stored, but not unpacked. The next step is to copy (using `pkg/conversion`) into the internal struct. The `runtime` package's `DefaultScheme` has conversion functions installed which will unpack the JSON stored in `RawExtension`, turning it into the correct object type, and storing it in the `Object`. (TODO: In the case where the object is of an unknown type, a `runtime.Unknown` object will be created and stored.)",
      "type": "object"
    },
    "io.k8s.apimachinery.pkg.util.intstr.IntOrString": {
      "description": "IntOrString is a type that can hold an int32 or a string. When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type. This allows you to have, for example, a JSON field that can accept a name or number.",
      "format": "int-or-string",
      "type": "string"
    },
    "io.k8s.apimachinery.pkg.version.Info": {
      "description": "Info contains versioning information. how we'll want to distribute that information.",
      "properties": {
        "buildDate": {
          "description": "Build date in ISO8601 format. It is the output of `date -u +'%Y-%m-%dT%H:%M:%SZ'`",
          "minLength": 1,
          "type": "string"
        },
        "compiler": {
          "description": "The compiler used as reported by GoLang `runtime.Compiler`.",
          "minLength": 1,
          "type": "string"
        },
        "gitCommit": {
          "description": "Set when building the binary by scripts. The content is the git HEAD hash code when build.",
          "minLength": 1,
          "type": "string"
        },
        "gitTreeState": {
          "description": "State of the git tree. Either `\"clean\"` or `\"dirtry\"`.",
          "minLength": 1,
          "type": "string"
        },
        "gitVersion": {
          "description": "Git tag name used for a release. E.g. `\"1.17\"`.",
          "minLength": 1,
          "type": "string"
        },
        "goVersion": {
          "description": "The GoLang version as returned by `runtime.Version()`.",
          "minLength": 1,
          "type": "string"
        },
        "major": {
          "description": "Major version. Always numeric.",
          "minLength": 1,
          "type": "string"
        },
        "minor": {
          "description": "Minor version. Always numeric.",
          "minLength": 1,
          "type": "string"
        },
        "platform": {
          "description": "Platform for the binary. It is of format `\"<OS>/<ARCH>\"`, where `\"<OS>\"` is the operating system name as returned by `runtime.GOOS` and `\"<ARCH>\"` is the architecture as returned by `runtime.GOARCH`.",
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "buildDate",
        "compiler",
        "gitVersion",
        "gitCommit",
        "gitTreeState",
        "goVersion",
        "major",
        "minor",
        "platform"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.CREATE": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus",
          "description": "Derived information about an API server"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition": {
      "description": "The state of an APIService at a particular point in time",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "enum": [
            "Available"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList": {
      "description": "A list of APIService objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of APIService objects.",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIServiceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec": {
      "description": "Information for locating and communicating with a server. Only HTTPS is supported, though you can disable certificate verification.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle for validating an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. This field cannot be specified if `service` is provided because local APIServices cannot have a CA bundle.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "The API group name this server hosts. If `group` is empty, `version` must be `\"v1\"`. Value must be a valid DNS subdomain.",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "The priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher `groupPriorityMininum` values such that the whole group gets a higher priority. The primary sort is based on `groupPriorityMinimum`, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object (`\"v1.bar\"` before `\"v1.foo\"`). We'd recommend something like: `\"*.k8s.io\"` (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "format": "int32",
          "maximum": 20000,
          "minimum": 1,
          "type": "integer"
        },
        "insecureSkipTLSVerify": {
          "description": "This flag disables TLS certificate verification. This is strongly discouraged. You should use the `caBundle` instead. If `caBundle` is specified, this field cannot be True. If `service` is not specified, this field cannot be specified because local APIServices cannot have TLS certificate verification.",
          "type": "boolean"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference",
          "description": "A reference to the service for this API server. It must communicate on port 443. If the `service` is nil, it means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. In that case, `caBundle` and `insecureSkipTLSVerify` cannot be specified."
        },
        "version": {
          "description": "The API version this server hosts. Value must be a valid DNS label. For example, `\"v1\"`.",
          "type": "string"
        },
        "versionPriority": {
          "description": "This field controls the ordering of this API version inside of its group. The primary sort is based on `versionPriority`, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a `group`. If the version string is *kube-like*, it will sort above non *kube-like* version strings, which are ordered lexicographically. *Kube-like* versions start with a `'v'`, then are followed by a number (the major version), then optionally the string `\"alpha\"` or `\"beta\"` and another number (the minor version). These are sorted first by `GA>\"beta\">\"alpha\"` (where GA is a version with no suffix such as `\"beta\"` or `\"alpha\"`), and then by comparing major version, then minor version. An example sorted list of versions: `\"v10\"`, `\"v2\"`, `\"v1\"`, `\"v11beta2\"`, `\"v10beta3\"`, `\"v3beta1\"`, `\"v12alpha1\"`, `\"v11alpha2\"`, `\"foo1\"`, `\"foo10\"`.",
          "format": "int32",
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus": {
      "description": "Derived information about an API server",
      "properties": {
        "conditions": {
          "description": "Current service state of APIService.",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference": {
      "description": "A reference to Service",
      "properties": {
        "name": {
          "description": "The name of the service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the service",
          "minLength": 1,
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the service that hosting service.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.CREATE": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE",
          "description": "Standard object metadata. The `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET",
          "description": "Standard object metadata. The `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        },
        "status": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus",
          "description": "Derived information about an API server"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "metadata",
        "spec",
        "status"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.UPDATE": {
      "description": "APIService represents a server for a particular GroupVersion.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIService"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE",
          "description": "Standard object metadata. The `name` must be `<spec.version>.<spec.group>`."
        },
        "spec": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec",
          "description": "Information for locating and communicating with a server"
        }
      },
      "required": [
        "apiVersion",
        "kind",
        "spec"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition": {
      "description": "The state of an APIService at a particular point in time",
      "properties": {
        "lastTransitionTime": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time",
          "description": "Last time the condition transitioned from one status to another."
        },
        "message": {
          "description": "Human-readable message indicating details about last transition.",
          "type": "string"
        },
        "reason": {
          "description": "Unique, one-word, CamelCase reason for the condition's last transition.",
          "type": "string"
        },
        "status": {
          "description": "The status of the condition",
          "enum": [
            "False",
            "True",
            "Unknown"
          ],
          "type": "string"
        },
        "type": {
          "description": "Type is the type of the condition.",
          "enum": [
            "Available"
          ],
          "minLength": 1,
          "type": "string"
        }
      },
      "required": [
        "status",
        "type"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList": {
      "description": "A list of APIService objects.",
      "properties": {
        "apiVersion": {
          "description": "The version of the schema for the object representation",
          "enum": [
            "apiregistration.k8s.io/v1beta1"
          ],
          "type": "string"
        },
        "items": {
          "description": "A list of APIService objects",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
          },
          "type": "array"
        },
        "kind": {
          "description": "A string value representing the REST resource",
          "enum": [
            "APIServiceList"
          ],
          "type": "string"
        },
        "metadata": {
          "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta",
          "description": "Standard list metadata"
        }
      },
      "required": [
        "apiVersion",
        "items",
        "kind",
        "metadata"
      ],
      "type": "object",
      "x-kubernetes-group-version-kind": [
        {
          "group": "apiregistration.k8s.io",
          "kind": "APIServiceList",
          "version": "v1beta1"
        }
      ]
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceSpec": {
      "description": "Information for locating and communicating with a server. Only HTTPS is supported, though you can disable certificate verification.",
      "properties": {
        "caBundle": {
          "description": "A PEM encoded CA bundle for validating an API server's serving certificate. If unspecified, system trust roots on the apiserver are used. This field cannot be specified if `service` is provided because local APIServices cannot have a CA bundle.",
          "format": "byte",
          "type": "string",
          "x-kubernetes-list-type": "atomic"
        },
        "group": {
          "description": "The API group name this server hosts. If `group` is empty, `version` must be `\"v1\"`. Value must be a valid DNS subdomain.",
          "type": "string"
        },
        "groupPriorityMinimum": {
          "description": "The priority this group should have at least. Higher priority means that the group is preferred by clients over lower priority ones. Note that other versions of this group might specify even higher `groupPriorityMininum` values such that the whole group gets a higher priority. The primary sort is based on `groupPriorityMinimum`, ordered highest number to lowest (20 before 10). The secondary sort is based on the alphabetical comparison of the name of the object (`\"v1.bar\"` before `\"v1.foo\"`). We'd recommend something like: `\"*.k8s.io\"` (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be in the 2000s",
          "format": "int32",
          "maximum": 20000,
          "minimum": 1,
          "type": "integer"
        },
        "insecureSkipTLSVerify": {
          "description": "This flag disables TLS certificate verification. This is strongly discouraged. You should use the `caBundle` instead. If `caBundle` is specified, this field cannot be True. If `service` is not specified, this field cannot be specified because local APIServices cannot have TLS certificate verification.",
          "type": "boolean"
        },
        "service": {
          "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference",
          "description": "A reference to the service for this API server. It must communicate on port 443. If the `service` is nil, it means the handling for the API groupversion is handled locally on this server. The call will simply delegate to the normal handler chain to be fulfilled. In that case, `caBundle` and `insecureSkipTLSVerify` cannot be specified."
        },
        "version": {
          "description": "The API version this server hosts. Value must be a valid DNS label. For example, `\"v1\"`.",
          "type": "string"
        },
        "versionPriority": {
          "description": "This field controls the ordering of this API version inside of its group. The primary sort is based on `versionPriority`, ordered highest to lowest (20 before 10). Since it's inside of a group, the number can be small, probably in the 10s. In case of equal version priorities, the version string will be used to compute the order inside a `group`. If the version string is *kube-like*, it will sort above non *kube-like* version strings, which are ordered lexicographically. *Kube-like* versions start with a `'v'`, then are followed by a number (the major version), then optionally the string `\"alpha\"` or `\"beta\"` and another number (the minor version). These are sorted first by `GA>\"beta\">\"alpha\"` (where GA is a version with no suffix such as `\"beta\"` or `\"alpha\"`), and then by comparing major version, then minor version. An example sorted list of versions: `\"v10\"`, `\"v2\"`, `\"v1\"`, `\"v11beta2\"`, `\"v10beta3\"`, `\"v3beta1\"`, `\"v12alpha1\"`, `\"v11alpha2\"`, `\"foo1\"`, `\"foo10\"`.",
          "format": "int32",
          "maximum": 1000,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "groupPriorityMinimum",
        "versionPriority"
      ],
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceStatus": {
      "description": "Derived information about an API server",
      "properties": {
        "conditions": {
          "description": "Current service state of APIService.",
          "items": {
            "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceCondition"
          },
          "type": "array",
          "x-kubernetes-list-map-keys": [
            "type"
          ],
          "x-kubernetes-list-type": "map",
          "x-kubernetes-patch-merge-key": "type",
          "x-kubernetes-patch-strategy": "merge"
        }
      },
      "type": "object"
    },
    "io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference": {
      "description": "A reference to Service",
      "properties": {
        "name": {
          "description": "The name of the service",
          "minLength": 1,
          "type": "string"
        },
        "namespace": {
          "description": "The namespace of the service",
          "minLength": 1,
          "type": "string"
        },
        "port": {
          "default": 443,
          "description": "If specified, the port on the service that hosting service.",
          "format": "int32",
          "maximum": 65535,
          "minimum": 1,
          "type": "integer"
        }
      },
      "required": [
        "name",
        "namespace"
      ],
      "type": "object"
    }
  },
  "info": {
    "title": "Kubernetes",
    "version": "v1.19.0"
  },
  "parameters": {
    "allowWatchBookmarks": {
      "description": "`allowWatchBookmarks` requests WatchEvents with `type: \"BOOKMARK\"`. Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion. Clients should not assume bookmarks are returned at any specific interval, nor may they assume the server will send any `\"BOOKMARK\"` event during a session. This field is ignored if the operation is not a **watch** or the feature gate `WatchBookmarks` is not enabled in API server.",
      "in": "query",
      "name": "allowWatchBookmarks",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "continue": {
      "description": "The `continue` option should be set when retrieving more results from the server. Since this value is server defined, clients may only use the `continue` value from a previous query result with identical query parameters (except for the value of `continue`) and the server may reject a `continue` value it does not recognize. If the specified `continue` value is no longer valid whether due to expiration (generally five to fifteen minutes) or a configuration change on the server, the server will respond with a `\"410 ResourceExpired\"` error together with a `continue` token. If the client needs a consistent list, it must restart their list without the `continue` field. Otherwise, the client may send another list request with the token received with the 410 error, the server will respond with a list starting from the next key, but from the latest snapshot, which is inconsistent from the previous list results - objects that are created, modified, or deleted after the first list request will be included in the response, as long as their keys are after the \"next key\".\n\nThis field is not supported when `watch` is true. Clients may start a watch from the last `resourceVersion` value returned by the server and not miss any modifications.",
      "in": "query",
      "name": "continue",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "dryRun": {
      "description": "When present, indicates that modifications should not be persisted. An invalid or unrecognized `dryRun` directive will result in an error response and no further processing of the request. Valid values are:\n\n- `\"All\"`: all dry run stages will be processed.\n\n",
      "enum": [
        "All"
      ],
      "in": "query",
      "name": "dryRun",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "exact": {
      "description": "Should the export be exact. Exact export maintains cluster-specific fields like `namespace`. DEPRECATED. Planned for removal in 1.18.",
      "in": "query",
      "name": "exact",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "export": {
      "description": "Should this value be exported. `export` strips fields that a user can not specify. DEPRECATED. Planned for removal in 1.18.",
      "in": "query",
      "name": "export",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "fieldManager": {
      "description": "`fieldManager` is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by [Go Unicode](https://golang.org/pkg/unicode/#IsPrint).",
      "in": "query",
      "name": "fieldManager",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "fieldManagerPatch": {
      "description": "`fieldManager` is a name associated with the actor or entity that is making these changes. The value must be less than or 128 characters long, and only contain printable characters, as defined by [Go Unicode](https://golang.org/pkg/unicode/#IsPrint). This field is required for apply requests (application/apply-patch) but optional for non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).",
      "in": "query",
      "name": "fieldManager",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "fieldSelector": {
      "description": "A selector to restrict the list of returned objects by their fields. Defaults to everything. The accepted value is a comma-separated list of *terms*. Backslash-escaped commas are treated as data instead of delimiters, and included in the returned terms with the leading backslash perserved. Each *term* consists of a *key*, an *operator*, and a *value*. The *key* cannot contain escaped special character so the first occurence of a recognized operator is used as the split point. The literal of the *value* is parsed when the *operator* is successfully extracted. A valid operator must be one of `!=`, `==` and `=`, where `==` is equivalent to `=`. When there are multiple terms in the selector list, they are combined using logical **AND** operation.",
      "in": "query",
      "name": "fieldSelector",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "force": {
      "description": "Force is going to *force* apply requests. It means user will re-acquire conflicting fields owned by other people. The `force` flag must be unset for non-apply patch requests.",
      "in": "query",
      "name": "force",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "gracePeriodSeconds": {
      "description": "The duration in seconds before the object should be deleted. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period for the specified type will be used. Defaults to a per object value if not specified.",
      "in": "query",
      "name": "gracePeriodSeconds",
      "required": false,
      "type": "integer",
      "uniqueItems": true
    },
    "labelSelector": {
      "description": "A selector to restrict the list of returned objects by their labels.",
      "in": "query",
      "name": "labelSelector",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "limit": {
      "description": "`limit` is a maximum number of objects to return from a list call. If more items exist, the server will set the `continue` field on the list metadata to a value that can be used with the same initial query to retrieve the next set of results. Setting a `limit` may return fewer than the requested amount of items (up to zero items) when all requested objects are filtered out and clients should only use the presence of the `continue` field to determine whether more results are available. Servers may choose not to support the `limit` argument and return all the available results. If `limit` is set but the `continue` field is empty, clients may assume that no more results are available. This field is not supported if `watch` is true.\n\nThe server guarantees that the objects returned when using `continue` will be identical to issuing a single list call without a `limit`. In other words, no objects created, modified, or deleted after the first request was issued is included in any subsequent continued requests. This is sometimes referred to as a *consistent snapshot*. It enables a client to use `limit` to receive smaller chunks of a very large result while still can see all possible objects. If objects are updated during a chunked list, the version of the object that was present at the time the first list result was calculated is returned.",
      "in": "query",
      "name": "limit",
      "required": false,
      "type": "integer",
      "uniqueItems": true
    },
    "namespace": {
      "description": "object name and auth scope, such as for teams and projects",
      "in": "path",
      "name": "namespace",
      "required": true,
      "type": "string",
      "uniqueItems": true
    },
    "orphanDependents": {
      "description": "DEPRECATED, please use the `propagationPolicy`.\n\nThis parameter indicates whether the dependent objects should be orphaned. If `true`, the \"orphan\" finalizer will be added to the object's `finalizers` list. Or else the \"orphan\" finalizer will be removed from the object's `finalizers` list. Either this field or `propagationPolicy` may be set, but not both.",
      "in": "query",
      "name": "orphanDependents",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    },
    "pretty": {
      "description": "If `\"true\"`, then the output is pretty printed.",
      "in": "query",
      "name": "pretty",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "propagationPolicy": {
      "description": "Whether and how garbage collection will be performed. Either this field or `orphanDependents` may be set, but not both. The default policy is decided by the existing finalizer set in the `metadata.finalizers` and the resource-specific default policy. Acceptable values are:\n\n- `\"Orphan\"`: orphan the dependents;\n- `\"Background\"`: allow the garbage collector to delete the dependents in the background;\n- `\"Foreground\"`: a cascading policy that deletes all dependents in the foreground.",
      "enum": [
        "Orphan",
        "Background",
        "Foreground"
      ],
      "in": "query",
      "name": "propagationPolicy",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "resourceVersion": {
      "description": "When specified with a **watch** call, shows changes that occur after that particular version of a resource. Defaults to changes from the beginning of history. When specified for **list**:\n\n- if unset, then the result is returned from remote storage based on quorum-read;\n- if it is `\"0\"`, the server returns the objects in cache, no guarantee;\n- if set to non-zero string, the result is at least as fresh as the given `resourceVersion`.\n",
      "in": "query",
      "name": "resourceVersion",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "resourceVersionMatch": {
      "description": "`resourceVersionMatch` determines how `resourceVersion` is applied to **list** requests. It is highly recommended that `resourceVersionMatch` be set for **list** calls where `resourceVersion` is set.\n\nDefaults to unset.",
      "in": "query",
      "name": "resourceVersionMatch",
      "required": false,
      "type": "string",
      "uniqueItems": true
    },
    "timeoutSeconds": {
      "description": "Timeout for the **list**/**watch** requests. This limits the duration of the API call, regardless of any activity or inactivity.",
      "in": "query",
      "name": "timeoutSeconds",
      "required": false,
      "type": "integer",
      "uniqueItems": true
    },
    "watch": {
      "description": "Watch for changes to the described resources and return them as a stream of _add_, _update_, and _remove_ notifications. See also the `resourceVersion` parameter.",
      "in": "query",
      "name": "watch",
      "required": false,
      "type": "boolean",
      "uniqueItems": true
    }
  },
  "paths": {
    "/api/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available API versions for the core API group",
        "operationId": "getCoreAPIVersions",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core"
        ]
      }
    },
    "/api/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getCoreV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ]
      }
    },
    "/api/v1/componentstatuses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list ComponentStatus objects",
        "operationId": "listCoreV1ComponentStatus",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatusList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      }
    },
    "/api/v1/componentstatuses/{name}": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ComponentStatus",
        "operationId": "readCoreV1ComponentStatus",
        "parameters": [
          {
            "description": "name of the ComponentStatus",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ComponentStatus"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ComponentStatus",
          "version": "v1"
        }
      }
    },
    "/api/v1/configmaps": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ConfigMap",
        "operationId": "listCoreV1ConfigMapForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      }
    },
    "/api/v1/endpoints": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Endpoints",
        "operationId": "listCoreV1EndpointsForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EndpointsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      }
    },
    "/api/v1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listCoreV1EventForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/api/v1/limitranges": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind LimitRange",
        "operationId": "listCoreV1LimitRangeForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Namespace",
        "operationId": "listCoreV1Namespace",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.NamespaceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Namespace",
        "operationId": "createCoreV1Namespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/bindings": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Binding",
        "operationId": "createCoreV1NamespacedBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/configmaps": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ConfigMap",
        "operationId": "deleteCoreV1CollectionNamespacedConfigMap",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ConfigMap",
        "operationId": "listCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMapList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ConfigMap",
        "operationId": "createCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ]
      }
    },
    "/api/v1/namespaces/{namespace}/configmaps/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ConfigMap",
        "operationId": "deleteCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ConfigMap",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ]
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ConfigMap",
        "operationId": "readCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ConfigMap",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ConfigMap",
        "operationId": "patchCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ConfigMap",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          },
          "403": {
            "description": "Forbidden",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "422": {
            "description": "Unprocessable entity.",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ConfigMap",
        "operationId": "replaceCoreV1NamespacedConfigMap",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ConfigMap",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ConfigMap.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ConfigMap",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/endpoints": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Endpoints",
        "operationId": "deleteCoreV1CollectionNamespacedEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Endpoints",
        "operationId": "listCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EndpointsList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create Endpoints",
        "operationId": "createCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/endpoints/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete Endpoints",
        "operationId": "deleteCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Endpoints",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Endpoints",
        "operationId": "readCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Endpoints",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Endpoints",
        "operationId": "patchCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Endpoints",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Endpoints",
        "operationId": "replaceCoreV1NamespacedEndpoints",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Endpoints",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Endpoints.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Endpoints",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/events": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Event",
        "operationId": "deleteCoreV1CollectionNamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listCoreV1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Event",
        "operationId": "createCoreV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/events/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Event",
        "operationId": "deleteCoreV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Event",
        "operationId": "readCoreV1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Event",
        "operationId": "patchCoreV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Event",
        "operationId": "replaceCoreV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/limitranges": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of LimitRange",
        "operationId": "deleteCoreV1CollectionNamespacedLimitRange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind LimitRange",
        "operationId": "listCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRangeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LimitRange",
        "operationId": "createCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/limitranges/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a LimitRange",
        "operationId": "deleteCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the LimitRange",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified LimitRange",
        "operationId": "readCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the LimitRange",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified LimitRange",
        "operationId": "patchCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the LimitRange",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified LimitRange",
        "operationId": "replaceCoreV1NamespacedLimitRange",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the LimitRange",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.LimitRange.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "LimitRange",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PersistentVolumeClaim",
        "operationId": "deleteCoreV1CollectionNamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PersistentVolumeClaim",
        "operationId": "listCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PersistentVolumeClaim",
        "operationId": "createCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PersistentVolumeClaim",
        "operationId": "deleteCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PersistentVolumeClaim",
        "operationId": "readCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PersistentVolumeClaim",
        "operationId": "patchCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PersistentVolumeClaim",
        "operationId": "replaceCoreV1NamespacedPersistentVolumeClaim",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified PersistentVolumeClaim",
        "operationId": "readCoreV1NamespacedPersistentVolumeClaimStatus",
        "parameters": [
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified PersistentVolumeClaim",
        "operationId": "patchCoreV1NamespacedPersistentVolumeClaimStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified PersistentVolumeClaim",
        "operationId": "replaceCoreV1NamespacedPersistentVolumeClaimStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolumeClaim",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Pod",
        "operationId": "deleteCoreV1CollectionNamespacedPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Pod",
        "operationId": "listCoreV1NamespacedPod",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Pod",
        "operationId": "createCoreV1NamespacedPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Pod",
        "operationId": "deleteCoreV1NamespacedPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Pod",
        "operationId": "readCoreV1NamespacedPod",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Pod",
        "operationId": "patchCoreV1NamespacedPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Pod",
        "operationId": "replaceCoreV1NamespacedPod",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/attach": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "connect GET requests to attach of Pod",
        "operationId": "connectCoreV1GetNamespacedPodAttach",
        "parameters": [
          {
            "description": "The container in which to execute the command. Defaults to only container if there is only one container in the pod.",
            "in": "query",
            "name": "container",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Flag indicates that stderr is to be redirected for the attach call. Defaults to true.",
            "in": "query",
            "name": "stderr",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Flag indicates whethere the stdin stream of the Pod is to be redirected for the attach call. Defaults to false.",
            "in": "query",
            "name": "stdin",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Flag indicates whether the stdout is to be redirected for the attach call. Defaults to true.",
            "in": "query",
            "name": "stdout",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "This indicates that a TTY will be allocated for the attach call. This is passed through the container runtime so the TTY is allocated on the worker node by the container runtime. Defaults to false.",
            "in": "query",
            "name": "tty",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodAttachOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "connect POST requests to attach of Pod",
        "operationId": "connectCoreV1PostNamespacedPodAttach",
        "parameters": [
          {
            "description": "The container to attach. Defaults to the only container if there is only one container in the Pod.",
            "in": "query",
            "name": "container",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "This indicates whether the stderr is to be redirected for the attach call. Defaults to true.",
            "in": "query",
            "name": "stderr",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "This inidcates whether the standard input stream of the Pod is to be redirected for this call. Defaults to false.",
            "in": "query",
            "name": "stdin",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "This indicates whether the stdout is to be redirected for the attach call. Defaults to true.",
            "in": "query",
            "name": "stdout",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "This indicates whether a TTY will be allocated for the attach call. This is passed through the container runtime so the TTY is allocated on the worker node by the container runtime. Defaults to false.",
            "in": "query",
            "name": "tty",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodAttachOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/binding": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create binding of a Pod",
        "operationId": "createCoreV1NamespacedPodBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Binding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Binding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Binding",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/eviction": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create eviction of a Pod",
        "operationId": "createCoreV1NamespacedPodEviction",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Eviction",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.Eviction"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "Eviction",
          "version": "v1beta1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/exec": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET requests to exec of Pod",
        "operationId": "connectCoreV1GetNamespacedPodExec",
        "parameters": [
          {
            "description": "Command is the remote command to execute. argv array. Not executed within a shell.",
            "in": "query",
            "name": "command",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Container in which to execute the command. Defaults to only container if there is only one container in the pod.",
            "in": "query",
            "name": "container",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Redirect the standard error stream of the pod for this call. Defaults to true.",
            "in": "query",
            "name": "stderr",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Redirect the standard input stream of the pod for this call. Defaults to false.",
            "in": "query",
            "name": "stdin",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Redirect the standard output stream of the pod for this call. Defaults to true.",
            "in": "query",
            "name": "stdout",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "If true indicates that a TTY will be allocated for the exec call. Defaults to false.",
            "in": "query",
            "name": "tty",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodExecOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to exec of Pod",
        "operationId": "connectCoreV1PostNamespacedPodExec",
        "parameters": [
          {
            "description": "Command is the remote command to execute. argv array. Not executed within a shell.",
            "in": "query",
            "name": "command",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Container in which to execute the command. Defaults to only container if there is only one container in the Pod.",
            "in": "query",
            "name": "container",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Redirect the standard error stream of the Pod for this call. Defaults to true.",
            "in": "query",
            "name": "stderr",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Redirect the standard input stream of the Pod for this call. Defaults to false.",
            "in": "query",
            "name": "stdin",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "Redirect the standard output stream of the Pod for this call. Defaults to true.",
            "in": "query",
            "name": "stdout",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "If true indicates that a TTY will be allocated for the exec call. Defaults to false.",
            "in": "query",
            "name": "tty",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodExecOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/log": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read log of the specified Pod",
        "operationId": "readCoreV1NamespacedPodLog",
        "parameters": [
          {
            "description": "The container for which to stream logs. Defaults to only container if there is one container in the pod.",
            "in": "query",
            "name": "container",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Follow the log stream of the pod. Defaults to false.",
            "in": "query",
            "name": "follow",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "insecureSkipTLSVerifyBackend indicates that the API server should not confirm the validity of the serving certificate of the backend it is connecting to. This will make the HTTPS connection between the API server and the backend insecure. This means the API server cannot verify the log data it is receiving came from the real kubelet. If the `kubelet` is configured to verify the API server's TLS credentials, it does not mean the connection to the real `kubelet` is vulnerable to a man in the middle attack (e.g. an attacker could not intercept the actual log data coming from the real `kubelet`).",
            "in": "query",
            "name": "insecureSkipTLSVerifyBackend",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "If set, the number of bytes to read from the server before terminating the log output. This may not display a complete final line of logging, and may return slightly more or slightly less than the specified limit.",
            "in": "query",
            "name": "limitBytes",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "description": "Return previous terminated container logs. Defaults to false.",
            "in": "query",
            "name": "previous",
            "type": "boolean",
            "uniqueItems": true
          },
          {
            "description": "A relative time in seconds before the current time from which to show logs. If this value precedes the time a pod was started, only logs since the pod start will be returned. If this value is in the future, no logs will be returned. Only one of `sinceSeconds` or `sinceTime may` be specified.",
            "in": "query",
            "name": "sinceSeconds",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "description": "An RFC3339 timestamp from which to show logs. If this value precedes the time a Pod was started, only logs since the Pod start will be returned. If this value is in the future, no logs will be returned. Only one of `sinceSeconds` or `sinceTime` may be specified.",
            "in": "query",
            "name": "sinceTime",
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "If set, the number of lines from the end of the logs to show. If not specified, logs are shown from the creation of the container or `sinceSeconds` or `sinceTime`.",
            "in": "query",
            "name": "tailLines",
            "type": "integer",
            "uniqueItems": true
          },
          {
            "default": false,
            "description": "If true, add an RFC 3339 timestamp with 9 digits of fractional seconds at the beginning of every line of log output.",
            "in": "query",
            "name": "timestamps",
            "type": "boolean",
            "uniqueItems": true
          }
        ],
        "produces": [
          "text/plain",
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/portforward": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET requests to portforward of Pod",
        "operationId": "connectCoreV1GetNamespacedPodPortforward",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "List of ports to forward. Required when using WebSockets",
            "in": "query",
            "name": "ports",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodPortForwardOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to portforward of Pod",
        "operationId": "connectCoreV1PostNamespacedPodPortforward",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "List of ports to forward. Required when using WebSockets",
            "in": "query",
            "name": "ports",
            "type": "integer",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodPortForwardOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/proxy": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "send DELETE requests to proxy of Pod",
        "operationId": "connectCoreV1DeleteNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET requests to proxy of Pod",
        "operationId": "connectCoreV1GetNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "head": {
        "consumes": [
          "*/*"
        ],
        "description": "send HEAD requests to proxy of Pod",
        "operationId": "connectCoreV1HeadNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "options": {
        "consumes": [
          "*/*"
        ],
        "description": "send OPTIONS requests to proxy of Pod",
        "operationId": "connectCoreV1OptionsNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "*/*"
        ],
        "description": "send PATCH requests to proxy of Pod",
        "operationId": "connectCoreV1PatchNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to proxy of Pod",
        "operationId": "connectCoreV1PostNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "send PUT requests to proxy of Pod",
        "operationId": "connectCoreV1PutNamespacedPodProxy",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "send DELETE requests to proxy of Pod",
        "operationId": "connectCoreV1DeleteNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET requests to proxy of Pod",
        "operationId": "connectCoreV1GetNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "head": {
        "consumes": [
          "*/*"
        ],
        "description": "send HEAD requests to proxy of Pod",
        "operationId": "connectCoreV1HeadNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "options": {
        "consumes": [
          "*/*"
        ],
        "description": "send OPTIONS requests to proxy of Pod",
        "operationId": "connectCoreV1OptionsNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "*/*"
        ],
        "description": "send PATCH requests to proxy of Pod",
        "operationId": "connectCoreV1PatchNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to proxy of Pod",
        "operationId": "connectCoreV1PostNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "send PUT requests to proxy of Pod",
        "operationId": "connectCoreV1PutNamespacedPodProxyWithPath",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to pod.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodProxyOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/pods/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Pod",
        "operationId": "readCoreV1NamespacedPodStatus",
        "parameters": [
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Pod",
        "operationId": "patchCoreV1NamespacedPodStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Pod",
        "operationId": "replaceCoreV1NamespacedPodStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Pod",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Pod.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/podtemplates": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodTemplate",
        "operationId": "deleteCoreV1CollectionNamespacedPodTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodTemplate",
        "operationId": "listCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PodTemplate",
        "operationId": "createCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/podtemplates/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PodTemplate",
        "operationId": "deleteCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PodTemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PodTemplate",
        "operationId": "readCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PodTemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PodTemplate",
        "operationId": "patchCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodTemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PodTemplate",
        "operationId": "replaceCoreV1NamespacedPodTemplate",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodTemplate",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplate.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ReplicationController",
        "operationId": "deleteCoreV1CollectionNamespacedReplicationController",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicationController",
        "operationId": "listCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ReplicationController",
        "operationId": "createCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ReplicationController",
        "operationId": "deleteCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ReplicationController",
        "operationId": "readCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ReplicationController",
        "operationId": "patchCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ReplicationController",
        "operationId": "replaceCoreV1NamespacedReplicationController",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read scale of the specified ReplicationController",
        "operationId": "readCoreV1NamespacedReplicationControllerScale",
        "parameters": [
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update scale of the specified ReplicationController",
        "operationId": "patchCoreV1NamespacedReplicationControllerScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace scale of the specified ReplicationController",
        "operationId": "replaceCoreV1NamespacedReplicationControllerScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified ReplicationController",
        "operationId": "readCoreV1NamespacedReplicationControllerStatus",
        "parameters": [
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified ReplicationController",
        "operationId": "patchCoreV1NamespacedReplicationControllerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified ReplicationController",
        "operationId": "replaceCoreV1NamespacedReplicationControllerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicationController",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationController.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ResourceQuota",
        "operationId": "deleteCoreV1CollectionNamespacedResourceQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ResourceQuota",
        "operationId": "listCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ResourceQuota",
        "operationId": "createCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ResourceQuota",
        "operationId": "deleteCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ResourceQuota",
        "operationId": "readCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ResourceQuota",
        "operationId": "patchCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ResourceQuota",
        "operationId": "replaceCoreV1NamespacedResourceQuota",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/resourcequotas/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified ResourceQuota",
        "operationId": "readCoreV1NamespacedResourceQuotaStatus",
        "parameters": [
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified ResourceQuota",
        "operationId": "patchCoreV1NamespacedResourceQuotaStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified ResourceQuota",
        "operationId": "replaceCoreV1NamespacedResourceQuotaStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ResourceQuota",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuota.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/secrets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Secret",
        "operationId": "deleteCoreV1CollectionNamespacedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Secret",
        "operationId": "listCoreV1NamespacedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.SecretList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Secret",
        "operationId": "createCoreV1NamespacedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/secrets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Secret",
        "operationId": "deleteCoreV1NamespacedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Secret",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Secret",
        "operationId": "readCoreV1NamespacedSecret",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Secret",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Secret",
        "operationId": "patchCoreV1NamespacedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Secret",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Secret",
        "operationId": "replaceCoreV1NamespacedSecret",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Secret",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Secret.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ServiceAccount",
        "operationId": "deleteCoreV1CollectionNamespacedServiceAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ServiceAccount",
        "operationId": "listCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ServiceAccount",
        "operationId": "createCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ServiceAccount",
        "operationId": "deleteCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ServiceAccount",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ServiceAccount",
        "operationId": "readCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ServiceAccount",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ServiceAccount",
        "operationId": "patchCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ServiceAccount",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ServiceAccount",
        "operationId": "replaceCoreV1NamespacedServiceAccount",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ServiceAccount",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccount.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/serviceaccounts/{name}/token": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create token of a ServiceAccount",
        "operationId": "createCoreV1NamespacedServiceAccountToken",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.CREATE"
            }
          },
          {
            "description": "name of the TokenRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.k8s.io",
          "kind": "TokenRequest",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Service",
        "operationId": "listCoreV1NamespacedService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Service",
        "operationId": "createCoreV1NamespacedService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Service",
        "operationId": "deleteCoreV1NamespacedService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Service",
        "operationId": "readCoreV1NamespacedService",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Service",
        "operationId": "patchCoreV1NamespacedService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Service",
        "operationId": "replaceCoreV1NamespacedService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}/proxy": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "send DELETE requests to proxy of Service",
        "operationId": "connectCoreV1DeleteNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET requests to proxy of Service",
        "operationId": "connectCoreV1GetNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "head": {
        "consumes": [
          "*/*"
        ],
        "description": "send HEAD requests to proxy of Service",
        "operationId": "connectCoreV1HeadNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "options": {
        "consumes": [
          "*/*"
        ],
        "description": "send OPTIONS requests to proxy of Service",
        "operationId": "connectCoreV1OptionsNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "*/*"
        ],
        "description": "send PATCH requests to proxy of Service",
        "operationId": "connectCoreV1PatchNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to proxy of Service",
        "operationId": "connectCoreV1PostNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "send PUT requests to proxy of Service",
        "operationId": "connectCoreV1PutNamespacedServiceProxy",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}/proxy/{path}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "send DELETE requests to proxy of Service",
        "operationId": "connectCoreV1DeleteNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET requests to proxy of Service",
        "operationId": "connectCoreV1GetNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "head": {
        "consumes": [
          "*/*"
        ],
        "description": "send HEAD requests to proxy of Service",
        "operationId": "connectCoreV1HeadNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "options": {
        "consumes": [
          "*/*"
        ],
        "description": "send OPTIONS requests to proxy of Service",
        "operationId": "connectCoreV1OptionsNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "*/*"
        ],
        "description": "send PATCH requests to proxy of Service",
        "operationId": "connectCoreV1PatchNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to proxy of Service",
        "operationId": "connectCoreV1PostNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "send PUT requests to proxy of Service",
        "operationId": "connectCoreV1PutNamespacedServiceProxyWithPath",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the part of URLs that include service endpoints, suffixes, and parameters to use for the current proxy request to service. For example, the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`. Path is `_search?q=user:kimchy`.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceProxyOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{namespace}/services/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Service",
        "operationId": "readCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Service",
        "operationId": "patchCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Service",
        "operationId": "replaceCoreV1NamespacedServiceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Service",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Service.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Namespace",
        "operationId": "deleteCoreV1Namespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Namespace",
        "operationId": "readCoreV1Namespace",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Namespace",
        "operationId": "patchCoreV1Namespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Namespace",
        "operationId": "replaceCoreV1Namespace",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{name}/finalize": {
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace finalize of the specified Namespace",
        "operationId": "replaceCoreV1NamespaceFinalize",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/namespaces/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Namespace",
        "operationId": "readCoreV1NamespaceStatus",
        "parameters": [
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Namespace",
        "operationId": "patchCoreV1NamespaceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Namespace",
        "operationId": "replaceCoreV1NamespaceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Namespace",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Namespace.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Namespace",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Node",
        "operationId": "deleteCoreV1CollectionNode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Node",
        "operationId": "listCoreV1Node",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.NodeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Node",
        "operationId": "createCoreV1Node",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Node",
        "operationId": "deleteCoreV1Node",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Node",
        "operationId": "readCoreV1Node",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Node",
        "operationId": "patchCoreV1Node",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Node",
        "operationId": "replaceCoreV1Node",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes/{name}/proxy": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "connect DELETE requests to proxy of Node",
        "operationId": "connectCoreV1DeleteNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET request to proxy of Node",
        "operationId": "connectCoreV1GetNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "head": {
        "consumes": [
          "*/*"
        ],
        "description": "send HEAD requests to proxy of Node",
        "operationId": "connectCoreV1HeadNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "options": {
        "consumes": [
          "*/*"
        ],
        "description": "send OPTIONS requests to proxy of Node",
        "operationId": "connectCoreV1OptionsNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "*/*"
        ],
        "description": "send PATCH requests to proxy of Node",
        "operationId": "connectCoreV1PatchNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to proxy of Node",
        "operationId": "connectCoreV1PostNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "send PUT requests to proxy of Node",
        "operationId": "connectCoreV1PutNodeProxy",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes/{name}/proxy/{path}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "connect DELETE requests to proxy of Node",
        "operationId": "connectCoreV1DeleteNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "send GET request to proxy of Node",
        "operationId": "connectCoreV1GetNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "head": {
        "consumes": [
          "*/*"
        ],
        "description": "send HEAD requests to proxy of Node",
        "operationId": "connectCoreV1HeadNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "options": {
        "consumes": [
          "*/*"
        ],
        "description": "send OPTIONS requests to proxy of Node",
        "operationId": "connectCoreV1OptionsNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "*/*"
        ],
        "description": "send PATCH requests to proxy of Node",
        "operationId": "connectCoreV1PatchNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "send POST requests to proxy of Node",
        "operationId": "connectCoreV1PostNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "send PUT requests to proxy of Node",
        "operationId": "connectCoreV1PutNodeProxyWithPath",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "path to the resource",
            "in": "path",
            "name": "path",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "description": "Path is the URL path to use for the current proxy request to node.",
            "in": "query",
            "name": "path",
            "type": "string",
            "uniqueItems": true
          }
        ],
        "produces": [
          "*/*"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "type": "string"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "connect",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "NodeProxyOptions",
          "version": "v1"
        }
      }
    },
    "/api/v1/nodes/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Node",
        "operationId": "readCoreV1NodeStatus",
        "parameters": [
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Node",
        "operationId": "patchCoreV1NodeStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Node",
        "operationId": "replaceCoreV1NodeStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Node",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "201": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.Node.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Node",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumeclaims": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PersistentVolumeClaim",
        "operationId": "listCoreV1PersistentVolumeClaimForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolumeClaim",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumes": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PersistentVolume",
        "operationId": "deleteCoreV1CollectionPersistentVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PersistentVolume",
        "operationId": "listCoreV1PersistentVolume",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PersistentVolume",
        "operationId": "createCoreV1PersistentVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumes/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PersistentVolume",
        "operationId": "deleteCoreV1PersistentVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PersistentVolume",
        "operationId": "readCoreV1PersistentVolume",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PersistentVolume",
        "operationId": "patchCoreV1PersistentVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PersistentVolume",
        "operationId": "replaceCoreV1PersistentVolume",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      }
    },
    "/api/v1/persistentvolumes/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified PersistentVolume",
        "operationId": "readCoreV1PersistentVolumeStatus",
        "parameters": [
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified PersistentVolume",
        "operationId": "patchCoreV1PersistentVolumeStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified PersistentVolume",
        "operationId": "replaceCoreV1PersistentVolumeStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PersistentVolume",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolume.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PersistentVolume",
          "version": "v1"
        }
      }
    },
    "/api/v1/pods": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Pod",
        "operationId": "listCoreV1PodForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Pod",
          "version": "v1"
        }
      }
    },
    "/api/v1/podtemplates": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodTemplate",
        "operationId": "listCoreV1PodTemplateForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.PodTemplateList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "PodTemplate",
          "version": "v1"
        }
      }
    },
    "/api/v1/replicationcontrollers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicationController",
        "operationId": "listCoreV1ReplicationControllerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ReplicationControllerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ReplicationController",
          "version": "v1"
        }
      }
    },
    "/api/v1/resourcequotas": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ResourceQuota",
        "operationId": "listCoreV1ResourceQuotaForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ResourceQuotaList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ResourceQuota",
          "version": "v1"
        }
      }
    },
    "/api/v1/secrets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Secret",
        "operationId": "listCoreV1SecretForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.SecretList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Secret",
          "version": "v1"
        }
      }
    },
    "/api/v1/serviceaccounts": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ServiceAccount",
        "operationId": "listCoreV1ServiceAccountForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceAccountList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "ServiceAccount",
          "version": "v1"
        }
      }
    },
    "/api/v1/services": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Service",
        "operationId": "listCoreV1ServiceForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.core.v1.ServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "core_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "",
          "kind": "Service",
          "version": "v1"
        }
      }
    },
    "/apis/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available API groups",
        "operationId": "getAPIVersions",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apis"
        ]
      }
    },
    "/apis/admissionregistration.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the admissionregistration API group",
        "operationId": "getAdmissionregistrationAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration"
        ]
      }
    },
    "/apis/admissionregistration.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAdmissionregistrationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ]
      }
    },
    "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind MutatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a MutatingWebhookConfiguration",
        "operationId": "createAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified MutatingWebhookConfiguration",
        "operationId": "readAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified MutatingWebhookConfiguration",
        "operationId": "patchAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified MutatingWebhookConfiguration",
        "operationId": "replaceAdmissionregistrationV1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ValidatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ValidatingWebhookConfiguration",
        "operationId": "createAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ValidatingWebhookConfiguration",
        "operationId": "readAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ValidatingWebhookConfiguration",
        "operationId": "patchAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ValidatingWebhookConfiguration",
        "operationId": "replaceAdmissionregistrationV1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAdmissionregistrationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ]
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1beta1CollectionMutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind MutatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a MutatingWebhookConfiguration",
        "operationId": "createAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/mutatingwebhookconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a MutatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified MutatingWebhookConfiguration",
        "operationId": "readAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified MutatingWebhookConfiguration",
        "operationId": "patchAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified MutatingWebhookConfiguration",
        "operationId": "replaceAdmissionregistrationV1beta1MutatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the MutatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.MutatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "MutatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1beta1CollectionValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ValidatingWebhookConfiguration",
        "operationId": "listAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ValidatingWebhookConfiguration",
        "operationId": "createAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/admissionregistration.k8s.io/v1beta1/validatingwebhookconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ValidatingWebhookConfiguration",
        "operationId": "deleteAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ValidatingWebhookConfiguration",
        "operationId": "readAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ValidatingWebhookConfiguration",
        "operationId": "patchAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ValidatingWebhookConfiguration",
        "operationId": "replaceAdmissionregistrationV1beta1ValidatingWebhookConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ValidatingWebhookConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingWebhookConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "admissionregistration_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "admissionregistration.k8s.io",
          "kind": "ValidatingWebhookConfiguration",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the apiextensions API group",
        "operationId": "getApiextensionsAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions"
        ]
      }
    },
    "/apis/apiextensions.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getApiextensionsV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ]
      }
    },
    "/apis/apiextensions.k8s.io/v1/customresourcedefinitions": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1CollectionCustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CustomResourceDefinition",
        "operationId": "listApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CustomResourceDefinition",
        "operationId": "createApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CustomResourceDefinition",
        "operationId": "readApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CustomResourceDefinition",
        "operationId": "patchApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CustomResourceDefinition",
        "operationId": "replaceApiextensionsV1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CustomResourceDefinition",
        "operationId": "readApiextensionsV1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CustomResourceDefinition",
        "operationId": "patchApiextensionsV1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CustomResourceDefinition",
        "operationId": "replaceApiextensionsV1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getApiextensionsV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ]
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1beta1CollectionCustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CustomResourceDefinition",
        "operationId": "listApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinitionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CustomResourceDefinition",
        "operationId": "createApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CustomResourceDefinition",
        "operationId": "deleteApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CustomResourceDefinition",
        "operationId": "readApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CustomResourceDefinition",
        "operationId": "patchApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CustomResourceDefinition",
        "operationId": "replaceApiextensionsV1beta1CustomResourceDefinition",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiextensions.k8s.io/v1beta1/customresourcedefinitions/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CustomResourceDefinition",
        "operationId": "readApiextensionsV1beta1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CustomResourceDefinition",
        "operationId": "patchApiextensionsV1beta1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CustomResourceDefinition",
        "operationId": "replaceApiextensionsV1beta1CustomResourceDefinitionStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CustomResourceDefinition",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1beta1.CustomResourceDefinition.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiextensions_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiextensions.k8s.io",
          "kind": "CustomResourceDefinition",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the apiregistration API group",
        "operationId": "getApiregistrationAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration"
        ]
      }
    },
    "/apis/apiregistration.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getApiregistrationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ]
      }
    },
    "/apis/apiregistration.k8s.io/v1/apiservices": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of APIService",
        "operationId": "deleteApiregistrationV1CollectionAPIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind APIService",
        "operationId": "listApiregistrationV1APIService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an APIService",
        "operationId": "createApiregistrationV1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1/apiservices/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an APIService",
        "operationId": "deleteApiregistrationV1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified APIService",
        "operationId": "readApiregistrationV1APIService",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified APIService",
        "operationId": "patchApiregistrationV1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified APIService",
        "operationId": "replaceApiregistrationV1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1/apiservices/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified APIService",
        "operationId": "readApiregistrationV1APIServiceStatus",
        "parameters": [
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified APIService",
        "operationId": "patchApiregistrationV1APIServiceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified APIService",
        "operationId": "replaceApiregistrationV1APIServiceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getApiregistrationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ]
      }
    },
    "/apis/apiregistration.k8s.io/v1beta1/apiservices": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of APIService",
        "operationId": "deleteApiregistrationV1beta1CollectionAPIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind APIService",
        "operationId": "listApiregistrationV1beta1APIService",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIServiceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an APIService",
        "operationId": "createApiregistrationV1beta1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an APIService",
        "operationId": "deleteApiregistrationV1beta1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified APIService",
        "operationId": "readApiregistrationV1beta1APIService",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified APIService",
        "operationId": "patchApiregistrationV1beta1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified APIService",
        "operationId": "replaceApiregistrationV1beta1APIService",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apiregistration.k8s.io/v1beta1/apiservices/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified APIService",
        "operationId": "readApiregistrationV1beta1APIServiceStatus",
        "parameters": [
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified APIService",
        "operationId": "patchApiregistrationV1beta1APIServiceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified APIService",
        "operationId": "replaceApiregistrationV1beta1APIServiceStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the APIService",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.APIService.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apiregistration_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apiregistration.k8s.io",
          "kind": "APIService",
          "version": "v1beta1"
        }
      }
    },
    "/apis/apps/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the apps API group",
        "operationId": "getAppsAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps"
        ]
      }
    },
    "/apis/apps/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAppsV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ]
      }
    },
    "/apis/apps/v1/controllerrevisions": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ControllerRevision",
        "operationId": "listAppsV1ControllerRevisionForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevisionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/daemonsets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DaemonSet",
        "operationId": "listAppsV1DaemonSetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/deployments": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Deployment",
        "operationId": "listAppsV1DeploymentForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/controllerrevisions": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ControllerRevision",
        "operationId": "deleteAppsV1CollectionNamespacedControllerRevision",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ControllerRevision",
        "operationId": "listAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevisionList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ControllerRevision",
        "operationId": "createAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ControllerRevision",
        "operationId": "deleteAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ControllerRevision",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ControllerRevision",
        "operationId": "readAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ControllerRevision",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ControllerRevision",
        "operationId": "patchAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ControllerRevision",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ControllerRevision",
        "operationId": "replaceAppsV1NamespacedControllerRevision",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ControllerRevision",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ControllerRevision",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/daemonsets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of DaemonSet",
        "operationId": "deleteAppsV1CollectionNamespacedDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind DaemonSet",
        "operationId": "listAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a DaemonSet",
        "operationId": "createAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a DaemonSet",
        "operationId": "deleteAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified DaemonSet",
        "operationId": "readAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified DaemonSet",
        "operationId": "patchAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified DaemonSet",
        "operationId": "replaceAppsV1NamespacedDaemonSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified DaemonSet",
        "operationId": "readAppsV1NamespacedDaemonSetStatus",
        "parameters": [
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified DaemonSet",
        "operationId": "patchAppsV1NamespacedDaemonSetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified DaemonSet",
        "operationId": "replaceAppsV1NamespacedDaemonSetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the DaemonSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DaemonSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "DaemonSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Deployment",
        "operationId": "deleteAppsV1CollectionNamespacedDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Deployment",
        "operationId": "listAppsV1NamespacedDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.DeploymentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Deployment",
        "operationId": "createAppsV1NamespacedDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Deployment",
        "operationId": "deleteAppsV1NamespacedDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Deployment",
        "operationId": "readAppsV1NamespacedDeployment",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Deployment",
        "operationId": "patchAppsV1NamespacedDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Deployment",
        "operationId": "replaceAppsV1NamespacedDeployment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read scale of the specified Deployment",
        "operationId": "readAppsV1NamespacedDeploymentScale",
        "parameters": [
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update scale of the specified Deployment",
        "operationId": "patchAppsV1NamespacedDeploymentScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace scale of the specified Deployment",
        "operationId": "replaceAppsV1NamespacedDeploymentScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/deployments/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Deployment",
        "operationId": "readAppsV1NamespacedDeploymentStatus",
        "parameters": [
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Deployment",
        "operationId": "patchAppsV1NamespacedDeploymentStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Deployment",
        "operationId": "replaceAppsV1NamespacedDeploymentStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Deployment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.Deployment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "Deployment",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ReplicaSet",
        "operationId": "deleteAppsV1CollectionNamespacedReplicaSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicaSet",
        "operationId": "listAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ReplicaSet",
        "operationId": "createAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ReplicaSet",
        "operationId": "deleteAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ReplicaSet",
        "operationId": "readAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ReplicaSet",
        "operationId": "patchAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ReplicaSet",
        "operationId": "replaceAppsV1NamespacedReplicaSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read scale of the specified ReplicaSet",
        "operationId": "readAppsV1NamespacedReplicaSetScale",
        "parameters": [
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update scale of the specified ReplicaSet",
        "operationId": "patchAppsV1NamespacedReplicaSetScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace scale of the specified ReplicaSet",
        "operationId": "replaceAppsV1NamespacedReplicaSetScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified ReplicaSet",
        "operationId": "readAppsV1NamespacedReplicaSetStatus",
        "parameters": [
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified ReplicaSet",
        "operationId": "patchAppsV1NamespacedReplicaSetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified ReplicaSet",
        "operationId": "replaceAppsV1NamespacedReplicaSetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ReplicaSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of StatefulSet",
        "operationId": "deleteAppsV1CollectionNamespacedStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StatefulSet",
        "operationId": "listAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a StatefulSet",
        "operationId": "createAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a StatefulSet",
        "operationId": "deleteAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified StatefulSet",
        "operationId": "readAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified StatefulSet",
        "operationId": "patchAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified StatefulSet",
        "operationId": "replaceAppsV1NamespacedStatefulSet",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read scale of the specified StatefulSet",
        "operationId": "readAppsV1NamespacedStatefulSetScale",
        "parameters": [
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update scale of the specified StatefulSet",
        "operationId": "patchAppsV1NamespacedStatefulSetScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace scale of the specified StatefulSet",
        "operationId": "replaceAppsV1NamespacedStatefulSetScale",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Scale",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.Scale.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "Scale",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified StatefulSet",
        "operationId": "readAppsV1NamespacedStatefulSetStatus",
        "parameters": [
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified StatefulSet",
        "operationId": "patchAppsV1NamespacedStatefulSetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified StatefulSet",
        "operationId": "replaceAppsV1NamespacedStatefulSetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the StatefulSet",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSet.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/replicasets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ReplicaSet",
        "operationId": "listAppsV1ReplicaSetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.ReplicaSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "ReplicaSet",
          "version": "v1"
        }
      }
    },
    "/apis/apps/v1/statefulsets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StatefulSet",
        "operationId": "listAppsV1StatefulSetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.apps.v1.StatefulSetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "apps_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "apps",
          "kind": "StatefulSet",
          "version": "v1"
        }
      }
    },
    "/apis/authentication.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the authentication API group",
        "operationId": "getAuthenticationAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication"
        ]
      }
    },
    "/apis/authentication.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAuthenticationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication_v1"
        ]
      }
    },
    "/apis/authentication.k8s.io/v1/tokenreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a TokenReview",
        "operationId": "createAuthenticationV1TokenReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1.TokenReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1"
        }
      }
    },
    "/apis/authentication.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAuthenticationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication_v1beta1"
        ]
      }
    },
    "/apis/authentication.k8s.io/v1beta1/tokenreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a TokenReview",
        "operationId": "createAuthenticationV1beta1TokenReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authentication.v1beta1.TokenReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authentication_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authentication.k8s.io",
          "kind": "TokenReview",
          "version": "v1beta1"
        }
      }
    },
    "/apis/authorization.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the authorization API group",
        "operationId": "getAuthorizationAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization"
        ]
      }
    },
    "/apis/authorization.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAuthorizationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ]
      }
    },
    "/apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LocalSubjectAccessReview",
        "operationId": "createAuthorizationV1NamespacedLocalSubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/selfsubjectaccessreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SelfSubjectAccessReview",
        "operationId": "createAuthorizationV1SelfSubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/selfsubjectrulesreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SelfSubjectRulesReview",
        "operationId": "createAuthorizationV1SelfSubjectRulesReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1/subjectaccessreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SubjectAccessReview",
        "operationId": "createAuthorizationV1SubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAuthorizationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1beta1"
        ]
      }
    },
    "/apis/authorization.k8s.io/v1beta1/namespaces/{namespace}/localsubjectaccessreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a LocalSubjectAccessReview",
        "operationId": "createAuthorizationV1beta1NamespacedLocalSubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.LocalSubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "LocalSubjectAccessReview",
          "version": "v1beta1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1beta1/selfsubjectaccessreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SelfSubjectAccessReview",
        "operationId": "createAuthorizationV1beta1SelfSubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectAccessReview",
          "version": "v1beta1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1beta1/selfsubjectrulesreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SelfSubjectRulesReview",
        "operationId": "createAuthorizationV1beta1SelfSubjectRulesReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SelfSubjectRulesReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SelfSubjectRulesReview",
          "version": "v1beta1"
        }
      }
    },
    "/apis/authorization.k8s.io/v1beta1/subjectaccessreviews": {
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a SubjectAccessReview",
        "operationId": "createAuthorizationV1beta1SubjectAccessReview",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.authorization.v1beta1.SubjectAccessReview.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "authorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "authorization.k8s.io",
          "kind": "SubjectAccessReview",
          "version": "v1beta1"
        }
      }
    },
    "/apis/autoscaling/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the autoscaling API group",
        "operationId": "getAutoscalingAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling"
        ]
      }
    },
    "/apis/autoscaling/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAutoscalingV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ]
      }
    },
    "/apis/autoscaling/v1/horizontalpodautoscalers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a HorizontalPodAutoscaler",
        "operationId": "createAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified HorizontalPodAutoscaler",
        "operationId": "readAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified HorizontalPodAutoscaler",
        "operationId": "patchAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified HorizontalPodAutoscaler",
        "operationId": "replaceAutoscalingV1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified HorizontalPodAutoscaler",
        "operationId": "readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified HorizontalPodAutoscaler",
        "operationId": "patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified HorizontalPodAutoscaler",
        "operationId": "replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v1"
        }
      }
    },
    "/apis/autoscaling/v2beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAutoscalingV2beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ]
      }
    },
    "/apis/autoscaling/v2beta1/horizontalpodautoscalers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV2beta1HorizontalPodAutoscalerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      }
    },
    "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV2beta1CollectionNamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a HorizontalPodAutoscaler",
        "operationId": "createAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      }
    },
    "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified HorizontalPodAutoscaler",
        "operationId": "readAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified HorizontalPodAutoscaler",
        "operationId": "patchAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified HorizontalPodAutoscaler",
        "operationId": "replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      }
    },
    "/apis/autoscaling/v2beta1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified HorizontalPodAutoscaler",
        "operationId": "readAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified HorizontalPodAutoscaler",
        "operationId": "patchAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified HorizontalPodAutoscaler",
        "operationId": "replaceAutoscalingV2beta1NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta1.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta1"
        }
      }
    },
    "/apis/autoscaling/v2beta2/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getAutoscalingV2beta2APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ]
      }
    },
    "/apis/autoscaling/v2beta2/horizontalpodautoscalers": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV2beta2HorizontalPodAutoscalerForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV2beta2CollectionNamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind HorizontalPodAutoscaler",
        "operationId": "listAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscalerList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a HorizontalPodAutoscaler",
        "operationId": "createAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a HorizontalPodAutoscaler",
        "operationId": "deleteAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified HorizontalPodAutoscaler",
        "operationId": "readAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified HorizontalPodAutoscaler",
        "operationId": "patchAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified HorizontalPodAutoscaler",
        "operationId": "replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscaler",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/autoscaling/v2beta2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified HorizontalPodAutoscaler",
        "operationId": "readAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified HorizontalPodAutoscaler",
        "operationId": "patchAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified HorizontalPodAutoscaler",
        "operationId": "replaceAutoscalingV2beta2NamespacedHorizontalPodAutoscalerStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the HorizontalPodAutoscaler",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.autoscaling.v2beta2.HorizontalPodAutoscaler.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "autoscaling_v2beta2"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "autoscaling",
          "kind": "HorizontalPodAutoscaler",
          "version": "v2beta2"
        }
      }
    },
    "/apis/batch/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the batch API group",
        "operationId": "getBatchAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch"
        ]
      }
    },
    "/apis/batch/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getBatchV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ]
      }
    },
    "/apis/batch/v1/jobs": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Job",
        "operationId": "listBatchV1JobForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.JobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Job",
        "operationId": "deleteBatchV1CollectionNamespacedJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Job",
        "operationId": "listBatchV1NamespacedJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.JobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Job",
        "operationId": "createBatchV1NamespacedJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Job",
        "operationId": "deleteBatchV1NamespacedJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Job",
        "operationId": "readBatchV1NamespacedJob",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Job",
        "operationId": "patchBatchV1NamespacedJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Job",
        "operationId": "replaceBatchV1NamespacedJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1/namespaces/{namespace}/jobs/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Job",
        "operationId": "readBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Job",
        "operationId": "patchBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Job",
        "operationId": "replaceBatchV1NamespacedJobStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Job",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1.Job.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "Job",
          "version": "v1"
        }
      }
    },
    "/apis/batch/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getBatchV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ]
      }
    },
    "/apis/batch/v1beta1/cronjobs": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV1beta1CronJobForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CronJob",
        "operationId": "deleteBatchV1beta1CollectionNamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CronJob",
        "operationId": "createBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CronJob",
        "operationId": "deleteBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CronJob",
        "operationId": "readBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CronJob",
        "operationId": "patchBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CronJob",
        "operationId": "replaceBatchV1beta1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/batch/v1beta1/namespaces/{namespace}/cronjobs/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CronJob",
        "operationId": "readBatchV1beta1NamespacedCronJobStatus",
        "parameters": [
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CronJob",
        "operationId": "patchBatchV1beta1NamespacedCronJobStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CronJob",
        "operationId": "replaceBatchV1beta1NamespacedCronJobStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v1beta1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v1beta1"
        }
      }
    },
    "/apis/batch/v2alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getBatchV2alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ]
      }
    },
    "/apis/batch/v2alpha1/cronjobs": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV2alpha1CronJobForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      }
    },
    "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CronJob",
        "operationId": "deleteBatchV2alpha1CollectionNamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CronJob",
        "operationId": "listBatchV2alpha1NamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJobList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CronJob",
        "operationId": "createBatchV2alpha1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      }
    },
    "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CronJob",
        "operationId": "deleteBatchV2alpha1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CronJob",
        "operationId": "readBatchV2alpha1NamespacedCronJob",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CronJob",
        "operationId": "patchBatchV2alpha1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CronJob",
        "operationId": "replaceBatchV2alpha1NamespacedCronJob",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "201": {
            "description": "Update",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      }
    },
    "/apis/batch/v2alpha1/namespaces/{namespace}/cronjobs/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CronJob",
        "operationId": "readBatchV2alpha1NamespacedCronJobStatus",
        "parameters": [
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CronJob",
        "operationId": "patchBatchV2alpha1NamespacedCronJobStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CronJob",
        "operationId": "replaceBatchV2alpha1NamespacedCronJobStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CronJob",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.batch.v2alpha1.CronJob.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "batch_v2alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "batch",
          "kind": "CronJob",
          "version": "v2alpha1"
        }
      }
    },
    "/apis/certificates.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the certificates API group",
        "operationId": "getCertificatesAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates"
        ]
      }
    },
    "/apis/certificates.k8s.io/v1/certificatesigningrequests": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CertificateSigningRequest",
        "operationId": "deleteCertificatesV1CollectionCertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CertificateSigningRequest",
        "operationId": "listCertificatesV1CertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CertificateSigningRequest",
        "operationId": "createCertificatesV1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CertificateSigningRequest",
        "operationId": "deleteCertificatesV1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CertificateSigningRequest",
        "operationId": "readCertificatesV1CertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CertificateSigningRequest",
        "operationId": "patchCertificatesV1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CertificateSigningRequest",
        "operationId": "replaceCertificatesV1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CertificateSigningRequest",
        "operationId": "readCertificatesV1CertificateSigningRequestStatus",
        "parameters": [
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CertificateSigningRequest",
        "operationId": "patchCertificatesV1CertificateSigningRequestStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CertificateSigningRequest",
        "operationId": "replaceCertificatesV1CertificateSigningRequestStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getCertificatesV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ]
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CertificateSigningRequest",
        "operationId": "deleteCertificatesV1beta1CollectionCertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CertificateSigningRequest",
        "operationId": "listCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequestList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CertificateSigningRequest",
        "operationId": "createCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CertificateSigningRequest",
        "operationId": "deleteCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CertificateSigningRequest",
        "operationId": "readCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CertificateSigningRequest",
        "operationId": "patchCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CertificateSigningRequest",
        "operationId": "replaceCertificatesV1beta1CertificateSigningRequest",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/approval": {
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace approval of the specified CertificateSigningRequest",
        "operationId": "replaceCertificatesV1beta1CertificateSigningRequestApproval",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/apis/certificates.k8s.io/v1beta1/certificatesigningrequests/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified CertificateSigningRequest",
        "operationId": "readCertificatesV1beta1CertificateSigningRequestStatus",
        "parameters": [
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified CertificateSigningRequest",
        "operationId": "patchCertificatesV1beta1CertificateSigningRequestStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified CertificateSigningRequest",
        "operationId": "replaceCertificatesV1beta1CertificateSigningRequestStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the CertificateSigningRequest",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.certificates.v1beta1.CertificateSigningRequest.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "certificates_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "certificates.k8s.io",
          "kind": "CertificateSigningRequest",
          "version": "v1beta1"
        }
      }
    },
    "/apis/coordination.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the coordination API group",
        "operationId": "getCoordinationAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination"
        ]
      }
    },
    "/apis/coordination.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getCoordinationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ]
      }
    },
    "/apis/coordination.k8s.io/v1/leases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1LeaseForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Lease",
        "operationId": "deleteCoordinationV1CollectionNamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Lease",
        "operationId": "createCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Lease",
        "operationId": "deleteCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Lease",
        "operationId": "readCoordinationV1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Lease",
        "operationId": "patchCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Lease",
        "operationId": "replaceCoordinationV1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getCoordinationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ]
      }
    },
    "/apis/coordination.k8s.io/v1beta1/leases": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1beta1LeaseForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Lease",
        "operationId": "deleteCoordinationV1beta1CollectionNamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Lease",
        "operationId": "listCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.LeaseList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Lease",
        "operationId": "createCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      }
    },
    "/apis/coordination.k8s.io/v1beta1/namespaces/{namespace}/leases/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Lease",
        "operationId": "deleteCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Lease",
        "operationId": "readCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Lease",
        "operationId": "patchCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Lease",
        "operationId": "replaceCoordinationV1beta1NamespacedLease",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Lease",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.coordination.v1beta1.Lease.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "coordination_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "coordination.k8s.io",
          "kind": "Lease",
          "version": "v1beta1"
        }
      }
    },
    "/apis/discovery.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getDiscoveryAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery"
        ]
      }
    },
    "/apis/discovery.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getDiscoveryV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ]
      }
    },
    "/apis/discovery.k8s.io/v1beta1/endpointslices": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind EndpointSlice",
        "operationId": "listDiscoveryV1beta1EndpointSliceForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSliceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      }
    },
    "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of EndpointSlice",
        "operationId": "deleteDiscoveryV1beta1CollectionNamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind EndpointSlice",
        "operationId": "listDiscoveryV1beta1NamespacedEndpointSlice",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSliceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an EndpointSlice",
        "operationId": "createDiscoveryV1beta1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      }
    },
    "/apis/discovery.k8s.io/v1beta1/namespaces/{namespace}/endpointslices/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an EndpointSlice",
        "operationId": "deleteDiscoveryV1beta1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified EndpointSlice",
        "operationId": "readDiscoveryV1beta1NamespacedEndpointSlice",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified EndpointSlice",
        "operationId": "patchDiscoveryV1beta1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified EndpointSlice",
        "operationId": "replaceDiscoveryV1beta1NamespacedEndpointSlice",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the EndpointSlice",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.discovery.v1beta1.EndpointSlice.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "discovery_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "discovery.k8s.io",
          "kind": "EndpointSlice",
          "version": "v1beta1"
        }
      }
    },
    "/apis/events.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the events API group",
        "operationId": "getEventsAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events"
        ]
      }
    },
    "/apis/events.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getEventsV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ]
      }
    },
    "/apis/events.k8s.io/v1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listEventsV1EventForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/apis/events.k8s.io/v1/namespaces/{namespace}/events": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Event",
        "operationId": "deleteEventsV1CollectionNamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listEventsV1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Event",
        "operationId": "createEventsV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Event",
        "operationId": "deleteEventsV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Event",
        "operationId": "readEventsV1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Event",
        "operationId": "patchEventsV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Event",
        "operationId": "replaceEventsV1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1"
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getEventsV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ]
      }
    },
    "/apis/events.k8s.io/v1beta1/events": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listEventsV1beta1EventForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Event",
        "operationId": "deleteEventsV1beta1CollectionNamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Event",
        "operationId": "listEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.EventList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Event",
        "operationId": "createEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      }
    },
    "/apis/events.k8s.io/v1beta1/namespaces/{namespace}/events/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Event",
        "operationId": "deleteEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Event",
        "operationId": "readEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Event",
        "operationId": "patchEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Event",
        "operationId": "replaceEventsV1beta1NamespacedEvent",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Event",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.events.v1beta1.Event.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "events_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "events.k8s.io",
          "kind": "Event",
          "version": "v1beta1"
        }
      }
    },
    "/apis/extensions/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the extensions API group",
        "operationId": "getExtensionsAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions"
        ]
      }
    },
    "/apis/extensions/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getExtensionsV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ]
      }
    },
    "/apis/extensions/v1beta1/ingresses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listExtensionsV1beta1IngressForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Ingress",
        "operationId": "deleteExtensionsV1beta1CollectionNamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listExtensionsV1beta1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Ingress",
        "operationId": "createExtensionsV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Ingress",
        "operationId": "deleteExtensionsV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Ingress",
        "operationId": "readExtensionsV1beta1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Ingress",
        "operationId": "patchExtensionsV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Ingress",
        "operationId": "replaceExtensionsV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/extensions/v1beta1/namespaces/{namespace}/ingresses/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Ingress",
        "operationId": "readExtensionsV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Ingress",
        "operationId": "patchExtensionsV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Ingress",
        "operationId": "replaceExtensionsV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.extensions.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "extensions_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "extensions",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getFlowcontrolApiserverAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver"
        ]
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getFlowcontrolApiserverV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ]
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of FlowSchema",
        "operationId": "deleteFlowcontrolApiserverV1alpha1CollectionFlowSchema",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind FlowSchema",
        "operationId": "listFlowcontrolApiserverV1alpha1FlowSchema",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchemaList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a FlowSchema",
        "operationId": "createFlowcontrolApiserverV1alpha1FlowSchema",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a FlowSchema",
        "operationId": "deleteFlowcontrolApiserverV1alpha1FlowSchema",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified FlowSchema",
        "operationId": "readFlowcontrolApiserverV1alpha1FlowSchema",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified FlowSchema",
        "operationId": "patchFlowcontrolApiserverV1alpha1FlowSchema",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified FlowSchema",
        "operationId": "replaceFlowcontrolApiserverV1alpha1FlowSchema",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/flowschemas/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified FlowSchema",
        "operationId": "readFlowcontrolApiserverV1alpha1FlowSchemaStatus",
        "parameters": [
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified FlowSchema",
        "operationId": "patchFlowcontrolApiserverV1alpha1FlowSchemaStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified FlowSchema",
        "operationId": "replaceFlowcontrolApiserverV1alpha1FlowSchemaStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the FlowSchema",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.FlowSchema.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "FlowSchema",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PriorityLevelConfiguration",
        "operationId": "deleteFlowcontrolApiserverV1alpha1CollectionPriorityLevelConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PriorityLevelConfiguration",
        "operationId": "listFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfigurationList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PriorityLevelConfiguration",
        "operationId": "createFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PriorityLevelConfiguration",
        "operationId": "deleteFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PriorityLevelConfiguration",
        "operationId": "readFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PriorityLevelConfiguration",
        "operationId": "patchFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PriorityLevelConfiguration",
        "operationId": "replaceFlowcontrolApiserverV1alpha1PriorityLevelConfiguration",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/flowcontrol.apiserver.k8s.io/v1alpha1/prioritylevelconfigurations/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified PriorityLevelConfiguration",
        "operationId": "readFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus",
        "parameters": [
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified PriorityLevelConfiguration",
        "operationId": "patchFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified PriorityLevelConfiguration",
        "operationId": "replaceFlowcontrolApiserverV1alpha1PriorityLevelConfigurationStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the PriorityLevelConfiguration",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.flowcontrol.v1alpha1.PriorityLevelConfiguration.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "flowcontrolApiserver_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "flowcontrol.apiserver.k8s.io",
          "kind": "PriorityLevelConfiguration",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/networking.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the networking API group",
        "operationId": "getNetworkingAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking"
        ]
      }
    },
    "/apis/networking.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getNetworkingV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ]
      }
    },
    "/apis/networking.k8s.io/v1/ingressclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of IngressClass",
        "operationId": "deleteNetworkingV1CollectionIngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind IngressClass",
        "operationId": "listNetworkingV1IngressClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an IngressClass",
        "operationId": "createNetworkingV1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/ingressclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an IngressClass",
        "operationId": "deleteNetworkingV1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified IngressClass",
        "operationId": "readNetworkingV1IngressClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified IngressClass",
        "operationId": "patchNetworkingV1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified IngressClass",
        "operationId": "replaceNetworkingV1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/ingresses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listNetworkingV1IngressForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Ingress",
        "operationId": "deleteNetworkingV1CollectionNamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listNetworkingV1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Ingress",
        "operationId": "createNetworkingV1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Ingress",
        "operationId": "deleteNetworkingV1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Ingress",
        "operationId": "readNetworkingV1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Ingress",
        "operationId": "patchNetworkingV1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Ingress",
        "operationId": "replaceNetworkingV1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Ingress",
        "operationId": "readNetworkingV1NamespacedIngressStatus",
        "parameters": [
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Ingress",
        "operationId": "patchNetworkingV1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Ingress",
        "operationId": "replaceNetworkingV1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of NetworkPolicy",
        "operationId": "deleteNetworkingV1CollectionNamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind NetworkPolicy",
        "operationId": "listNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a NetworkPolicy",
        "operationId": "createNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a NetworkPolicy",
        "operationId": "deleteNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the NetworkPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified NetworkPolicy",
        "operationId": "readNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the NetworkPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified NetworkPolicy",
        "operationId": "patchNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the NetworkPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified NetworkPolicy",
        "operationId": "replaceNetworkingV1NamespacedNetworkPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the NetworkPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1/networkpolicies": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind NetworkPolicy",
        "operationId": "listNetworkingV1NetworkPolicyForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1.NetworkPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "NetworkPolicy",
          "version": "v1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getNetworkingV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ]
      }
    },
    "/apis/networking.k8s.io/v1beta1/ingressclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of IngressClass",
        "operationId": "deleteNetworkingV1beta1CollectionIngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind IngressClass",
        "operationId": "listNetworkingV1beta1IngressClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an IngressClass",
        "operationId": "createNetworkingV1beta1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/ingressclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an IngressClass",
        "operationId": "deleteNetworkingV1beta1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified IngressClass",
        "operationId": "readNetworkingV1beta1IngressClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified IngressClass",
        "operationId": "patchNetworkingV1beta1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified IngressClass",
        "operationId": "replaceNetworkingV1beta1IngressClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the IngressClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "IngressClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/ingresses": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listNetworkingV1beta1IngressForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Ingress",
        "operationId": "deleteNetworkingV1beta1CollectionNamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Ingress",
        "operationId": "listNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.IngressList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create an Ingress",
        "operationId": "createNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete an Ingress",
        "operationId": "deleteNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Ingress",
        "operationId": "readNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Ingress",
        "operationId": "patchNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Ingress",
        "operationId": "replaceNetworkingV1beta1NamespacedIngress",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/networking.k8s.io/v1beta1/namespaces/{namespace}/ingresses/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified Ingress",
        "operationId": "readNetworkingV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified Ingress",
        "operationId": "patchNetworkingV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified Ingress",
        "operationId": "replaceNetworkingV1beta1NamespacedIngressStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Ingress",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.networking.v1beta1.Ingress.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "networking_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "networking.k8s.io",
          "kind": "Ingress",
          "version": "v1beta1"
        }
      }
    },
    "/apis/node.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of a group",
        "operationId": "getNodeAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node"
        ]
      }
    },
    "/apis/node.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getNodeV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ]
      }
    },
    "/apis/node.k8s.io/v1alpha1/runtimeclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RuntimeClass",
        "operationId": "deleteNodeV1alpha1CollectionRuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RuntimeClass",
        "operationId": "listNodeV1alpha1RuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RuntimeClass",
        "operationId": "createNodeV1alpha1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/node.k8s.io/v1alpha1/runtimeclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a RuntimeClass",
        "operationId": "deleteNodeV1alpha1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified RuntimeClass",
        "operationId": "readNodeV1alpha1RuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified RuntimeClass",
        "operationId": "patchNodeV1alpha1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified RuntimeClass",
        "operationId": "replaceNodeV1alpha1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1alpha1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/node.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getNodeV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ]
      }
    },
    "/apis/node.k8s.io/v1beta1/runtimeclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RuntimeClass",
        "operationId": "deleteNodeV1beta1CollectionRuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RuntimeClass",
        "operationId": "listNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RuntimeClass",
        "operationId": "createNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/node.k8s.io/v1beta1/runtimeclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a RuntimeClass",
        "operationId": "deleteNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified RuntimeClass",
        "operationId": "readNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified RuntimeClass",
        "operationId": "patchNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified RuntimeClass",
        "operationId": "replaceNodeV1beta1RuntimeClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the RuntimeClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.node.v1beta1.RuntimeClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "node_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "node.k8s.io",
          "kind": "RuntimeClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the policy group",
        "operationId": "getPolicyAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy"
        ]
      }
    },
    "/apis/policy/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getPolicyV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ]
      }
    },
    "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodDisruptionBudget",
        "operationId": "deletePolicyV1beta1CollectionNamespacedPodDisruptionBudget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodDisruptionBudget",
        "operationId": "listPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PodDisruptionBudget",
        "operationId": "createPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PodDisruptionBudget",
        "operationId": "deletePolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PodDisruptionBudget",
        "operationId": "readPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PodDisruptionBudget",
        "operationId": "patchPolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PodDisruptionBudget",
        "operationId": "replacePolicyV1beta1NamespacedPodDisruptionBudget",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/namespaces/{namespace}/poddisruptionbudgets/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified PodDisruptionBudget",
        "operationId": "readPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
        "parameters": [
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified PodDisruptionBudget",
        "operationId": "patchPolicyV1beta1NamespacedPodDisruptionBudgetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified PodDisruptionBudget",
        "operationId": "replacePolicyV1beta1NamespacedPodDisruptionBudgetStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodDisruptionBudget",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudget.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/poddisruptionbudgets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodDisruptionBudget",
        "operationId": "listPolicyV1beta1PodDisruptionBudgetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodDisruptionBudgetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodDisruptionBudget",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/podsecuritypolicies": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodSecurityPolicy",
        "operationId": "deletePolicyV1beta1CollectionPodSecurityPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodSecurityPolicy",
        "operationId": "listPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicyList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PodSecurityPolicy",
        "operationId": "createPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      }
    },
    "/apis/policy/v1beta1/podsecuritypolicies/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PodSecurityPolicy",
        "operationId": "deletePolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PodSecurityPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PodSecurityPolicy",
        "operationId": "readPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PodSecurityPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PodSecurityPolicy",
        "operationId": "patchPolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodSecurityPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PodSecurityPolicy",
        "operationId": "replacePolicyV1beta1PodSecurityPolicy",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodSecurityPolicy",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.policy.v1beta1.PodSecurityPolicy.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "policy_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "policy",
          "kind": "PodSecurityPolicy",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the rbac.authorization.k8s.io API group",
        "operationId": "getRbacAuthorizationAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization"
        ]
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getRbacAuthorizationV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ]
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1CollectionClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRoleBinding",
        "operationId": "listRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRoleBinding",
        "operationId": "createRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRoleBinding",
        "operationId": "readRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRoleBinding",
        "operationId": "patchRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRoleBinding",
        "operationId": "replaceRbacAuthorizationV1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterroles": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRole",
        "operationId": "deleteRbacAuthorizationV1CollectionClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRole",
        "operationId": "listRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRole",
        "operationId": "createRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/clusterroles/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRole",
        "operationId": "deleteRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRole",
        "operationId": "readRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRole",
        "operationId": "patchRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRole",
        "operationId": "replaceRbacAuthorizationV1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RoleBinding",
        "operationId": "deleteRbacAuthorizationV1CollectionNamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RoleBinding",
        "operationId": "createRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a RoleBinding",
        "operationId": "deleteRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified RoleBinding",
        "operationId": "readRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified RoleBinding",
        "operationId": "patchRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified RoleBinding",
        "operationId": "replaceRbacAuthorizationV1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Role",
        "operationId": "deleteRbacAuthorizationV1CollectionNamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Role",
        "operationId": "createRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Role",
        "operationId": "deleteRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Role",
        "operationId": "readRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Role",
        "operationId": "patchRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Role",
        "operationId": "replaceRbacAuthorizationV1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/rolebindings": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1RoleBindingForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1/roles": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1RoleForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getRbacAuthorizationV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ]
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1alpha1CollectionClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRoleBinding",
        "operationId": "listRbacAuthorizationV1alpha1ClusterRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRoleBinding",
        "operationId": "createRbacAuthorizationV1alpha1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/clusterrolebindings/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1alpha1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRoleBinding",
        "operationId": "readRbacAuthorizationV1alpha1ClusterRoleBinding",
        "parameters": [
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRoleBinding",
        "operationId": "patchRbacAuthorizationV1alpha1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRoleBinding",
        "operationId": "replaceRbacAuthorizationV1alpha1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRole",
        "operationId": "deleteRbacAuthorizationV1alpha1CollectionClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRole",
        "operationId": "listRbacAuthorizationV1alpha1ClusterRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRole",
        "operationId": "createRbacAuthorizationV1alpha1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/clusterroles/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRole",
        "operationId": "deleteRbacAuthorizationV1alpha1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRole",
        "operationId": "readRbacAuthorizationV1alpha1ClusterRole",
        "parameters": [
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRole",
        "operationId": "patchRbacAuthorizationV1alpha1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRole",
        "operationId": "replaceRbacAuthorizationV1alpha1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RoleBinding",
        "operationId": "deleteRbacAuthorizationV1alpha1CollectionNamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1alpha1NamespacedRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RoleBinding",
        "operationId": "createRbacAuthorizationV1alpha1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/rolebindings/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a RoleBinding",
        "operationId": "deleteRbacAuthorizationV1alpha1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified RoleBinding",
        "operationId": "readRbacAuthorizationV1alpha1NamespacedRoleBinding",
        "parameters": [
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified RoleBinding",
        "operationId": "patchRbacAuthorizationV1alpha1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified RoleBinding",
        "operationId": "replaceRbacAuthorizationV1alpha1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Role",
        "operationId": "deleteRbacAuthorizationV1alpha1CollectionNamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1alpha1NamespacedRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Role",
        "operationId": "createRbacAuthorizationV1alpha1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/namespaces/{namespace}/roles/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Role",
        "operationId": "deleteRbacAuthorizationV1alpha1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Role",
        "operationId": "readRbacAuthorizationV1alpha1NamespacedRole",
        "parameters": [
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Role",
        "operationId": "patchRbacAuthorizationV1alpha1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Role",
        "operationId": "replaceRbacAuthorizationV1alpha1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/rolebindings": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1alpha1RoleBindingForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1alpha1/roles": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1alpha1RoleForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1alpha1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getRbacAuthorizationV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ]
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1beta1CollectionClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRoleBinding",
        "operationId": "listRbacAuthorizationV1beta1ClusterRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRoleBinding",
        "operationId": "createRbacAuthorizationV1beta1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/clusterrolebindings/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRoleBinding",
        "operationId": "deleteRbacAuthorizationV1beta1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRoleBinding",
        "operationId": "readRbacAuthorizationV1beta1ClusterRoleBinding",
        "parameters": [
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRoleBinding",
        "operationId": "patchRbacAuthorizationV1beta1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRoleBinding",
        "operationId": "replaceRbacAuthorizationV1beta1ClusterRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the ClusterRoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRoleBinding",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of ClusterRole",
        "operationId": "deleteRbacAuthorizationV1beta1CollectionClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind ClusterRole",
        "operationId": "listRbacAuthorizationV1beta1ClusterRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a ClusterRole",
        "operationId": "createRbacAuthorizationV1beta1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/clusterroles/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a ClusterRole",
        "operationId": "deleteRbacAuthorizationV1beta1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified ClusterRole",
        "operationId": "readRbacAuthorizationV1beta1ClusterRole",
        "parameters": [
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified ClusterRole",
        "operationId": "patchRbacAuthorizationV1beta1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified ClusterRole",
        "operationId": "replaceRbacAuthorizationV1beta1ClusterRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the ClusterRole",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.ClusterRole.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "ClusterRole",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of RoleBinding",
        "operationId": "deleteRbacAuthorizationV1beta1CollectionNamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1beta1NamespacedRoleBinding",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a RoleBinding",
        "operationId": "createRbacAuthorizationV1beta1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/rolebindings/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a RoleBinding",
        "operationId": "deleteRbacAuthorizationV1beta1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified RoleBinding",
        "operationId": "readRbacAuthorizationV1beta1NamespacedRoleBinding",
        "parameters": [
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified RoleBinding",
        "operationId": "patchRbacAuthorizationV1beta1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified RoleBinding",
        "operationId": "replaceRbacAuthorizationV1beta1NamespacedRoleBinding",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the RoleBinding",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBinding.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of Role",
        "operationId": "deleteRbacAuthorizationV1beta1CollectionNamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1beta1NamespacedRole",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a Role",
        "operationId": "createRbacAuthorizationV1beta1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "$ref": "#/parameters/namespace"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/namespaces/{namespace}/roles/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a Role",
        "operationId": "deleteRbacAuthorizationV1beta1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified Role",
        "operationId": "readRbacAuthorizationV1beta1NamespacedRole",
        "parameters": [
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified Role",
        "operationId": "patchRbacAuthorizationV1beta1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified Role",
        "operationId": "replaceRbacAuthorizationV1beta1NamespacedRole",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the Role",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.Role.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/rolebindings": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind RoleBinding",
        "operationId": "listRbacAuthorizationV1beta1RoleBindingForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleBindingList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "RoleBinding",
          "version": "v1beta1"
        }
      }
    },
    "/apis/rbac.authorization.k8s.io/v1beta1/roles": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind Role",
        "operationId": "listRbacAuthorizationV1beta1RoleForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.rbac.v1beta1.RoleList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "rbacAuthorization_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "rbac.authorization.k8s.io",
          "kind": "Role",
          "version": "v1beta1"
        }
      }
    },
    "/apis/scheduling.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the scheduling.k8s.io API group",
        "operationId": "getSchedulingAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling"
        ]
      }
    },
    "/apis/scheduling.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getSchedulingV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ]
      }
    },
    "/apis/scheduling.k8s.io/v1/priorityclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PriorityClass",
        "operationId": "deleteSchedulingV1CollectionPriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PriorityClass",
        "operationId": "listSchedulingV1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PriorityClass",
        "operationId": "createSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1/priorityclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PriorityClass",
        "operationId": "deleteSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PriorityClass",
        "operationId": "readSchedulingV1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PriorityClass",
        "operationId": "patchSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PriorityClass",
        "operationId": "replaceSchedulingV1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getSchedulingV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ]
      }
    },
    "/apis/scheduling.k8s.io/v1alpha1/priorityclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PriorityClass",
        "operationId": "deleteSchedulingV1alpha1CollectionPriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PriorityClass",
        "operationId": "listSchedulingV1alpha1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PriorityClass",
        "operationId": "createSchedulingV1alpha1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1alpha1/priorityclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PriorityClass",
        "operationId": "deleteSchedulingV1alpha1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PriorityClass",
        "operationId": "readSchedulingV1alpha1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PriorityClass",
        "operationId": "patchSchedulingV1alpha1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PriorityClass",
        "operationId": "replaceSchedulingV1alpha1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1alpha1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getSchedulingV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ]
      }
    },
    "/apis/scheduling.k8s.io/v1beta1/priorityclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PriorityClass",
        "operationId": "deleteSchedulingV1beta1CollectionPriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PriorityClass",
        "operationId": "listSchedulingV1beta1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PriorityClass",
        "operationId": "createSchedulingV1beta1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/scheduling.k8s.io/v1beta1/priorityclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PriorityClass",
        "operationId": "deleteSchedulingV1beta1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PriorityClass",
        "operationId": "readSchedulingV1beta1PriorityClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PriorityClass",
        "operationId": "patchSchedulingV1beta1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PriorityClass",
        "operationId": "replaceSchedulingV1beta1PriorityClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the PriorityClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.scheduling.v1beta1.PriorityClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "scheduling_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "scheduling.k8s.io",
          "kind": "PriorityClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/settings.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the settings.k8s.io API group",
        "operationId": "getSettingsAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings"
        ]
      }
    },
    "/apis/settings.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getSettingsV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ]
      }
    },
    "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of PodPreset",
        "operationId": "deleteSettingsV1alpha1CollectionNamespacedPodPreset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodPreset",
        "operationId": "listSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a PodPreset",
        "operationId": "createSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/settings.k8s.io/v1alpha1/namespaces/{namespace}/podpresets/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a PodPreset",
        "operationId": "deleteSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the PodPreset",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified PodPreset",
        "operationId": "readSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the PodPreset",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified PodPreset",
        "operationId": "patchSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodPreset",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified PodPreset",
        "operationId": "replaceSettingsV1alpha1NamespacedPodPreset",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the PodPreset",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/namespace"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPreset.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/settings.k8s.io/v1alpha1/podpresets": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind PodPreset",
        "operationId": "listSettingsV1alpha1PodPresetForAllNamespaces",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/pretty"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.settings.v1alpha1.PodPresetList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "settings_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "settings.k8s.io",
          "kind": "PodPreset",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/storage.k8s.io/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get information of the storage.k8s.io API group",
        "operationId": "getStorageAPIGroup",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage"
        ]
      }
    },
    "/apis/storage.k8s.io/v1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getStorageV1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ]
      }
    },
    "/apis/storage.k8s.io/v1/csidrivers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CSIDriver",
        "operationId": "deleteStorageV1CollectionCSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CSIDriver",
        "operationId": "listStorageV1CSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriverList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CSIDriver",
        "operationId": "createStorageV1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/csidrivers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CSIDriver",
        "operationId": "deleteStorageV1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CSIDriver",
        "operationId": "readStorageV1CSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CSIDriver",
        "operationId": "patchStorageV1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CSIDriver",
        "operationId": "replaceStorageV1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/csinodes": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CSINode",
        "operationId": "deleteStorageV1CollectionCSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CSINode",
        "operationId": "listStorageV1CSINode",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINodeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CSINode",
        "operationId": "createStorageV1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/csinodes/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CSINode",
        "operationId": "deleteStorageV1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CSINode",
        "operationId": "readStorageV1CSINode",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CSINode",
        "operationId": "patchStorageV1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CSINode",
        "operationId": "replaceStorageV1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/storageclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of StorageClass",
        "operationId": "deleteStorageV1CollectionStorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StorageClass",
        "operationId": "listStorageV1StorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a StorageClass",
        "operationId": "createStorageV1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/storageclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a StorageClass",
        "operationId": "deleteStorageV1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified StorageClass",
        "operationId": "readStorageV1StorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified StorageClass",
        "operationId": "patchStorageV1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified StorageClass",
        "operationId": "replaceStorageV1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/volumeattachments": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VolumeAttachment",
        "operationId": "deleteStorageV1CollectionVolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VolumeAttachment",
        "operationId": "listStorageV1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachmentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a VolumeAttachment",
        "operationId": "createStorageV1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/volumeattachments/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a VolumeAttachment",
        "operationId": "deleteStorageV1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified VolumeAttachment",
        "operationId": "readStorageV1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified VolumeAttachment",
        "operationId": "patchStorageV1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified VolumeAttachment",
        "operationId": "replaceStorageV1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1/volumeattachments/{name}/status": {
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read status of the specified VolumeAttachment",
        "operationId": "readStorageV1VolumeAttachmentStatus",
        "parameters": [
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update status of the specified VolumeAttachment",
        "operationId": "patchStorageV1VolumeAttachmentStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace status of the specified VolumeAttachment",
        "operationId": "replaceStorageV1VolumeAttachmentStatus",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1"
        }
      }
    },
    "/apis/storage.k8s.io/v1alpha1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getStorageV1alpha1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ]
      }
    },
    "/apis/storage.k8s.io/v1alpha1/volumeattachments": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VolumeAttachment",
        "operationId": "deleteStorageV1alpha1CollectionVolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VolumeAttachment",
        "operationId": "listStorageV1alpha1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachmentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a VolumeAttachment",
        "operationId": "createStorageV1alpha1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/storage.k8s.io/v1alpha1/volumeattachments/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a VolumeAttachment",
        "operationId": "deleteStorageV1alpha1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified VolumeAttachment",
        "operationId": "readStorageV1alpha1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified VolumeAttachment",
        "operationId": "patchStorageV1alpha1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified VolumeAttachment",
        "operationId": "replaceStorageV1alpha1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1alpha1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1alpha1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/": {
      "get": {
        "consumes": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "description": "get available resources",
        "operationId": "getStorageV1beta1APIResources",
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ]
      }
    },
    "/apis/storage.k8s.io/v1beta1/csidrivers": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CSIDriver",
        "operationId": "deleteStorageV1beta1CollectionCSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CSIDriver",
        "operationId": "listStorageV1beta1CSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriverList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CSIDriver",
        "operationId": "createStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csidrivers/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CSIDriver",
        "operationId": "deleteStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CSIDriver",
        "operationId": "readStorageV1beta1CSIDriver",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CSIDriver",
        "operationId": "patchStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CSIDriver",
        "operationId": "replaceStorageV1beta1CSIDriver",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CSIDriver",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSIDriver.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSIDriver",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csinodes": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of CSINode",
        "operationId": "deleteStorageV1beta1CollectionCSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind CSINode",
        "operationId": "listStorageV1beta1CSINode",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINodeList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a CSINode",
        "operationId": "createStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/csinodes/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a CSINode",
        "operationId": "deleteStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified CSINode",
        "operationId": "readStorageV1beta1CSINode",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified CSINode",
        "operationId": "patchStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified CSINode",
        "operationId": "replaceStorageV1beta1CSINode",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the CSINode",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.CSINode.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "CSINode",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/storageclasses": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of StorageClass",
        "operationId": "deleteStorageV1beta1CollectionStorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind StorageClass",
        "operationId": "listStorageV1beta1StorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClassList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a StorageClass",
        "operationId": "createStorageV1beta1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/storageclasses/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a StorageClass",
        "operationId": "deleteStorageV1beta1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified StorageClass",
        "operationId": "readStorageV1beta1StorageClass",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified StorageClass",
        "operationId": "patchStorageV1beta1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified StorageClass",
        "operationId": "replaceStorageV1beta1StorageClass",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the StorageClass",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.StorageClass.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "StorageClass",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/volumeattachments": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete collection of VolumeAttachment",
        "operationId": "deleteStorageV1beta1CollectionVolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "deletecollection",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "list or watch objects of kind VolumeAttachment",
        "operationId": "listStorageV1beta1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/allowWatchBookmarks"
          },
          {
            "$ref": "#/parameters/continue"
          },
          {
            "$ref": "#/parameters/fieldSelector"
          },
          {
            "$ref": "#/parameters/labelSelector"
          },
          {
            "$ref": "#/parameters/limit"
          },
          {
            "$ref": "#/parameters/resourceVersion"
          },
          {
            "$ref": "#/parameters/resourceVersionMatch"
          },
          {
            "$ref": "#/parameters/timeoutSeconds"
          },
          {
            "$ref": "#/parameters/watch"
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf",
          "application/json;stream=watch",
          "application/vnd.kubernetes.protobuf;stream=watch"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentList"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "list",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      },
      "post": {
        "consumes": [
          "*/*"
        ],
        "description": "create a VolumeAttachment",
        "operationId": "createStorageV1beta1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.CREATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Created",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "post",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      }
    },
    "/apis/storage.k8s.io/v1beta1/volumeattachments/{name}": {
      "delete": {
        "consumes": [
          "*/*"
        ],
        "description": "delete a VolumeAttachment",
        "operationId": "deleteStorageV1beta1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/gracePeriodSeconds"
          },
          {
            "$ref": "#/parameters/orphanDependents"
          },
          {
            "$ref": "#/parameters/propagationPolicy"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "202": {
            "description": "Accepted",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "delete",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      },
      "get": {
        "consumes": [
          "*/*"
        ],
        "description": "read the specified VolumeAttachment",
        "operationId": "readStorageV1beta1VolumeAttachment",
        "parameters": [
          {
            "$ref": "#/parameters/exact"
          },
          {
            "$ref": "#/parameters/export"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "get",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      },
      "patch": {
        "consumes": [
          "application/json-patch+json",
          "application/merge-patch+json",
          "application/strategic-merge-patch+json",
          "application/apply-patch+yaml"
        ],
        "description": "partially update the specified VolumeAttachment",
        "operationId": "patchStorageV1beta1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManagerPatch"
          },
          {
            "$ref": "#/parameters/force"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "patch",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      },
      "put": {
        "consumes": [
          "*/*"
        ],
        "description": "replace the specified VolumeAttachment",
        "operationId": "replaceStorageV1beta1VolumeAttachment",
        "parameters": [
          {
            "in": "body",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.UPDATE"
            }
          },
          {
            "$ref": "#/parameters/dryRun"
          },
          {
            "$ref": "#/parameters/fieldManager"
          },
          {
            "description": "name of the VolumeAttachment",
            "in": "path",
            "name": "name",
            "required": true,
            "type": "string",
            "uniqueItems": true
          },
          {
            "$ref": "#/parameters/pretty"
          }
        ],
        "produces": [
          "application/json",
          "application/yaml",
          "application/vnd.kubernetes.protobuf"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "201": {
            "description": "Updated",
            "schema": {
              "$ref": "#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "storage_v1beta1"
        ],
        "x-kubernetes-action": "put",
        "x-kubernetes-group-version-kind": {
          "group": "storage.k8s.io",
          "kind": "VolumeAttachment",
          "version": "v1beta1"
        }
      }
    },
    "/logs/": {
      "get": {
        "description": "list log files that are exposed for client to examine",
        "operationId": "logFileListHandler",
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/logs/{logpath}": {
      "get": {
        "description": "retrieve a log file at the specified log path",
        "operationId": "logFileHandler",
        "parameters": [
          {
            "description": "path to the log",
            "in": "path",
            "name": "logpath",
            "required": true,
            "type": "string",
            "uniqueItems": true
          }
        ],
        "responses": {
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "logs"
        ]
      }
    },
    "/version/": {
      "get": {
        "consumes": [
          "application/json"
        ],
        "description": "get the version information about the API server",
        "operationId": "getCodeVersion",
        "produces": [
          "application/json"
        ],
        "responses": {
          "200": {
            "description": "OK",
            "schema": {
              "$ref": "#/definitions/io.k8s.apimachinery.pkg.version.Info"
            }
          },
          "401": {
            "description": "Unauthorized"
          }
        },
        "schemes": [
          "https"
        ],
        "tags": [
          "version"
        ]
      }
    }
  },
  "security": [
    {
      "BearerToken": []
    }
  ],
  "securityDefinitions": {
    "BearerToken": {
      "description": "Bearer Token authentication",
      "in": "header",
      "name": "authorization",
      "type": "apiKey"
    }
  },
  "swagger": "2.0"
}
