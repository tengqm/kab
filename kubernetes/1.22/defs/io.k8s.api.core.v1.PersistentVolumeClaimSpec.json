{
  "description": "The common attributes and the provider-specific attributes of storage devices",
  "properties": {
    "accessModes": {
      "description": "The desired access modes of the volume",
      "items": {
        "enum": [
          "ReadOnlyMany",
          "ReadWriteMany",
          "ReadWriteOnce"
        ],
        "type": "string"
      },
      "minItems": 1,
      "type": "array"
    },
    "dataSource": {
      "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
      "description": "This field can be used to specify either:\n\n- An existing `VolumeSnapshot` object (`\"snapshot.storage.k8s.io/VolumeSnapshot\"` - beta)\n- An existing PVC (`PersistentVolumeClaim`): If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. If the `AnyVolumeDataSource` feature gate is enabled, this field will always have the same contents as the `dataSourceRef` field."
    },
    "dataSourceRef": {
      "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
      "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any local object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the `dataSource` field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, both fields (`dataSource` and `dataSourceRef`) will be set to the same value automatically if one of them is empty and the other is non-empty. There are two important differences between `dataSource` and `dataSourceRef`:\n\n* While `dataSource` only allows two specific types of objects, `dataSourceRef` allows any non-core object, as well as PersistentVolumeClaim objects.\n* While `dataSource` ignores disallowed values (dropping them), `dataSourceRef` preserves all values, and generates an error if a disallowed value is specified.\n\nThis field is Alpha-level guarded by the `AnyVolumeDataSource` feature gate."
    },
    "resources": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
      "description": "The minimum resources the volume should have. The `requests.storage` must be specified as a positive quantity value."
    },
    "selector": {
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
      "description": "A label query over volumes to be considered for binding."
    },
    "storageClassName": {
      "description": "Name of the StorageClass required by the claim. The name must be a valid DNS subdomain, if specified.",
      "type": "string"
    },
    "volumeMode": {
      "default": "Filesystem",
      "description": "Type of volume required by the claim.",
      "enum": [
        "Block",
        "Filesystem"
      ],
      "type": "string"
    },
    "volumeName": {
      "description": "The binding reference to the PersistentVolume backing this claim.",
      "type": "string"
    }
  },
  "required": [
    "accessModes",
    "resources"
  ],
  "type": "object"
}
