{
  "description": "ObjectReference contains enough information to let you inspect or modify the referred object.\n\nNew uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.\n\n1. **Ignored fields**. It includes many fields which are not generally honored. For instance, `resourceVersion` and `fieldPath` are both very rarely valid in actual usage.\n1. **Invalid usage help**. It is impossible to add specific help for individual usage. In most embedded usages, there are particular restrictions like, *must refer only to types A and B* or *UID not honored* or *name must be restricted*. Those cannot be well described when embedded.\n1. **Inconsistent validation**. Because the usages are different, the validation rules are different by usage, which makes it hard for users to predict what will happen.\n1. **The fields are both imprecise and overly precise**. Kind is not a precise mapping to a URL. This can produce ambiguity during interpretation and require a REST mapping. In most cases, the dependency is on the group,resource tuple and the version of the actual struct is irrelevant.\n1. **We cannot easily change it**. Because this type is embedded in many locations, updates to this type will affect numerous schemas. Don't make new APIs embed an underspecified API type they do not control.\n\nInstead of using this type, create a locally provided and used type that is well-focused on your reference. For example, `ServiceReferences` for admission registration.",
  "properties": {
    "apiVersion": {
      "description": "API version of the referenced object",
      "type": "string"
    },
    "fieldPath": {
      "description": "If referring to a piece of an object instead of an entire object, this string should contain a valid JSON/Go field access statement, such as `\"desiredState.manifest.containers[2]\"`. For example, if this references a container within a Pod, it would take on a value like `\"spec.containers{name}\"` (where `\"name\"` refers to the name of the container that triggered the event) or if no container name is specified `\"spec.containers[2]\"` (container with index 2 in this Pod). This syntax is chosen only to have some well-defined way of referencing a part of an object.",
      "type": "string"
    },
    "kind": {
      "description": "Kind of the referenced object",
      "type": "string"
    },
    "name": {
      "description": "Name of the referenced object.",
      "type": "string"
    },
    "namespace": {
      "description": "Namespace of the referenced object.",
      "type": "string"
    },
    "resourceVersion": {
      "description": "Specific `resourceVersion` to which this reference is made, if any.",
      "type": "string"
    },
    "uid": {
      "description": "UID of the referenced object.",
      "type": "string"
    }
  },
  "type": "object",
  "x-kubernetes-map-type": "atomic"
}
