definitions:
  io.k8s.api.admissionregistration.v1.AuditAnnotation:
    description: AuditAnnotation describes how to produce an audit annotation for
      an API request.
    properties:
      key:
        description: |-
          This specifies the audit annotation key. The audit annotation keys
          of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name
          (`[A-Za-z0-9][-A-Za-z0-9_.]*`).

          The key is combined with the resource name of the ValidatingAdmissionPolicy
          to construct an audit annotation key:
          `"{ValidatingAdmissionPolicy name}/{key}"`.

          If an admission webhook uses the same resource name as this
          ValidatingAdmissionPolicy and the same audit annotation key, the annotation
          key will be identical. In this case, the first annotation written with the key
          will be included in the audit event and all subsequent annotations with the
          same key will be discarded.
        type: string
        x-kab-description-zh: |-
          此字段设置审计注解的主键。ValidatingAdmissionPolicy 的审计注解的主键必须唯一。
          主键字符串必须是一个限定名（Qualified Name），即 `[A-Za-z0-9][-A-Za-z0-9_.]*`。

          `key` 的值会与 ValidatingAdmissionPolicy 的资源名称一起构造审计注解主键：
          `"{ValidatingAdmissionPolicy 名称}/{key 值}"`.

          如果某个准入 Webhook 使用了与 ValidatingAdmissionPolicy 相同的资源名称，
          并且其审计注解主键也相同，那么最终的注解主键也会相同。
          这时候，先使用此主键写入的注解会被记录到审计日志中，后续的、主键相同的注解会被丢弃。
      valueExpression:
        description: |-
          This represents the expression which is evaluated by CEL to produce
          an audit annotation value. The expression must evaluate to either a string or
          null value. If the expression evaluates to a string, the audit annotation is
          included with the string value. If the expression evaluates to null or empty
          string, the audit annotation will be omitted. If the result of the `valueExpression`
          is more than 10kb in length, it will be truncated to 10kb.

          If multiple ValidatingAdmissionPolicyBinding
          resources match an API request, then the `valueExpression` will be evaluated
          for each binding. All unique values produced by the `valueExpression`'s will
          be joined together in a comma-separated list.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个表达式，CEL 处理此表达式后得到审计注解的值。
          此表达式的处理结果必须是一个字符串或者 Null 值。
          如果结果是一个字符串，则该字符串值会被包含到审计注解中。
          反之，如果处理结果是 Null 值或者空字符串，则对应的审计注解会被略过。
          字符串超出 10 KB 时会被截断。

          如果有多个 ValidatingAdmissionPolicyBinding 资源与同一个 API 请求匹配，
          则针对每个绑定资源都会处理一遍`valueExpression` 表达式。
          所生成的不同字符串会被串接起来，构成一个逗号分隔的列表，作为审计注解值。
    required:
      - key
      - valueExpression
    type: object
    x-kab-description-zh: AuditAnnotation 描述如何为一个 API 请求生成审计注解。
  io.k8s.api.admissionregistration.v1.ExpressionWarning:
    description: ExpressionWarning is a warning information that targets a specific
      expression.
    properties:
      fieldRef:
        description: The path to the field that refers the expression. The value must
          be a valid JSON path expression. For example, the reference to the expression
          of the first item of validations is "spec.validations[0].expression".
        minLength: 1
        type: string
        x-kab-description-zh: |-
          引用表达式的字段的路径。字段值必须是一个合法的 JSON 路径表达式。
          例如，对 `validations` 中的一个元素的 `expression`
          字段的引用可以写作 `"spec.validations[0].expression"`。
      warning:
        description: The content of type checking information in a human-readable
          form. Each line of the warning contains the type that the expression is
          checked against, followed by the type check error from the compiler.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          以人类可读的形式给出的类型检查信息。
          `warning` 的每一行都包含表达式所检查的类型，后接编译器给出的类型检查错误信息。
    required:
      - fieldRef
      - warning
    type: object
    x-kab-description-zh: ExpressionWarning 针对某个特定表达式的警告信息。
  io.k8s.api.admissionregistration.v1.MatchCondition:
    description: MatchCondition represents a condition which must by fulfilled for
      a request to be sent to a webhook.
    properties:
      expression:
        description: |-
          This represents the expression which will be evaluated by CEL.
          Must evaluate to bool. CEL expressions have access to the contents of the AdmissionRequest and Authorizer,
          organized into CEL variables:
          - `object` - The object from the incoming request. The value is null for DELETE requests.
          - `oldObject` - The existing object. The value is null for CREATE requests.
          - `request` - Attributes of the admission request.
          - `authorizer` - A CEL Authorizer. May be used to perform authorization checks for the principal
            (user or ServiceAccount) of the request.
            See [Authz docs](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz).
          - `authorizer.requestResource` - A CEL ResourceCheck constructed from the 'authorizer'
            and configured with the request resource.

          See more [documentation on CEL](https://kubernetes.io/docs/reference/using-api/cel/).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段包含的是要由 CEL 来评估（求值）的表达式，求值结果必须是布尔值。
          CEL 表达式可以访问 AdmissionRequest 和 Authorizer 的一些内容，
          这些内容被组织成 CEL 变量：

          - `object` - 请求所携带的对象。对于 DELETE 请求，取值是 null。
          - `oldObject` - 当前的对象。对于 CREATE 请求，取值为 null。
          - `request` - 准入请求的属性，
          - `authorizer` - CEL Authorizer。可用来针对请求的主体（用户或者 ServiceAccount）
            执行鉴权检查。
            参阅 [Authz 文档](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz)。
          - `authorizer.requestResource` -根据 `authorizer` 和请求资源构造的 CEL ResourceCheck 对象。
            参阅 [CEL 文档](https://kubernetes.io/zh-cn/docs/reference/using-api/cel/)。
      name:
        description: |-
          This is an identifier for this match condition, used for strategic merging of `matchConditions`,
          as well as providing an identifier for logging purposes.
          A good name should be descriptive of the associated expression.
          The `name` must be a qualified name consisting of alphanumeric characters, `'-'`, `'_'` or `'.'`,
          and must start and end with an alphanumeric character (e.g.  `"MyName"`,  or `"my.name"`,  or
          `'123-abc'`, regex used for validation is `([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]')`
          with an optional DNS subdomain prefix and `'/'` (e.g. `"xample.com/MyName"`).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段为匹配条件的标识符，在执行对 `matchConditions` 进行策略性合并时，
          以及生成日志时会用到。比较好的名字应该是能够描述所关联的表达式的。
          `name` 字段必须是一个限定名（Qualified Name），包含字母数字字符、`'-'`、
          `'_'` 或者 `'.'`，并且必须以字母或数字开头和结束。
          例如：`"MyName"`、`"my.name"` 或者 `"123-abc"`。
          用来执行正确性检查的正则表达式为 `([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]')`。
          `name` 值可以带一个可选的 DNS 子域名加上 `'/'` 作为前缀。例如：`"example.com/MyName"`。
    required:
      - expression
      - name
    type: object
    x-kab-description-zh: MatchCondition 表示的是一种条件，只有请求满足了这一条件才有可能被发送到某 Webhook。
  io.k8s.api.admissionregistration.v1.MatchResources:
    description: |-
      MatchResources decides whether to run the admission control policy on
      an object based on whether it meets the match criteria.
      The exclude rules take precedence over include rules
      (if a resource matches both, it is excluded).
    properties:
      excludeResourceRules:
        description: |-
          `excludeResourceRules` describes what operations on what resources/subresources
          the ValidatingAdmissionPolicy should not care about.
          The exclude rules take precedence over include rules
          (if a resource matches both, it is excluded).
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.NamedRuleWithOperations'
        type: array
        x-kab-description-zh: |-
          此字段描述哪些资源或子资源上的哪些操作是 ValidatingAdmissionPolicy 所要忽略的。
          排除规则比包含规则的优先级高。
          换言之，当某资源与这两个规则都匹配时，该资源会被排除掉。
        x-kubernetes-list-type: atomic
      matchPolicy:
        default: Equivalent
        description: |-
          `matchPolicy` defines how the MatchResources list is used to match
          incoming requests. Allowed values are `"Exact"` or `"Equivalent"`.

          - `"Exact"`: match a request only if it exactly matches a specified rule.
            For example, if deployments can be modified via `"apps/v1"`, `"apps/v1beta1"`,
            but `"rules"` only included
            `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`,
            a request to `"apps/v1beta1"` would not be sent to the ValidatingAdmissionPolicy.
          - `"Equivalent"`: match a request if modifies a resource listed in rules, even
            via another API group or version. For example, if deployments can be modified
            via `"apps/v1"` and `"apps/v1beta1"`, and `"rules"` only included
            `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`,
            a request to `"apps/v1beta1"` would be converted to `"apps/v1"` and
            sent to the ValidatingAdmissionPolicy.
        enum:
          - Equivalent
          - Exact
        type: string
        x-kab-description-zh: |-
          `matchPolicy` 定义此 MatchResources 列表如何用于匹配所接收到的请求。
          可选的值为 `"Exact"` 或 `"Equivalent"`：

          - `"Exact"` 意味着只有请求与某个指定规则精确匹配时才视为匹配。
            例如，资源 `deployments` 可以通过 `"apps/v1"` 和 `"apps/v1beta1"` 来修改，
            但 `resourceRules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions": ["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 的请求不会被发送到 ValidatingAdmissionPolicy。
          - `"Equivalent"` 意味着如果某个请求所修改的资源位于 `resourceRules` 列表中，
            即便请求使用的是不同的 API 组或版本，也视为匹配。
            例如，如果资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 来修改，
            而 `resourceRules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 的请求会被转换为 `"apps/v1"`，并被发送给
            ValidatingAdmissionPolicy。
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `namespaceSelector` decides whether to run the admission control policy on
          an object based on whether the namespace for that object matches the selector.
          If the object itself is a namespace, the matching is performed on `object.metadata.labels`.
          If the object is another cluster scoped resource, it never skips the policy.

          For example, to run the webhook on any objects whose namespace is not associated
          with `"runlevel"` of `"0"` or `"1"`, you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [
              {
                "key": "runlevel",
                "operator": "NotIn",
                "values": ["0", "1"]
              }
            ]
          }
          ```

          If instead you want to only run the policy on any objects whose namespace
          is associated with the `"environment"` of `"prod"` or `"staging"`, you will
          set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```
          See [official docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
          for more examples of label selectors.

          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段设置在判定是否要针对某对象来执行此准入控制策略时，要考虑对象名字空间是否符合预期。
          如果对象自身就是一个 Namespace，则匹配是针对 `object.metadata.labels` 来进行的。
          如果对象是一个集群作用域的对象，则 Webhook 不会被略过（总会被调用）。
          例如，如果希望针对没有设置 `"runlevel"` 为 `"0"` 或 `"1"`
          的名字空间中的所有对象运行此策略，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          如果你希望仅针对 `"environment"` 为 `"prod"` 或 `"staging"`
          的名字空间中的对象运行 Webhook，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          此字段默认为空的标签选择算符，其效果是与所有对象匹配。
      objectSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `objectSelector` decides whether to run the validation based on if the object
          has matching labels.
          `objectSelector` is evaluated against both the `oldObject` and `newObject`
          that would be sent to the CEL validation, and is considered to match if
          either object matches the selector.
          A null object (`oldObject` in the case of create, or `newObject` in the case of delete)
          or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions`
          object) is not considered to match.
          Use the object selector only if the webhook is opt-in, because end users may skip
          the admission webhook by setting the labels.
          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段用来根据对象上是否存在匹配的标签来决定是否执行检查。
          `objectSelector` 会针对要发送给 CEL 检查器的 `oldObject` 和 `newObject` 来处理。
          如果这两个对象之一与此选择算符匹配，则视请求为匹配。
          空（Null）对象（CREATE 请求中的 `oldObject` 或 DELETE 请求中的 `newObject`），
          或者不存在标签的对象（例如一个 `DeploymentRollback` 或 `PodProxyOptions` 对象）
          不会被视为匹配。只有当 Webhook 是可选的时候才建议使用此对象选择算符，
          因为最终用户可能会通过操控标签来略过准入 Webhook 的检查。

          此字段的默认值为空的标签选择算符，其效果是能够匹配所有对象。
      resourceRules:
        description: |-
          `resourceRules` describes what operations on what resources/subresources
          the ValidatingAdmissionPolicy matches. The policy cares about an operation if
          it matches _any_ rule.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.NamedRuleWithOperations'
        type: array
        x-kab-description-zh: |-
          用来设置 ValidatingAdmissionPolicy 关心哪些对象、子对象上的哪些操作。
          如果某项操作与 `resourceRules` 列表中定义的任一表项匹配，
          则可认为它是准入策略所关心的。
        x-kubernetes-list-type: atomic
    required:
      - matchPolicy
      - namespaceSelector
      - objectSelector
    type: object
    x-kab-description-zh: |-
      MatchResources 基于对象是否满足匹配条件来决定是否对其运行准入控制策略。
      其中的排除（Exclude）规则比包含（Include）规则优先级高。
      换言之，当某资源与这两个规则都匹配时，该资源会被排除掉。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1.MutatingWebhook:
    description: An admission webhook and the resources and operations it applies
      to.
    properties:
      admissionReviewVersions:
        description: |-
          An ordered list of preferred `AdmissionReview` versions the Webhook expects.
          API server will try to use first version in the list which it supports.
          If none of the versions specified in this list is supported by the API server,
          validation will fail for this object.
          If a persisted webhook configuration specifies allowed versions and does not
          include any versions known to the API Server, calls to the webhook will fail
          and be subject to the `failurePolicy`.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          Webhook 预期能够处理的 `AdmissionReview` 对象的版本列表，列表是有顺序的。
          API 服务器会尝试使用列表中它所支持的第一个版本。
          如果此列表中所给出的版本都不被 API 服务器支持，对象就无法通过合法性检查。
          如果已经保存起来 Webhook 配置中给出了所允许的版本列表，但其中的版本都是 API
          服务器所能够理解的，则调用 Webhook 的操作会失败，并根据 `failurePolicy`
          的设置执行进一步处理。
        x-kubernetes-list-type: atomic
      clientConfig:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig'
        description: Information for communicating with the hook.
        x-kab-description-zh: 与 Webhook 交互所需要的信息。
      failurePolicy:
        default: Fail
        description: How unrecognized errors from the admission endpoint are handled
        enum:
          - Fail
          - Ignore
        type: string
        x-kab-description-zh: 准入插件返回无法识别的错误时要如何处理。
      matchConditions:
        description: |-
          This is a list of conditions that must be met for a request to be sent to this webhook.
          Match conditions filter requests that have already been matched by the `rules`,
          `namespaceSelector`, and `objectSelector`.
          An empty list of `matchConditions` matches all requests.

          The exact matching logic is (in order):
          1. If ANY `matchCondition` evaluates to False, the webhook is skipped.
          1. If ALL `matchCondition`s evaluate to True, the webhook is called.
          1. If any `matchCondition` evaluates to an error (but none are False):
             - If `failurePolicy=Fail`, reject the request
             - If `failurePolicy=Ignore`, the error is ignored and the webhook is skipped

          The items in the array must have names that are unique across the array.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition'
        maxItems: 64
        type: array
        x-kab-description-zh: |-
          这里列出的是一些条件，一个请求只有满足了这里的条件才会被发送给 Webhook。
          这一过滤器会对 `rules`、`namespaceSelector` 和 `objectSelector`  所匹配到的请求做进一步的过滤。
          如果此列表为空，则会匹配所有请求。最终的匹配逻辑如下（按顺序执行）：

          1. 如果 `matchCondition` 中的任何一个条件为假，则 Webhook 不会被调用；
          1. 如果 `matchCondition` 中的所有条件都为真，则 Webhook 会被调用；
          1. 如果`matchCondition` 中某个条件在执行判定时出错，但不能判定为假。

          对于第三种情况：

          - 如果 `failurePolicy=Fail`，请求会被拒绝；
          - 如果 `failurePolicy=Ignore`，忽略错误，并略过当前 Webhook。

          数组中的各个元素的名字不可重复。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      matchPolicy:
        default: Equivalent
        description: |-
          This defines how the `rules` list is used to match incoming requests.

          - `"Exact"` means matching a request only if it exactly matches a specified rule.
            For example, if `deployments` can be modified via `"apps/v1"`, `"apps/v1beta1"`, and
            `"extensions/v1beta1"`, but `rules` only included
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`, a request to
            `"apps/v1beta1"` or `"extensions/v1beta1"` would not be sent to the webhook.
          - `"Equivalent"` means matching a request if it modifies a resource listed in `rules`,
            even via another API group or version. For example, if `deployments` can be modified via
            `"apps/v1"`, `"apps/v1beta1"`, and `"extensions/v1beta1"`, and `rules` only included
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`, a request to
            `"apps/v1beta1"` or `"extensions/v1beta1"` would be converted to `"apps/v1"` and sent to
            the webhook.
        enum:
          - Exact
          - Equivalent
        type: string
        x-kab-description-zh: |-
          此字段指定如何使用 `rules` 列表来对收到的请求进行匹配：

          - `"Exact"` 意味着只有请求与某个指定规则精确匹配时才视为匹配。
            例如，资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 和
            `"extensions/v1beta1"` 来修改，但 `rules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions": ["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 或 `"extensions/v1beta1"` 的请求不会被发送到 Webhook。
          - `"Equivalent"` 意味着如果某个请求所修改的资源位于 `rules` 列表中，
            即便请求使用的是不同的 API 组或版本，也视为匹配。
            例如，如果资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 和
            `"extensions/v1beta1"` 来修改，而 `rules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 或 `"extensions/v1beta1"` 的请求会被转换为
            `"apps/v1"`，并被发送给 Webhook。
      name:
        description: The name of the admission webhook. Name should be fully qualified,
          e.g., `"imagepolicy.kubernetes.io"`, where `"imagepolicy"` is the name of
          the webhook, and `"kubernetes.io"` is the name of the organization. The
          name must be unique among all mutating Webhooks.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          准入 Webhook 的名称。这里给出的名称必须是全限定名称（Fully-Qualified Name）。
          例如 `"imagepolicy.kubernetes.io"`。其中的 `"imagepolicy"` 是 Webhook
          的名称，`"kubernetes.io"` 是组织的名称。所有变更式 Webhook 的名称都必须各不相同。
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          This decides whether to run the webhook on an object based on the match between the object
          namespace to the selector. If the object itself is a namespace, the matching is performed on
          `object.metadata.labels`. If the object is another cluster scoped resource, it never skips
          the webhook. For example, to run the webhook on any objects whose namespace is not associated
          with `runlevel` of '`0`' or '`1`'; you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          If instead you want to only run the webhook on any objects whose namespace is associated with
          the `environment` of `"prod"` or `"staging"`, you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段设置在判定是否要针对某对象来执行此 Webhook 时，要考虑对象名字空间是否符合预期。
          如果对象自身就是一个 Namespace，则匹配是针对 `object.metadata.labels` 来进行的。
          如果对象是一个集群作用域的对象，则 Webhook 不会被略过（总会被调用）。
          例如，如果希望针对没有设置 `runlevel` 为 '0' 或 '1' 的 名字空间中的所有对象运行 Webhook，
          你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          如果你希望仅针对 `environment` 为 `"prod"` 或 `"staging"`
          的名字空间中的对象运行 Webhook，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          此字段默认为空的标签选择算符，其效果是与所有对象匹配。
      objectSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          This decides whether to run the webhook based on if the object has matching labels.
          `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be
          sent to the webhook, and is considered to match if either object matches the selector.
          A null object (`oldObject` in the case of create, or `newObject` in the case of delete)
          or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions`
          object) is not considered to match.
          Use the object selector only if the webhook is opt-in, because end users may skip the
          admission webhook by setting the labels.
          Default to the empty Label selector, which matches everything.
        x-kab-description-zh: |-
          此字段用来根据对象上是否存在匹配的标签来决定是否运行 Webhook。
          `objectSelector` 会针对要发送给 Webhook 的  `oldObject` 和 `newObject` 来评估。
          如果这两个对象之一与此选择算符匹配，则请求为匹配。
          空（Null）对象（创建请求中的 `oldObject` 或删除请求中的 `newObject`），
          或者不存在标签的对象（例如一个 `DeploymentRollback` 或 `PodProxyOptions` 对象）
          不会被视为匹配。只有当 Webhook 是可选的时候才建议使用此对象选择算符，
          因为最终用户可能会通过操控标签来略过准入 Webhook 的检查。

          此字段的默认值为空的标签选择算符，其效果是能够匹配所有对象。
      reinvocationPolicy:
        default: Never
        description: |-
          This indicates whether this webhook should be called multiple times as part of a single
          admission evaluation.

          - `"Never"` means the webhook will not be called more than once in a single admission
            evaluation.
          - `"IfNeeded"` means the webhook will be called at least one additional time as part of the
            admission evaluation if the object being admitted is modified by other admission plugins
            after the initial webhook call.

          Webhooks that specify this option **must** be idempotent, able to process objects they
          previously admitted.

          **Note**: the number of additional invocations is not guaranteed to be exactly one.
          If additional invocations result in further modifications to the object, webhooks are not
          guaranteed to be invoked again.
          Webhooks that use this option may be reordered to minimize the number of additional
          invocations. To validate an object after all mutations are guaranteed complete,
          use a validating admission webhook instead.
        enum:
          - IfNeeded
          - Never
        type: string
        x-kab-description-zh: |-
          此字段用来表明在一次准入判定的过程中是否可以多次调用此 Webhook。

          - `"Never"` 意味着 Webhook 在同一次准入判定过程中不会被调用多次。
          - `"IfNeeded"` 表明当已被准入的对象在此 Webhook 被调用之后又被其他准入插件修改时，
            在准入判定过程中此 Webhook 至少会再被调用一次。
            设置了此选项的 Webhook **必须** 是幂等的，能够处理之前已被准入的对象。

          **注意**：额外的调用可能不止一次。如果额外的调用进一步修改了对象，
          无法保证会再次调用此 Webhook。使用此选项的 Webhook 可会被重新排序，
          以便减少额外调用的次数。如果想要验证所有变更都确定完成之后对象是否合法，
          应用使用验证性的准入 Webhook。
      rules:
        description: |-
          What operations on what resources/subresources the webhook cares about.
          The webhook cares about an operation if it matches **any** entry defined in the `rules` list.
          However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks from
          putting the cluster in a state which cannot be recovered from without completely disabling
          the plugin,
          ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission
          requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations'
        type: array
        x-kab-description-zh: |-
          用来设置 Webhook 关心哪些对象、子对象上的哪些操作。如果某项操作与 `rules` 列表中定义的任意表项匹配，
          则可认为它是 Webhook 所关心的。不过，为了避免 ValidatingAdmissionWebhook
          和 MutatingAdmissionWebhook 把集群带到一种只能靠完全禁止某插件才能彻底恢复的状态，
          对于 ValidatingWebhookConfiguration 和 MutatingWebhookConfiguration 对象的请求，
          都不会被调用 ValidatingAdmissionWebhook 和 MutatingAdmissionWebhook。
        x-kubernetes-list-type: atomic
      sideEffects:
        description: |-
          Whether this webhook has any side effects. Webhooks with side effects **MUST** implement a
          reconciliation system, since a request may be rejected by a future step in the admission
          change and the side effects therefore need to be undone.
        enum:
          - None
          - NoneOnDryRun
        type: string
        x-kab-description-zh: |-
          用来标明此 Webhook 是否具有一定的副作用。带有副作用的 Webhook **必须** 实现一种协调机制，
          原因是某个请求可能会被准入判定链条中的下游插件所拒绝，这里产生的副作用需要被消除掉。
      timeoutSeconds:
        default: 10
        description: |-
          The timeout for this webhook. After the timeout passes, the webhook call will be ignored or
          the API call will fail based on the `failurePolicy`.
        format: int32
        maximum: 30
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          Webhook 的超时时间。超出给定的时限之后，Webhook 调用会被忽略，
          或者 API 调用会以 `failurePolicy` 中设置的方式来返回错误。
    required:
      - admissionReviewVersions
      - clientConfig
      - name
      - sideEffects
    type: object
    x-kab-description-zh: 一种执行准入判定的 Webhook 及其所适用的资源和操作。
  io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.CREATE:
    description: The configuration of an admission webhook that accepts or rejects
      an object and may change it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - MutatingWebhookConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      webhooks:
        description: |-
          A list of webhooks and the affected resources and operations.
          The name must be fully qualified name and it must be unique in the list.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook'
        type: array
        x-kab-description-zh: |-
          Webhook 及其所影响的资源和操作的列表。
          每个 Webhook 的名称都必须是完全限定名，并且在此列表中唯一。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: 准入 Webhook 的配置信息，用于能够接受、拒绝某对象甚至变更该对象的准入 Webhook。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
  io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET:
    description: The configuration of an admission webhook that accepts or rejects
      an object and may change it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - MutatingWebhookConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      webhooks:
        description: A list of webhooks and the affected resources and operations.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook'
        type: array
        x-kab-description-zh: Webhook 及其所影响的资源和操作的列表。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
      - webhooks
    type: object
    x-kab-description-zh: 准入 Webhook 的配置信息，用于能够接受、拒绝某对象甚至变更该对象的准入 Webhook。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
  io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.UPDATE:
    description: The configuration of an admission webhook that accepts or rejects
      an object and may change it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - MutatingWebhookConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      webhooks:
        description: A list of webhooks and the affected resources and operations.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhook'
        type: array
        x-kab-description-zh: Webhook 及其所影响的资源和操作的列表。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: 准入 Webhook 的配置信息，用于能够接受、拒绝某对象甚至变更该对象的准入 Webhook。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
  io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList:
    description: A list of MutatingWebhookConfiguration objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of MutatingWebhookConfiguration objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
        type: array
        x-kab-description-zh: MutatingWebhookConfiguration 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - MutatingWebhookConfigurationList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: MutatingWebhookConfiguration 对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: MutatingWebhookConfigurationList
        version: v1
  io.k8s.api.admissionregistration.v1.NamedRuleWithOperations:
    description: NamedRuleWithOperations is a tuple of `operations` and `resources`
      with `resourceNames`.
    properties:
      apiGroups:
        description: |-
          `apiGroups` is the API groups the resources belong to. '*' is all groups.
          If '*' is present, the length of the list must be one. Required.
        items:
          description: The API group the resources belong to. An empty string "" means
            the legacy "v1" API.
          type: string
          x-kab-description-zh: 资源所属的 API 组。`""` 表示原来的 `"v1"` API 组。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 组。`"*"` 是用来表示所有 API 组的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 组。
          此字段为必需字段。
        x-kubernetes-list-type: atomic
      apiVersions:
        description: |-
          `apiVersions` is the API versions the resources belong to. `"*"` is all versions.
          If `"*"` is present, the length of the list must be one.
        items:
          description: The API version a resource belongs to. This string cannot be
            empty.
          minLength: 1
          type: string
          x-kab-description-zh: 资源所属的 API 版本。此字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 版本。`"*"` 是用来表示所有 API 版本的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 版本。
        x-kubernetes-list-type: atomic
      operations:
        description: |-
          `operations` is the operations the admission hook cares about -
          `CREATE`, `UPDATE`, `DELETE`, `CONNECT` or `*` for all of those operations and
          any future admission operations that are added.
          If '*' is present, the length of the slice must be one."
        items:
          description: The name of a supported operation
          enum:
            - '*'
            - CONNECT
            - CREATE
            - DELETE
            - UPDATE
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          准入策略所关心的操作。可以设置为
          `"CREATE"`、`"UPDATE"`、`"DELETE"`、`"CONNECT"` 或 `"*"`
          （表示所有这些操作，包括将来会添加的准入操作）。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他操作。
        x-kubernetes-list-type: atomic
      resourceNames:
        description: |-
          `resourceNames` is an optional white list of names that the rule applies to.
          An empty set means that everything is allowed.
        items:
          description: |-
            The name of a resource. It has to be a valid path segment name,
            which means it cannot be `".."` or `"."`; it may not contain `'/'` or `'%'`.
          type: string
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          可选的字段，用来给出规则所适用的资源名称的白名单。
          如果此数组为空，则意味着所有资源名称都是可接受的。
        x-kubernetes-list-type: atomic
      resources:
        description: |-
          `resources` is a list of resources this rule applies to. For example:

          - 'pods' means Pods.
          - 'pods/log' means the `log` subresource of Pods.
          - '*' means all resources, but not subresources. If '*' is in the list,
            all other items in the list can only specify subresources.
          - 'pods/*' means all subresources of pods. If 'pod/*' is included,
            there cannot be other 'pod/subres' item in the list.
          - '*/scale' means all `scale` subresources. If '*/scale' is in the list,
            there cannot be other 'resource/scale' item in the list.
          - '*/*' means all resources and their subresources. If '*/*' is in the list,
            there cannot be any other items in the list.

            If wildcard is present, the validation rule will ensure `resources` do not
            overlap with each other.
            Depending on the enclosing object, subresources might not be allowed.
        items:
          description: The resource this rule applies to. This string cannot be empty.
          minLength: 1
          type: string
          x-kab-description-zh: 此规则所适用的资源。字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此规则所适用的资源列表。例如：

          - `"pods"` 意味着适用于 Pod 资源；
          - `"pods/log"` 意味着适用于 Pod 的 `"log"` 子资源；
          - `"*"` 意味着适用于所有资源，但不包括其子资源；
            如果列表中包含了 `"*"`，则列表中的其他条目只能用于设置子资源；
          - `"pods/*"` 意味着适用于 Pod 的所有子资源；
            如果列表中包含了这个字符串，列表中不能再出现其他 `pod/subresource` 条目；
          - `"*/scale"` 意味着适用于所有的 `"scale"` 子资源；
            若列表中出现了此字符串，则列表中不可存在其他 `resource/scale` 条目；
          - `"*/*"` 意味着适用于所有资源及其子资源；
            如果列表中存在这个字符串，则列表中不可存在其他条目。

          如果列表中包含了通配符，
          则 API 服务器在作合法性检查时会确保 `resources` 条目之间不会发生重叠覆盖的情况。
          取决于所指定的资源对象是什么，有些资源是不支持设置子资源的。
        x-kubernetes-list-type: atomic
      scope:
        default: '*'
        description: |-
          `scope` specifies the scope of this rule. Valid values are `"Cluster"`,
          `"Namespaced"`, and `"*"`:

          - `"Cluster"` means that only cluster-scoped resources will match this rule.
            Namespace API objects are cluster-scoped.
          - `"Namespaced"` means that only namespaced resources will match this rule.
          - `"*"` means that there are no scope restrictions.

          Subresources match the scope of their parent resource.
        enum:
          - Cluster
          - Namespaced
          - '*'
        type: string
        x-kab-description-zh: |-
          规则的适用范围。

          - `"Cluster"` 意味着仅集群作用域的资源会与此规则匹配；
            Namespace API 对象是集群作用域的。
          - `"Namespaced"` 表示只有名字空间作用域的资源与此规则匹配；
          - `"*"` 意味着没有作用域方面的限制。

          子资源的作用域匹配按其父资源作用域处理。
    required:
      - apiGroups
      - apiVersions
      - operations
      - resources
    type: object
    x-kab-description-zh: |-
      NamedRuleWithOperations 是一个 `operations` 和带有 `resourceNames` 的
      `resources` 组成的元组。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1.ParamKind:
    description: ParamKind is a tuple of resource kind and API version.
    properties:
      apiVersion:
        description: |-
          `apiVersion` is the API group version the resources belong to.
          In format of `"group/version"`.
          The `group` part, if not empty, must be a valid DNS subdomain name.
          The `version` part cannot be empty string and it must be a valid DNS label name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          资源所属的 API 组版本，格式为 `"group/version"`。
          `group` 部分如果不为空，则必须是一个合法的 DNS 子域名。
          `version` 部分不能是空字符串，且其取值必须是合法的 DNS 标签名称。
      kind:
        description: |-
          `kind` is the API kind the resources belong to.
          The string must be a valid DNS label name.
        minLength: 1
        type: string
        x-kab-description-zh: 资源所属的 API 类别（kind）。此字符串值必须是合法的 DNS 标签名称。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: ParamKind 是由资源类别（kind）和 API 版本组成的元组。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1.ParamRef:
    description: |-
      ParamRef describes how to locate the params to be used as input to expressions
      of rules applied by a policy binding. One of `name` and `selector` must be specified.
    properties:
      name:
        description: |-
          `name` is the name of the resource being referenced.
          The string must be a valid path segment, which means the path cannot be `".."` or `"."` ,
          and it cannot contain `'/'` or `'%'`.
          `name` and `selector` are mutually exclusive properties.
          If one is set, the other must be unset.

          A single parameter used for all admission requests can be configured by setting
          the `name` field, leaving `selector` blank, and setting namespace if `paramKind`
          is namespace-scoped.
        type: string
        x-kab-description-zh: |-
          此字段为所引用的资源的名称。字符串必须是一个合法的路径段。
          也就是说，字符串值不可以是 `".."` 或者 `"."`，并且其中不能包含
          `'/'` 或者 `'%'`。
          `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。

          通过设置 `name` 字段并将 `selector` 留空，可以为所有准入请求配置同一个参数。
          如果 `paramKind` 所引用的是名字空间作用域的类别，还可以设置 `namespace`。
      namespace:
        description: |-
          `namespace` is the namespace of the referenced resource.
          Allows limiting the search for params to a specific namespace.
          Applies to both `name` and `selector` fields.

          A per-namespace parameter may be used by specifying a namespace-scoped `paramKind`
          in the policy and leaving this field empty.i

          - If `paramKind` is cluster-scoped, this field MUST be unset.
            Setting this field results in a configuration error.
          - If `paramKind` is namespace-scoped, the namespace of the object being evaluated
            for admission will be used when this field is left unset.

          Take care that if this is left empty the binding must not match any
          cluster-scoped resources, which will result in an error.
        type: string
        x-kab-description-zh: |-
          所引用资源的名字空间。使用此参数可以将参数搜索限定到某个特定的名字空间范围内。
          名字空间限制对于 `name` 和 `selector` 字段均有效。

          通过在策略中设置名字空间作用域的 `paramKind` 同样可以使用名字空间层次的参数，
          因此不必设置此字段。

          - 如果 `paramKind` 是集群作用域的，此字段**不可**设置。
            设置了此字段会造成配置错误。
          - 如果 `paramKind` 是名字空间作用域的，未设置此字段时，
            执行准入判定时将会使用被评估的对象的名字空间。

          需要保证的是，当此字段未设置时，策略绑定不能与集群作用域的资源匹配，
          否则会导致出错。
      parameterNotFoundAction:
        default: Deny
        description: |-
          `parameterNotFoundAction` controls the behavior of the binding when the resource exists,
          and name or selector is valid, but there are no parameters matched by the binding.

          - `"Allow"`: no matched parameters will be treated as successful validation by the binding.
          - `"Deny"`: no matched parameters will be subject to the `failurePolicy` of the policy.
        enum:
          - Allow
          - Deny
        type: string
        x-kab-description-zh: |-
          此字段用来控制当资源存在、`name` 或 `selector` 也合法，
          但策略绑定找不到匹配的参数时的行为。

          - `"Allow"`：绑定将找不到参数视为成功地通过合法性检查；
          - `"Deny"`：绑定会根据策略的 `failurePolicy` 设置来进行出错处理。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `selector` can be used to match multiple param objects based on their labels.
          Supply selector `{}` to match all resources of the `paramKind`.

          If multiple params are found, they are all evaluated with the policy expressions
          and the results are ANDed together.

          One of `name` or `selector` must be set, but `name` and `selector` are mutually
          exclusive properties. If one is set, the other must be unset."
        x-kab-description-zh: |-
          此字段可用来基于对象上的标签来匹配多个参数对象。
          如果此选择算符被设置为 `{}`，则会匹配 `paramKind` 所对应的所有资源。

          如果匹配的参数不止一个，所有参数都会被用来参与策略表达式求值，
          求值的结果会用逻辑与操作组合。

          `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
    type: object
    x-kab-description-zh: |-
      ParamRef 描述如何定位作为表达式输入的参数，
      这里的表达式是某策略绑定用来构造规则时使用的。
      `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1.RuleWithOperations:
    description: |-
      A tuple of `operations` and `resources`.
      It is recommended to make sure that all the tuple expansions are valid.
    properties:
      apiGroups:
        description: |-
          The API groups the resources belong to. `"*"` is the wildcard for all groups.
          If `"*"` is present, the length of the slice must be one.
        items:
          description: The API group the resource belong to. `"*"` is the wildcard
            for all groups.
          minLength: 1
          type: string
          x-kab-description-zh: 资源所属的 API 组。`""` 表示原来的 `"v1"` API 组。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 组。`"*"` 是用来表示所有 API 组的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 组。
        x-kubernetes-list-type: atomic
      apiVersions:
        description: |-
          The API versions the resources belong to. `"*"` means all versions.
          If `"*"` is present, the length of the slice must be one.
        items:
          description: The API version the resources belong to. `"*"` means all versions.
          minLength: 1
          type: string
          x-kab-description-zh: 资源所属的 API 版本。此字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 版本。`"*"` 是用来表示所有 API 版本的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 版本。
        x-kubernetes-list-type: atomic
      operations:
        description: |-
          The operations the admission hook cares about. `"CREATE"`, `"UPDATE"`, `"DELETE"`,
          `"CONNECT"` or "`*`" for all of those operations and any future admission operations that
          are added.
          If `"*"` is present, the length of the slice must be one.
        items:
          description: The operation the admission hook cares about.
          enum:
            - '*'
            - CONNECT
            - CREATE
            - DELETE
            - UPDATE
          minLength: 1
          type: string
          x-kab-description-zh: 所支持的操作的名称。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          准入 Webhook 所关心的操作。可以设置为
          `"CREATE"`、`"UPDATE"`、`"DELETE"`、`"CONNECT"` 或 `"*"`
          （表示所有这些操作，包括将来会添加的准入操作）。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他操作。
        x-kubernetes-list-type: atomic
      resources:
        description: |-
          A list of resources this rule applies to. For example:

          - `"pods"` means Pods.
          - `"pods/log"` means the `"log"` subresource of Pods.
          - `"*"` means all resources, but not subresources.
          - `"pods/*"` means all subresources of Pods.
          - `"*/scale"` means all `"scale"` subresources.
          - `"*/*"` means all resources and their subresources.

          If a wildcard is present, the validation rule will ensure resources do not overlap with each
          other. Depending on the enclosing object, subresources might not be allowed.
        items:
          minLength: 1
          type: string
          x-kab-description-zh: 此规则所适用的资源。字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此规则所适用的资源列表。例如：

          - `"pods"` 意味着适用于 Pod 资源；
          - `"pods/log"` 意味着适用于 Pod 的 `"log"` 子资源；
          - `"*"` 意味着适用于所有资源，但不包括其子资源；
          - `"pods/*"` 意味着适用于 Pod 的所有子资源；
          - `"*/scale"` 意味着适用于所有的 `"scale"` 子资源；
          - `"*/*"` 意味着适用于所有资源及其子资源。

          如果资源列表项中包含了通配符，
          则 API 服务器在作合法性检查时会确保 `resources` 条目之间不会发生重叠覆盖的情况。
          取决于所指定的资源对象是什么，有些是不支持设置子资源的。
        x-kubernetes-list-type: atomic
      scope:
        default: '*'
        description: |-
          The scope of this rule.

          - `"Cluster"` means that only cluster-scoped resources will match this rule.
          - `"Namespaced"` means that only namespaced resources will match this rule.
          - `"*"` means that there are no scope restrictions.

          Subresources match the scope of their parent resource.
        enum:
          - Cluster
          - Namespaced
          - '*'
        minLength: 1
        type: string
        x-kab-description-zh: |-
          规则的适用范围。

          - `"Cluster"` 意味着仅集群作用域的资源会与此规则匹配；
            Namespace API 对象是集群作用域的。
          - `"Namespaced"` 表示只有名字空间作用域的资源与此规则匹配；
          - `"*"` 意味着没有作用域方面的限制。

          子资源的作用域匹配按其父资源作用域处理。
    required:
      - apiGroups
      - apiVersions
      - operations
      - resources
    type: object
    x-kab-description-zh: 包含 `operations` 和 `resources` 的元组。建议确保所有的元组扩展都是合法的。
  io.k8s.api.admissionregistration.v1.ServiceReference:
    description: Reference to a Service.
    properties:
      name:
        description: The name of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 对象的名称。
      namespace:
        description: The namespace of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 对象所在的名字空间。
      path:
        description: |-
          An URL path which will be sent in any request to this service.
          `'/'` and `""` are always valid paths. `"//"` is invalid.
          The path has start with a `'/'`. The trailing `'/'` will be ignored.
          Each path segment must be a valid DNS subdomain.
        type: string
        x-kab-description-zh: |-
          针对此 Service 的所有请求都会发送的一个 URL 路径。
          `"/"` 和 `""` 都是合法的路径。`"//"` 是非法路径。路径应以 `"/"` 开头。
          路径尾部的 `'/'` 会被忽略。路径中的每一段都必须是合法的 DNS 子域名。
      port:
        default: 443
        description: If specified, the port on the Service that hosting webhook.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 托管 Webhook 的 Service 上的端口，可选。
    required:
      - namespace
      - name
    type: object
    x-kab-description-zh: 对某 Service 对象的引用。
  io.k8s.api.admissionregistration.v1.TypeChecking:
    description: TypeChecking contains results of type checking the expressions in
      the ValidatingAdmissionPolicy
    properties:
      expressionWarnings:
        description: The type checking warnings for each expression.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ExpressionWarning'
        type: array
        x-kab-description-zh: 每个表达式的类型检查警告信息。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: TypeChecking 包含对 ValidatingAdmissionPolicy 中的表达式进行类型检查的结果。
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.CREATE:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyStatus'
        description: |-
          The status of the ValidatingAdmissionPolicy, including warnings that
          are useful to determine if the policy behaves in the expected way.
          Populated by the system. Read-only.
        x-kab-description-zh: |-
          ValidatingAdmissionPolicy 的状态，包括关于策略是否按预期方式工作的有用信息。
          此字段由系统填充。只读。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.UPDATE:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.CREATE:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.UPDATE:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingList:
    description: ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of PolicyBinding objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
        type: array
        x-kab-description-zh: ValidatingAdmissionPolicyBinding 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingAdmissionPolicyBindingList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyBindingList 包含 ValidatingAdmissionPolicyBinding
      对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBindingList
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingSpec:
    description: ValidatingAdmissionPolicyBindingSpec is the specification of the
      ValidatingAdmissionPolicyBinding.
    properties:
      matchResources:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MatchResources'
        description: |-
          `matchResources` declares what resources match this binding and will be validated by it.
          Note that this is intersected with the policy's `matchConstraints`,
          so only requests that are matched by the policy can be selected by this.
          If this is unset, all resources matched by the policy are validated by this binding.
          When `resourceRules` is unset, it does not constrain resource matching.
          If a resource is matched by the other fields of this object, it will be validated.
          Note that this is differs from ValidatingAdmissionPolicy `matchConstraints`,
          where `resourceRules` are required.
        x-kab-description-zh: |-
          此字段声明哪些资源会被此绑定选中，进而被对应的策略检查。
          注意这一选择条件与策略的 `matchConstraints` 是取交集的，
          只有被策略选中了的请求才会在这里作进一步的匹配。
          若未设置此字段，则策略所选中的所有资源都会被此绑定检验。
          未设置 `resourceRules` 时，资源匹配是不受限制的。
          如果某资源被此绑定对象的其他字段匹配，则该资源会被检查。
          注意这一行为与 ValidatingAdmissionPolicy 的 `matchContraints` 不同，
          在后者中 `resourceRules` 是必须设置的。
      paramRef:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ParamRef'
        description: |-
          `paramRef` specifies the parameter resource used to configure the admission control policy.
          It should point to a resource of the type specified in `paramKind` of
          the bound ValidatingAdmissionPolicy.
          If the policy specifies a `paramKind` and the resource referred to by `paramRef`
          does not exist, this binding is considered mis-configured and the `failurePolicy`
          of the ValidatingAdmissionPolicy is applied.
          If the policy does not specify a `paramKind` then this field is ignored,
          and the rules are evaluated without a param.
        x-kab-description-zh: |-
          此字段给出用来配置准入控制策略的参数资源。
          字段值所指向的资源的类别应该与所绑定的 ValidatingAdmissionPolicy 的 `paramKind`
          相同。如果策略指定了 `paramKind`，而此 `paramRef` 所引用的资源并不存在，
          则认为绑定的配置是有问题的，要根据 ValidatingAdmissionPolicy 的 `failurePolicy`
          作进一步处理。
          如果策略没有设置 `paramKind`，则此字段会被忽略。
          执行准入规则时不考虑参数因素。
      policyName:
        description: |-
          `policyName` references a ValidatingAdmissionPolicy name which the
          ValidatingAdmissionPolicyBinding binds to.
          If the referenced resource does not exist, this binding is considered invalid and
          will be ignored. This string must be a valid DNS subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段引用所绑定的 ValidatingAdmissionPolicy。
          如果所引用的资源不存在，则此绑定的配置是非法的，并因而会被忽略。
          字段的字符串值必须是合法的 DNS 子域名。
      validationActions:
        description: |-
          This declares how validations of the referenced ValidatingAdmissionPolicy are enforced.
          If a validation evaluates to False, it is always enforced according to these actions.

          Failures defined by the ValidatingAdmissionPolicy's `failurePolicy` are enforced
          according to these actions only if the `failurePolicy` is set to `"Fail"`,
          otherwise the failures are ignored. This includes compilation errors,
          runtime errors and misconfigurations of the policy.

          The `validationActions` is declared as a set of action values. Order does not matter.
          The `validationActions` may not contain duplicates of the same action.

          The supported actions values are:

          - `"Deny"` specifies that a validation failure results in a denied request.
          - `"Warn"` specifies that a validation failure is reported to the request client
            in HTTP Warning headers, with a warning code of 299.
            Warnings can be sent both for allowed or denied admission responses.
          - `"Audit"` specifies that a validation failure is included in the published audit event
            for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with
            a value containing the details of the validation failures, formatted as a JSON list of
            objects, each with the following fields:
              - `message`: The validation failure message string
              - `policy`: The resource name of the ValidatingAdmissionPolicy
              - `binding`: The resource name of the ValidatingAdmissionPolicyBinding
              - `expressionIndex`: The index of the failed validations in the
                ValidatingAdmissionPolicy
              - `validationActions`: The enforcement actions enacted for the validation failure.

          Example audit annotation:

          ```
          "validation.policy.admission.k8s.io/validation_failure":
            "[{\"message\": \"Invalid value\",
              {\"policy\": \"policy.example.com\",
                {\"binding\": \"policybinding.example.com\",
                  {\"expressionIndex\": \"1\",
                    {\"validationActions\": [\"Audit\"]}]"
          ```

          Clients should expect to handle additional values by ignoring any values not
          recognized.
          `"Deny"` and `"Warn"` may not be used together since this combination needlessly
          duplicates the validation failure both in the API response body and
          the HTTP warning headers.
        items:
          enum:
            - Audit
            - Deny
            - Warn
          type: string
        maxItems: 2
        minItems: 1
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          此字段用来配置如何实施所引用的 ValidatingAdmissionPolicy 中定义的检查。
          如果某项检查的评估结果为 False，则一定会根据这里的动作定义来实施。

          对于 ValidatingAdmissionPolicy 中 `failurePolicy` 所定义的失败策略，
          只有 `failurePolicy` 设置为 `"Fail"` 的时候，才会根据这里定义的动作来处理。
          否则策略失败会被忽略。这里的失败包括编译错误、运行时错误以及策略的配置问题等。

          此 `validationActions` 是一组动作值定义，其中各个动作定义的顺序并不重要，
          但是其中不可以包含重复的动作定义。

          目前支持的动作值包括：

          - `"Deny"` 设定检查失败会导致请求被拒绝；
          - `"Warn"` 设定检查失败会通过 HTTP Warning 标头报告给发送请求的客户端，
            警告代码为 299。被通过的和被拒绝的准入响应都可以发送警告信息。
          - `"Audit"` 设定检查失败会被记录到请求对应的、公开的审计事件中。
            审计事件会包含一个 `validation.policy.admission.k8s.io/validation_failure`
            审计注解，且其注解值为检查失败的详情。

          生成审计日志时，注解值是一个 JSON 对象列表，每个 JSON 对象包含以下字段：

          - `message`：检查失败消息字符串；
          - `policy`：ValidatingAdmissionPolicy 资源的名称；
          - `binding`：ValidatingAdmissionPolicyBinding 资源的名称；
          - `expressionIndex`：ValidatingAdmissionPolicy 中失败的检查的索引；
          - `validationActions`：针对检查失败所采取的动作。

          下面是一个审计注解的例子：

          ```
          "validation.policy.admission.k8s.io/validation_failure":
            "[{\"message\": \"Invalid value\",
              {\"policy\": \"policy.example.com\",
                {\"binding\": \"policybinding.example.com\",
                  {\"expressionIndex\": \"1\",
                    {\"validationActions\": [\"Audit\"]}]"
          ```

          客户端应该忽略无法识别的取值，进而能够处理额外的情况。

          `"Deny"` 和 `"Warn"` 不能同时使用，因为同时使用的话可能会在 API
          响应和 HTTP Warning 标头中同时记录检查失败的信息，这是不必要的。
        x-kubernetes-list-type: set
    required:
      - policyName
      - validationActions
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyBindingSpec 是对 ValidatingAdmissionPolicyBinding
      对象的行为规约。
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyList:
    description: ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of ValidatingAdmissionPolicy objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
        type: array
        x-kab-description-zh: ValidatingAdmissionPolicy 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingAdmissionPolicyList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyList 是 ValidatingAdmissionPolicy
      对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyList
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicySpec:
    description: ValidatingAdmissionPolicySpec is the specification of the desired
      behavior of the AdmissionPolicy.
    properties:
      auditAnnotations:
        description: |-
          `auditAnnotations` contains CEL expressions which are used to produce
          audit annotations for the audit event of the API request.
          `validations` and `auditAnnotations` may not both be empty;
          at least one of `validations` or `auditAnnotations` is required.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.AuditAnnotation'
        type: array
        x-kab-description-zh: |-
          此字段包含 CEL 表达式，用来为 API 请求的审计事件生成审计注解。
          `validations` 和 `auditAnnotations` 不可以同时为空，但二者之一是必须设置的。
        x-kubernetes-list-type: atomic
      failurePolicy:
        default: Fail
        description: |-
          `failurePolicy` defines how to handle failures for the admission policy.
          Failures can occur from CEL expression parse errors, type check errors,
          runtime errors and invalid or mis-configured policy definitions or bindings.

          A policy is invalid if `spec.paramKind` refers to a non-existent kind.
          A binding is invalid if `spec.paramRef.name` refers to a non-existent resource.

          `failurePolicy` does not define how validations that evaluate to false are handled.

          When `failurePolicy` is set to `"Fail"`, ValidatingAdmissionPolicyBinding
          `validationActions` define how failures are enforced.
        enum:
          - Fail
          - Ignore
        type: string
        x-kab-description-zh: |-
          `failurePolicy` 定义如何处理准入策略的失败情况。
          失败可能缘于 CEL 表达式解析错误、类型检查错误、运行时错误，
          以及策略或绑定本身的配置不合法等等。

          当某个策略的 `spec.paramKind` 引用一个不存在的资源类别时，该策略是非法的。
          当某个绑定的 `spec.paramRef.name` 引用一个不存在的资源时，该绑定是非法的。

          `failurePolicy` 并不定义检查项评估结果为 False 的情况如何处理。
          当 `failurePolicy` 设置为 `"Fail"` 时，ValidatingAdmissionPolicyBinding
          的 `validationActions` 负责定义如何处理对应的失败。
      matchConditions:
        description: |-
          `matchConditions` is a list of conditions that must be met for a request to be validated.
          Match conditions filter requests that have already been matched by the `rules`,
          `namespaceSelector`, and `objectSelector`.
          An empty list of `matchConditions` matches all requests.

          If a parameter object is provided, it can be accessed via the `params` handle
          in the same manner as validation expressions.

          The `name` of the match conditions must be unique across the list.
          The exact matching logic is (in order):

          1. If ANY `matchCondition` evaluates to False, the policy is skipped.
          1. If ALL `matchConditions` evaluate to True, the policy is evaluated.
          1. If any `matchCondition` evaluates to an error (but none are False).
             If `failurePolicy=Fail`, reject the request;
             If `failurePolicy=Ignore`, the policy is skipped.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition'
        maxItems: 64
        type: array
        x-kab-description-zh: |-
          此字段是一个列表值，其中包含请求要被检查之前所需满足的条件。
          这里设置的条件负责对已经通过 `rules`、`namespaceSelector` 和
          `objectSelector` 筛选的请求作进一步过滤。
          若此列表为空，则意味着匹配所有请求。

          如果提供了参数对象，可以和其他检查表达式一样，通过 `params` 句柄来访问。

          此列表中各个元素的 `name` 必须在整个列表中唯一。
          精确匹配的逻辑如下（按顺序执行）：
          1. 若 `matchCondition` 中的任一条目取值为 False，则策略被略过；
          1. 若 `matchConditions` 所有条目取值为 True，则对策略进行评估；
          1. 若 `matchCondition` 中任一条目评估出错（但都没有取 False 值）：
             如果 `failurePolicy=Fail`，则拒绝请求；如果 `failurePolicy=Ignore`，
             则策略会被略过。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      matchConstraints:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MatchResources'
        description: |-
          `matchConstraints` specifies what resources this policy is designed to validate.
          The admission policy cares about a request if it matches _all_ constraints.
          However, in order to prevent clusters from being put into an unstable state that
          cannot be recovered from via the API, the ValidatingAdmissionPolicy
          cannot match the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: |-
          `matchConstraints` 设置此策略被设计用来检查的资源。
          只有某个请求匹配了这里的**所有**约束，才会被此准入策略处理。
          不过，为了避免将集群带入某种无法通过 API 来恢复的不稳定状态，
          ValidatingAdmissionPolicy 不可以用来匹配 ValidatingAdmissionPolicyBinding 资源。
      paramKind:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ParamKind'
        description: |-
          `paramKind` specifies the kind of resources used to parameterize this policy.
          If absent, there are no parameters for this policy and the param CEL variable
          will not be provided to validation expressions.
          If `paramKind` refers to a non-existent kind, this policy definition is mis-configured and
          the `failurePolicy` is applied.
          If `paramKind` is specified but `paramRef` is unset in the
          ValidatingAdmissionPolicyBinding, the params variable will be null.
        x-kab-description-zh: |-
          `paramKind` 设置用来为策略提供参数的资源的类别。
          此字段未设置时，策略没有额外的参数，检查表达式中也不存在 CEL 变量 `params`。
          如果 `paramKind` 引用的是一个不存在的类别，则此策略定义是非法的，
          需要根据 `failurePolicy` 策略作进一步处置。
          如果设置了 `paramKind`，但 ValidatingAdmissionPolicyBinding 中未设置
          `paramRef`，则 CEL 变量 `params` 为 Null 值。
      validations:
        description: |-
          `validations` contain CEL expressions which is used to apply the validation.
          `validations` and `auditAnnotations` may not both be empty; at least
          one of `validations` or `auditAnnotations` is required.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.Validation'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段包含用来执行检查的 CEL 表达式。
          `validations` 和 `auditAnnotations` 之中至少要设置其一。
        x-kubernetes-list-type: atomic
      variables:
        description: |-
          `variables` contain definitions of variables that can be used in composition of
          other expressions. Each variable is defined as a named CEL expression.
          The variables defined here will be available under `variables` in other expressions
          of the policy except `matchConditions` because `matchConditions` are evaluated
          before the rest of the policy.

          The expression of a variable can refer to other variables defined earlier in
          the list but not those after. Thus, variables must be sorted by the order of
          first appearance and acyclic.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.Variable'
        type: array
        x-kab-description-zh: |-
          此字段包含一些变量的定义，这些变量可用于构造其他表达式。
          每个变量被定义为一个有名字的 CEL 表达式。
          这里定义的变量可以在策略中的其他表达式中用 `variables` 来引用，
          除了 `matchConditions`。这是因为`matchConditions` 的处理是早于策略的其他部分的。

          变量的表达式可以引用列表中先前定义的其他变量，但不能引用后来才定义的变量。
          因此，变量必须按出现的先后顺序排序，并且不允许存在循环引用。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - failurePolicy
      - matchConstraints
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicySpec 是准入策略预期行为的规约。
  io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyStatus:
    description: ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
    properties:
      conditions:
        description: The conditions represent the latest available observations of
          a policy's current state.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
        type: array
        x-kab-description-zh: 关于某策略的当前状态的最新监测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
      observedGeneration:
        description: The generation observed by the controller.
        format: int64
        type: integer
        x-kab-description-zh: 控制器所观测到的对象世代值。
      typeChecking:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.TypeChecking'
        description: |-
          The results of type checking for each expression. Presence of this
          field indicates the completion of the type checking.
        x-kab-description-zh: |-
          各个表达式的类型检查结果。
          状态对象中存在此字段意味着类型检查已经结束。
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyStatus 代表某 ValidatingAdmissionPolicy
      对象的状态。
  io.k8s.api.admissionregistration.v1.ValidatingWebhook:
    description: An admission webhook and the resources and operations it applies
      to.
    properties:
      admissionReviewVersions:
        description: |-
          An ordered list of preferred `AdmissionReview` versions the webhook expects.
          API server will try to use first version in the list which it supports.
          If none of the versions specified in this list supported by API server, validation will fail
          for this object.
          If a persisted webhook configuration specifies allowed versions and does not include any
          versions known to the API Server, calls to the webhook will fail and be subject to the
          failure policy.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          Webhook 预期能够处理的 `AdmissionReview` 对象的版本列表，列表是有顺序的。
          API 服务器会尝试使用列表中它所支持的第一个版本。
          如果此列表中所给出的版本都不被 API 服务器支持，对象就无法通过合法性检查。
          如果已经保存起来 Webhook 配置中给出了所允许的版本列表，但其中的版本都是 API
          服务器所能够理解的，则调用 Webhook 的操作会失败，并根据 `failurePolicy`
          的设置执行进一步处理。
        x-kubernetes-list-type: atomic
      clientConfig:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.WebhookClientConfig'
        description: Information for communicating with the webhook.
        x-kab-description-zh: 与 Webhook 交互所需要的信息。
      failurePolicy:
        default: Fail
        description: How unrecognized errors from the admission endpoint are handled.
        enum:
          - Fail
          - Ignore
        type: string
        x-kab-description-zh: 准入插件返回无法识别的错误时要如何处理。
      matchConditions:
        description: |-
          This is a list of conditions that must be met for a request to be sent to this webhook.
          Match conditions filter requests that have already been matched by the `rules`,
          `namespaceSelector`, and `objectSelector`.
          An empty list of `matchConditions` matches all requests.
          The exact matching logic is (in order):

          1. If ANY `matchCondition` evaluates to False, the webhook is skipped.
          1. If ALL `matchCondition`s evaluate to True, the webhook is called.
          1. If any `matchCondition` evaluates to an error (but none are False):
             - If `failurePolicy=Fail`, reject the request
             - If `failurePolicy=Ignore`, the error is ignored and the webhook is skipped

          The items in the array must have names that are unique across the array.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MatchCondition'
        maxItems: 64
        type: array
        x-kab-description-zh: |-
          这里列出的是一些条件，一个请求只有满足了这里的条件才会被发送给 Webhook。
          这一过滤器会对 `rules`、`namespaceSelector` 和 `objectSelector`  所匹配到的请求做进一步的过滤。
          如果此列表为空，则会匹配所有请求。最终的匹配逻辑如下（按顺序执行）：

          1. 如果 `matchCondition` 中的任何一个条件为假，则 Webhook 不会被调用；
          1. 如果 `matchCondition` 中的所有条件都为真，则 Webhook 会被调用；
          1. 如果`matchCondition` 中某个条件在执行判定时出错，但不能判定为假。

          对于第三种情况：

          - 如果 `failurePolicy=Fail`，请求会被拒绝；
          - 如果 `failurePolicy=Ignore`，忽略错误，并略过当前 Webhook。

          数组中的各个元素的名字不可重复。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      matchPolicy:
        default: Equivalent
        description: |-
          How the `rules` list is used to match incoming requests.

          - `"\Exact"`: matching a request only if it exactly matches a specified rule. For example,
            if `deployments` can be modified via `"apps/v1"`, `"apps/v1beta1"`, and
            `"extensions/v1beta1"`, but `rules` only included
            `"apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to
            `"apps/v1beta1"` or `"extensions/v1beta1"` would not be sent to the webhook.
          - `"Equivalent"`: matching a request if modifies a resource listed in `rules`, even via
            another API group or version. For example, if `deployments` can be modified via
            `"apps/v1"`, `"apps/v1beta1"`, and `"extensions/v1beta1" `, and `rules` only included
            `"apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`, a request to
            `"apps/v1beta1"` or `"extensions/v1beta1"` would be converted to `"apps/v1"` and sent to
            the webhook.
        enum:
          - Equivalent
          - Exact
        type: string
        x-kab-description-zh: |-
          此字段指定如何使用 `rules` 列表来对收到的请求进行匹配：

          - `"Exact"` 意味着只有请求与某个指定规则精确匹配时才视为匹配。
            例如，资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 和
            `"extensions/v1beta1"` 来修改，但 `rules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions": ["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 或 `"extensions/v1beta1"` 的请求不会被发送到 Webhook。
          - `"Equivalent"` 意味着如果某个请求所修改的资源位于 `rules` 列表中，
            即便请求使用的是不同的 API 组或版本，也视为匹配。
            例如，如果资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 和
            `"extensions/v1beta1"` 来修改，而 `rules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 或 `"extensions/v1beta1"` 的请求会被转换为
            `"apps/v1"`，并被发送给 Webhook。
      name:
        description: |-
          The name of the admission webhook.
          Name should be fully qualified, e.g., `"imagepolicy.kubernetes.io"`, where `"imagepolicy"`
          is the name of the webhook, and `"kubernetes.io"` is the name of the organization.
          The name must be unique among all validating Webhooks.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          准入 Webhook 的名称。这里给出的名称必须是全限定名称（Fully-Qualified Name）。
          例如 `"imagepolicy.kubernetes.io"`。其中的 `"imagepolicy"` 是 Webhook
          的名称，`"kubernetes.io"` 是组织的名称。所有验证式 Webhook 的名称都必须各不相同。
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          This decides whether to run the webhook on an object based on the match between the object
          namespace and the selector. If the object itself is a namespace, the matching is performed on
          `object.metadata.labels`. If the object is another cluster scoped resource, it never skips
          the webhook.
          For example, to run the webhook on any objects whose namespace is not associated with
          `runlevel` of `"0"` or `"1"`;  you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          If instead you want to only run the webhook on any objects whose namespace is associated with
          the "environment" of "prod" or "staging", you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段设置在判定是否要针对某对象来执行此 Webhook 时，要考虑对象名字空间是否符合预期。
          如果对象自身就是一个 Namespace，则匹配是针对 `object.metadata.labels` 来进行的。
          如果对象是一个集群作用域的对象，则 Webhook 不会被略过（总会被调用）。
          例如，如果希望针对没有设置 `runlevel` 为 '0' 或 '1' 的 名字空间中的所有对象运行 Webhook，
          你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          如果你希望仅针对 `environment` 为 `"prod"` 或 `"staging"` 的名字空间中的对象运行 Webhook，
          你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          此字段默认为空的标签选择算符，其效果是与所有对象匹配。
      objectSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          This decides whether to run the webhook based on if the object has matching labels.
          `objectSelector` is evaluated against both the `oldObject` and `newObject` that would be
          sent to the webhook, and is considered to match if either object matches the selector.
          A `null` object (`oldObject` in the case of create, or `newObject` in the case of delete)
          or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions`
          object) is not considered to match.
          Use the object selector only if the webhook is opt-in, because end users may skip the
          admission webhook by setting the labels.

          Default to the empty Label selector, which matches everything.
        x-kab-description-zh: |-
          此字段用来根据对象上是否存在匹配的标签来决定是否运行 Webhook。
          `objectSelector` 会针对要发送给 Webhook 的  `oldObject` 和 `newObject` 来评估。
          如果这两个对象之一与此选择算符匹配，则请求为匹配。
          空（Null）对象（创建请求中的 `oldObject` 或删除请求中的 `newObject`），
          或者不存在标签的对象（例如一个 `DeploymentRollback` 或 `PodProxyOptions` 对象）
          不会被视为匹配。只有当 Webhook 是可选的时候才建议使用此对象选择算符，
          因为最终用户可能会通过操控标签来略过准入 Webhook 的检查。

          此字段的默认值为空的标签选择算符，其效果是能够匹配所有对象。
      rules:
        description: |-
          What operations on what resources/subresources the webhook cares about.
          The webhook cares about an operation if it matches **any** entry defined in the `rules` list.
          However, in order to prevent ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks
          from putting the cluster in a state which cannot be recovered from without completely
          disabling the plugin,
          ValidatingAdmissionWebhooks and MutatingAdmissionWebhooks are never called on admission
          requests for ValidatingWebhookConfiguration and MutatingWebhookConfiguration objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.RuleWithOperations'
        type: array
        x-kab-description-zh: |-
          用来设置 Webhook 关心哪些对象、子对象上的哪些操作。如果某项操作与 `rules` 列表中定义的任意表项匹配，
          则可认为它是 Webhook 所关心的。不过，为了避免 ValidatingAdmissionWebhook
          和 MutatingAdmissionWebhook 把集群带到一种只能靠完全禁止某插件才能彻底恢复的状态，
          对于 ValidatingWebhookConfiguration 和 MutatingWebhookConfiguration 对象的请求，
          都不会被调用 ValidatingAdmissionWebhook 和 MutatingAdmissionWebhook。
        x-kubernetes-list-type: atomic
      sideEffects:
        description: |-
          Whether this webhook has side effects.
          Webhooks with side effects **MUST** implement a reconciliation system, since a request
          may be rejected by a future step in the admission change and the side effects therefore
          need to be undone.
        enum:
          - None
          - NoneOnDryRun
        type: string
        x-kab-description-zh: |-
          用来标明此 Webhook 是否具有一定的副作用。带有副作用的 Webhook **必须** 实现一种协调机制，
          原因是某个请求可能会被准入判定链条中的下游插件所拒绝，这里产生的副作用需要被消除掉。
      timeoutSeconds:
        default: 10
        description: |-
          The timeout for this webhook. After the timeout passes, the webhook call will be ignored or
          the API call will fail based on the `failurePolicy`.
        format: int32
        maximum: 30
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          Webhook 的超时时间。超出给定的时限之后，Webhook 调用会被忽略，
          或者 API 调用会以 `failurePolicy` 中设置的方式来返回错误。
    required:
      - admissionReviewVersions
      - clientConfig
      - name
      - sideEffects
    type: object
    x-kab-description-zh: 准入 Webhook 及其所适用的资源和操作。
  io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.CREATE:
    description: The configuration of an admission webhook that accepts or rejects
      an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingWebhookConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      webhooks:
        description: |-
          A list of webhooks and the affected resources and operations.
          The name must be fully qualified name and it must be unique in the list.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook'
        type: array
        x-kab-description-zh: |-
          Webhook 及其所影响的资源和操作的列表。
          每个 Webhook 的名称都必须是完全限定名，并且在此列表中唯一。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: 准入 Webhook 的配置信息，用于能够接受、拒绝某对象但不会变更该对象的准入 Webhook。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET:
    description: The configuration of an admission webhook that accepts or rejects
      an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingWebhookConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      webhooks:
        description: A list of webhooks and the affected resources and operations.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook'
        type: array
        x-kab-description-zh: Webhook 及其所影响的资源和操作的列表。
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
      - webhooks
    type: object
    x-kab-description-zh: 准入 Webhook 的配置信息，用于能够接受、拒绝某对象但不会变更该对象的准入 Webhook。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.UPDATE:
    description: The configuration of an admission webhook that accepts or rejects
      an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingWebhookConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      webhooks:
        description: |-
          A list of webhooks and the affected resources and operations.
          The name must be fully qualified name and it must be unique in the list.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhook'
        type: array
        x-kab-description-zh: |-
          Webhook 及其所影响的资源和操作的列表。
          每个 Webhook 的名称都必须是完全限定名，并且在此列表中唯一。
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: 准入 Webhook 的配置信息，用于能够接受、拒绝某对象但不会变更该对象的准入 Webhook。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
  io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList:
    description: A list of ValidatingWebhookConfiguration objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ValidatingWebhookConfiguration objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
        type: array
        x-kab-description-zh: 一个包含 ValidatingWebhookConfiguration 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingWebhookConfigurationList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 一个包含 ValidatingWebhookConfiguration 对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfigurationList
        version: v1
  io.k8s.api.admissionregistration.v1.Validation:
    description: Validation specifies the CEL expression which is used to apply the
      validation.
    properties:
      expression:
        description: |-
          `expression` represents the expression which will be evaluated by
          [CEL](https://github.com/google/cel-spec).
          CEL expressions have access to the contents of the API request/response,
          organized into CEL variables as well as some other useful variables:

          - `object` - The object from the incoming request.
            The value is null for DELETE requests.
          - `oldObject` - The existing object. The value is null for CREATE requests.
          - `request` - Attributes of the API request which is an
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest) object.
          - `params` - Parameter resource referred to by the policy binding being evaluated.
            Only populated if the policy has a `paramKind`.
          - `namespaceObject` - The namespace object that the incoming object belongs to.
            The value is null for cluster-scoped resources.
          - `variables` - Map of composited variables, from its name to its lazily
            evaluated value.
            For example, a variable named `foo` can be accessed as `variables.foo`.
          - `authorizer` - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or ServiceAccount) of the request.
            See [Authz struct documentation](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz).
          - `authorizer.requestResource` - A CEL ResourceCheck constructed from the 'authorizer'
            and configured with the request resource.

          The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
          accessible from the root of the object.
          No other metadata properties are accessible.

          Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
          Accessible property names are escaped according to the following rules when
          accessed in the expression:

          - '__' escapes to '__underscores__'
          - '.' escapes to '__dot__'
          - '-' escapes to '__dash__'
          - '/' escapes to '__slash__'
          - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'.

          The keywords are:

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          Examples:

          - Expression accessing a property named `"namespace"`:
            `{"Expression": "object.__namespace__ > 0"}`
          - Expression accessing a property named `"x-prop"`:
            `{"Expression": "object.x__dash__prop > 0"}`
          - Expression accessing a property named `"redact__d"`:
            `{"Expression": "object.redact__underscores__d > 0"}`

          Equality on arrays with list type of `set` or `map` ignores element order,
          i.e. [1, 2] == [2, 1]. Concatenation on arrays with `x-kubernetes-list-type`
          use the semantics of the list type:

          - `set`: `X + Y` performs a union where the array positions of all elements
            in `X` are preserved and non-intersecting elements in `Y` are appended,
            retaining their partial order.
          - `map`: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values are overwritten by values in `Y` when
            the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting
            keys are appended, retaining their partial order.
        type: string
        x-kab-description-zh: |-
          `expression` 包含要通过 [CEL](https://github.com/google/cel-spec) 来处理的表达式。
          API 请求和响应中的内容被组织成 CEL 变量，和一些其他的有用变量一起供 CEL 表达式访问：

          - `object` - 来自集接收到的请求中的对象。对于 DELETE 请求而言，此变量值为 null。
          - `oldObject` - 现有的对象。对于 CREATE 请求而言，此变量值为 null。
          - `request` - API 请求（类型为
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest)
            对象）的属性。
          - `params` - 当前评估的策略所引用的参数资源内容。
            只有策略设置了 `paramKind` 时可用。
          - `namespaceObject` - 接收到的对象所属的名字空间对象。
            对于集群作用域的对象，此变量值为 null。
          - `variables` - 复合类型的变量，是一个从变量名到懒惰求值表达式的映射。
            例如，一个名为 `foo` 的变量可以用 `variables.foo` 的形式访问。
          - `authorizer` - 一个 CEL 鉴权组件（Authorizer），可用来对请求的主体（用户或者
            ServiceAccount）执行鉴权检查。
            参见 [Authz 结构文档](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz)。
          - `authorizer.requestResource` - 根据 `authorizer` 配置构造的 CEL ResourceCheck
            结构，根据请求资源作了定制。

          字段 `apiVersion`、`kind`、`metadata.name` 和 `metadata.generateName`
          都是可以通过对象的根来访问的。对象的其他元数据属性都无法访问。

          表达式只能访问格式为 `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` 的属性。
          在表达式中使用可访问的属性名时，会根据下面的规则做转义处理：

          - `__` 被转义为 `__underscores__`
          - `.` 被转义为 `__dot__`
          - `-` 被转义为 `__dash__`
          - `/` 被转义为 `__slash__`
          - 与 CEL 保留的关键字完全重名的属性名会被转移为 '__{keyword}__'

          CEL 的内置关键字包括：

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          示例：

          - 访问名为 `"namespace"` 的属性：
            `{"Expression": "object.__namespace__ > 0"}`
          - 访问名为 `"x-prop"` 的属性：
            `{"Expression": "object.x__dash__prop > 0"}`
          - 访问名为 `"redact__d"` 的属性：
            `{"Expression": "object.redact__underscores__d > 0"}`

          对于列表类型为 `set` 或 `map` 的两个数组而言，判断其是否相等时，会忽略元素的顺序，
          即 `[1, 2] == [2, 1]`。
          对于设置了 `x-kubernetes-list-type` 的数组进行串接时，会根据列表类型的语义来处理：

          - `set`：`X + Y` 会执行数组取并集的操作，数组 `X` 中所有元素的位置不会发生变化，
            `Y` 是原来不在 `X` 内的元素会被追加在后面，且保留其原来的顺序。
          - `map`：`X + Y` 会执行一个合并操作，`X` 中的所有主键的位置被保留，
            但是当 `X` 和 `Y` 是的主键集合相交时，`X` 中主键的取值会被 `Y` 中的取值覆盖。
            原来不在 `X` 内的 `Y` 中元素会被追加到后面，且保留其原来的顺序。
      message:
        description: |-
          `message` represents the message displayed when validation fails.
          The message must not contain line breaks.
          If the `expression` contains line breaks. `message` is required.
          If unset, the message is "failed Expression: {Expression}".'
          e.g. "must be a URL with the host matching spec.host".
          The string, when trimmed, cannot be empty string.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          `message` 给出的是检查失败时要显示的错误信息。
          `message` 的内容中不能包含换行符。
          如果`expression` 中包含换行符时，需要设置此字段。
          如果没有设置此字段，则错误信息为 `"failed expression: {expression}"`。
          例如：`"must be a URL with the host matching spec.host"`。
          此字段经过头尾去空格处理之后，不可以是空字符串。
      messageExpression:
        description: |-
          `messageExpression` declares a CEL expression that evaluates to the validation
          failure message that is returned when this rule fails.
          Since `messageExpression` is used as a failure message, it must evaluate to a string.
          If both `message` and `messageExpression` are present on a validation, then
          `messageExpression` will be used if validation fails.
          If `messageExpression` results in a runtime error, the runtime error is logged,
          and the validation failure message is produced as if the `messageExpression` field
          were unset.
          If `messageExpression` evaluates to an empty string, a string with only spaces,
          or a string that contains line breaks, then the validation failure message will
          also be produced as if the `messageExpression` field were unset, and the fact
          that messageExpression produced an empty string/string with only spaces/string
          with line breaks will be logged.
          `messageExpression` has access to all the same variables as the `expression` except
          for `authorizer` and `authorizer.requestResource`.

          Example: `"object.x must be less than max ("+string(params.max)+")"`
        type: string
      reason:
        default: Invalid
        description: |-
          `reason` represents a machine-readable description of why this validation
          failed. If this is the first validation in the list to fail, this reason, as
          well as the corresponding HTTP response code, are used in the HTTP response
          to the client. The currently supported reasons are: `"Unauthorized"`, `"Forbidden"`,
          `"Invalid"`, `"RequestEntityTooLarge"`.
          If not set, `"Invalid"` is used in the response to the client.
        enum:
          - Forbidden
          - Invalid
          - RequestEntityTooLarge
          - Unauthorized
        type: string
        x-kab-description-zh: |-
          `reason` 给出的是一个机器可读的字符串，描述当前检查为何失败。
          如果当前检查是整个检查列表中第一个失败的条目，则失败的原因以及对应的
          HTTP 响应代码会包含在提供给客户端的 HTTP 响应中。
          目前支持的 `reason` 值有：`"Unauthorized"`、`"Forbidden"`、`"Invalid"`,
          `"RequestEntityTooLarge"`。
          如果没有设置此字段，则向客户端发送响应时会使用 `"Invalid"`。
    required:
      - expression
    type: object
    x-kab-description-zh: Validation 实施检测时要适用的 CEL 表达式。
  io.k8s.api.admissionregistration.v1.Variable:
    description: |-
      Variable is the definition of a variable that is used for composition.
      A variable is defined as a named expression.
    properties:
      expression:
        description: |-
          The expression that will be evaluated as the value of the variable.
          The CEL expression has access to the same identifiers as the CEL expressions
          in `validation`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          将被处理为变量取值的一个表达式。此 CEL 表达式所能访问到的标识符与
          `Validation` 结构中的 CEL 表达式相同。
      name:
        description: |-
          The name of the variable. The name must be a valid CEL identifier
          (matching the pattern but cannot be one of the keywords) and unique among all
          variables. The variable can be accessed in other expressions through `variables`.
          For example, if `name` is `"foo"`, the variable will be available as `variables.foo`.
        minLength: 1
        pattern: '[_a-zA-Z][_a-zA-Z0-9]*'
        type: string
        x-kab-description-zh: |-
          变量的名称。此名称字符串必须是一个合法的 CEL 标识符
          （满足其正则表达式要求且不能是其关键字之一），
          并且在所有变量中不存在重名的情况。
          在其他表达式中可以通过 `variables` 来访问此变量。
          例如，如果这里的 `name` 是 `"foo"`，则可以通过 `variables.foo` 来访问它。
    required:
      - expression
      - name
    type: object
    x-kab-description-zh: |-
      Variable 是用来构造复合表达式的变量的定义。
      变量被定义为一个有名字的表达式。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1.WebhookClientConfig:
    description: |-
      The information for making a TLS connection with the webhook.
      Either `service` or `url` must be specified, but not both.
    properties:
      caBundle:
        description: |-
          A PEM encoded CA bundle for validating an API server's serving certificate.
          If unspecified, system trust roots on the apiserver are used.
        format: byte
        type: string
        x-kab-description-zh: |-
          用 PEM 形式编码的 CA 证书包，用来验证 Webhook 的服务端证书。
          若未设置此字段，则使用 API 服务器上的信任根。
      service:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ServiceReference'
        description: |-
          A reference to the Service for this webhook.
          If the webhook is running within the cluster, then you should use `service`.
          The `name`, `namespace` fields are required.
          The `port`, if specified, must be an integer between 1 and 65535, inclusive.
          The `path`, if specified, must start with a `'/'` and it cannot be `"//"`.
          Each path segment must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          对此 Webhook 的 Service 的引用。如果 Webhook 运行于集群内部，则你应该使用 `service`。
          这里的 `name`、`namespace` 字段都是必须设置的。
          如果设置了 `port`，则所设置的值必须介于 1 和 65535 之间，包括边界值。
          如果设置了 `path`，则所给的 `path` 必须以 `'/'` 开头，并且不能是 `"//"`。
          每个路径片段都必须是一个合法的 DNS 子域名。
      url:
        description: |-
          The location of the webhook in standard URL form (`"https://host[:port][/path]"`).
          The `host` is required and it should not refer to a Service running in the cluster;
          use the `service` field instead.
          The `\"host\"` might be resolved via external DNS in some API servers
          (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation).
          `host` may also be an IP address.

          Please note that using `"localhost"` or `"127.0.0.1"` as a `host` is risky unless you take
          great care to run this webhook on all hosts which run an API server which might need to
          make calls to this webhook.
          Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.

          The scheme must be `"https"`. A `path` is optional, and if present may be any string
          permissible in a URL. You may use the `path` to pass an arbitrary string to the webhook,
          for example, a cluster identifier.
          Attempting to use a user or basic auth e.g. `user:password@` is not allowed.
          Fragments (`"#..."`) and query parameters (`"?..."`) are not allowed either.
        type: string
        x-kab-description-zh: |-
          此字段给出 Webhook 的位置信息，形式是标准的 URL（`"https://host[:port][/path]"`）。
          其中的 `host` 部分是必须给出的，并且不能指向集群内运行的 Service，如果需要引用集群内的
          Service，应该使用 `service` 字段。

          对于某些 API 服务器而言，`host` 不分可能是通过外部 DNS 服务来完成解析的。
          注意，`kube-apiserver` 自己不能解析集群内的 DNS 域名，因为那样会违反系统分层原则。
          `host` 的实际取值可以是一个 IP 地址。

          需要注意的是，将 `host` 设置为 `"localhost"` 或者 `"127.0.0.1"` 的做法有一定的风险，
          前提是这一 Webhook 要运行到 API 服务器所在的每一个节点上，因为这些 API
          服务器都可能需要调用此 Webhook。这种配置方式的可移植性很差，在新的集群上很可能无法正常运行。

          连接的模式必须是 `"https"`。

          `path` 这个部分是可以省略的。如果给定了 `path`，其取值可以是 URL 中合法存在的任意字符串。
          你可以使用 `path` 来向 Webhook 传递任意字符串，例如集群的标识符。
          这里禁止使用用户名或者基本的 HTTP 认证方式，例如 `"user:password@"` 这种形式是被禁止的。
          另外 `"#..."` 这种片段以及查询参数 `"?..."` 也是不允许的。
    type: object
    x-kab-description-zh: 与 Webhook 建立 TLS 连接所需要的信息。`service` 或者 `url` 必须被设置，但二者不能同时设置。
  io.k8s.api.admissionregistration.v1alpha1.AuditAnnotation:
    description: AuditAnnotation describes how to produce an audit annotation for
      an API request.
    properties:
      key:
        description: |-
          This specifies the audit annotation key.
          The audit annotation keys of a ValidatingAdmissionPolicy must be unique.
          The key must be a qualified name (`[A-Za-z0-9][-A-Za-z0-9_.]*`).

          The key is combined with the resource name of the ValidatingAdmissionPolicy to construct
          an audit annotation key: `"{ValidatingAdmissionPolicy name}/{key}"`.

          If an admission webhook uses the same resource name as this ValidatingAdmissionPolicy and
          the same audit annotation key, the annotation key will be identical.
          In this case, the first annotation written with the key will be included in the audit event
          and all subsequent annotations with the same key will be discarded.
        maxLength: 63
        minLength: 1
        pattern: '[A-Za-z0-9][-A-Za-z0-9_.]*'
        type: string
        x-kab-description-zh: |-
          此字段设置审计注解主键。ValidatingAdmissionPolicy 的审计注解主键必须是唯一的。
          主键必须是完全限定名（正则表达式为：`"[A-Za-z0-9][-A-Za-z0-9_.]*"`）。

          这里给出的主键会与 ValidatingAdmissionPolicy 的资源名称组合在一起，
          构造出审计注解主键 `<ValidatingAdmissionPolicy 名称>/<key 值>`。

          如果某个准入 Webhook 的资源名称与此 ValidatingAdmissionPolicy 的资源名称相同，
          并且使用相同的审计注解主键，则最后的注解主键会完全一样。
          如果出现这种情况，使用此主键写入的第一个注解值会被保留在审计事件中，
          后续使用相同主键的注解值都会被丢弃。
      valueExpression:
        description: |-
          This represents the expression which is evaluated by CEL to produce an audit annotation value.
          The expression must evaluate to either a string or null value.
          If the expression evaluates to a string, the audit annotation is included with the string value.
          If the expression evaluates to null or empty string, the audit annotation will be omitted.
          If the result of the `valueExpression` is more than 10kb in length, it will be truncated to 10kb.
          If multiple ValidatingAdmissionPolicyBinding resources match an API request, then the
          `valueExpression` will be evaluated for each binding.
          All unique values produced by the `valueExpression`'s will be joined together in a comma-separated list.
        maxLength: 5120
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个表达式，该表达式会被 CEL 引擎求值，生成审计注解值。
          表达式求值的结果必须是字符串或者 Null 值。
          如果表达式求值的结果是一个字符串，则审计注解会将其作为注解值。
          如果表达式求值的结果是 Null 或者空字符串，则审计注解会被忽略掉。
          表达式求值结果的长度超出 10 KB 时，会被截断。

          如果有多个 ValidatingAdmissionPolicyBinding 资源与同一个 API 请求匹配，
          则针对每个绑定都会单独对 `valueExpression` 执行求值操作。
          所生成的不同求值结果会被串接到一起，形成一个逗号分隔的列表。
    required:
      - key
      - valueExpression
    type: object
    x-kab-description-zh: AuditAnnotation 描述如何为 API 请求生成一个审计注解。
  io.k8s.api.admissionregistration.v1alpha1.ExpressionWarning:
    description: ExpressionWarning is a warning information that targets a specific
      expression.
    properties:
      fieldRef:
        description: |-
          The path to the field that refers the expression.
          The value must be a valid JSON path expression.
          For example, the reference to the expression of the first item of validations is
          `"spec.validations[0].expression"`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          引用表达式的字段的路径。字段值必须是一个合法的 JSON 路径表达式。
          例如，对 `validations` 中的一个元素的 `expression`
          字段的引用可以写作 `"spec.validations[0].expression"`。
      warning:
        description: |-
          The content of type checking information in a human-readable form.
          Each line of the warning contains the type that the expression is checked against,
          followed by the type check error from the compiler.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          以人类可读的形式给出的类型检查信息。
          `warning` 的每一行都包含表达式所检查的类型，后接编译器给出的类型检查错误信息。
    required:
      - fieldRef
      - warning
    type: object
    x-kab-description-zh: ExpressionWarning 针对某个特定表达式的警告信息。
  io.k8s.api.admissionregistration.v1alpha1.MatchCondition:
    description: |-
      MatchCondition represents a condition which must be fulfilled for a request
      to be sent to a webhook.
    properties:
      expression:
        description: |-
          This represents the expression which will be evaluated by CEL. Must evaluate to bool.
          CEL expressions have access to the contents of the AdmissionRequest and Authorizer,
          organized into CEL variables:

          - `object` - The object from the incoming request. The value is null for DELETE requests.
          - `oldObject` - The existing object. The value is null for CREATE requests.
          - `request` - Attributes of the admission request of type
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest).
          - `authorizer` - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or ServiceAccount) of the request.
            See [Authz docs](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz).
          - `authorizer.requestResource` - A CEL ResourceCheck constructed from the `authorizer`
            and configured with the request resource.
            See more [documentation on CEL](https://kubernetes.io/docs/reference/using-api/cel/).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段包含的是要由 CEL 来评估（求值）的表达式，求值结果必须是布尔值。
          CEL 表达式可以访问 AdmissionRequest 和 Authorizer 的一些内容，
          这些内容被组织成 CEL 变量：

          - `object` - 请求所携带的对象。对于 DELETE 请求，取值是 null。
          - `oldObject` - 当前的对象。对于 CREATE 请求，取值为 null。
          - `request` - 准入请求的属性，类型为 [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest)。
          - `authorizer` - CEL Authorizer。可用来针对请求的主体（用户或者 ServiceAccount）
            执行鉴权检查。
            参阅 [Authz 文档](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz)。
          - `authorizer.requestResource` -根据 `authorizer` 和请求资源构造的 CEL ResourceCheck 对象。
            参阅 [CEL 文档](https://kubernetes.io/zh-cn/docs/reference/using-api/cel/)。
      name:
        description: |-
          This is an identifier for this match condition, used for strategic
          merging of `matchConditions`, as well as providing an identifier for logging purposes.
          A good name should be descriptive of the associated expression.
          The `name` must be a qualified name consisting of alphanumeric characters, `'-'`,
          `'_'` or `'.'`, and must start and end with an alphanumeric character
          (e.g. `'MyName'`,  or `'my.name'`,  or `'123-abc'`, regex used for validation is
          `([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]')` with an optional DNS subdomain prefix
          and `'/'` (e.g. `'example.com/MyName'`).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段为匹配条件的标识符，在执行对 `matchConditions` 进行策略性合并时，
          以及生成日志时会用到。比较好的名字应该是能够描述所关联的表达式的。
          `name` 字段必须是一个限定名（Qualified Name），包含字母数字字符、`'-'`、
          `'_'` 或者 `'.'`，并且必须以字母或数字开头和结束。
          例如：`"MyName"`、`"my.name"` 或者 `"123-abc"`。
          用来执行正确性检查的正则表达式为 `([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]')`。
          `name` 值可以带一个可选的 DNS 子域名加上 `'/'` 作为前缀。
          例如：`"example.com/MyName"`。
    required:
      - expression
      - name
    type: object
    x-kab-description-zh: MatchCondition 表示的是一种条件，只有请求满足了这一条件才有可能被发送到某 Webhook。
  io.k8s.api.admissionregistration.v1alpha1.MatchResources:
    description: |-
      MatchResources decides whether to run the admission control policy on
      an object based on whether it meets the match criteria.
      The exclude rules take precedence over include rules
      (if a resource matches both, it is excluded).
    properties:
      excludeResourceRules:
        description: |-
          `excludeResourceRules` describes what operations on what resources/subresources
          the ValidatingAdmissionPolicy should not care about.
          The exclude rules take precedence over include rules
          (if a resource matches both, it is excluded).
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.NamedRuleWithOperations'
        type: array
        x-kab-description-zh: |-
          此字段描述哪些资源或子资源上的哪些操作是 ValidatingAdmissionPolicy 所要忽略的。
          排除规则比包含规则的优先级高。
          换言之，当某资源与这两个规则都匹配时，该资源会被排除掉。
        x-kubernetes-list-type: atomic
      matchPolicy:
        default: Equivalent
        description: |-
          `matchPolicy` defines how the MatchResources list is used to match
          incoming requests. Allowed values are `"Exact"` or `"Equivalent"`.

          - `"Exact"`: match a request only if it exactly matches a specified rule.
            For example, if `deployments` can be modified via `"apps/v1"`, `"apps/v1beta1"`,
            but `"rules"` only included
            `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`,
            a request to `"apps/v1beta1"` would not be sent to the ValidatingAdmissionPolicy.
          - `"Equivalent"`: match a request if modifies a resource listed in rules, even
            via another API group or version. For example, if `deployments` can be modified
            via `"apps/v1"` and `"apps/v1beta1"`, and `"rules"` only included
            `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`,
            a request to `"apps/v1beta1"` would be converted to `"apps/v1"` and
            sent to the ValidatingAdmissionPolicy.
        enum:
          - Equivalent
          - Exact
        type: string
        x-kab-description-zh: |-
          `matchPolicy` 定义此 MatchResources 列表如何用于匹配所接收到的请求。
          可选的值为 `"Exact"` 或 `"Equivalent"`：

          - `"Exact"` 意味着只有请求与某个指定规则精确匹配时才视为匹配。
            例如，资源 `deployments` 可以通过 `"apps/v1"` 和 `"apps/v1beta1"` 来修改，
            但 `resourceRules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions": ["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 的请求不会被发送到 ValidatingAdmissionPolicy。
          - `"Equivalent"` 意味着如果某个请求所修改的资源位于 `resourceRules` 列表中，
            即便请求使用的是不同的 API 组或版本，也视为匹配。
            例如，如果资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 来修改，
            而 `resourceRules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 的请求会被转换为 `"apps/v1"`，并被发送给
            ValidatingAdmissionPolicy。
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `namespaceSelector` decides whether to run the admission control policy on
          an object based on whether the namespace for that object matches the selector.
          If the object itself is a namespace, the matching is performed on `object.metadata.labels`.
          If the object is another cluster scoped resource, it never skips the policy.

          For example, to run the webhook on any objects whose namespace is not associated
          with `"runlevel"` of `"0"` or `"1"`, you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [
              {
                "key": "runlevel",
                "operator": "NotIn",
                "values": ["0", "1"]
              }
            ]
          }
          ```

          If instead you want to only run the policy on any objects whose namespace
          is associated with the `"environment"` of `"prod"` or `"staging"`, you will
          set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```
          See [official docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
          for more examples of label selectors.

          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段设置在判定是否要针对某对象来执行此准入控制策略时，要考虑对象名字空间是否符合预期。
          如果对象自身就是一个 Namespace，则匹配是针对 `object.metadata.labels` 来进行的。
          如果对象是一个集群作用域的对象，则 Webhook 不会被略过（总会被调用）。
          例如，如果希望针对没有设置 `"runlevel"` 为 `"0"` 或 `"1"`
          的名字空间中的所有对象运行此策略，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          如果你希望仅针对 `"environment"` 为 `"prod"` 或 `"staging"`
          的名字空间中的对象运行 Webhook，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          此字段默认为空的标签选择算符，其效果是与所有对象匹配。
      objectSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `objectSelector` decides whether to run the validation based on if the object
          has matching labels.
          `objectSelector` is evaluated against both the `oldObject` and `newObject`
          that would be sent to the CEL validation, and is considered to match if
          either object matches the selector.
          A null object (`oldObject` in the case of create, or `newObject` in the case of delete)
          or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions`
          object) is not considered to match.
          Use the object selector only if the webhook is opt-in, because end users may skip
          the admission webhook by setting the labels.
          Default to the empty label selector, which matches everything.'
        x-kab-description-zh: |-
          此字段用来根据对象上是否存在匹配的标签来决定是否执行检查。
          `objectSelector` 会针对要发送给 CEL 检查器的 `oldObject` 和 `newObject` 来处理。
          如果这两个对象之一与此选择算符匹配，则视请求为匹配。
          空（Null）对象（CREATE 请求中的 `oldObject` 或 DELETE 请求中的 `newObject`），
          或者不存在标签的对象（例如一个 `DeploymentRollback` 或 `PodProxyOptions` 对象）
          不会被视为匹配。只有当 Webhook 是可选的时候才建议使用此对象选择算符，
          因为最终用户可能会通过操控标签来略过准入 Webhook 的检查。

          此字段的默认值为空的标签选择算符，其效果是能够匹配所有对象。
      resourceRules:
        description: |-
          `resourceRules` describes what operations on what resources/subresources
          the ValidatingAdmissionPolicy matches. The policy cares about an operation if
          it matches _any_ rule.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.NamedRuleWithOperations'
        type: array
        x-kab-description-zh: |-
          用来设置 ValidatingAdmissionPolicy 关心哪些对象、子对象上的哪些操作。
          如果某项操作与 `resourceRules` 列表中定义的任一表项匹配，
          则可认为它是准入策略所关心的。
        x-kubernetes-list-type: atomic
    required:
      - matchPolicy
      - namespaceSelector
      - objectSelector
    type: object
    x-kab-description-zh: |-
      MatchResources 基于对象是否满足匹配条件来决定是否对其运行准入控制策略。
      其中的排除（Exclude）规则比包含（Include）规则优先级高。
      换言之，当某资源与这两个规则都匹配时，该资源会被排除掉。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1alpha1.NamedRuleWithOperations:
    description: NamedRuleWithOperations is a tuple of `operations` and `resources`
      with `resourceNames`.
    properties:
      apiGroups:
        description: |-
          `apiGroups` is the API groups the resources belong to. '*' is all groups.
          If '*' is present, the length of the list must be one. Required.
        items:
          description: The API group the resources belong to. An empty string "" means
            the legacy "v1" API.
          type: string
          x-kab-description-zh: 资源所属的 API 组。`""` 表示原来的 `"v1"` API 组。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 组。`"*"` 是用来表示所有 API 组的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 组。
          此字段为必需字段。
        x-kubernetes-list-type: atomic
      apiVersions:
        description: |-
          `apiVersions` is the API versions the resources belong to. `"*"` is all versions.
          If `"*"` is present, the length of the list must be one.
        items:
          description: The API version a resource belongs to. This string cannot be
            empty.
          minLength: 1
          type: string
          x-kab-description-zh: 资源所属的 API 版本。此字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 版本。`"*"` 是用来表示所有 API 版本的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 版本。
        x-kubernetes-list-type: atomic
      operations:
        description: |-
          `operations` is the operations the admission hook cares about -
          `CREATE`, `UPDATE`, `DELETE`, `CONNECT` or `*` for all of those operations and
          any future admission operations that are added.
          If '*' is present, the length of the slice must be one."
        items:
          description: The name of a supported operation
          enum:
            - '*'
            - CONNECT
            - CREATE
            - DELETE
            - UPDATE
          type: string
          x-kab-description-zh: 所支持的操作的名称。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          准入策略所关心的操作。可以设置为
          `"CREATE"`、`"UPDATE"`、`"DELETE"`、`"CONNECT"` 或 `"*"`
          （表示所有这些操作，包括将来会添加的准入操作）。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他操作。
        x-kubernetes-list-type: atomic
      resourceNames:
        description: |-
          `resourceNames` is an optional white list of names that the rule applies to.
          An empty set means that everything is allowed.
        items:
          description: |-
            The name of a resource. It has to be a valid path segment name,
            which means it cannot be `".."` or `"."`; it may not contain `'/'` or `'%'`.
          minLength: 1
          type: string
          x-kab-description-zh: |-
            资源的名称。此字段取值必须是合法的路径段名称。
            换言之，取值不能是 `".."` 或者 `"."`。不可以包含 `'/'` 或者 `'%'`。
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          可选的字段，用来给出规则所适用的资源名称的白名单。
          如果此数组为空，则意味着所有资源名称都是可接受的。
        x-kubernetes-list-type: atomic
      resources:
        description: |-
          `resources` is a list of resources this rule applies to. For example:

          - 'pods' means Pods.
          - 'pods/log' means the `log` subresource of Pods.
          - '*' means all resources, but not subresources. If '*' is in the list,
            all other items in the list can only specify subresources.
          - 'pods/*' means all subresources of pods. If 'pod/*' is included,
            there cannot be other 'pod/subres' item in the list.
          - '*/scale' means all `scale` subresources. If '*/scale' is in the list,
            there cannot be other 'resource/scale' item in the list.
          - '*/*' means all resources and their subresources. If '*/*' is in the list,
            there cannot be any other items in the list.

            If wildcard is present, the validation rule will ensure `resources` do not
            overlap with each other.
            Depending on the enclosing object, subresources might not be allowed.
        items:
          description: The resource this rule applies to. This string cannot be empty.
          minLength: 1
          type: string
          x-kab-description-zh: 此规则所适用的资源。字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此规则所适用的资源列表。例如：

          - `"pods"` 意味着适用于 Pod 资源；
          - `"pods/log"` 意味着适用于 Pod 的 `"log"` 子资源；
          - `"*"` 意味着适用于所有资源，但不包括其子资源；
            如果列表中包含了 `"*"`，则列表中的其他条目只能用于设置子资源；
          - `"pods/*"` 意味着适用于 Pod 的所有子资源；
            如果列表中包含了这个字符串，列表中不能再出现其他 `pod/subresource` 条目；
          - `"*/scale"` 意味着适用于所有的 `"scale"` 子资源；
            若列表中出现了此字符串，则列表中不可存在其他 `resource/scale` 条目；
          - `"*/*"` 意味着适用于所有资源及其子资源；
            如果列表中存在这个字符串，则列表中不可存在其他条目。

          如果列表中包含了通配符，
          则 API 服务器在作合法性检查时会确保 `resources` 条目之间不会发生重叠覆盖的情况。
          取决于所指定的资源对象是什么，有些资源是不支持设置子资源的。
        x-kubernetes-list-type: atomic
      scope:
        default: '*'
        description: |-
          `scope` specifies the scope of this rule. Valid values are `"Cluster"`,
          `"Namespaced"`, and `"*"`:

          - `"Cluster"` means that only cluster-scoped resources will match this rule.
            Namespace API objects are cluster-scoped.
          - `"Namespaced"` means that only namespaced resources will match this rule.
          - `"*"` means that there are no scope restrictions.

          Subresources match the scope of their parent resource.
        enum:
          - Cluster
          - Namespaced
          - '*'
        type: string
        x-kab-description-zh: |-
          规则的适用范围。

          - `"Cluster"` 意味着仅集群作用域的资源会与此规则匹配；
            Namespace API 对象是集群作用域的。
          - `"Namespaced"` 表示只有名字空间作用域的资源与此规则匹配；
          - `"*"` 意味着没有作用域方面的限制。

          子资源的作用域匹配按其父资源作用域处理。
    required:
      - apiGroups
      - apiVersions
      - operations
      - resources
    type: object
    x-kab-description-zh: |-
      NamedRuleWithOperations 是一个 `operations` 和带有 `resourceNames` 的
      `resources` 组成的元组。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1alpha1.ParamKind:
    description: ParamKind is a tuple of resource kind and API version.
    properties:
      apiVersion:
        description: |-
          `apiVersion` is the API group version the resources belong to.
          In format of `"group/version"`.
          The `group` part, if not empty, must be a valid DNS subdomain name.
          The `version` part cannot be empty string and it must be a valid DNS label name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          资源所属的 API 组版本，格式为 `"group/version"`。
          `group` 部分如果不为空，则必须是一个合法的 DNS 子域名。
          `version` 部分不能是空字符串，且其取值必须是合法的 DNS 标签名称。
      kind:
        description: |-
          `kind` is the API kind the resources belong to.
          The string must be a valid DNS label name.
        minLength: 1
        type: string
        x-kab-description-zh: 资源所属的 API 类别（kind）。此字符串值必须是合法的 DNS 标签名称。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: ParamKind 是由资源类别（kind）和 API 版本组成的元组。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1alpha1.ParamRef:
    description: |-
      ParamRef describes how to locate the params to be used as input to expressions
      of rules applied by a policy binding. One of `name` and `selector` must be specified.
    properties:
      name:
        description: |-
          `name` is the name of the resource being referenced.
          The string must be a valid path segment, which means the path cannot be `".."` or `"."` ,
          and it cannot contain `'/'` or `'%'`.
          `name` and `selector` are mutually exclusive properties.
          If one is set, the other must be unset.
        type: string
        x-kab-description-zh: |-
          此字段为所引用的资源的名称。字符串必须是一个合法的路径段。
          也就是说，字符串值不可以是 `".."` 或者 `"."`，并且其中不能包含
          `'/'` 或者 `'%'`。
          `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
      namespace:
        description: |-
          `namespace` is the namespace of the referenced resource.
          Allows limiting the search for params to a specific namespace.
          Applies to both `name` and `selector` fields.

          A per-namespace parameter may be used by specifying a namespace-scoped `paramKind`
          in the policy and leaving this field empty.i

          - If `paramKind` is cluster-scoped, this field MUST be unset.
            Setting this field results in a configuration error.
          - If `paramKind` is namespace-scoped, the namespace of the object being evaluated
            for admission will be used when this field is left unset.

          Take care that if this is left empty the binding must not match any
          cluster-scoped resources, which will result in an error.
        type: string
        x-kab-description-zh: |-
          所引用资源的名字空间。使用此参数可以将参数搜索限定到某个特定的名字空间范围内。
          名字空间限制对于 `name` 和 `selector` 字段均有效。

          通过在策略中设置名字空间作用域的 `paramKind` 同样可以使用名字空间层次的参数，
          因此不必设置此字段。

          - 如果 `paramKind` 是集群作用域的，此字段**不可**设置。
            设置了此字段会造成配置错误。
          - 如果 `paramKind` 是名字空间作用域的，未设置此字段时，
            执行准入判定时将会使用被评估的对象的名字空间。

          需要保证的是，当此字段未设置时，策略绑定不能与集群作用域的资源匹配，
          否则会导致出错。
      parameterNotFoundAction:
        default: Deny
        description: |-
          `parameterNotFoundAction` controls the behavior of the binding when the resource exists,
          and name or selector is valid, but there are no parameters matched by the binding.
          If the value is set to `Allow`, then no matched parameters will be treated
          as successful validation by the binding.
          If set to `Deny`, then no matched parameters will be subject to the `failurePolicy`
          of the policy.
        enum:
          - Allow
          - Deny
        type: string
        x-kab-description-zh: |-
          此字段用来控制当资源存在、`name` 或 `selector` 也合法，
          但策略绑定找不到匹配的参数时的行为。

          - `"Allow"`：绑定将找不到参数视为成功地通过合法性检查；
          - `"Deny"`：绑定会根据策略的 `failurePolicy` 设置来进行出错处理。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `selector` can be used to match multiple param objects based on their labels.
          Supply selector `{}` to match all resources of the `paramKind`.

          If multiple params are found, they are all evaluated with the policy expressions
          and the results are ANDed together.

          One of `name` or `selector` must be set, but `name` and `selector` are mutually
          exclusive properties. If one is set, the other must be unset."
        x-kab-description-zh: |-
          此字段可用来基于对象上的标签来匹配多个参数对象。
          如果此选择算符被设置为 `{}`，则会匹配 `paramKind` 所对应的所有资源。

          如果匹配的参数不止一个，所有参数都会被用来参与策略表达式求值，
          求值的结果会用逻辑与操作组合。

          `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
    required:
      - parameterNotFoundAction
    type: object
    x-kab-description-zh: |-
      ParamRef 描述如何定位作为表达式输入的参数，
      这里的表达式是某策略绑定用来构造规则时使用的。
      `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1alpha1.TypeChecking:
    description: TypeChecking contains results of type checking the expressions in
      the
    properties:
      expressionWarnings:
        description: The type checking warnings for each expression.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ExpressionWarning'
        type: array
        x-kab-description-zh: 每个表达式的类型检查警告信息。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: TypeChecking 包含对 ValidatingAdmissionPolicy 中的表达式进行类型检查的结果。
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.CREATE:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyStatus'
        description: |-
          The status of the ValidatingAdmissionPolicy, including warnings that
          are useful to determine if the policy behaves in the expected way.
          Populated by the system. Read-only.
        x-kab-description-zh: |-
          ValidatingAdmissionPolicy 的状态，包括用来判断策略是否以预期的方式执行的警告信息。
          此字段由系统填充。只读。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.UPDATE:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.CREATE:
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.UPDATE:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingList:
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of PolicyBinding objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
        type: array
        x-kab-description-zh: ValidatingAdmissionPolicyBinding 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingAdmissionPolicyBindingList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyBindingList 包含 ValidatingAdmissionPolicyBinding
      对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBindingList
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingSpec:
    description: ValidatingAdmissionPolicyBindingSpec is the specification of the
      ValidatingAdmissionPolicyBinding.
    properties:
      matchResources:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources'
        description: |-
          `matchResources` declares what resources match this binding and will be validated by it.
          Note that this is intersected with the policy's `matchConstraints`,
          so only requests that are matched by the policy can be selected by this.
          If this is unset, all resources matched by the policy are validated by this binding.
          When `resourceRules` is unset, it does not constrain resource matching.
          If a resource is matched by the other fields of this object, it will be validated.
          Note that this is differs from ValidatingAdmissionPolicy `matchConstraints`,
          where `resourceRules` are required.
        x-kab-description-zh: |-
          此字段声明哪些资源会被此绑定选中，进而被对应的策略检查。
          注意这一选择条件与策略的 `matchConstraints` 是取交集的，
          只有被策略选中了的请求才会在这里作进一步的匹配。
          若未设置此字段，则策略所选中的所有资源都会被此绑定检验。
          未设置 `resourceRules` 时，资源匹配是不受限制的。
          如果某资源被此绑定对象的其他字段匹配，则该资源会被检查。
          注意这一行为与 ValidatingAdmissionPolicy 的 `matchContraints` 不同，
          在后者中 `resourceRules` 是必须设置的。
      paramRef:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamRef'
        description: |-
          `paramRef` specifies the parameter resource used to configure the admission control policy.
          It should point to a resource of the type specified in `paramKind` of
          the bound ValidatingAdmissionPolicy.
          If the policy specifies a `paramKind` and the resource referred to by `paramRef`
          does not exist, this binding is considered mis-configured and the `failurePolicy`
          of the ValidatingAdmissionPolicy is applied.
          If the policy does not specify a `paramKind` then this field is ignored,
          and the rules are evaluated without a param.
        x-kab-description-zh: |-
          此字段给出用来配置准入控制策略的参数资源。
          字段值所指向的资源的类别应该与所绑定的 ValidatingAdmissionPolicy 的 `paramKind`
          相同。如果策略指定了 `paramKind`，而此 `paramRef` 所引用的资源并不存在，
          则认为绑定的配置是有问题的，要根据 ValidatingAdmissionPolicy 的 `failurePolicy`
          作进一步处理。
          如果策略没有设置 `paramKind`，则此字段会被忽略。
          执行准入规则时不考虑参数因素。
      policyName:
        description: |-
          `policyName` references a ValidatingAdmissionPolicy name which the
          ValidatingAdmissionPolicyBinding binds to.
          If the referenced resource does not exist, this binding is considered invalid and
          will be ignored. This string must be a valid DNS subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段引用所绑定的 ValidatingAdmissionPolicy。
          如果所引用的资源不存在，则此绑定的配置是非法的，并因而会被忽略。
          字段的字符串值必须是合法的 DNS 子域名。
      validationActions:
        description: |-
          This declares how validations of the referenced ValidatingAdmissionPolicy are enforced.
          If a validation evaluates to False, it is always enforced according to these actions.

          Failures defined by the ValidatingAdmissionPolicy's `failurePolicy` are enforced
          according to these actions only if the `failurePolicy` is set to `"Fail"`,
          otherwise the failures are ignored. This includes compilation errors,
          runtime errors and misconfigurations of the policy.

          The `validationActions` is declared as a set of action values. Order does not matter.
          The `validationActions` may not contain duplicates of the same action.

          The supported actions values are:

          - `"Deny"` specifies that a validation failure results in a denied request.
          - `"Warn"` specifies that a validation failure is reported to the request client
            in HTTP Warning headers, with a warning code of 299.
            Warnings can be sent both for allowed or denied admission responses.
          - `"Audit"` specifies that a validation failure is included in the published audit event
            for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with
            a value containing the details of the validation failures, formatted as a JSON list of
            objects, each with the following fields:
              - `message`: The validation failure message string
              - `policy`: The resource name of the ValidatingAdmissionPolicy
              - `binding`: The resource name of the ValidatingAdmissionPolicyBinding
              - `expressionIndex`: The index of the failed validations in the
                ValidatingAdmissionPolicy
              - `validationActions`: The enforcement actions enacted for the validation failure.

          Example audit annotation:

          ```
          "validation.policy.admission.k8s.io/validation_failure":
            "[{\"message\": \"Invalid value\",
              {\"policy\": \"policy.example.com\",
                {\"binding\": \"policybinding.example.com\",
                  {\"expressionIndex\": \"1\",
                    {\"validationActions\": [\"Audit\"]}]"
          ```

          Clients should expect to handle additional values by ignoring any values not
          recognized.
          `"Deny"` and `"Warn"` may not be used together since this combination needlessly
          duplicates the validation failure both in the API response body and
          the HTTP warning headers.
        items:
          enum:
            - Audit
            - Deny
            - Warn
          type: string
        maxItems: 2
        minItems: 1
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          此字段用来配置如何实施所引用的 ValidatingAdmissionPolicy 中定义的检查。
          如果某项检查的评估结果为 False，则一定会根据这里的动作定义来实施。

          对于 ValidatingAdmissionPolicy 中 `failurePolicy` 所定义的失败策略，
          只有 `failurePolicy` 设置为 `"Fail"` 的时候，才会根据这里定义的动作来处理。
          否则策略失败会被忽略。这里的失败包括编译错误、运行时错误以及策略的配置问题等。

          此 `validationActions` 是一组动作值定义，其中各个动作定义的顺序并不重要，
          但是其中不可以包含重复的动作定义。

          目前支持的动作值包括：

          - `"Deny"` 设定检查失败会导致请求被拒绝；
          - `"Warn"` 设定检查失败会通过 HTTP Warning 标头报告给发送请求的客户端，
            警告代码为 299。被通过的和被拒绝的准入响应都可以发送警告信息。
          - `"Audit"` 设定检查失败会被记录到请求对应的、公开的审计事件中。
            审计事件会包含一个 `validation.policy.admission.k8s.io/validation_failure`
            审计注解，且其注解值为检查失败的详情。

          生成审计日志时，注解值是一个 JSON 对象列表，每个 JSON 对象包含以下字段：

          - `message`：检查失败消息字符串；
          - `policy`：ValidatingAdmissionPolicy 资源的名称；
          - `binding`：ValidatingAdmissionPolicyBinding 资源的名称；
          - `expressionIndex`：ValidatingAdmissionPolicy 中失败的检查的索引；
          - `validationActions`：针对检查失败所采取的动作。

          下面是一个审计注解的例子：

          ```
          "validation.policy.admission.k8s.io/validation_failure":
            "[{\"message\": \"Invalid value\",
              {\"policy\": \"policy.example.com\",
                {\"binding\": \"policybinding.example.com\",
                  {\"expressionIndex\": \"1\",
                    {\"validationActions\": [\"Audit\"]}]"
          ```

          客户端应该忽略无法识别的取值，进而能够处理额外的情况。

          `"Deny"` 和 `"Warn"` 不能同时使用，因为同时使用的话可能会在 API
          响应和 HTTP Warning 标头中同时记录检查失败的信息，这是不必要的。
        x-kubernetes-list-type: set
    required:
      - policyName
      - validationActions
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyBindingSpec 是对 ValidatingAdmissionPolicyBinding
      对象的行为规约。
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyList:
    description: ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of ValidatingAdmissionPolicy objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
        type: array
        x-kab-description-zh: ValidatingAdmissionPolicy 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingAdmissionPolicyList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的对象元数据
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyList 是 ValidatingAdmissionPolicy
      对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyList
        version: v1alpha1
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicySpec:
    description: ValidatingAdmissionPolicySpec is the specification of the desired
      behavior of the AdmissionPolicy.
    properties:
      auditAnnotations:
        description: |-
          `auditAnnotations` contains CEL expressions which are used to produce
          audit annotations for the audit event of the API request.
          `validations` and `auditAnnotations` may not both be empty;
          at least one of `validations` or `auditAnnotations` is required.
          The keys in the items must be unique in the array.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.AuditAnnotation'
        maxItems: 20
        type: array
        x-kab-description-zh: |-
          此字段包含 CEL 表达式，用来为 API 请求的审计事件生成审计注解。
          `validations` 和 `auditAnnotations` 不可以同时为空，但二者之一是必须设置的。
          此字段的数组中，各个元素的主键必须唯一。
        x-kubernetes-list-type: atomic
      failurePolicy:
        default: Fail
        description: |-
          `failurePolicy` defines how to handle failures for the admission policy.
          Failures can occur from CEL expression parse errors, type check errors,
          runtime errors and invalid or mis-configured policy definitions or bindings.

          A policy is invalid if `spec.paramKind` refers to a non-existent kind.
          A binding is invalid if `spec.paramRef.name` refers to a non-existent resource.

          `failurePolicy` does not define how validations that evaluate to false are handled.

          When `failurePolicy` is set to `"Fail"`, ValidatingAdmissionPolicyBinding
          `validationActions` define how failures are enforced.
        enum:
          - Fail
          - Ignore
        type: string
        x-kab-description-zh: |-
          `failurePolicy` 定义如何处理准入策略的失败情况。
          失败可能缘于 CEL 表达式解析错误、类型检查错误、运行时错误，
          以及策略或绑定本身的配置不合法等等。

          当某个策略的 `spec.paramKind` 引用一个不存在的资源类别时，该策略是非法的。
          当某个绑定的 `spec.paramRef.name` 引用一个不存在的资源时，该绑定是非法的。

          `failurePolicy` 并不定义检查项评估结果为 False 的情况如何处理。
          当 `failurePolicy` 设置为 `"Fail"` 时，ValidatingAdmissionPolicyBinding
          的 `validationActions` 负责定义如何处理对应的失败。
      matchConditions:
        description: |-
          `matchConditions` is a list of conditions that must be met for a request to be validated.
          Match conditions filter requests that have already been matched by the `rules`,
          `namespaceSelector`, and `objectSelector`.
          An empty list of `matchConditions` matches all requests.

          If a parameter object is provided, it can be accessed via the `params` handle
          in the same manner as validation expressions.

          The `name` of the match conditions must be unique across the list.
          The exact matching logic is (in order):

          1. If ANY `matchCondition` evaluates to False, the policy is skipped.
          1. If ALL `matchConditions` evaluate to True, the policy is evaluated.
          1. If any `matchCondition` evaluates to an error (but none are False).
             If `failurePolicy=Fail`, reject the request;
             If `failurePolicy=Ignore`, the policy is skipped.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchCondition'
        maxItems: 64
        type: array
        x-kab-description-zh: |-
          此字段是一个列表值，其中包含请求要被检查之前所需满足的条件。
          这里设置的条件负责对已经通过 `rules`、`namespaceSelector` 和
          `objectSelector` 筛选的请求作进一步过滤。
          若此列表为空，则意味着匹配所有请求。

          如果提供了参数对象，可以和其他检查表达式一样，通过 `params` 句柄来访问。

          此列表中各个元素的 `name` 必须在整个列表中唯一。
          精确匹配的逻辑如下（按顺序执行）：
          1. 若 `matchCondition` 中的任一条目取值为 False，则策略被略过；
          1. 若 `matchConditions` 所有条目取值为 True，则对策略进行评估；
          1. 若 `matchCondition` 中任一条目评估出错（但都没有取 False 值）：
             如果 `failurePolicy=Fail`，则拒绝请求；如果 `failurePolicy=Ignore`，
             则策略会被略过。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      matchConstraints:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources'
        description: |-
          `matchConstraints` specifies what resources this policy is designed to validate.
          The admission policy cares about a request if it matches _all_ constraints.
          However, in order to prevent clusters from being put into an unstable state that
          cannot be recovered from via the API, the ValidatingAdmissionPolicy
          cannot match the ValidatingAdmissionPolicyBinding.
          The `resourceRules` must be specified.
        x-kab-description-zh: |-
          `matchConstraints` 设置此策略被设计用来检查的资源。
          只有某个请求匹配了这里的**所有**约束，才会被此准入策略处理。
          不过，为了避免将集群带入某种无法通过 API 来恢复的不稳定状态，
          ValidatingAdmissionPolicy 不可以用来匹配 ValidatingAdmissionPolicyBinding 资源。
          约束中的 `resourceRules` 字段必须被设置。
      paramKind:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamKind'
        description: |-
          `paramKind` specifies the kind of resources used to parameterize this policy.
          If absent, there are no parameters for this policy and the param CEL variable
          will not be provided to validation expressions.
          If `paramKind` refers to a non-existent kind, this policy definition is mis-configured and
          the `failurePolicy` is applied.
          If `paramKind` is specified but `paramRef` is unset in the
          ValidatingAdmissionPolicyBinding, the params variable will be null.
        x-kab-description-zh: |-
          `paramKind` 设置用来为策略提供参数的资源的类别。
          此字段未设置时，策略没有额外的参数，检查表达式中也不存在 CEL 变量 `params`。
          如果 `paramKind` 引用的是一个不存在的类别，则此策略定义是非法的，
          需要根据 `failurePolicy` 策略作进一步处置。
          如果设置了 `paramKind`，但 ValidatingAdmissionPolicyBinding 中未设置
          `paramRef`，则 CEL 变量 `params` 为 Null 值。
      validations:
        description: |-
          `validations` contain CEL expressions which is used to apply the validation.
          `validations` and `auditAnnotations` may not both be empty; at least
          one of `validations` or `auditAnnotations` is required.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.Validation'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段包含用来执行检查的 CEL 表达式。
          `validations` 和 `auditAnnotations` 之中至少要设置其一。
        x-kubernetes-list-type: atomic
      variables:
        description: |-
          `variables` contain definitions of variables that can be used in composition of
          other expressions. Each variable is defined as a named CEL expression.
          The variables defined here will be available under `variables` in other expressions
          of the policy except `matchConditions` because `matchConditions` are evaluated
          before the rest of the policy.

          The expression of a variable can refer to other variables defined earlier in
          the list but not those after. Thus, variables must be sorted by the order of
          first appearance and acyclic.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.Variable'
        type: array
        x-kab-description-zh: |-
          此字段包含一些变量的定义，这些变量可用于构造其他表达式。
          每个变量被定义为一个有名字的 CEL 表达式。
          这里定义的变量可以在策略中的其他表达式中用 `variables` 来引用，
          除了 `matchConditions`。这是因为`matchConditions` 的处理是早于策略的其他部分的。

          变量的表达式可以引用列表中先前定义的其他变量，但不能引用后来才定义的变量。
          因此，变量必须按出现的先后顺序排序，并且不允许存在循环引用。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - failurePolicy
      - matchConstraints
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicySpec 是准入策略预期行为的规约。
  io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyStatus:
    properties:
      conditions:
        description: The conditions represent the latest available observations of
          a policy's current state.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
        type: array
        x-kab-description-zh: 关于某策略的当前状态的最新监测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
      observedGeneration:
        description: The generation observed by the controller.
        format: int64
        type: integer
        x-kab-description-zh: 控制器所观测到的对象世代值。
      typeChecking:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.TypeChecking'
        description: |-
          The results of type checking for each expression. Presence of this
          field indicates the completion of the type checking.
        x-kab-description-zh: |-
          各个表达式的类型检查结果。
          状态对象中存在此字段意味着类型检查已经结束。
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyStatus 代表某 ValidatingAdmissionPolicy
      对象的状态。
  io.k8s.api.admissionregistration.v1alpha1.Validation:
    description: AuditAnnotation describes how to produce an audit annotation for
      an API request.
    properties:
      expression:
        description: |-
          `expression` represents the expression which will be evaluated by
          [CEL](https://github.com/google/cel-spec).
          CEL expressions have access to the contents of the API request/response,
          organized into CEL variables as well as some other useful variables:

          - `object` - The object from the incoming request.
            The value is null for DELETE requests.
          - `oldObject` - The existing object. The value is null for CREATE requests.
          - `request` - Attributes of the API request which is an
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest) object.
          - `params` - Parameter resource referred to by the policy binding being evaluated.
            Only populated if the policy has a `paramKind`.
          - `namespaceObject` - The namespace object that the incoming object belongs to.
            The value is null for cluster-scoped resources.
          - `variables` - Map of composited variables, from its name to its lazily
            evaluated value.
            For example, a variable named `foo` can be accessed as `variables.foo`.
          - `authorizer` - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or ServiceAccount) of the request.
            See [Authz struct documentation](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz).
          - `authorizer.requestResource` - A CEL ResourceCheck constructed from the 'authorizer'
            and configured with the request resource.

          The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
          accessible from the root of the object.
          No other metadata properties are accessible.

          Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
          Accessible property names are escaped according to the following rules when
          accessed in the expression:

          - '__' escapes to '__underscores__'
          - '.' escapes to '__dot__'
          - '-' escapes to '__dash__'
          - '/' escapes to '__slash__'
          - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'.

          The keywords are:

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          Examples:

          - Expression accessing a property named `"namespace"`:
            `{"Expression": "object.__namespace__ > 0"}`
          - Expression accessing a property named `"x-prop"`:
            `{"Expression": "object.x__dash__prop > 0"}`
          - Expression accessing a property named `"redact__d"`:
            `{"Expression": "object.redact__underscores__d > 0"}`

          Equality on arrays with list type of `set` or `map` ignores element order,
          i.e. [1, 2] == [2, 1]. Concatenation on arrays with `x-kubernetes-list-type`
          use the semantics of the list type:

          - `set`: `X + Y` performs a union where the array positions of all elements
            in `X` are preserved and non-intersecting elements in `Y` are appended,
            retaining their partial order.
          - `map`: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values are overwritten by values in `Y` when
            the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting
            keys are appended, retaining their partial order.
        type: string
        x-kab-description-zh: |-
          `expression` 包含要通过 [CEL](https://github.com/google/cel-spec) 来处理的表达式。
          API 请求和响应中的内容被组织成 CEL 变量，和一些其他的有用变量一起供 CEL 表达式访问：

          - `object` - 来自集接收到的请求中的对象。对于 DELETE 请求而言，此变量值为 null。
          - `oldObject` - 现有的对象。对于 CREATE 请求而言，此变量值为 null。
          - `request` - API 请求（类型为
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest)
            对象）的属性。
          - `params` - 当前评估的策略所引用的参数资源内容。
            只有策略设置了 `paramKind` 时可用。
          - `namespaceObject` - 接收到的对象所属的名字空间对象。
            对于集群作用域的对象，此变量值为 null。
          - `variables` - 复合类型的变量，是一个从变量名到懒惰求值表达式的映射。
            例如，一个名为 `foo` 的变量可以用 `variables.foo` 的形式访问。
          - `authorizer` - 一个 CEL 鉴权组件（Authorizer），可用来对请求的主体（用户或者
            ServiceAccount）执行鉴权检查。
            参见 [Authz 结构文档](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz)。
          - `authorizer.requestResource` - 根据 `authorizer` 配置构造的 CEL ResourceCheck
            结构，根据请求资源作了定制。

          字段 `apiVersion`、`kind`、`metadata.name` 和 `metadata.generateName`
          都是可以通过对象的根来访问的。对象的其他元数据属性都无法访问。

          表达式只能访问格式为 `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` 的属性。
          在表达式中使用可访问的属性名时，会根据下面的规则做转义处理：

          - `__` 被转义为 `__underscores__`
          - `.` 被转义为 `__dot__`
          - `-` 被转义为 `__dash__`
          - `/` 被转义为 `__slash__`
          - 与 CEL 保留的关键字完全重名的属性名会被转移为 '__{keyword}__'

          CEL 的内置关键字包括：

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          示例：

          - 访问名为 `"namespace"` 的属性：
            `{"Expression": "object.__namespace__ > 0"}`
          - 访问名为 `"x-prop"` 的属性：
            `{"Expression": "object.x__dash__prop > 0"}`
          - 访问名为 `"redact__d"` 的属性：
            `{"Expression": "object.redact__underscores__d > 0"}`

          对于列表类型为 `set` 或 `map` 的两个数组而言，判断其是否相等时，会忽略元素的顺序，
          即 `[1, 2] == [2, 1]`。
          对于设置了 `x-kubernetes-list-type` 的数组进行串接时，会根据列表类型的语义来处理：

          - `set`：`X + Y` 会执行数组取并集的操作，数组 `X` 中所有元素的位置不会发生变化，
            `Y` 是原来不在 `X` 内的元素会被追加在后面，且保留其原来的顺序。
          - `map`：`X + Y` 会执行一个合并操作，`X` 中的所有主键的位置被保留，
            但是当 `X` 和 `Y` 是的主键集合相交时，`X` 中主键的取值会被 `Y` 中的取值覆盖。
            原来不在 `X` 内的 `Y` 中元素会被追加到后面，且保留其原来的顺序。
      message:
        description: |-
          `message` represents the message displayed when validation fails.
          The message must not contain line breaks.
          If the `expression` contains line breaks, `message` is required.
          If unset, the message is `"failed expression: {expression}"`.
          e.g. "must be a URL with the host matching spec.host".
          The string, when trimmed, cannot be empty string.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          `message` 给出的是检查失败时要显示的错误信息。
          `message` 的内容中不能包含换行符。
          如果`expression` 中包含换行符时，需要设置此字段。
          如果没有设置此字段，则错误信息为 `"failed expression: {expression}"`。
          例如：`"must be a URL with the host matching spec.host"`。
          此字段经过头尾去空格处理之后，不可以是空字符串。
      messageExpression:
        description: |-
          `messageExpression` declares a CEL expression that evaluates to the validation
          failure message that is returned when this rule fails.
          Since `messageExpression` is used as a failure message, it must evaluate to a string.
          If both `message` and `messageExpression` are present on a validation, then
          `messageExpression` will be used if validation fails.
          If `messageExpression` results in a runtime error, the runtime error is logged,
          and the validation failure message is produced as if the `messageExpression` field
          were unset.
          If `messageExpression` evaluates to an empty string, a string with only spaces,
          or a string that contains line breaks, then the validation failure message will
          also be produced as if the `messageExpression` field were unset, and the fact
          that messageExpression produced an empty string/string with only spaces/string
          with line breaks will be logged.
          `messageExpression` has access to all the same variables as the `expression` except
          for `authorizer` and `authorizer.requestResource`.

          Example: `"object.x must be less than max ("+string(params.max)+")"`
        type: string
        x-kab-description-zh: |-
          `messageExpression` 给出一个 CEL 表达式，其处理结果是一个检查出错消息字符串。
          当规则失败时会返回此字符串。
          由于此字段所表达的是一个出错消息，其处理结果必须是字符串。
          如果在执行检查时，`message` 和 `messageExpression` 都存在，
          那么在检查失败时会使用 `messageExpression`。
          如果在处理 `messageExpression` 表达式时出现运行时错误，所发生的运行时错误会被记录到日志中，
          引擎在生成检查失败消息时，就好像 `messageExpression` 字段没有设置一样。
          如果 `messageExpression` 的处理结果是一个空字符串、一个只包含空白字符的字符串、
          或者一个包含了换行符的字符串，则引擎在生成检查失败消息时也会忽略 `messageExpression`
          的设置，同时将 `messageExpression` 生成了空字符串、只有空白字符的字符串、
          或者包含换行符的字符串这一事实记录到日志中。
          `messageExpression` 所能访问的变量范围与 `expression` 基本相同，
          不同之处在于它不能访问 `authorizer` 和 `authorizer.requestResource`。
          例如：`"object.x must be less than max ("+string(params.max)+")"`。
      reason:
        default: Invalid
        description: |-
          `reason` represents a machine-readable description of why this validation
          failed. If this is the first validation in the list to fail, this reason, as
          well as the corresponding HTTP response code, are used in the HTTP response
          to the client. The currently supported reasons are: `"Unauthorized"`, `"Forbidden"`,
          `"Invalid"`, `"RequestEntityTooLarge"`.
          If not set, `"Invalid"` is used in the response to the client.
        enum:
          - Forbidden
          - Invalid
          - RequestEntityTooLarge
          - Unauthorized
        type: string
        x-kab-description-zh: |-
          `reason` 给出的是一个机器可读的字符串，描述当前检查为何失败。
          如果当前检查是整个检查列表中第一个失败的条目，则失败的原因以及对应的
          HTTP 响应代码会包含在提供给客户端的 HTTP 响应中。
          目前支持的 `reason` 值有：`"Unauthorized"`、`"Forbidden"`、`"Invalid"`,
          `"RequestEntityTooLarge"`。
          如果没有设置此字段，则向客户端发送响应时会使用 `"Invalid"`。
    required:
      - expression
    type: object
    x-description-zh: Validation 给出的是用来执行验证检查时要使用的 CEL 表达式。
  io.k8s.api.admissionregistration.v1alpha1.Variable:
    description: Variable is the definition of a variable that is used for composition.
    properties:
      expression:
        description: |-
          The expression that will be evaluated as the value of the variable.
          The CEL expression has access to the same identifiers as the CEL expressions
          in `validation`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          将被处理为变量取值的一个表达式。此 CEL 表达式所能访问到的标识符与
          `Validation` 结构中的 CEL 表达式相同。
      name:
        description: |-
          The name of the variable. The name must be a valid CEL identifier
          (matching the pattern but cannot be one of the keywords) and unique among all
          variables. The variable can be accessed in other expressions through `variables`.
          For example, if `name` is `"foo"`, the variable will be available as `variables.foo`.
        minLength: 1
        pattern: '[_a-zA-Z][_a-zA-Z0-9]*'
        type: string
        x-kab-description-zh: |-
          变量的名称。此名称字符串必须是一个合法的 CEL 标识符
          （满足其正则表达式要求且不能是其关键字之一），
          并且在所有变量中不存在重名的情况。
          在其他表达式中可以通过 `variables` 来访问此变量。
          例如，如果这里的 `name` 是 `"foo"`，则可以通过 `variables.foo` 来访问它。
    required:
      - expression
      - name
    type: object
    x-kab-description-zh: Variable 是用来构造复合表达式的变量的定义。
  io.k8s.api.admissionregistration.v1beta1.AuditAnnotation:
    description: AuditAnnotation describes how to produce an audit annotation for
      an API request.
    properties:
      key:
        description: |-
          This specifies the audit annotation key. The audit annotation keys
          of a ValidatingAdmissionPolicy must be unique. The key must be a qualified name
          (`[A-Za-z0-9][-A-Za-z0-9_.]*`).

          The key is combined with the resource name of the ValidatingAdmissionPolicy
          to construct an audit annotation key:
          `"{ValidatingAdmissionPolicy name}/{key}"`.

          If an admission webhook uses the same resource name as this
          ValidatingAdmissionPolicy and the same audit annotation key, the annotation
          key will be identical. In this case, the first annotation written with the key
          will be included in the audit event and all subsequent annotations with the
          same key will be discarded.
        type: string
        x-kab-description-zh: |-
          此字段设置审计注解的主键。ValidatingAdmissionPolicy 的审计注解的主键必须唯一。
          主键字符串必须是一个限定名（Qualified Name），即 `[A-Za-z0-9][-A-Za-z0-9_.]*`。

          `key` 的值会与 ValidatingAdmissionPolicy 的资源名称一起构造审计注解主键：
          `"{ValidatingAdmissionPolicy 名称}/{key 值}"`.

          如果某个准入 Webhook 使用了与 ValidatingAdmissionPolicy 相同的资源名称，
          并且其审计注解主键也相同，那么最终的注解主键也会相同。
          这时候，先使用此主键写入的注解会被记录到审计日志中，后续的、主键相同的注解会被丢弃。
      valueExpression:
        description: |-
          This represents the expression which is evaluated by CEL to produce
          an audit annotation value. The expression must evaluate to either a string or
          null value. If the expression evaluates to a string, the audit annotation is
          included with the string value. If the expression evaluates to null or empty
          string, the audit annotation will be omitted. If the result of the `valueExpression`
          is more than 10kb in length, it will be truncated to 10kb.

          If multiple ValidatingAdmissionPolicyBinding
          resources match an API request, then the `valueExpression` will be evaluated
          for each binding. All unique values produced by the `valueExpression`'s will
          be joined together in a comma-separated list.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个表达式，CEL 处理此表达式后得到审计注解的值。
          此表达式的处理结果必须是一个字符串或者 Null 值。
          如果结果是一个字符串，则该字符串值会被包含到审计注解中。
          反之，如果处理结果是 Null 值或者空字符串，则对应的审计注解会被略过。
          字符串超出 10 KB 时会被截断。

          如果有多个 ValidatingAdmissionPolicyBinding 资源与同一个 API 请求匹配，
          则针对每个绑定资源都会处理一遍`valueExpression` 表达式。
          所生成的不同字符串会被串接起来，构成一个逗号分隔的列表，作为审计注解值。
    required:
      - key
      - valueExpression
    type: object
    x-kab-description-zh: AuditAnnotation 描述如何为一个 API 请求生成审计注解。
  io.k8s.api.admissionregistration.v1beta1.ExpressionWarning:
    description: ExpressionWarning is a warning information that targets a specific
      expression.
    properties:
      fieldRef:
        description: The path to the field that refers the expression. The value must
          be a valid JSON path expression. For example, the reference to the expression
          of the first item of validations is "spec.validations[0].expression".
        minLength: 1
        type: string
        x-kab-description-zh: |-
          引用表达式的字段的路径。字段值必须是一个合法的 JSON 路径表达式。
          例如，对 `validations` 中的一个元素的 `expression`
          字段的引用可以写作 `"spec.validations[0].expression"`。
      warning:
        description: The content of type checking information in a human-readable
          form. Each line of the warning contains the type that the expression is
          checked against, followed by the type check error from the compiler.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          以人类可读的形式给出的类型检查信息。
          `warning` 的每一行都包含表达式所检查的类型，后接编译器给出的类型检查错误信息。
    required:
      - fieldRef
      - warning
    type: object
    x-kab-description-zh: ExpressionWarning 针对某个特定表达式的警告信息。
  io.k8s.api.admissionregistration.v1beta1.MatchCondition:
    description: MatchCondition represents a condition which must be fulfilled for
      a request to be sent to a webhook.
    properties:
      expression:
        description: |-
          This represents the expression which will be evaluated by CEL. Must evaluate to bool.
          CEL expressions have access to the contents of the AdmissionRequest and Authorizer,
          organized into CEL variables:

          - `object` - The object from the incoming request. The value is null for DELETE requests.
          - `oldObject` - The existing object. The value is null for CREATE requests.
          - `request` - Attributes of the admission request of type
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest).
          - `authorizer` - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or ServiceAccount) of the request.
            See [Authz docs](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz).
          - `authorizer.requestResource` - A CEL ResourceCheck constructed from the `authorizer`
            and configured with the request resource.
            See more [documentation on CEL](https://kubernetes.io/docs/reference/using-api/cel/).
        minLength: 1
        type: string
      name:
        description: |-
          This is an identifier for this match condition, used for strategic
          merging of `matchConditions`, as well as providing an identifier for logging purposes.
          A good name should be descriptive of the associated expression.
          The `name` must be a qualified name consisting of alphanumeric characters, `'-'`,
          `'_'` or `'.'`, and must start and end with an alphanumeric character
          (e.g. `'MyName'`,  or `'my.name'`,  or `'123-abc'`, regex used for validation is
          `([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]')` with an optional DNS subdomain prefix
          and `'/'` (e.g. `'example.com/MyName'`).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段为匹配条件的标识符，在执行对 `matchConditions` 进行策略性合并时，
          以及生成日志时会用到。比较好的名字应该是能够描述所关联的表达式的。
          `name` 字段必须是一个限定名（Qualified Name），包含字母数字字符、`'-'`、
          `'_'` 或者 `'.'`，并且必须以字母或数字开头和结束。
          例如：`"MyName"`、`"my.name"` 或者 `"123-abc"`。
          用来执行正确性检查的正则表达式为 `([A-Za-z0-9][-A-Za-z0-9_.]*)?[A-Za-z0-9]')`。
          `name` 值可以带一个可选的 DNS 子域名加上 `'/'` 作为前缀。
          例如：`"example.com/MyName"`。
    required:
      - expression
      - name
    type: object
    x-kab-description-zh: MatchCondition 表示的是一种条件，只有请求满足了这一条件才有可能被发送到某 Webhook。
  io.k8s.api.admissionregistration.v1beta1.MatchResources:
    description: |-
      MatchResources decides whether to run the admission control policy on
      an object based on whether it meets the match criteria.
      The exclude rules take precedence over include rules
      (if a resource matches both, it is excluded).
    properties:
      excludeResourceRules:
        description: |-
          `excludeResourceRules` describes what operations on what resources/subresources
          the ValidatingAdmissionPolicy should not care about.
          The exclude rules take precedence over include rules
          (if a resource matches both, it is excluded).
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations'
        type: array
        x-kab-description-zh: |-
          此字段描述哪些资源或子资源上的哪些操作是 ValidatingAdmissionPolicy 所要忽略的。
          排除规则比包含规则的优先级高。
          换言之，当某资源与这两个规则都匹配时，该资源会被排除掉。
        x-kubernetes-list-type: atomic
      matchPolicy:
        default: Equivalent
        description: |-
          `matchPolicy` defines how the MatchResources list is used to match
          incoming requests. Allowed values are `"Exact"` or `"Equivalent"`.

          - `"Exact"`: match a request only if it exactly matches a specified rule.
            For example, if deployments can be modified via `"apps/v1"`, `"apps/v1beta1"`,
            but `"rules"` only included
            `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`,
            a request to `"apps/v1beta1"` would not be sent to the ValidatingAdmissionPolicy.
          - `"Equivalent"`: match a request if modifies a resource listed in rules, even
            via another API group or version. For example, if deployments can be modified
            via `"apps/v1"` and `"apps/v1beta1"`, and `"rules"` only included
            `apiGroups:["apps"], apiVersions:["v1"], resources: ["deployments"]`,
            a request to `"apps/v1beta1"` would be converted to `"apps/v1"` and
            sent to the ValidatingAdmissionPolicy.
        enum:
          - Equivalent
          - Exact
        type: string
        x-kab-description-zh: |-
          `matchPolicy` 定义此 MatchResources 列表如何用于匹配所接收到的请求。
          可选的值为 `"Exact"` 或 `"Equivalent"`：

          - `"Exact"` 意味着只有请求与某个指定规则精确匹配时才视为匹配。
            例如，资源 `deployments` 可以通过 `"apps/v1"` 和 `"apps/v1beta1"` 来修改，
            但 `resourceRules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions": ["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 的请求不会被发送到 ValidatingAdmissionPolicy。
          - `"Equivalent"` 意味着如果某个请求所修改的资源位于 `resourceRules` 列表中，
            即便请求使用的是不同的 API 组或版本，也视为匹配。
            例如，如果资源 `deployments` 可以通过 `"apps/v1"`、`"apps/v1beta1"` 来修改，
            而 `resourceRules` 中仅包含了
            `"apiGroups":["apps"], "apiVersions":["v1"], "resources": ["deployments"]`，
            这时针对 `"apps/v1beta1"` 的请求会被转换为 `"apps/v1"`，并被发送给
            ValidatingAdmissionPolicy。
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `namespaceSelector` decides whether to run the admission control policy on
          an object based on whether the namespace for that object matches the selector.
          If the object itself is a namespace, the matching is performed on `object.metadata.labels`.
          If the object is another cluster scoped resource, it never skips the policy.

          For example, to run the webhook on any objects whose namespace is not associated
          with `"runlevel"` of `"0"` or `"1"`, you will set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [
              {
                "key": "runlevel",
                "operator": "NotIn",
                "values": ["0", "1"]
              }
            ]
          }
          ```

          If instead you want to only run the policy on any objects whose namespace
          is associated with the `"environment"` of `"prod"` or `"staging"`, you will
          set the selector as follows:

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```
          See [official docs](https://kubernetes.io/docs/concepts/overview/working-with-objects/labels/)
          for more examples of label selectors.

          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段设置在判定是否要针对某对象来执行此准入控制策略时，要考虑对象名字空间是否符合预期。
          如果对象自身就是一个 Namespace，则匹配是针对 `object.metadata.labels` 来进行的。
          如果对象是一个集群作用域的对象，则 Webhook 不会被略过（总会被调用）。
          例如，如果希望针对没有设置 `"runlevel"` 为 `"0"` 或 `"1"`
          的名字空间中的所有对象运行此策略，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "runlevel",
              "operator"\: "NotIn",
              "values": ["0", "1"]
            }]
          }
          ```

          如果你希望仅针对 `"environment"` 为 `"prod"` 或 `"staging"`
          的名字空间中的对象运行 Webhook，你可以像这样设置选择算符：

          ```
          "namespaceSelector": {
            "matchExpressions": [{
              "key": "environment",
              "operator": "In",
              "values": ["prod", "staging"]
            }]
          }
          ```

          此字段默认为空的标签选择算符，其效果是与所有对象匹配。
      objectSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `objectSelector` decides whether to run the validation based on if the object
          has matching labels.
          `objectSelector` is evaluated against both the `oldObject` and `newObject`
          that would be sent to the CEL validation, and is considered to match if
          either object matches the selector.
          A null object (`oldObject` in the case of create, or `newObject` in the case of delete)
          or an object that cannot have labels (like a `DeploymentRollback` or a `PodProxyOptions`
          object) is not considered to match.
          Use the object selector only if the webhook is opt-in, because end users may skip
          the admission webhook by setting the labels.
          Default to the empty label selector, which matches everything.
        x-kab-description-zh: |-
          此字段用来根据对象上是否存在匹配的标签来决定是否执行检查。
          `objectSelector` 会针对要发送给 CEL 检查器的 `oldObject` 和 `newObject` 来处理。
          如果这两个对象之一与此选择算符匹配，则视请求为匹配。
          空（Null）对象（CREATE 请求中的 `oldObject` 或 DELETE 请求中的 `newObject`），
          或者不存在标签的对象（例如一个 `DeploymentRollback` 或 `PodProxyOptions` 对象）
          不会被视为匹配。只有当 Webhook 是可选的时候才建议使用此对象选择算符，
          因为最终用户可能会通过操控标签来略过准入 Webhook 的检查。

          此字段的默认值为空的标签选择算符，其效果是能够匹配所有对象。
      resourceRules:
        description: |-
          `resourceRules` describes what operations on what resources/subresources
          the ValidatingAdmissionPolicy matches. The policy cares about an operation if
          it matches _any_ rule.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations'
        type: array
        x-kab-description-zh: |-
          用来设置 ValidatingAdmissionPolicy 关心哪些对象、子对象上的哪些操作。
          如果某项操作与 `resourceRules` 列表中定义的任一表项匹配，
          则可认为它是准入策略所关心的。
        x-kubernetes-list-type: atomic
    required:
      - matchPolicy
      - namespaceSelector
      - objectSelector
    type: object
    x-kab-description-zh: |-
      MatchResources 基于对象是否满足匹配条件来决定是否对其运行准入控制策略。
      其中的排除（Exclude）规则比包含（Include）规则优先级高。
      换言之，当某资源与这两个规则都匹配时，该资源会被排除掉。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1beta1.NamedRuleWithOperations:
    description: NamedRuleWithOperations is a tuple of `operations` and `resources`
      with `resourceNames`.
    properties:
      apiGroups:
        description: |-
          `apiGroups` is the API groups the resources belong to. '*' is all groups.
          If '*' is present, the length of the list must be one. Required.
        items:
          description: The API group the resources belong to. An empty string "" means
            the legacy "v1" API.
          type: string
          x-kab-description-zh: 资源所属的 API 组。`""` 表示原来的 `"v1"` API 组。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 组。`"*"` 是用来表示所有 API 组的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 组。
          此字段为必需字段。
        x-kubernetes-list-type: atomic
      apiVersions:
        description: |-
          `apiVersions` is the API versions the resources belong to. `"*"` is all versions.
          If `"*"` is present, the length of the list must be one.
        items:
          description: The API version a resource belongs to. This string cannot be
            empty.
          minLength: 1
          type: string
          x-kab-description-zh: 资源所属的 API 版本。此字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          资源所属的 API 版本。`"*"` 是用来表示所有 API 版本的通配符。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他 API 版本。
        x-kubernetes-list-type: atomic
      operations:
        description: |-
          `operations` is the operations the admission hook cares about -
          `CREATE`, `UPDATE`, `DELETE`, `CONNECT` or `*` for all of those operations and
          any future admission operations that are added.
          If '*' is present, the length of the slice must be one."
        items:
          description: The name of a supported operation
          enum:
            - '*'
            - CONNECT
            - CREATE
            - DELETE
            - UPDATE
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          准入策略所关心的操作。可以设置为
          `"CREATE"`、`"UPDATE"`、`"DELETE"`、`"CONNECT"` 或 `"*"`
          （表示所有这些操作，包括将来会添加的准入操作）。
          如果列表中包含 `"*"`，则列表的长度必须为 1，即其中不能再包含其他操作。
        x-kubernetes-list-type: atomic
      resourceNames:
        description: |-
          `resourceNames` is an optional white list of names that the rule applies to.
          An empty set means that everything is allowed.
        items:
          description: |-
            The name of a resource. It has to be a valid path segment name,
            which means it cannot be `".."` or `"."`; it may not contain `'/'` or `'%'`.
          type: string
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          可选的字段，用来给出规则所适用的资源名称的白名单。
          如果此数组为空，则意味着所有资源名称都是可接受的。
        x-kubernetes-list-type: atomic
      resources:
        description: |-
          `resources` is a list of resources this rule applies to. For example:

          - 'pods' means Pods.
          - 'pods/log' means the `log` subresource of Pods.
          - '*' means all resources, but not subresources. If '*' is in the list,
            all other items in the list can only specify subresources.
          - 'pods/*' means all subresources of pods. If 'pod/*' is included,
            there cannot be other 'pod/subres' item in the list.
          - '*/scale' means all `scale` subresources. If '*/scale' is in the list,
            there cannot be other 'resource/scale' item in the list.
          - '*/*' means all resources and their subresources. If '*/*' is in the list,
            there cannot be any other items in the list.

            If wildcard is present, the validation rule will ensure `resources` do not
            overlap with each other.
            Depending on the enclosing object, subresources might not be allowed.
        items:
          description: The resource this rule applies to. This string cannot be empty.
          minLength: 1
          type: string
          x-kab-description-zh: 此规则所适用的资源。字符串不可为空。
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此规则所适用的资源列表。例如：

          - `"pods"` 意味着适用于 Pod 资源；
          - `"pods/log"` 意味着适用于 Pod 的 `"log"` 子资源；
          - `"*"` 意味着适用于所有资源，但不包括其子资源；
            如果列表中包含了 `"*"`，则列表中的其他条目只能用于设置子资源；
          - `"pods/*"` 意味着适用于 Pod 的所有子资源；
            如果列表中包含了这个字符串，列表中不能再出现其他 `pod/subresource` 条目；
          - `"*/scale"` 意味着适用于所有的 `"scale"` 子资源；
            若列表中出现了此字符串，则列表中不可存在其他 `resource/scale` 条目；
          - `"*/*"` 意味着适用于所有资源及其子资源；
            如果列表中存在这个字符串，则列表中不可存在其他条目。

          如果列表中包含了通配符，
          则 API 服务器在作合法性检查时会确保 `resources` 条目之间不会发生重叠覆盖的情况。
          取决于所指定的资源对象是什么，有些资源是不支持设置子资源的。
        x-kubernetes-list-type: atomic
      scope:
        default: '*'
        description: |-
          `scope` specifies the scope of this rule. Valid values are `"Cluster"`,
          `"Namespaced"`, and `"*"`:

          - `"Cluster"` means that only cluster-scoped resources will match this rule.
            Namespace API objects are cluster-scoped.
          - `"Namespaced"` means that only namespaced resources will match this rule.
          - `"*"` means that there are no scope restrictions.

          Subresources match the scope of their parent resource.
        enum:
          - Cluster
          - Namespaced
          - '*'
        type: string
        x-kab-description-zh: |-
          规则的适用范围。

          - `"Cluster"` 意味着仅集群作用域的资源会与此规则匹配；
            Namespace API 对象是集群作用域的。
          - `"Namespaced"` 表示只有名字空间作用域的资源与此规则匹配；
          - `"*"` 意味着没有作用域方面的限制。

          子资源的作用域匹配按其父资源作用域处理。
    required:
      - apiGroups
      - apiVersions
      - operations
      - resources
    type: object
    x-kab-description-zh: |-
      NamedRuleWithOperations 是一个 `operations` 和带有 `resourceNames` 的
      `resources` 组成的元组。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1beta1.ParamKind:
    description: ParamKind is a tuple of resource kind and API version.
    properties:
      apiVersion:
        description: |-
          `apiVersion` is the API group version the resources belong to.
          In format of `"group/version"`.
          The `group` part, if not empty, must be a valid DNS subdomain name.
          The `version` part cannot be empty string and it must be a valid DNS label name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          资源所属的 API 组版本，格式为 `"group/version"`。
          `group` 部分如果不为空，则必须是一个合法的 DNS 子域名。
          `version` 部分不能是空字符串，且其取值必须是合法的 DNS 标签名称。
      kind:
        description: |-
          `kind` is the API kind the resources belong to.
          The string must be a valid DNS label name.
        minLength: 1
        type: string
        x-kab-description-zh: 资源所属的 API 类别（kind）。此字符串值必须是合法的 DNS 标签名称。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: ParamKind 是由资源类别（kind）和 API 版本组成的元组。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1beta1.ParamRef:
    description: |-
      ParamRef describes how to locate the params to be used as input to expressions
      of rules applied by a policy binding. One of `name` and `selector` must be specified.
    properties:
      name:
        description: |-
          `name` is the name of the resource being referenced.
          The string must be a valid path segment, which means the path cannot be `".."` or `"."` ,
          and it cannot contain `'/'` or `'%'`.
          `name` and `selector` are mutually exclusive properties.
          If one is set, the other must be unset.

          A single parameter used for all admission requests can be configured by setting
          the `name` field, leaving `selector` blank, and setting namespace if `paramKind`
          is namespace-scoped.
        type: string
        x-kab-description-zh: |-
          此字段为所引用的资源的名称。字符串必须是一个合法的路径段。
          也就是说，字符串值不可以是 `".."` 或者 `"."`，并且其中不能包含
          `'/'` 或者 `'%'`。
          `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。

          通过设置 `name` 字段并将 `selector` 留空，可以为所有准入请求配置同一个参数。
          如果 `paramKind` 所引用的是名字空间作用域的类别，还可以设置 `namespace`。
      namespace:
        description: |-
          `namespace` is the namespace of the referenced resource.
          Allows limiting the search for params to a specific namespace.
          Applies to both `name` and `selector` fields.

          A per-namespace parameter may be used by specifying a namespace-scoped `paramKind`
          in the policy and leaving this field empty.i

          - If `paramKind` is cluster-scoped, this field MUST be unset.
            Setting this field results in a configuration error.
          - If `paramKind` is namespace-scoped, the namespace of the object being evaluated
            for admission will be used when this field is left unset.

          Take care that if this is left empty the binding must not match any
          cluster-scoped resources, which will result in an error.
        type: string
        x-kab-description-zh: |-
          所引用资源的名字空间。使用此参数可以将参数搜索限定到某个特定的名字空间范围内。
          名字空间限制对于 `name` 和 `selector` 字段均有效。

          通过在策略中设置名字空间作用域的 `paramKind` 同样可以使用名字空间层次的参数，
          因此不必设置此字段。

          - 如果 `paramKind` 是集群作用域的，此字段**不可**设置。
            设置了此字段会造成配置错误。
          - 如果 `paramKind` 是名字空间作用域的，未设置此字段时，
            执行准入判定时将会使用被评估的对象的名字空间。

          需要保证的是，当此字段未设置时，策略绑定不能与集群作用域的资源匹配，
          否则会导致出错。
      parameterNotFoundAction:
        default: Deny
        description: |-
          `parameterNotFoundAction` controls the behavior of the binding when the resource exists,
          and name or selector is valid, but there are no parameters matched by the binding.
          If the value is set to `Allow`, then no matched parameters will be treated
          as successful validation by the binding.
          If set to `Deny`, then no matched parameters will be subject to the `failurePolicy`
          of the policy.
        enum:
          - Allow
          - Deny
        type: string
        x-kab-description-zh: |-
          此字段用来控制当资源存在、`name` 或 `selector` 也合法，
          但策略绑定找不到匹配的参数时的行为。

          - `"Allow"`：绑定将找不到参数视为成功地通过合法性检查；
          - `"Deny"`：绑定会根据策略的 `failurePolicy` 设置来进行出错处理。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          `selector` can be used to match multiple param objects based on their labels.
          Supply selector `{}` to match all resources of the `paramKind`.

          If multiple params are found, they are all evaluated with the policy expressions
          and the results are ANDed together.

          One of `name` or `selector` must be set, but `name` and `selector` are mutually
          exclusive properties. If one is set, the other must be unset."
        x-kab-description-zh: |-
          此字段可用来基于对象上的标签来匹配多个参数对象。
          如果此选择算符被设置为 `{}`，则会匹配 `paramKind` 所对应的所有资源。

          如果匹配的参数不止一个，所有参数都会被用来参与策略表达式求值，
          求值的结果会用逻辑与操作组合。

          `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
    required:
      - parameterNotFoundAction
    type: object
    x-kab-description-zh: |-
      ParamRef 描述如何定位作为表达式输入的参数，
      这里的表达式是某策略绑定用来构造规则时使用的。
      `name` 和 `selector` 是互斥的，二者必须设置其一，但不能同时设置。
    x-kubernetes-map-type: atomic
  io.k8s.api.admissionregistration.v1beta1.TypeChecking:
    description: TypeChecking contains results of type checking the expressions in
      the ValidatingAdmissionPolicy
    properties:
      expressionWarnings:
        description: The type checking warnings for each expression.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ExpressionWarning'
        type: array
        x-kab-description-zh: 每个表达式的类型检查警告信息。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: TypeChecking 包含对 ValidatingAdmissionPolicy 中的表达式进行类型检查的结果。
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.CREATE:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus'
        description: |-
          The status of the ValidatingAdmissionPolicy, including warnings that
          are useful to determine if the policy behaves in the expected way.
          Populated by the system. Read-only.
        x-kab-description-zh: |-
          ValidatingAdmissionPolicy 的状态，包括关于策略是否按预期方式工作的有用信息。
          此字段由系统填充。只读。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.UPDATE:
    description: ValidatingAdmissionPolicy describes the definition of an admission
      validation policy that accepts or rejects an object without changing it.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicy.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicy 描述准入检查策略的定义，该策略用来接受或者拒绝对象，但不会改变该对象。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.CREATE:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.UPDATE:
    description: |-
      ValidatingAdmissionPolicyBinding binds the ValidatingAdmissionPolicy
      with paramerized resources. ValidatingAdmissionPolicyBinding and parameter CRDs
      together define how cluster administrators configure policies for clusters.

      For a given admission request, each binding will cause its policy to be evaluated
      N times, where N is 1 for policies/bindings that don't use params, otherwise N is
      the number of parameters selected by the binding.

      The CEL expressions of a policy must have a computed CEL cost below the maximum CEL budget.
      Each evaluation of the policy is given an independent CEL cost budget.
      Adding/removing policies, bindings, or params can not affect whether a given
      (policy, binding, param) combination is within its own CEL budget.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ValidatingAdmissionPolicyBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec'
        description: Specification of the desired behavior of the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: 关于 ValidatingAdmissionPolicyBinding 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ValidatingAdmissionPolicyBinding 将 ValidatingAdmissionPolicy
      与参数化的资源关联（绑定）起来。
      ValidatingAdmissionPolicyBinding 和参数 CRDs 一起确定集群管理员如何配置集群的策略。

      对于一个给定的准入请求，每个绑定对象都会导致其所对应的策略并评估 N 次。
      对于未使用参数的策略和绑定而言，N 为 1；否则 N 的取值为绑定所选中的参数的个数。

      策略的 CEL 表达式必须具有一个计算得到的 CEL 成本值，且该值要低于 CEL 预算上限。
      策略的每次评估都会被赋予一个独立的 CEL 成本预算。
      添加、删除策略、绑定或者参数都不会影响是否某个给定的（策略、绑定、参数）
      组合是否在其 CEL 预算范围内。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingList:
    description: ValidatingAdmissionPolicyBindingList is a list of ValidatingAdmissionPolicyBinding.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of PolicyBinding objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
        type: array
        x-kab-description-zh: ValidatingAdmissionPolicyBinding 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingAdmissionPolicyBindingList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyBindingList 包含 ValidatingAdmissionPolicyBinding
      对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBindingList
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingSpec:
    description: ValidatingAdmissionPolicyBindingSpec is the specification of the
      ValidatingAdmissionPolicyBinding.
    properties:
      matchResources:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchResources'
        description: |-
          `matchResources` declares what resources match this binding and will be validated by it.
          Note that this is intersected with the policy's `matchConstraints`,
          so only requests that are matched by the policy can be selected by this.
          If this is unset, all resources matched by the policy are validated by this binding.
          When `resourceRules` is unset, it does not constrain resource matching.
          If a resource is matched by the other fields of this object, it will be validated.
          Note that this is differs from ValidatingAdmissionPolicy `matchConstraints`,
          where `resourceRules` are required.
        x-kab-description-zh: |-
          此字段声明哪些资源会被此绑定选中，进而被对应的策略检查。
          注意这一选择条件与策略的 `matchConstraints` 是取交集的，
          只有被策略选中了的请求才会在这里作进一步的匹配。
          若未设置此字段，则策略所选中的所有资源都会被此绑定检验。
          未设置 `resourceRules` 时，资源匹配是不受限制的。
          如果某资源被此绑定对象的其他字段匹配，则该资源会被检查。
          注意这一行为与 ValidatingAdmissionPolicy 的 `matchContraints` 不同，
          在后者中 `resourceRules` 是必须设置的。
      paramRef:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ParamRef'
        description: |-
          `paramRef` specifies the parameter resource used to configure the admission control policy.
          It should point to a resource of the type specified in `paramKind` of
          the bound ValidatingAdmissionPolicy.
          If the policy specifies a `paramKind` and the resource referred to by `paramRef`
          does not exist, this binding is considered mis-configured and the `failurePolicy`
          of the ValidatingAdmissionPolicy is applied.
          If the policy does not specify a `paramKind` then this field is ignored,
          and the rules are evaluated without a param.
        x-kab-description-zh: |-
          此字段给出用来配置准入控制策略的参数资源。
          字段值所指向的资源的类别应该与所绑定的 ValidatingAdmissionPolicy 的 `paramKind`
          相同。如果策略指定了 `paramKind`，而此 `paramRef` 所引用的资源并不存在，
          则认为绑定的配置是有问题的，要根据 ValidatingAdmissionPolicy 的 `failurePolicy`
          作进一步处理。
          如果策略没有设置 `paramKind`，则此字段会被忽略。
          执行准入规则时不考虑参数因素。
      policyName:
        description: |-
          `policyName` references a ValidatingAdmissionPolicy name which the
          ValidatingAdmissionPolicyBinding binds to.
          If the referenced resource does not exist, this binding is considered invalid and
          will be ignored. This string must be a valid DNS subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段引用所绑定的 ValidatingAdmissionPolicy。
          如果所引用的资源不存在，则此绑定的配置是非法的，并因而会被忽略。
          字段的字符串值必须是合法的 DNS 子域名。
      validationActions:
        description: |-
          This declares how validations of the referenced ValidatingAdmissionPolicy are enforced.
          If a validation evaluates to False, it is always enforced according to these actions.

          Failures defined by the ValidatingAdmissionPolicy's `failurePolicy` are enforced
          according to these actions only if the `failurePolicy` is set to `"Fail"`,
          otherwise the failures are ignored. This includes compilation errors,
          runtime errors and misconfigurations of the policy.

          The `validationActions` is declared as a set of action values. Order does not matter.
          The `validationActions` may not contain duplicates of the same action.

          The supported actions values are:

          - `"Deny"` specifies that a validation failure results in a denied request.
          - `"Warn"` specifies that a validation failure is reported to the request client
            in HTTP Warning headers, with a warning code of 299.
            Warnings can be sent both for allowed or denied admission responses.
          - `"Audit"` specifies that a validation failure is included in the published audit event
            for the request. The audit event will contain a
            `validation.policy.admission.k8s.io/validation_failure` audit annotation with
            a value containing the details of the validation failures, formatted as a JSON list of
            objects, each with the following fields:
              - `message`: The validation failure message string
              - `policy`: The resource name of the ValidatingAdmissionPolicy
              - `binding`: The resource name of the ValidatingAdmissionPolicyBinding
              - `expressionIndex`: The index of the failed validations in the
                ValidatingAdmissionPolicy
              - `validationActions`: The enforcement actions enacted for the validation failure.

          Example audit annotation:

          ```
          "validation.policy.admission.k8s.io/validation_failure":
            "[{\"message\": \"Invalid value\",
              {\"policy\": \"policy.example.com\",
                {\"binding\": \"policybinding.example.com\",
                  {\"expressionIndex\": \"1\",
                    {\"validationActions\": [\"Audit\"]}]"
          ```

          Clients should expect to handle additional values by ignoring any values not
          recognized.
          `"Deny"` and `"Warn"` may not be used together since this combination needlessly
          duplicates the validation failure both in the API response body and
          the HTTP warning headers.
        items:
          enum:
            - Audit
            - Deny
            - Warn
          type: string
        maxItems: 2
        minItems: 1
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          此字段用来配置如何实施所引用的 ValidatingAdmissionPolicy 中定义的检查。
          如果某项检查的评估结果为 False，则一定会根据这里的动作定义来实施。

          对于 ValidatingAdmissionPolicy 中 `failurePolicy` 所定义的失败策略，
          只有 `failurePolicy` 设置为 `"Fail"` 的时候，才会根据这里定义的动作来处理。
          否则策略失败会被忽略。这里的失败包括编译错误、运行时错误以及策略的配置问题等。

          此 `validationActions` 是一组动作值定义，其中各个动作定义的顺序并不重要，
          但是其中不可以包含重复的动作定义。

          目前支持的动作值包括：

          - `"Deny"` 设定检查失败会导致请求被拒绝；
          - `"Warn"` 设定检查失败会通过 HTTP Warning 标头报告给发送请求的客户端，
            警告代码为 299。被通过的和被拒绝的准入响应都可以发送警告信息。
          - `"Audit"` 设定检查失败会被记录到请求对应的、公开的审计事件中。
            审计事件会包含一个 `validation.policy.admission.k8s.io/validation_failure`
            审计注解，且其注解值为检查失败的详情。

          生成审计日志时，注解值是一个 JSON 对象列表，每个 JSON 对象包含以下字段：

          - `message`：检查失败消息字符串；
          - `policy`：ValidatingAdmissionPolicy 资源的名称；
          - `binding`：ValidatingAdmissionPolicyBinding 资源的名称；
          - `expressionIndex`：ValidatingAdmissionPolicy 中失败的检查的索引；
          - `validationActions`：针对检查失败所采取的动作。

          下面是一个审计注解的例子：

          ```
          "validation.policy.admission.k8s.io/validation_failure":
            "[{\"message\": \"Invalid value\",
              {\"policy\": \"policy.example.com\",
                {\"binding\": \"policybinding.example.com\",
                  {\"expressionIndex\": \"1\",
                    {\"validationActions\": [\"Audit\"]}]"
          ```

          客户端应该忽略无法识别的取值，进而能够处理额外的情况。

          `"Deny"` 和 `"Warn"` 不能同时使用，因为同时使用的话可能会在 API
          响应和 HTTP Warning 标头中同时记录检查失败的信息，这是不必要的。
        x-kubernetes-list-type: set
    required:
      - policyName
      - validationActions
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyBindingSpec 是对 ValidatingAdmissionPolicyBinding
      对象的行为规约。
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyList:
    description: ValidatingAdmissionPolicyList is a list of ValidatingAdmissionPolicy.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - admissionregistration.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of ValidatingAdmissionPolicy objects.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
        type: array
        x-kab-description-zh: ValidatingAdmissionPolicy 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ValidatingAdmissionPolicyList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyList 是 ValidatingAdmissionPolicy
      对象的列表。
    x-kubernetes-group-version-kind:
      - group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyList
        version: v1beta1
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicySpec:
    description: ValidatingAdmissionPolicySpec is the specification of the desired
      behavior of the AdmissionPolicy.
    properties:
      auditAnnotations:
        description: |-
          `auditAnnotations` contains CEL expressions which are used to produce
          audit annotations for the audit event of the API request.
          `validations` and `auditAnnotations` may not both be empty;
          at least one of `validations` or `auditAnnotations` is required.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.AuditAnnotation'
        type: array
        x-kab-description-zh: |-
          此字段包含 CEL 表达式，用来为 API 请求的审计事件生成审计注解。
          `validations` 和 `auditAnnotations` 不可以同时为空，但二者之一是必须设置的。
        x-kubernetes-list-type: atomic
      failurePolicy:
        default: Fail
        description: |-
          `failurePolicy` defines how to handle failures for the admission policy.
          Failures can occur from CEL expression parse errors, type check errors,
          runtime errors and invalid or mis-configured policy definitions or bindings.

          A policy is invalid if `spec.paramKind` refers to a non-existent kind.
          A binding is invalid if `spec.paramRef.name` refers to a non-existent resource.

          `failurePolicy` does not define how validations that evaluate to false are handled.

          When `failurePolicy` is set to `"Fail"`, ValidatingAdmissionPolicyBinding
          `validationActions` define how failures are enforced.
        enum:
          - Fail
          - Ignore
        type: string
        x-kab-description-zh: |-
          `failurePolicy` 定义如何处理准入策略的失败情况。
          失败可能缘于 CEL 表达式解析错误、类型检查错误、运行时错误，
          以及策略或绑定本身的配置不合法等等。

          当某个策略的 `spec.paramKind` 引用一个不存在的资源类别时，该策略是非法的。
          当某个绑定的 `spec.paramRef.name` 引用一个不存在的资源时，该绑定是非法的。

          `failurePolicy` 并不定义检查项评估结果为 False 的情况如何处理。
          当 `failurePolicy` 设置为 `"Fail"` 时，ValidatingAdmissionPolicyBinding
          的 `validationActions` 负责定义如何处理对应的失败。
      matchConditions:
        description: |-
          `matchConditions` is a list of conditions that must be met for a request to be validated.
          Match conditions filter requests that have already been matched by the `rules`,
          `namespaceSelector`, and `objectSelector`.
          An empty list of `matchConditions` matches all requests.

          If a parameter object is provided, it can be accessed via the `params` handle
          in the same manner as validation expressions.

          The `name` of the match conditions must be unique across the list.
          The exact matching logic is (in order):

          1. If ANY `matchCondition` evaluates to False, the policy is skipped.
          1. If ALL `matchConditions` evaluate to True, the policy is evaluated.
          1. If any `matchCondition` evaluates to an error (but none are False).
             If `failurePolicy=Fail`, reject the request;
             If `failurePolicy=Ignore`, the policy is skipped.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchCondition'
        maxItems: 64
        type: array
        x-kab-description-zh: |-
          此字段是一个列表值，其中包含请求要被检查之前所需满足的条件。
          这里设置的条件负责对已经通过 `rules`、`namespaceSelector` 和
          `objectSelector` 筛选的请求作进一步过滤。
          若此列表为空，则意味着匹配所有请求。

          如果提供了参数对象，可以和其他检查表达式一样，通过 `params` 句柄来访问。

          此列表中各个元素的 `name` 必须在整个列表中唯一。
          精确匹配的逻辑如下（按顺序执行）：
          1. 若 `matchCondition` 中的任一条目取值为 False，则策略被略过；
          1. 若 `matchConditions` 所有条目取值为 True，则对策略进行评估；
          1. 若 `matchCondition` 中任一条目评估出错（但都没有取 False 值）：
             如果 `failurePolicy=Fail`，则拒绝请求；如果 `failurePolicy=Ignore`，
             则策略会被略过。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      matchConstraints:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.MatchResources'
        description: |-
          `matchConstraints` specifies what resources this policy is designed to validate.
          The admission policy cares about a request if it matches _all_ constraints.
          However, in order to prevent clusters from being put into an unstable state that
          cannot be recovered from via the API, the ValidatingAdmissionPolicy
          cannot match the ValidatingAdmissionPolicyBinding.
        x-kab-description-zh: |-
          `matchConstraints` 设置此策略被设计用来检查的资源。
          只有某个请求匹配了这里的**所有**约束，才会被此准入策略处理。
          不过，为了避免将集群带入某种无法通过 API 来恢复的不稳定状态，
          ValidatingAdmissionPolicy 不可以用来匹配 ValidatingAdmissionPolicyBinding 资源。
      paramKind:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ParamKind'
        description: |-
          `paramKind` specifies the kind of resources used to parameterize this policy.
          If absent, there are no parameters for this policy and the param CEL variable
          will not be provided to validation expressions.
          If `paramKind` refers to a non-existent kind, this policy definition is mis-configured and
          the `failurePolicy` is applied.
          If `paramKind` is specified but `paramRef` is unset in the
          ValidatingAdmissionPolicyBinding, the params variable will be null.
        x-kab-description-zh: |-
          `paramKind` 设置用来为策略提供参数的资源的类别。
          此字段未设置时，策略没有额外的参数，检查表达式中也不存在 CEL 变量 `params`。
          如果 `paramKind` 引用的是一个不存在的类别，则此策略定义是非法的，
          需要根据 `failurePolicy` 策略作进一步处置。
          如果设置了 `paramKind`，但 ValidatingAdmissionPolicyBinding 中未设置
          `paramRef`，则 CEL 变量 `params` 为 Null 值。
      validations:
        description: |-
          `validations` contain CEL expressions which is used to apply the validation.
          `validations` and `auditAnnotations` may not both be empty; at least
          one of `validations` or `auditAnnotations` is required.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.Validation'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段包含用来执行检查的 CEL 表达式。
          `validations` 和 `auditAnnotations` 之中至少要设置其一。
        x-kubernetes-list-type: atomic
      variables:
        description: |-
          `variables` contain definitions of variables that can be used in composition of
          other expressions. Each variable is defined as a named CEL expression.
          The variables defined here will be available under `variables` in other expressions
          of the policy except `matchConditions` because `matchConditions` are evaluated
          before the rest of the policy.

          The expression of a variable can refer to other variables defined earlier in
          the list but not those after. Thus, variables must be sorted by the order of
          first appearance and acyclic.
        items:
          $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.Variable'
        type: array
        x-kab-description-zh: |-
          此字段包含一些变量的定义，这些变量可用于构造其他表达式。
          每个变量被定义为一个有名字的 CEL 表达式。
          这里定义的变量可以在策略中的其他表达式中用 `variables` 来引用，
          除了 `matchConditions`。这是因为`matchConditions` 的处理是早于策略的其他部分的。

          变量的表达式可以引用列表中先前定义的其他变量，但不能引用后来才定义的变量。
          因此，变量必须按出现的先后顺序排序，并且不允许存在循环引用。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - failurePolicy
      - matchConstraints
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicySpec 是准入策略预期行为的规约。
  io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyStatus:
    description: ValidatingAdmissionPolicyStatus represents the status of a ValidatingAdmissionPolicy.
    properties:
      conditions:
        description: The conditions represent the latest available observations of
          a policy's current state.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
        type: array
        x-kab-description-zh: 关于某策略的当前状态的最新监测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
      observedGeneration:
        description: The generation observed by the controller.
        format: int64
        type: integer
        x-kab-description-zh: 控制器所观测到的对象世代值。
      typeChecking:
        $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.TypeChecking'
        description: |-
          The results of type checking for each expression. Presence of this
          field indicates the completion of the type checking.
        x-kab-description-zh: |-
          各个表达式的类型检查结果。
          状态对象中存在此字段意味着类型检查已经结束。
    type: object
    x-kab-description-zh: ValidatingAdmissionPolicyStatus 代表某 ValidatingAdmissionPolicy
      对象的状态。
  io.k8s.api.admissionregistration.v1beta1.Validation:
    description: Validation specifies the CEL expression which is used to apply the
      validation.
    properties:
      expression:
        description: |-
          `expression` represents the expression which will be evaluated by
          [CEL](https://github.com/google/cel-spec).
          CEL expressions have access to the contents of the API request/response,
          organized into CEL variables as well as some other useful variables:

          - `object` - The object from the incoming request.
            The value is null for DELETE requests.
          - `oldObject` - The existing object. The value is null for CREATE requests.
          - `request` - Attributes of the API request which is an
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest) object.
          - `params` - Parameter resource referred to by the policy binding being evaluated.
            Only populated if the policy has a `paramKind`.
          - `namespaceObject` - The namespace object that the incoming object belongs to.
            The value is null for cluster-scoped resources.
          - `variables` - Map of composited variables, from its name to its lazily
            evaluated value.
            For example, a variable named `foo` can be accessed as `variables.foo`.
          - `authorizer` - A CEL Authorizer. May be used to perform authorization checks
            for the principal (user or ServiceAccount) of the request.
            See [Authz struct documentation](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz).
          - `authorizer.requestResource` - A CEL ResourceCheck constructed from the 'authorizer'
            and configured with the request resource.

          The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always
          accessible from the root of the object.
          No other metadata properties are accessible.

          Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
          Accessible property names are escaped according to the following rules when
          accessed in the expression:

          - '__' escapes to '__underscores__'
          - '.' escapes to '__dot__'
          - '-' escapes to '__dash__'
          - '/' escapes to '__slash__'
          - Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'.

          The keywords are:

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          Examples:

          - Expression accessing a property named `"namespace"`:
            `{"Expression": "object.__namespace__ > 0"}`
          - Expression accessing a property named `"x-prop"`:
            `{"Expression": "object.x__dash__prop > 0"}`
          - Expression accessing a property named `"redact__d"`:
            `{"Expression": "object.redact__underscores__d > 0"}`

          Equality on arrays with list type of `set` or `map` ignores element order,
          i.e. [1, 2] == [2, 1]. Concatenation on arrays with `x-kubernetes-list-type`
          use the semantics of the list type:

          - `set`: `X + Y` performs a union where the array positions of all elements
            in `X` are preserved and non-intersecting elements in `Y` are appended,
            retaining their partial order.
          - `map`: `X + Y` performs a merge where the array positions of all keys in `X`
            are preserved but the values are overwritten by values in `Y` when
            the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting
            keys are appended, retaining their partial order.
        type: string
        x-kab-description-zh: |-
          `expression` 包含要通过 [CEL](https://github.com/google/cel-spec) 来处理的表达式。
          API 请求和响应中的内容被组织成 CEL 变量，和一些其他的有用变量一起供 CEL 表达式访问：

          - `object` - 来自集接收到的请求中的对象。对于 DELETE 请求而言，此变量值为 null。
          - `oldObject` - 现有的对象。对于 CREATE 请求而言，此变量值为 null。
          - `request` - API 请求（类型为
            [AdmissionRequest](https://pkg.go.dev/k8s.io/apiserver/pkg/apis/admission/types.go#AdmissionRequest)
            对象）的属性。
          - `params` - 当前评估的策略所引用的参数资源内容。
            只有策略设置了 `paramKind` 时可用。
          - `namespaceObject` - 接收到的对象所属的名字空间对象。
            对于集群作用域的对象，此变量值为 null。
          - `variables` - 复合类型的变量，是一个从变量名到懒惰求值表达式的映射。
            例如，一个名为 `foo` 的变量可以用 `variables.foo` 的形式访问。
          - `authorizer` - 一个 CEL 鉴权组件（Authorizer），可用来对请求的主体（用户或者
            ServiceAccount）执行鉴权检查。
            参见 [Authz 结构文档](https://pkg.go.dev/k8s.io/apiserver/pkg/cel/library#Authz)。
          - `authorizer.requestResource` - 根据 `authorizer` 配置构造的 CEL ResourceCheck
            结构，根据请求资源作了定制。

          字段 `apiVersion`、`kind`、`metadata.name` 和 `metadata.generateName`
          都是可以通过对象的根来访问的。对象的其他元数据属性都无法访问。

          表达式只能访问格式为 `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` 的属性。
          在表达式中使用可访问的属性名时，会根据下面的规则做转义处理：

          - `__` 被转义为 `__underscores__`
          - `.` 被转义为 `__dot__`
          - `-` 被转义为 `__dash__`
          - `/` 被转义为 `__slash__`
          - 与 CEL 保留的关键字完全重名的属性名会被转移为 '__{keyword}__'

          CEL 的内置关键字包括：

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          示例：

          - 访问名为 `"namespace"` 的属性：
            `{"Expression": "object.__namespace__ > 0"}`
          - 访问名为 `"x-prop"` 的属性：
            `{"Expression": "object.x__dash__prop > 0"}`
          - 访问名为 `"redact__d"` 的属性：
            `{"Expression": "object.redact__underscores__d > 0"}`

          对于列表类型为 `set` 或 `map` 的两个数组而言，判断其是否相等时，会忽略元素的顺序，
          即 `[1, 2] == [2, 1]`。
          对于设置了 `x-kubernetes-list-type` 的数组进行串接时，会根据列表类型的语义来处理：

          - `set`：`X + Y` 会执行数组取并集的操作，数组 `X` 中所有元素的位置不会发生变化，
            `Y` 是原来不在 `X` 内的元素会被追加在后面，且保留其原来的顺序。
          - `map`：`X + Y` 会执行一个合并操作，`X` 中的所有主键的位置被保留，
            但是当 `X` 和 `Y` 是的主键集合相交时，`X` 中主键的取值会被 `Y` 中的取值覆盖。
            原来不在 `X` 内的 `Y` 中元素会被追加到后面，且保留其原来的顺序。
      message:
        description: |-
          `message` represents the message displayed when validation fails.
          The message must not contain line breaks.
          If the `expression` contains line breaks. `message` is required.
          If unset, the message is "failed Expression: {Expression}".'
          e.g. "must be a URL with the host matching spec.host".
          The string, when trimmed, cannot be empty string.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          `message` 给出的是检查失败时要显示的错误信息。
          `message` 的内容中不能包含换行符。
          如果`expression` 中包含换行符时，需要设置此字段。
          如果没有设置此字段，则错误信息为 `"failed expression: {expression}"`。
          例如：`"must be a URL with the host matching spec.host"`。
          此字段经过头尾去空格处理之后，不可以是空字符串。
      messageExpression:
        description: |-
          `messageExpression` declares a CEL expression that evaluates to the validation
          failure message that is returned when this rule fails.
          Since `messageExpression` is used as a failure message, it must evaluate to a string.
          If both `message` and `messageExpression` are present on a validation, then
          `messageExpression` will be used if validation fails.
          If `messageExpression` results in a runtime error, the runtime error is logged,
          and the validation failure message is produced as if the `messageExpression` field
          were unset.
          If `messageExpression` evaluates to an empty string, a string with only spaces,
          or a string that contains line breaks, then the validation failure message will
          also be produced as if the `messageExpression` field were unset, and the fact
          that messageExpression produced an empty string/string with only spaces/string
          with line breaks will be logged.
          `messageExpression` has access to all the same variables as the `expression` except
          for `authorizer` and `authorizer.requestResource`.

          Example: `"object.x must be less than max ("+string(params.max)+")"`
        type: string
      reason:
        default: Invalid
        description: |-
          `reason` represents a machine-readable description of why this validation
          failed. If this is the first validation in the list to fail, this reason, as
          well as the corresponding HTTP response code, are used in the HTTP response
          to the client. The currently supported reasons are: `"Unauthorized"`, `"Forbidden"`,
          `"Invalid"`, `"RequestEntityTooLarge"`.
          If not set, `"Invalid"` is used in the response to the client.
        enum:
          - Forbidden
          - Invalid
          - RequestEntityTooLarge
          - Unauthorized
        type: string
        x-kab-description-zh: |-
          `reason` 给出的是一个机器可读的字符串，描述当前检查为何失败。
          如果当前检查是整个检查列表中第一个失败的条目，则失败的原因以及对应的
          HTTP 响应代码会包含在提供给客户端的 HTTP 响应中。
          目前支持的 `reason` 值有：`"Unauthorized"`、`"Forbidden"`、`"Invalid"`,
          `"RequestEntityTooLarge"`。
          如果没有设置此字段，则向客户端发送响应时会使用 `"Invalid"`。
    required:
      - expression
    type: object
    x-description-zh: Validation 设置实施检查时要使用的 CEL 表达式。
  io.k8s.api.admissionregistration.v1beta1.Variable:
    description: |-
      Variable is the definition of a variable that is used for composition.
      A variable is defined as a named expression.
    properties:
      expression:
        description: |-
          The expression that will be evaluated as the value of the variable.
          The CEL expression has access to the same identifiers as the CEL expressions
          in `validation`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          将被处理为变量取值的一个表达式。此 CEL 表达式所能访问到的标识符与
          `Validation` 结构中的 CEL 表达式相同。
      name:
        description: |-
          The name of the variable. The name must be a valid CEL identifier
          (matching the pattern but cannot be one of the keywords) and unique among all
          variables. The variable can be accessed in other expressions through `variables`.
          For example, if `name` is `"foo"`, the variable will be available as `variables.foo`.
        minLength: 1
        pattern: '[_a-zA-Z][_a-zA-Z0-9]*'
        type: string
        x-kab-description-zh: |-
          变量的名称。此名称字符串必须是一个合法的 CEL 标识符
          （满足其正则表达式要求且不能是其关键字之一），
          并且在所有变量中不存在重名的情况。
          在其他表达式中可以通过 `variables` 来访问此变量。
          例如，如果这里的 `name` 是 `"foo"`，则可以通过 `variables.foo` 来访问它。
    required:
      - expression
      - name
    type: object
    x-kab-description-zh: |-
      Variable 是用来构造复合表达式的变量的定义。
      变量被定义为一个有名字的表达式。
    x-kubernetes-map-type: atomic
  io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion:
    description: |-
      An API server instance reports the version it can decode and the version
      it encodes objects to when persisting objects in the backend.
    properties:
      apiServerID:
        description: The ID of the reporting API server. The ID must be a valid DNS
          subdomain name.
        type: string
        x-kab-description-zh: 发出报告的 API 服务器的 ID。此 ID 值必须是合法的 DNS 子域名。
      decodableVersions:
        description: |-
          The API server can decode objects encoded in these versions.
          The `encodingVersion` must be included in the `decodableVersions`.
        items:
          description: |-
            Each value must be a string that matches DNS_LABEL format, with an optional
            `<group>/` prefix where the `<group>` string is a valid DNS subdomain name.
          minLength: 1
          type: string
          x-kab-description-zh: |-
            列表中的每个条目都必须是符合 DNS_LABEL 格式要求的字符串，可以带 `<group>/` 前缀。
            `<group>` 字符串必须是合法的 DNS 子域名。
        type: array
        x-kab-description-zh: |-
          API 服务器能够对以这里的版本编码的对象进行解码。
          `encodingVersion` 必须包含在 `decodableVersions` 中。
        x-kubernetes-list-type: set
      encodingVersion:
        description: |-
          The API server encodes the object to this version when persisting it in the backend
          (e.g., etcd). The value must be a string that matches DNS_LABEL format,
          with an optional `<group>/` prefix where the `<group>` string is a valid DNS subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          API 服务器在后台将对象写入持久存储（例如 etcd）时会使用这里给定的版本。
          此字段的取值必须是一个符合 DNS_LABEL 格式要求的字符串，可以带 `<group>/` 前缀。
          `<group>` 字符串必须是合法的 DNS 子域名。
      servedVersions:
        description: |-
          The API server can serve these versions.
          `decodableVersions` must include all `servedVersions`.
        items:
          description: |-
            One of the served versions.
            The value must be a string that matches DNS_LABEL format, with an optional
            `<group>/` prefix where the `<group>` string is a valid DNS subdomain name.
          minLength: 1
          type: string
          x-kab-description-zh: |-
            API 服务器所提供的版本之一。
            字符串值必须是一个符合 DNS_LABEL 格式要求的字符串，可以带 `<group>/` 前缀。
            `<group>` 字符串必须是合法的 DNS 子域名。
        type: array
        x-kab-description-zh: |-
          API 服务器可以提供这里列举的版本。
          `decodableVersions` 必须包含所有的 `servedVersions`。
        x-kubernetes-list-type: set
    type: object
    x-kab-description-zh: API 服务器报告它所能够解码的版本，以及它将对象写入后台持久存储时使用的编码版本。
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.CREATE:
    description: Storage version of a specific resource.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - internal.apiserver.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - StorageVersion
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          The name is `<group>.<resource>` where `<group>` must be a valid
          DNS subdomain name and `<resource>` must be a valid DNS_LABEL.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 是 `<group>.<resource>` 格式的。
          其中 `<group>` 必须是合法的 DNS 子域名，而 `<resource>` 必须是合法的 DNS_LABEL。
      spec:
        $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec'
        description: This field is an empty spec. It is here to comply with Kubernetes
          API style.
        x-kab-description-zh: 此字段是一个空的规约。包含此字段的目的是为了与 Kubernetes API 风格相符。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 特定资源的存储版本。
    x-kubernetes-group-version-kind:
      - group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET:
    description: Storage version of a specific resource.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - internal.apiserver.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - StorageVersion
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: |-
          The name is `<group>.<resource>` where `<group>` must be a valid
          DNS subdomain name and `<resource>` must be a valid DNS_LABEL.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 是 `<group>.<resource>` 格式的。
          其中 `<group>` 必须是合法的 DNS 子域名，而 `<resource>` 必须是合法的 DNS_LABEL。
      spec:
        $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec'
        description: This field is an empty spec. It is here to comply with Kubernetes
          API style.
        x-kab-description-zh: 此字段是一个空的规约。包含此字段的目的是为了与 Kubernetes API 风格相符。
      status:
        $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus'
        description: |-
          API server instances report the version they can decode and the version
          they encode objects to when persisting objects in the backend.
        x-kab-description-zh: API 服务器实例报告它们所能够解码的对象版本， 以及它们在后台将对象写入持久性存储时所采用的编码版本。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: 特定资源的存储版本。
    x-kubernetes-group-version-kind:
      - group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.UPDATE:
    description: Storage version of a specific resource.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - internal.apiserver.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - StorageVersion
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: The name is `<group>.<resource>` where `<group>` must be a valid
          DNS subdomain name and `<resource>` must be a valid DNS_LABEL.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 是 `<group>.<resource>` 格式的。
          其中 `<group>` 必须是合法的 DNS 子域名，而 `<resource>` 必须是合法的 DNS_LABEL。
      spec:
        $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec'
        description: This field is an empty spec. It is here to comply with Kubernetes
          API style.
        x-kab-description-zh: 此字段是一个空的规约。包含此字段的目的是为了与 Kubernetes API 风格相符。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 特定资源的存储版本。
    x-kubernetes-group-version-kind:
      - group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition:
    description: Describes the state of the StorageVersion at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human readable message indicating details about the transition.
        minLength: 1
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      observedGeneration:
        description: |-
          If set, this represents the `metadata.generation` that the condition
          was set based upon.
        format: int64
        type: integer
        x-kab-description-zh: 此字段如果被设置，所表示的是状况被设置时所针对的 `metadata.generation`。
      reason:
        description: The reason for the condition's last transition.
        minLength: 1
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          Type of the condition. This must be unique in the `conditions` map.
          The string must be a qualified name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          状况的类型。在整个 `conditions` 映射中，`type` 的取值不可重复。
          此字符串必须是一个限定名。
    required:
      - message
      - reason
      - status
      - type
    type: object
    x-kab-description-zh: 描述 StorageVersion 对象在某个时间点的状态。
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList:
    description: A list of StorageVersion objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - internal.apiserver.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of StorageVersion objects.
        items:
          $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
        type: array
        x-kab-description-zh: StorageVersion 对象的一个列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - StorageVersionList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: StorageVersion 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: internal.apiserver.k8s.io
        kind: StorageVersionList
        version: v1alpha1
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersionSpec:
    description: StorageVersionSpec is an empty spec.
    type: object
    x-kab-description-zh: StorageVersionSpec 是一个空的规约。
  io.k8s.api.apiserverinternal.v1alpha1.StorageVersionStatus:
    description: |-
      API server instances report the versions they can decode and the version
      they encode objects to when persisting objects in the backend.
    properties:
      commonEncodingVersion:
        description: |-
          If all API server instances agree on the same encoding storage version,
          then this field is set to that version. Otherwise this field is left empty.
          API servers should finish updating its `storageVersionStatus` entry before serving
          write operations, so that this field will be in sync with the reality.
        type: string
        x-kab-description-zh: |-
          如果所有的 API 服务器实例都同一使用相同的编码存储版本，
          这个字段的值即是对应的版本。否则此字段会是空字符串。
          API 服务器应该在完成更新其 `storageVersionStatus` 项之后才为写操作提供服务，
          这样的话此字段的取值才能与事实情况相符。
      conditions:
        description: The latest available observations of the StorageVersion's state.
        items:
          $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionCondition'
        type: array
        x-kab-description-zh: StorageVersion 状态的最新观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
      storageVersions:
        description: The reported versions per API server instance.
        items:
          $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.ServerStorageVersion'
        type: array
        x-kab-description-zh: 各个 API 服务器实例所报告的版本。
        x-kubernetes-list-map-keys:
          - apiServerID
        x-kubernetes-list-type: map
    required:
      - commonEncodingVersion
      - conditions
      - storageVersions
    type: object
    x-kab-description-zh: API 服务器实例报告它所能够解码的版本，以及它将对象写入后台持久存储时使用的编码版本。
  io.k8s.api.apps.v1.ControllerRevision.CREATE:
    description: |-
      An immutable snapshot of state data. Clients are responsible for serializing
      and deserializing the objects that contain their internal state.
      Once a `ControllerRevision` has been successfully created, it can not be updated.
      The API server will fail validating all requests that attempt to mutate the `data` field.
      A `ControllerRevision` object may be deleted.
      Note that, due to its use by both the `DaemonSet` and `StatefulSet` controllers
      for update and rollback, this object is Beta.
      However, it may be subject to name and representation changes in future releases,
      and clients should not depend on its stability.
      It is primarily for internal use by controllers.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      data:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: The serialized representation of the state. This cannot be updated.
        x-kab-description-zh: 状态的序列化表示。此字段不可更新。
      kind:
        description: A string value representing the REST resource
        enum:
          - ControllerRevision
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      revision:
        description: The revision of the state represented by `data`.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: '`data` 字段所表示的状态的修订版本号。'
    required:
      - apiVersion
      - data
      - kind
      - metadata
      - revision
    type: object
    x-kab-description-zh: |-
      此对象是状态数据的一份不可变更的快照。客户端需要负责通过序列化来写入、
      或者通过反序列化来读取包含其内部状态的对象。
      一旦成功创建了 `ControllerRevision` 之后，该对象就不可以再被更改。
      API 服务器会在对所有尝试变更 `data` 字段的请求进行合法性检查时返回错误。
      `ControllerRevision` 对象可以被删除。
      需要注意的是，由于 `DaemonSet` 和 `StatefulSet` 控制器都使用了这个字段来执行更新与回滚，
      对象的成熟度是 Beta 阶段。
      不过，在未来的版本中，此资源的名称及其表示形式都可能发生变化，
      客户端不要假定这个字段是稳定的。
      此字段的存在目的主要是为控制器提供服务。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ControllerRevision
        version: v1
  io.k8s.api.apps.v1.ControllerRevision.GET:
    description: |-
      An immutable snapshot of state data. Clients are responsible for serializing
      and deserializing the objects that contain their internal state.
      Once a `ControllerRevision` has been successfully created, it can not be updated.
      The API server will fail validating all requests that attempt to mutate the `data` field.
      A `ControllerRevision` object may be deleted.
      Note that, due to its use by both the `DaemonSet` and `StatefulSet` controllers
      for update and rollback, this object is Beta.
      However, it may be subject to name and representation changes in future releases,
      and clients should not depend on its stability.
      It is primarily for internal use by controllers.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      data:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: The serialized representation of the state. This cannot be updated.
        x-kab-description-zh: 状态的序列化表示。此字段不可更新。
      kind:
        description: A string value representing the REST resource
        enum:
          - ControllerRevision
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      revision:
        description: The revision of the state represented by `data`.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: '`data` 字段所表示的状态的修订版本号。'
    required:
      - apiVersion
      - data
      - kind
      - metadata
      - revision
    type: object
    x-kab-description-zh: |-
      此对象是状态数据的一份不可变更的快照。客户端需要负责通过序列化来写入、
      或者通过反序列化来读取包含其内部状态的对象。
      一旦成功创建了 `ControllerRevision` 之后，该对象就不可以再被更改。
      API 服务器会在对所有尝试变更 `data` 字段的请求进行合法性检查时返回错误。
      `ControllerRevision` 对象可以被删除。
      需要注意的是，由于 `DaemonSet` 和 `StatefulSet` 控制器都使用了这个字段来执行更新与回滚，
      对象的成熟度是 Beta 阶段。
      不过，在未来的版本中，此资源的名称及其表示形式都可能发生变化，
      客户端不要假定这个字段是稳定的。
      此字段的存在目的主要是为控制器提供服务。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ControllerRevision
        version: v1
  io.k8s.api.apps.v1.ControllerRevision.UPDATE:
    description: |-
      An immutable snapshot of state data. Clients are responsible for serializing
      and deserializing the objects that contain their internal state.
      Once a `ControllerRevision` has been successfully created, it can not be updated.
      The API server will fail validating all requests that attempt to mutate the `data` field.
      A `ControllerRevision` object may be deleted.
      Note that, due to its use by both the `DaemonSet` and `StatefulSet` controllers
      for update and rollback, this object is Beta.
      However, it may be subject to name and representation changes in future releases,
      and clients should not depend on its stability.
      It is primarily for internal use by controllers.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      data:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: The serialized representation of the state. This cannot be updated.
        x-kab-description-zh: 状态的序列化表示。此字段不可更新。
      kind:
        description: A string value representing the REST resource
        enum:
          - ControllerRevision
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      revision:
        description: The revision of the state represented by `data`.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: '`data` 字段所表示的状态的修订版本号。'
    required:
      - apiVersion
      - kind
      - revision
    type: object
    x-kab-description-zh: |-
      此对象是状态数据的一份不可变更的快照。客户端需要负责通过序列化来写入、
      或者通过反序列化来读取包含其内部状态的对象。
      一旦成功创建了 `ControllerRevision` 之后，该对象就不可以再被更改。
      API 服务器会在对所有尝试变更 `data` 字段的请求进行合法性检查时返回错误。
      `ControllerRevision` 对象可以被删除。
      需要注意的是，由于 `DaemonSet` 和 `StatefulSet` 控制器都使用了这个字段来执行更新与回滚，
      对象的成熟度是 Beta 阶段。
      不过，在未来的版本中，此资源的名称及其表示形式都可能发生变化，
      客户端不要假定这个字段是稳定的。
      此字段的存在目的主要是为控制器提供服务。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ControllerRevision
        version: v1
  io.k8s.api.apps.v1.ControllerRevisionList:
    description: A list of ControllerRevision objects
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ControllerRevision objects.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
        type: array
        x-kab-description-zh: 一个包含 ControllerRevision 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - ControllerRevisionList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 一个包含 ControllerRevision 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ControllerRevisionList
        version: v1
  io.k8s.api.apps.v1.DaemonSet.CREATE:
    description: The configuration of a DaemonSet.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - DaemonSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.CREATE'
        description: The desired behavior of this DaemonSet.
        x-kab-description-zh: 此 DaemonSet 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: DaemonSet 的配置信息。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: DaemonSet
        version: v1
  io.k8s.api.apps.v1.DaemonSet.GET:
    description: The configuration of a DaemonSet.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - DaemonSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.GET'
        description: The desired behavior of this DaemonSet.
        x-kab-description-zh: 此 DaemonSet 的预期行为。
      status:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetStatus'
        description: |-
          The current status of this DaemonSet. This data may be out of date
          by some window of time.
        x-kab-description-zh: 此 DaemonSet 的当前状态。这里的状态数据可能比实际情况滞后一定的时间。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: DaemonSet 的配置信息。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: DaemonSet
        version: v1
  io.k8s.api.apps.v1.DaemonSet.UPDATE:
    description: The configuration of a DaemonSet.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - DaemonSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetSpec.UPDATE'
        description: The desired behavior of this DaemonSet.
        x-kab-description-zh: 此 DaemonSet 的预期行为。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: DaemonSet 的配置信息。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: DaemonSet
        version: v1
  io.k8s.api.apps.v1.DaemonSetCondition:
    description: The state of a DaemonSet at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human readable message indicating details about the transition.
        minLength: 1
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of DaemonSet condition.
        minLength: 1
        type: string
        x-kab-description-zh: DaemonSet 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: DaemonSet 在某个时间点的状态。
  io.k8s.api.apps.v1.DaemonSetList:
    description: A list of DaemonSet objects
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of DaemonSet objects.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
        type: array
        x-kab-description-zh: 一个包含 DaemonSet 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - DaemonSetList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 一个包含 DaemonSet 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: DaemonSetList
        version: v1
  io.k8s.api.apps.v1.DaemonSetSpec.CREATE:
    description: The specification of a DaemonSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          The minimum number of seconds for which a newly created DaemonSet Pod should be ready
          without any of its container crashing, for it to be considered available.
          Default value 0 means the Pods will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 DaemonSet Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      revisionHistoryLimit:
        default: 10
        description: |-
          The number of old history to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          出于回滚需要，应为此 DeamonSet 保留的历史记录个数。
          实现上，这一字段是一个指针，用来区别设置与否和数值是否为零的情况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that are managed by the DaemonSet.
          Must match in order to be controlled. It must match the Pod template's labels.
        x-kab-description-zh: |-
          一个标签查询算子，用来确定要由此 DaemonSet 来管理的 Pod 集合。
          Pod 的标签必须与此算符匹配才会被管理。这里设置的值还必须与 Pod 模板中给出的 `labels` 一致。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: |-
          An object that describes the Pod that will be created.
          The DaemonSet will create exactly one copy of this Pod on every node that matches the template's
          node selector (or on every node if no node selector is specified).
          The only allowed `template.spec.restartPolicy` value is `"Always"`.
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。在每个与模板中节点选择算符匹配的节点上，
          DaemonSet 都会创建此 Pod 的一个副本。
          模板中未设置节点选择算符时，DaemonSet 会在每个节点上创建一个 Pod 副本。
          注意 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
      updateStrategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy'
        description: An update strategy to replace existing DaemonSet Pods with new
          Pods.
        x-kab-description-zh: 用新 Pod 替换现有的 DaemonSet Pod 时使用的更新策略。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: DaemonSet 的规约。
  io.k8s.api.apps.v1.DaemonSetSpec.GET:
    description: The specification of a DaemonSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          The minimum number of seconds for which a newly created DaemonSet Pod should be ready
          without any of its container crashing, for it to be considered available.
          Default value 0 means the Pods will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 DaemonSet Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      revisionHistoryLimit:
        default: 10
        description: |-
          The number of old history to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          出于回滚需要，应为此 DeamonSet 保留的历史记录个数。
          实现上，这一字段是一个指针，用来区别设置与否和数值是否为零的情况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that are managed by the DaemonSet.
          Must match in order to be controlled. It must match the Pod template's labels.
        x-kab-description-zh: |-
          一个标签查询算子，用来确定要由此 DaemonSet 来管理的 Pod 集合。
          Pod 的标签必须与此算符匹配才会被管理。这里设置的值还必须与 Pod 模板中给出的 `labels` 一致。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: |-
          An object that describes the Pod that will be created.
          The DaemonSet will create exactly one copy of this Pod on every node that matches the template's
          node selector (or on every node if no node selector is specified).
          The only allowed `template.spec.restartPolicy` value is `"Always"`.
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。在每个与模板中节点选择算符匹配的节点上，
          DaemonSet 都会创建此 Pod 的一个副本。
          模板中未设置节点选择算符时，DaemonSet 会在每个节点上创建一个 Pod 副本。
          注意 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
      updateStrategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy'
        description: An update strategy to replace existing DaemonSet Pods with new
          Pods.
        x-kab-description-zh: 用新 Pod 替换现有的 DaemonSet Pod 时使用的更新策略。
    required:
      - minReadySeconds
      - revisionHistoryLimit
      - selector
      - template
      - updateStrategy
    type: object
    x-kab-description-zh: DaemonSet 的规约。
  io.k8s.api.apps.v1.DaemonSetSpec.UPDATE:
    description: The specification of a DaemonSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          The minimum number of seconds for which a newly created DaemonSet Pod should be ready
          without any of its container crashing, for it to be considered available.
          Default value 0 means the Pods will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 DaemonSet Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      revisionHistoryLimit:
        default: 10
        description: |-
          The number of old history to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          出于回滚需要，应为此 DeamonSet 保留的历史记录个数。
          实现上，这一字段是一个指针，用来区别设置与否和数值是否为零的情况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that are managed by the DaemonSet.
          Must match in order to be controlled. It must match the Pod template's labels.
        x-kab-description-zh: |-
          一个标签查询算子，用来确定要由此 DaemonSet 来管理的 Pod 集合。
          Pod 的标签必须与此算符匹配才会被管理。这里设置的值还必须与 Pod 模板中给出的 `labels` 一致。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: |-
          An object that describes the Pod that will be created.
          The DaemonSet will create exactly one copy of this Pod on every node that matches the template's
          node selector (or on every node if no node selector is specified).
          The only allowed `template.spec.restartPolicy` value is `"Always"`.
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。在每个与模板中节点选择算符匹配的节点上，
          DaemonSet 都会创建此 Pod 的一个副本。
          模板中未设置节点选择算符时，DaemonSet 会在每个节点上创建一个 Pod 副本。
          注意 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
      updateStrategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetUpdateStrategy'
        description: An update strategy to replace existing DaemonSet Pods with new
          Pods.
        x-kab-description-zh: 用新 Pod 替换现有的 DaemonSet Pod 时使用的更新策略。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: DaemonSet 的规约。
  io.k8s.api.apps.v1.DaemonSetStatus:
    description: The current state of a DaemonSet.
    properties:
      collisionCount:
        description: |-
          The count of hash collisions for the DaemonSet.
          The DaemonSet controller uses this field as a collision avoidance mechanism when
          it needs to create the name for the newest `ControllerRevision`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          DaemonSet 上发生的哈希冲突计数。
          DaemonSet 控制器在为最新的 `ControllerRevision` 生成名字时，
          使用此字段来作为一种冲突避免机制，
      conditions:
        description: The latest observations of the DaemonSet's state.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetCondition'
        type: array
        x-kab-description-zh: 关于 DaemonSet 状态的最新观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      currentNumberScheduled:
        description: |-
          The number of nodes that are running at least 1 DaemonSet Pod and are
          supposed to run the DaemonSet Pod.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 当前应该运行 DaemonSet Pod 并且至少运行了一个 DaemonSet Pod 的节点个数。
      desiredNumberScheduled:
        description: |-
          The total number of nodes that should be running the daemon Pod
          (including nodes correctly running the daemon Pod).
        format: int32
        type: integer
        x-kab-description-zh: 当前应该运行此 DaemonSet 的 Pod 的节点个数（包括那些已经在运行 DaemonSet Pod
          的节点）。
      numberAvailable:
        description: |-
          The number of nodes that should be running the daemon Pod and have one or more of
          the daemon Pod running and available (ready for at least `spec.minReadySeconds`).
        format: int32
        type: integer
        x-kab-description-zh: |-
          当前运行着 DaemonSet Pod 且至少有一个 Pod 处于运行且就可用的节点个数。
          这里的“可用”指的是 Pod 至少处于就绪状态 `spec.minReadySeconds` 秒。
      numberMisscheduled:
        description: The number of nodes that are running the daemon Pod, but are
          not supposed to run the daemon Pod.
        format: int32
        type: integer
        x-kab-description-zh: 当前运行着 DaemonSet 的 Pod，但理论上不应该运行其 Pod 的节点个数。
      numberReady:
        description: |-
          The number of nodes that should be running the daemon Pod and have one or more of
          the daemon Pod running with a `Ready` condition.
        format: int32
        type: integer
        x-kab-description-zh: 当前运行着 DaemonSet 的 Pod 且至少有一个 Pod 处于 `Ready` 状况的节点个数。
      numberUnavailable:
        description: |-
          The number of nodes that should be running the daemon Pod and have
          none of the daemon Pod running and available (ready for at least `spec.minReadySeconds`)
        format: int32
        type: integer
        x-kab-description-zh: 当前应该运行 DaemonSet 的 Pod，但没有 Pod 处于 `Ready` 状况的节点个数。
      observedGeneration:
        description: The most recent generation observed by the DaemonSet controller.
        format: int64
        type: integer
        x-kab-description-zh: DaemonSet 控制器所观测到的最新的代数。
      updatedNumberScheduled:
        description: The total number of nodes that are running updated DaemonSet
          Pod.
        format: int32
        type: integer
        x-kab-description-zh: 当前运行着更新后的 DaemonSet Pod 的节点个数。
    required:
      - currentNumberScheduled
      - desiredNumberScheduled
      - numberMisscheduled
      - numberReady
    type: object
    x-kab-description-zh: DaemonSet 的当前状态。
  io.k8s.api.apps.v1.DaemonSetUpdateStrategy:
    description: The update strategy for a DaemonSet.
    properties:
      rollingUpdate:
        $ref: '#/definitions/io.k8s.api.apps.v1.RollingUpdateDaemonSet'
        description: |-
          Rolling update configuration parameters. Present only if `type` is set to `"RollingUpdate"`.
          This is required for rolling update.
      type:
        default: RollingUpdate
        description: |-
          Type of DaemonSet update. Possible enum values:

          - `"OnDelete"`: Replace the old Pod only when it's killed.
          - `"RollingUpdate"` Replace the old Pod by new ones using rolling update.
            i.e replace them on each node one after the other.
        enum:
          - OnDelete
          - RollingUpdate
        type: string
        x-kab-description-zh: |-
          DaemonSet 更新的类型。可能的枚举值有：

          - `"OnDelete"`: 当旧的 Pod 被杀死时执行替换。
          - `"RollingUpdate"` 通过滚动更新方式用新的 Pod 替换旧的 Pod。
            也就是逐个节点地完成替换操作。
    type: object
    x-kab-description-zh: DaemonSet 的更新策略。
  io.k8s.api.apps.v1.Deployment.CREATE:
    description: Deployment enables declarative updates for Pods and ReplicaSets.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Deployment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentSpec.CREATE'
        description: Specification of the desired behavior of the Deployment.
        x-kab-description-zh: 此 Deployment 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: Deployment 负责对 Pod 和 ReplicaSet 执行声明式的更新。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: Deployment
        version: v1
  io.k8s.api.apps.v1.Deployment.GET:
    description: Deployment enables declarative updates for Pods and ReplicaSets.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Deployment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentSpec.GET'
        description: Specification of the desired behavior of the Deployment.
        x-kab-description-zh: 此 Deployment 的预期行为。
      status:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentStatus'
        description: The current information/status for the Deployment.
        x-kab-description-zh: 此 Deployment 的当前信息与状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: Deployment 负责对 Pod 和 ReplicaSet 执行声明式的更新。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: Deployment
        version: v1
  io.k8s.api.apps.v1.Deployment.UPDATE:
    description: Deployment enables declarative updates for Pods and ReplicaSets.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Deployment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentSpec.UPDATE'
        description: Specification of the desired behavior of the Deployment.
        x-kab-description-zh: 此 Deployment 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Deployment 负责对 Pod 和 ReplicaSet 执行声明式的更新。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: Deployment
        version: v1
  io.k8s.api.apps.v1.DeploymentCondition:
    description: The state of a Deployment at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      lastUpdateTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time this condition was updated.
        x-kab-description-zh: 状况的上次更新时间。
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of Deployment condition.
        enum:
          - Available
          - Progressing
          - ReplicaFailure
        minLength: 1
        type: string
        x-kab-description-zh: Deployment 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: Deployment 在某个时间点的状态。
  io.k8s.api.apps.v1.DeploymentList:
    description: A list of Deployment objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Deployment objects.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
        type: array
        x-kab-description-zh: 一个包含 Deployment 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - DeploymentList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 一个包含 Deployment 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: DeploymentList
        version: v1
  io.k8s.api.apps.v1.DeploymentSpec.CREATE:
    description: The specification of the desired behavior of the Deployment.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its container crashing, for it to be considered available.
          Defaults to 0 which means a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      paused:
        description: |-
          Indicates that the Deployment is paused and will not be processed
          by the Deployment controller.
        type: boolean
        x-kab-description-zh: 表明 Deployment 当前被暂停，并且不会被 Deployment 控制器处理。
      progressDeadlineSeconds:
        default: 600
        description: |-
          The maximum time in seconds for a Deployment to make progress before it is considered to be failed.
          The Deployment controller will continue to process failed Deployments and a condition with a
          `"ProgressDeadlineExceeded"` reason will be surfaced in the Deployment `status`.
          Note that progress will not be estimated during the time a Deployment is paused.
          The value must be greater than the `minReadySeconds`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Deployment 操作至少要在这里所给的秒数之内取得进展，否则会被视为处于失败状态。
          Deployment 的控制器会继续处理失败的 Deployment，不过会在 Deployment 的 `status`
          中添加原因为 `"ProgressDeadlineExceeded"` 的状况。
          需要注意的是，在 Deployment 被暂停的时候，控制器不再对进展时间进行跟踪。
          此值必须大于 `minReadySeconds` 属性值。
      replicas:
        default: 1
        description: Number of desired Pods. This is a pointer to distinguish between
          explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 预期的 Pod 副本个数。实现上，此字段是一个指针，用来显式区分设置与否和设置值是否为零的状况。
      revisionHistoryLimit:
        default: 10
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          出于回滚需要，应为此 Deployment 保留的历史记录个数。
          实现上，这一字段是一个指针，用来区别设置与否和数值是否为零的情况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Label selector for Pods. Existing ReplicaSets whose Pods are selected
          by this will be the ones affected by this Deployment. It must match the Pod
          template's labels. The `matchLabels` and `matchExpressions` cannot be both empty.
        x-kab-description-zh: |-
          此字段为一个针对 Pod 的标签查询算符。已有的、其 Pod 被此算符选中的 ReplicaSet
          会被此 Deployment 影响到。这里设置的选择算符必须与 Pod 模板中的 `labels` 一致。
          并且，算符中的 `matchLabels` 和 `matchExpressions` 至少要设置其一。
      strategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentStrategy'
        description: The deployment strategy to use when replacing existing Pods with
          new ones.
        x-kab-description-zh: 用新的 Pod 替换现有 Pd 时要采用的部署策略。
        x-kubernetes-patch-strategy: retainKeys
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: |-
          A template describes the Pods that will be created. The only allowed
          template.spec.restartPolicy value is "Always".
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。
          注意 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: Deployment 预期行为的规约。
  io.k8s.api.apps.v1.DeploymentSpec.GET:
    description: The specification of the desired behavior of the Deployment.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its container crashing, for it to be considered available.
          Defaults to 0 which means a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      paused:
        description: |-
          Indicates that the Deployment is paused and will not be processed
          by the Deployment controller.
        type: boolean
        x-kab-description-zh: 表明 Deployment 当前被暂停，并且不会被 Deployment 控制器处理。
      progressDeadlineSeconds:
        default: 600
        description: |-
          The maximum time in seconds for a Deployment to make progress before it is considered to be failed.
          The Deployment controller will continue to process failed Deployments and a condition with a
          `"ProgressDeadlineExceeded"` reason will be surfaced in the Deployment `status`.
          Note that progress will not be estimated during the time a Deployment is paused.
          The value must be greater than the `minReadySeconds`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Deployment 操作至少要在这里所给的秒数之内取得进展，否则会被视为处于失败状态。
          Deployment 的控制器会继续处理失败的 Deployment，不过会在 Deployment 的 `status`
          中添加原因为 `"ProgressDeadlineExceeded"` 的状况。
          需要注意的是，在 Deployment 被暂停的时候，控制器不再对进展时间进行跟踪。
          此值必须大于 `minReadySeconds` 属性值。
      replicas:
        default: 1
        description: Number of desired Pods. This is a pointer to distinguish between
          explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 预期的 Pod 副本个数。实现上，此字段是一个指针，用来显式区分设置与否和设置值是否为零的状况。
      revisionHistoryLimit:
        default: 10
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          出于回滚需要，应为此 Deployment 保留的历史记录个数。
          实现上，这一字段是一个指针，用来区别设置与否和数值是否为零的情况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Label selector for Pods. Existing ReplicaSets whose Pods are selected
          by this will be the ones affected by this Deployment. It must match the Pod
          template's labels. The `matchLabels` and `matchExpressions` cannot be both empty.
        x-kab-description-zh: |-
          此字段为一个针对 Pod 的标签查询算符。已有的、其 Pod 被此算符选中的 ReplicaSet
          会被此 Deployment 影响到。这里设置的选择算符必须与 Pod 模板中的 `labels` 一致。
          并且，算符中的 `matchLabels` 和 `matchExpressions` 至少要设置其一。
      strategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentStrategy'
        description: The deployment strategy to use when replacing existing Pods with
          new ones.
        x-kab-description-zh: 用新的 Pod 替换现有 Pd 时要采用的部署策略。
        x-kubernetes-patch-strategy: retainKeys
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: |-
          A template describes the Pods that will be created. The only allowed
          template.spec.restartPolicy value is "Always".
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。
          注意 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
    required:
      - minReadySeconds
      - paused
      - progressDeadlineSeconds
      - replicas
      - revisionHistoryLimit
      - selector
      - strategy
      - template
    type: object
    x-kab-description-zh: Deployment 预期行为的规约。
  io.k8s.api.apps.v1.DeploymentSpec.UPDATE:
    description: The specification of the desired behavior of the Deployment.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its container crashing, for it to be considered available.
          Defaults to 0 which means a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      paused:
        description: |-
          Indicates that the Deployment is paused and will not be processed
          by the Deployment controller.
        type: boolean
        x-kab-description-zh: 表明 Deployment 当前被暂停，并且不会被 Deployment 控制器处理。
      progressDeadlineSeconds:
        default: 600
        description: |-
          The maximum time in seconds for a Deployment to make progress before it is considered to be failed.
          The Deployment controller will continue to process failed Deployments and a condition with a
          `"ProgressDeadlineExceeded"` reason will be surfaced in the Deployment `status`.
          Note that progress will not be estimated during the time a Deployment is paused.
          The value must be greater than the `minReadySeconds`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Deployment 操作至少要在这里所给的秒数之内取得进展，否则会被视为处于失败状态。
          Deployment 的控制器会继续处理失败的 Deployment，不过会在 Deployment 的 `status`
          中添加原因为 `"ProgressDeadlineExceeded"` 的状况。
          需要注意的是，在 Deployment 被暂停的时候，控制器不再对进展时间进行跟踪。
          此值必须大于 `minReadySeconds` 属性值。
      replicas:
        default: 1
        description: Number of desired Pods. This is a pointer to distinguish between
          explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 预期的 Pod 副本个数。实现上，此字段是一个指针，用来显式区分设置与否和设置值是否为零的状况。
      revisionHistoryLimit:
        default: 10
        description: |-
          The number of old ReplicaSets to retain to allow rollback.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          出于回滚需要，应为此 Deployment 保留的历史记录个数。
          实现上，这一字段是一个指针，用来区别设置与否和数值是否为零的情况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Label selector for Pods. Existing ReplicaSets whose Pods are selected
          by this will be the ones affected by this Deployment. It must match the Pod
          template's labels. The `matchLabels` and `matchExpressions` cannot be both empty.
        x-kab-description-zh: |-
          此字段为一个针对 Pod 的标签查询算符。已有的、其 Pod 被此算符选中的 ReplicaSet
          会被此 Deployment 影响到。这里设置的选择算符必须与 Pod 模板中的 `labels` 一致。
          并且，算符中的 `matchLabels` 和 `matchExpressions` 至少要设置其一。
      strategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentStrategy'
        description: The deployment strategy to use when replacing existing Pods with
          new ones.
        x-kab-description-zh: 用新的 Pod 替换现有 Pd 时要采用的部署策略。
        x-kubernetes-patch-strategy: retainKeys
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: |-
          A template describes the Pods that will be created. The only allowed
          template.spec.restartPolicy value is "Always".
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。
          注意 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: Deployment 预期行为的规约。
  io.k8s.api.apps.v1.DeploymentStatus:
    description: The most recently observed status of the Deployment.
    properties:
      availableReplicas:
        description: |-
          Total number of available Pods (ready for at least `minReadySeconds`) targeted by this Deployment.
          It cannot be greater than the desired replicas or the ready replicas.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此 Deployment 所关联到的、处于可用状态下的 Pod（持续 `minReadySeconds` 秒保持就绪）个数。
          此值不会超出期望副本个数或者就绪副本个数。
      collisionCount:
        description: |-
          Count of hash collisions for the Deployment.
          The Deployment controller uses this field as a collision avoidance mechanism when
          it needs to create the name for the newest ReplicaSet.
          When updated, this value cannot be decremented.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Deployment 上发生的哈希冲突计数。
          Deployment 控制器在为最新的 ReplicaSet 生成名字时，
          使用此字段来作为一种冲突避免机制，
          更新此字段时，字段值不可以减少。
      conditions:
        description: The latest observations of a Deployment's state.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentCondition'
        type: array
        x-kab-description-zh: 关于 Deployment 状态的最新观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      observedGeneration:
        description: The generation observed by the Deployment controller.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: Deployment 控制器所观测到的最新的代数。
      readyReplicas:
        description: |-
          Total number of ready Pods targeted by this Deployment with a `Ready` condition.
          This cannot be greater than the desired `replicas`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此 Deployment 所关联的、处于就绪状态（带有 `Ready` 状况）的 Pod 个数。
          此值不能大于期望的副本个数。
      replicas:
        description: Total number of non-terminated Pods targeted by this Deployment
          (their labels match the `selector`).
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 此 Deployment 所关联的、未被终止的 Pod 个数。
      unavailableReplicas:
        description: |-
          Total number of unavailable Pods targeted by this Deployment.
          This is the total number of Pods that are still required for the Deployment to
          have 100% available capacity.
          They may either be Pods that are running but not yet available or Pods that still have not been created.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此 Deployment 所关联的、未就绪的 Pod 个数。
          此 Pod 需要这些 Pod 都可用才能达到 100% 的可用容量。
          所统计的 Pod 可能处于运行状态但还不可用，或者还未被创建。
      updatedReplicas:
        description: |-
          Total number of non-terminated Pods targeted by this Deployment that have the desired template spec.
          Must be less than the desired `replicas`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此 Deployment 所关联的、未终止的且模板规约为预期版本的 Pod。
          此字段值要小于期望的副本个数。
    type: object
    x-kab-description-zh: Deployment 的最近观测状态。
  io.k8s.api.apps.v1.DeploymentStrategy:
    description: This specifies how to replace existing Pods with new ones.
    properties:
      rollingUpdate:
        $ref: '#/definitions/io.k8s.api.apps.v1.RollingUpdateDeployment'
        description: |-
          Rolling update configuration parameters. This is required when `type` is `"RollingUpdate"`.
          When `type` is `"Recreate"`, this field is disallowed.
        x-kab-description-zh: |-
          滚动更新的配置参数。当 `type` 为 `"RollingUpdate"` 时，此字段是必需的。
          当 `type` 是 `"Recreate"` 时，此字段不可设置。
      type:
        default: RollingUpdate
        description: |-
          Type of update strategy. Possible enum values:
          - `"Recreate"`：Kill all existing Pods before creating new ones.
          - `"RollingUpdate"`：Replace the old ReplicaSets by new one using rolling update.
            i.e., gradually scale down the old ReplicaSets and scale up the new one.
        enum:
          - Recreate
          - RollingUpdate
        type: string
        x-kab-description-zh: |-
          更新策略类型。可选的值有：
          - `"Recreate"`：在创建新的 Pod 之前先杀死所有已有的 Pod。
          - `"RollingUpdate"`：使用滚动更新方式用新的 ReplicaSet 替换旧的 ReplicaSet。
            换言之，逐步完成对旧 ReplicaSet 的缩容和对新 ReplicaSet 的扩容。
    type: object
    x-kab-description-zh: 设置如何用新的 Pod 替换已有的 Pod。
  io.k8s.api.apps.v1.ReplicaSet.CREATE:
    description: A ReplicaSet ensures that a specified number of Pod replicas are
      running at any given time.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ReplicaSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. If the `labels` are empty, they are defaulted
          to be the same as the Pod(s) that the ReplicaSet manages.
        x-kab-description-zh: 标准的对象元数据。如果 `labels` 为空，则意味着其定义与 ReplicaSet 所管理的 Pod
          上的标签相同。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.CREATE'
        description: The specification of the desired behavior of the ReplicaSet.
        x-kab-description-zh: 此 ReplicaSet 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ReplicaSet 确保在任何时候都有给定数目的 Pod 处于运行状态。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ReplicaSet
        version: v1
  io.k8s.api.apps.v1.ReplicaSet.GET:
    description: A ReplicaSet ensures that a specified number of pod replicas are
      running at any given time.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ReplicaSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: |-
          Standard object metadata. If the `labels` are empty, they are defaulted
          to be the same as the Pod(s) that the ReplicaSet manages.
        x-kab-description-zh: 标准的对象元数据。如果 `labels` 为空，则意味着其定义与 ReplicaSet 所管理的 Pod
          上的标签相同。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.GET'
        description: The specification of the desired behavior of the ReplicaSet.
        x-kab-description-zh: 此 ReplicaSet 的预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetStatus'
        description: The most recently observed status of the ReplicaSet. This data
          may be out of date by some window of time.
        x-kab-description-zh: 此 ReplicaSet 最近观测到的状态。此数据与实际情况相比可能有一定的滞后。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: ReplicaSet 确保在任何时候都有给定数目的 Pod 处于运行状态。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ReplicaSet
        version: v1
  io.k8s.api.apps.v1.ReplicaSet.UPDATE:
    description: A ReplicaSet ensures that a specified number of pod replicas are
      running at any given time.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ReplicaSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. If the `labels` are empty, they are defaulted
          to be the same as the Pod(s) that the ReplicaSet manages.
        x-kab-description-zh: 标准的对象元数据。如果 `labels` 为空，则意味着其定义与 ReplicaSet 所管理的 Pod
          上的标签相同。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetSpec.UPDATE'
        description: The specification of the desired behavior of the ReplicaSet.
        x-kab-description-zh: 此 ReplicaSet 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ReplicaSet 确保在任何时候都有给定数目的 Pod 处于运行状态。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ReplicaSet
        version: v1
  io.k8s.api.apps.v1.ReplicaSetCondition:
    description: The state of a ReplicaSet at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of ReplicaSet condition.
        enum:
          - ReplicaFailure
        minLength: 1
        type: string
        x-kab-description-zh: ReplicaSet 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: ReplicaSet 在某个时间点的状态。
  io.k8s.api.apps.v1.ReplicaSetList:
    description: A list of ReplicaSet objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ReplicaSet objects.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
        type: array
        x-kab-description-zh: 一个包含 ReplicaSet 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - ReplicaSetList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 一个包含 ReplicaSet 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: ReplicaSetList
        version: v1
  io.k8s.api.apps.v1.ReplicaSetSpec.CREATE:
    description: The specification of a ReplicaSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its container crashing, for it to be considered available.
          Defaults to 0 which means a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      replicas:
        default: 1
        description: |-
          The number of desired replicas.
          This is a pointer to distinguish between explicit zero and unspecified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 预期的 Pod 副本个数。实现上，此字段是一个指针，用来显式区分设置与否和设置值是否为零的状况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the replica count.
          Label keys and values that must match in order to be controlled by this ReplicaSet.
          It must match the Pod template's `labels`. Empty `selector` is invalid.
        x-kab-description-zh: |-
          此字段为一个针对 Pod 的标签查询算符，匹配的 Pod 个数应该与副本个数相同。
          标签主键和键值与算符匹配的 Pod 才会受此 ReplicaSet 控制。
          这里设置的选择算符必须与 Pod 模板中的 `labels` 一致。
          空的 `selector` 是非法的。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: The object that describes the Pod that will be created if insufficient
          replicas are detected.
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。
          当检测到副本个数不足时，会基于此对象来创建 Pod。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: ReplicaSet 的规约。
  io.k8s.api.apps.v1.ReplicaSetSpec.GET:
    description: The specification of a ReplicaSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its container crashing, for it to be considered available.
          Defaults to 0 which means a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      replicas:
        default: 1
        description: |-
          The number of desired replicas.
          This is a pointer to distinguish between explicit zero and unspecified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 预期的 Pod 副本个数。实现上，此字段是一个指针，用来显式区分设置与否和设置值是否为零的状况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the replica count.
          Label keys and values that must match in order to be controlled by this ReplicaSet.
          It must match the Pod template's `labels`. Empty `selector` is invalid.
        x-kab-description-zh: |-
          此字段为一个针对 Pod 的标签查询算符，匹配的 Pod 个数应该与副本个数相同。
          标签主键和键值与算符匹配的 Pod 才会受此 ReplicaSet 控制。
          这里设置的选择算符必须与 Pod 模板中的 `labels` 一致。
          空的 `selector` 是非法的。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: The object that describes the Pod that will be created if insufficient
          replicas are detected.
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。
          当检测到副本个数不足时，会基于此对象来创建 Pod。
    required:
      - minReadySeconds
      - replicas
      - selector
      - template
    type: object
    x-kab-description-zh: ReplicaSet 的规约。
  io.k8s.api.apps.v1.ReplicaSetSpec.UPDATE:
    description: The specification of a ReplicaSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its container crashing, for it to be considered available.
          Defaults to 0 which means a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入就绪状态、没有容器崩溃，并持续给定的秒数之后，才会被认为可用。
          默认值 0 意味着 Pod 一旦进入就绪状态之后立即被视为可用。
      replicas:
        default: 1
        description: |-
          The number of desired replicas.
          This is a pointer to distinguish between explicit zero and unspecified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 预期的 Pod 副本个数。实现上，此字段是一个指针，用来显式区分设置与否和设置值是否为零的状况。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the replica count.
          Label keys and values that must match in order to be controlled by this ReplicaSet.
          It must match the Pod template's `labels`. Empty `selector` is invalid.
        x-kab-description-zh: |-
          此字段为一个针对 Pod 的标签查询算符，匹配的 Pod 个数应该与副本个数相同。
          标签主键和键值与算符匹配的 Pod 才会受此 ReplicaSet 控制。
          这里设置的选择算符必须与 Pod 模板中的 `labels` 一致。
          空的 `selector` 是非法的。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: The object that describes the Pod that will be created if insufficient
          replicas are detected.
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。
          当检测到副本个数不足时，会基于此对象来创建 Pod。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: ReplicaSet 的规约。
  io.k8s.api.apps.v1.ReplicaSetStatus:
    description: The current status of a ReplicaSet.
    properties:
      availableReplicas:
        description: The number of available replicas (ready for at least `minReadySeconds`)
          for this ReplicaSet.
        format: int32
        type: integer
        x-kab-description-zh: 此 ReplicaSet 的处于可用状态下（持续 `minReadySeconds` 秒保持就绪）的副本个数。
      conditions:
        description: The latest observations of a ReplicaSet's state.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetCondition'
        type: array
        x-kab-description-zh: 关于 ReplicaSet 状态的最新观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      fullyLabeledReplicas:
        description: The number of Pods that have labels matching the `labels` of
          the Pod template of the ReplicaSet.
        format: int32
        type: integer
        x-kab-description-zh: 标签与此 ReplicaSet 的 Pod 模板上的 `labels` 完全匹配的 Pod 的个数。
      observedGeneration:
        description: The most recent generation observed by the ReplicaSet controller.
        format: int64
        type: integer
        x-kab-description-zh: ReplicaSet 控制器所观测到的最新的代数。
      readyReplicas:
        description: The number of ready replicas for this ReplicaSet with a Ready
          condition.
        format: int32
        type: integer
        x-kab-description-zh: 此 ReplicaSet 的处于就绪状态（带有 `Ready` 状况）的 Pod 个数。
      replicas:
        description: The most recently observed number of replicas.
        format: int32
        type: integer
        x-kab-description-zh: 最近观测到的副本数。
    required:
      - replicas
    type: object
    x-kab-description-zh: ReplicaSet 的当前状态。
  io.k8s.api.apps.v1.RollingUpdateDaemonSet:
    description: Spec to control the desired behavior of DaemonSet rolling update.
    properties:
      maxSurge:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        default: 0
        description: |-
          The maximum number of nodes with an existing available DaemonSet Pod that can
          have an updated DaemonSet Pod during during an update.
          Value can be an absolute number (e.g. 5) or a percentage of desired Pods (e.g. `"10%"`).
          This can not be 0 if `maxUnavailable` is 0.
          Absolute number is calculated from percentage by rounding up to a minimum of 1.

          Example:

          When this is set to `"30%"`, at most 30% of the total number of nodes that should
          be running the daemon Pod (i.e. `status.desiredNumberScheduled`) can have their
          a new Pod created before the old Pod is marked as deleted.
          The update starts by launching new Pods on 30% of nodes.
          Once an updated Pod is available (`"Ready"` for at least `minReadySeconds`),
          the old DaemonSet Pod on that node is marked deleted.
          If the old Pod becomes unavailable for any reason (`"Ready"` transitions to `"False"`,
          is evicted, or is drained) an updated Pod is immediatedly created on that node
          without considering surge limits.
          Allowing surge implies the possibility that the resources consumed by the DaemonSet
          on any given node can double if the readiness check fails, and so
          resource intensive DaemonSets should take into account that they may cause evictions
          during disruption.
        x-kab-description-zh: |-
          在滚动更新期间，已经运行着当前 DaemonSet 的 Pod 的节点中，可以执行 Pod 更新的节点个数上限。
          字段值可以是一个绝对数（例如 5），也可以是一个预期 Pod 个数的百分比（例如，`"10%"`）。
          控制器会基于所给的百分比值来计算一个绝对数，向上取整，至少为 1。
          如果 `maxUnavailable` 是 0 时，此字段不可以为 0。

          例如：当此字段设置为 `"30%"` 时，在所有应该运行 DaemonSet Pod 的节点
          （个数为 `status.desiredNumberScheduled`）中，至多 30% 的节点可以在旧的 Pod
          被标记删除之前创建新的 Pod。
          更新流程开始时，会在 30% 的节点上启动新的 Pod。
          一旦被更新的 Pod 进入可用状态（`"Ready"` 状况为 `"True"` 超过 `minReadySeconds`），
          对应节点上的老的 DaemonSet Pod 就被标记为删除。
          如果老的 Pod 因为任何原因（`"Ready"` 状况变成 `"False"`、被驱逐或者节点被腾空）
          而变得不可用，控制器会立即在该节点上创建一个更新的 Pod，并且不考虑突发个数限制。
          允许突发性质的更新意味着当就绪状态检查失败时，给定节点上的 DaemonSet Pod
          所耗用的资源可能会翻倍。因此，对于资源密集型的 DaemonSet，
          需要考虑它们的状态扰动期间可能会导致 Pod 被驱逐。
      maxUnavailable:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        default: 1
        description: |-
          The maximum number of DaemonSet Pods that can be unavailable during the update.
          Value can be an absolute number (e.g. `5`) or a percentage of total number of
          DaemonSet Pods at the start of the update (e.g. `"10%"`).
          Absolute number is calculated from percentage by rounding up.
          This cannot be 0 if `maxSurge` is 0.

          Example: when this is set to `"30%"`, at most 30% of the total number of nodes
          that should be running the DaemonSet Pod (i.e. `status.desiredNumberScheduled`)
          can have their Pods stopped for an update at any given time.
          The update starts by stopping at most 30% of those DaemonSet Pods and then
          brings up new DaemonSet Pods in their place. Once the new Pods are available,
          it then proceeds onto other DaemonSet Pods, thus ensuring that at least 70% of
          original number of DaemonSet Pods are available at all times during the update.
        x-kab-description-zh: |-
          DeamonSet 更新期间可以处于不可用状态的 Pod 个数的上限。
          此字段的取值可以是一个绝对数（例如 5），也可以是开始更新时 DaemonSet Pod
          总数的一个百分比（例如 `"10%"`）。
          控制器会基于百分比值来向上取整，计算得到一个绝对数。
          当 `maxSurge` 为 0 时，此字段不可以为 0。

          例如：当此字段设置为 `"30%"`s 时，在任何时刻，在所有应该运行 DaemonSet Pod 的节点
          （个数为 `status.desiredNumberScheduled`）中，至多 30% 的节点可以停止其 Pod 进行更新。
          更新过程开始时，DaemonSet 的 Pod 中最多有 30% 的 Pod 会被停止并就地启动新的 Pod。
          一旦新的 Pod 进入可用状态，则更新推进到其他 DaemonSet Pod。
          在整个更新过程中，控制器能够确保至少原来 Pod 总数的 70% 是可用的。
    type: object
    x-kab-description-zh: 用来控制 DaemonSet 滚动更新时期望行为的规约。
  io.k8s.api.apps.v1.RollingUpdateDeployment:
    description: Spec to control the desired behavior of rolling update for a Deployment.
    properties:
      maxSurge:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        default: 25%
        description: |-
          The maximum number of Pods that can be scheduled above the desired number of Pods.
          Value can be an absolute number (ex: `"5"`) or a percentage of desired pods (ex: `"10%"`).
          This can not be `"0"` if `maxUnavailable` is `"0"`.
          Absolute number is calculated from percentage by rounding up.
          Example: when this is set to `"30%"`, the new ReplicaSet can be scaled up immediately
          when the rolling update starts, such that the total number of old and new Pods
          do not exceed 130% of desired Pods.
          Once old Pods have been killed, new ReplicaSet can be scaled up further,
          ensuring that total number of Pods running at any time during the update is
          at most 130% of desired Pods.
        x-kab-description-zh: |-
          滚动更新期间，被调度的 Pod 个数可以超出期望 Pod 个数。此字段为所调度的 Pod 总数设置上限。
          字段值可以是一个绝对数字（例如 5），也可以是期望 Pod 个数的百分比（例如 `"10%"`）。
          当 `maxUnavailable` 为 0 时，此字段不可以为 0。
          控制器会基于百分比值向上取整，计算得到一个绝对数。
          例如：当此值设置为 `"30%"` 时，如果启动滚动更新，则新的 ReplicaSet 可以被立即被扩容，
          新 Pod 和老 Pod 的总数不能超出预期 Pod 副本数的 130%。
          一旦老的 Pod 都被杀死，则新的 ReplicaSet 可以进一步扩容，从而确保滚动更新过程中的任何时刻，
          处于运行状态的 Pod 个数不会超出预期副本个数的 130%。
      maxUnavailable:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        default: 25%
        description: |-
          The maximum number of Pods that can be unavailable during the update.
          Value can be an absolute number (ex: `"5"`) or a percentage of desired pods (ex: `"10%"`).
          Absolute number is calculated from percentage by rounding down.
          This can not be `"0"` if `maxSurge` is `"0"`.
          Example: when this is set to `"30%"`, the old ReplicaSet can be scaled down to
          70% of desired Pods immediately when the rolling update starts.
          Once new Pods are ready, old ReplicaSet can be scaled down further, followed by
          scaling up the new ReplicaSet, ensuring that the total number of Pods available
          at all times during the update is at least 70% of desired Pods.
          This value cannot be more than `"100%"`.
        x-kab-description-zh: |-
          滚动更新过程中可以处于不可用状态的 Pod 的个数上限。
          字段值可以是一个绝对数（例如 5），也可以是一个期望 Pod 副本数的百分比（如 `"10%"`）。
          控制器会根据百分比值向上取整，得到一个绝对数。
          当 `maxSurge` 为 0 时，此字段不可以为 0。
          例如：当此字段被设置为 `"30%"` 时，如果启动了滚动更新，则老的 ReplicaSet 可以立即被缩容，
          使得 Pod 总数在期望 Pod 副本数的 70% 左右。
          一旦新的 Pod 进入就绪状态，则老的 ReplicaSet 可以被进一步缩容，同时对新的 ReplicaSet 扩容。
          这样，在整个更新过程中，处于可用状态的 Pod 的总数不会低于期望 Pod 总数的 70%。
          此数值不可大于 `"100%"`。
    type: object
    x-kab-description-zh: 用来控制 Deployment 滚动更新时期望行为的规约。
  io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy:
    description: Spec to control the desired behavior of rolling update for a StatefulSet.
    properties:
      maxUnavailable:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          The maximum number of Pods that can be unavailable during the update.
          Value can be an absolute number (ex: `5`) or a percentage of desired pods (ex: `"10%"`).
          Absolute number is calculated from percentage by rounding up.
          This can not be 0. When specified as percentage, the value cannot be greater than 100%.
          Defaults to `1`. This field is Alpha-level and is only honored by servers that
          enable the `MaxUnavailableStatefulSet` feature. The field applies to all Pods
          in the range `0` to `replicas-1`. That means if there is any unavailable Pod
          in the range `0` to `replicas-1`, it will be counted towards `maxUnavailable`.'
        x-kab-description-zh: |-
          此字段设置更新过程中不可用的 Pod 个数的上限。
          字段值可以是一个绝对数（例如 5）或者期望 Pod 个数的百分比（如 `"10%"`）。
          控制器会基于百分比值向上取整得到一个绝对数。
          此字段的取值不能为 0.
          此字段处于 Alpha 阶段，只有启用了 `MaxUnavailableStatefulSet` 特性的服务器才会处理。
          设置此字段会影响到索引为 `0` 到 `replicas-1` 的 Pod。
          如果在 `0` 到 `replicas-1` 之间存在不可用的 Pod，这类 Pod 会被记入到 `maxUnavailable`
          统计中。
      partition:
        default: 0
        description: |-
          The ordinal at which the StatefulSet should be partitioned for updates.
          During a rolling update, all Pods from ordinal `replicas-1` to `partition` are updated.
          All Pods from ordinal `partition-1` to `0` remain untouched.
          This is helpful in being able to do a canary based deployment.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          对 StatefulSet 进行更新时，可以将 Pod 集合分区。此字段用来设置分区边界的索引。
          在滚动更新期间，所有序号为 `replicas-1` 到 `partition` 之间的 Pod 会先被更新，
          需要为 `partition-` 到 0 之间的 Pod 会保持不动。
          这种设置可以用来实现基于金丝雀策略的部署。
    type: object
    x-kab-description-zh: 用来控制 StatefulSet 滚动更新时期望行为的规约。
  io.k8s.api.apps.v1.StatefulSet.CREATE:
    description: |-
      A StatefulSet is a set of Pods with consistent identities. Identities are defined as:
      - Network: A single stable DNS and hostname.
      - Storage: As many volume claims as requested.

      A StatefulSet guarantees that a given network identity will always map to the same storage identity.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - StatefulSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.CREATE'
        description: The desired behavior of this StatefulSet.
        x-kab-description-zh: 此 StatefulSet 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      StatefulSet 是一组 Pod，其中各个 Pod 都有一致性的标识。Pod 标识可以定义为：

      - 网络：Pod 具备唯一的、稳定的 DNS 域名和主机名；
      - 存储：Pod 所分配的卷申领是确定的。

      StatefulSet 确保给定的网络标识总会映射到给定的存储标识之上。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: StatefulSet
        version: v1
  io.k8s.api.apps.v1.StatefulSet.GET:
    description: |-
      A StatefulSet is a set of Pods with consistent identities. Identities are defined as:
      - Network: A single stable DNS and hostname.
      - Storage: As many volume claims as requested.

      A StatefulSet guarantees that a given network identity will always map to the same storage identity.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - StatefulSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.GET'
        description: The desired behavior of this StatefulSet.
        x-kab-description-zh: 此 StatefulSet 的预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetStatus'
        description: |-
          The current status of Pods in this StatefulSet.
          This data may be out of date by some window of time.
        x-kab-description-zh: 此 StatefulSet 中 Pod 的当前状态。字段数据与实际情况相比可能存在一定的滞后。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      StatefulSet 是一组 Pod，其中各个 Pod 都有一致性的标识。Pod 标识可以定义为：

      - 网络：Pod 具备唯一的、稳定的 DNS 域名和主机名；
      - 存储：Pod 所分配的卷申领是确定的。

      StatefulSet 确保给定的网络标识总会映射到给定的存储标识之上。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: StatefulSet
        version: v1
  io.k8s.api.apps.v1.StatefulSet.UPDATE:
    description: |-
      A StatefulSet is a set of Pods with consistent identities. Identities are defined as:
      - Network: A single stable DNS and hostname.
      - Storage: As many volume claims as requested.

      A StatefulSet guarantees that a given network identity will always map to the same storage identity.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - StatefulSet
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetSpec.UPDATE'
        description: The desired behavior of this StatefulSet.
        x-kab-description-zh: 此 StatefulSet 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      StatefulSet 是一组 Pod，其中各个 Pod 都有一致性的标识。Pod 标识可以定义为：

      - 网络：Pod 具备唯一的、稳定的 DNS 域名和主机名；
      - 存储：Pod 所分配的卷申领是确定的。

      StatefulSet 确保给定的网络标识总会映射到给定的存储标识之上。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: StatefulSet
        version: v1
  io.k8s.api.apps.v1.StatefulSetCondition:
    description: The state of a StatefulSet at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of StatefulSet condition.
        minLength: 1
        type: string
        x-kab-description-zh: StatefulSet 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: StatefulSet 在某个时间点的状态。
  io.k8s.api.apps.v1.StatefulSetList:
    description: A list of StatefulSet objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - apps/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of StatefulSet objects.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
        type: array
        x-kab-description-zh: 一个包含 StatefulSet 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - StatefulSetList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 一个包含 StatefulSet 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apps
        kind: StatefulSetList
        version: v1
  io.k8s.api.apps.v1.StatefulSetOrdinals:
    description: StatefulSetOrdinals describes the policy used for replica ordinal
      assignment in this StatefulSet.
    properties:
      start:
        description: |-
          `start` is the number representing the first replica's index.
          It may be used to number replicas from an alternate index (eg: 1-indexed)
          over the default 0-indexed names, or to orchestrate progressive movement of replicas
          from one StatefulSet to another. If set, replica indices will be in the range:

          `[.spec.ordinals.start, .spec.ordinals.start + .spec.replicas)`

          If unset, defaults to 0.
          Replica indices will be in the range:

          `[0, .spec.replicas)`
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          `start` 是代表第一个副本的索引的数字。
          使用这个字段可以让副本从一个不同的下标数字开始编号（例如：从 1 开始计数），
          而不是使用默认的从 0 计数和命名。字段的另一用处是编排一个流程，
          以渐进的方式将副本从一个 StatefulSet 移动到另一个 StatefulSet。
          设置了此字段时，StatefulSet 中的副本的下标为：

          `[.spec.ordinals.start, .spec.ordinals.start + .spec.replicas)`

          如果没有设置此字段，则其默认值为 0。副本的下标为 `[0, .spec.replicas)`。
    type: object
    x-kab-description-zh: StatefulSetOrdinals 描述的是一种策略，用来为 StatefulSet 中的副本设置序号。
  io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy:
    description: |-
      StatefulSetPersistentVolumeClaimRetentionPolicy describes the policy
      used for PVCs created from the StatefulSet `volumeClaimTemplates`.
    properties:
      whenDeleted:
        default: Retain
        description: |-
          This specifies what happens to PVCs created from StatefulSet `volumeClaimTemplates`
          when the StatefulSet is deleted.
          The default policy of `"Retain"` causes PVCs to not be affected by StatefulSet deletion.
          The `Delete` policy causes those PVCs to be deleted.
        enum:
          - Delete
          - Retain
        type: string
        x-kab-description-zh: |-
          此字段设置当 StatefulSet 被删除时，基于其 `volumeClaimTemplates` 所创建的 PVC
          要如何处理。默认策略 `"Retain"` 会令 PVC 不被 StatefulSet 的删除所影响。
          策略 `"Delete"` 则会导致这些 PVC 也随之被删除。
      whenScaled:
        default: Retain
        description: |-
          This specifies what happens to PVCs created from StatefulSet `volumeClaimTemplates`
          when the StatefulSet is scaled down.
          The default policy of `Retain` causes PVCs to not be affected by a scale down.
          The `Delete` policy causes the associated PVCs for any excess Pods above
          the replica count to be deleted.
        enum:
          - Delete
          - Retain
        type: string
        x-kab-description-zh: |-
          此字段设置当 StatefulSet 被缩容时，基于其 `volumeClaimTemplates` 所创建的 PVC
          要如何处理。默认策略 `"Retain"` 会令 PVC 不被 StatefulSet 的缩容所影响。
          策略 `"Delete"` 则会导致超出副本个数的 Pod 对应的 PVC 也随之被删除。
    type: object
    x-kab-description-zh: |-
      StatefulSetPersistentVolumeClaimRetentionPolicy 为基于 StatefulSet 的
      `volumeClaimTemplates` 所创建的 PVC 设置策略。
  io.k8s.api.apps.v1.StatefulSetSpec.CREATE:
    description: The specification of a StatefulSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its Container crashing for it to be considered available.
          Defaults to 0 (Pod will be considered available as soon as it is ready).
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入到没有容器崩溃的就绪状态，并持续给定的秒数之后，才会被认为可用。
          默认值 0 （Pod 一旦进入就绪状态之后立即被视为可用）。
      ordinals:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetOrdinals'
        description: |-
          `ordinals` controls the numbering of replica indices in a StatefulSet.
          The default ordinals behavior assigns a `0` index to the first replica and increments
          the index by one for each additional replica requested.
          Using the `ordinals` field requires the `StatefulSetStartOrdinal` feature gate
          to be enabled, which is Beta.
        x-kab-description-zh: |-
          此字段控制如何为 StatefulSet 中的副本索引编号。
          默认的序号分配行为是将索引 `0` 分配给第一个副本，之后对所请求的每个额外副本将索引加一。
          使用 `ordinals` 字段需要启用 `StatefulSetStartOrdinal` 特性门控。
          该特性目前处于 Beta 阶段。
      persistentVolumeClaimRetentionPolicy:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy'
        description: |-
          This describes the lifecycle of persistent volume claims created from `volumeClaimTemplates`.
          By default, all persistent volume claims are created as needed and retained
          until manually deleted.
          This policy allows the lifecycle to be altered, for example by deleting persistent
          volume claims when their StatefulSet is deleted, or when their Pod is scaled down.
          This requires the `StatefulSetAutoDeletePVC` feature gate to be enabled, which is Alpha.
        x-kab-description-zh: |-
          此字段描述基于 `volumeClaimTemplates` 所创建的 PVC 的生命周期。
          默认情况下，按需创建的所有 PVC 都会被保留，直至手动删除。
          这一字段允许 PVC 的生命周期用不同方式管理。例如当它们所对应的 StatefulSet 被删除，
          或者 Pod 集合被缩容时，可以删除按需创建的 PVC。
          设置此字段要求启用 `StatefulSetAutoDeletePVC` 特性门控。该特性目前处于 Alpha 阶段。
      podManagementPolicy:
        default: OrderedReady
        description: |-
          This controls how Pods are created during initial scale up, when replacing Pods
          on nodes, or when scaling down.
          The default policy is `"OrderedReady"`, where Pods are created in increasing order
          and the controller will wait until each Pod is ready before continuing.
          When scaling down, the Pods are removed in the opposite order.
          Progressing only when the previous Pod is ready or terminated.
          At most one Pod will be changed at any time. The alternative policy is `"Parallel"`
          which will create Pods in parallel to match the desired scale without waiting
          for Pods to be ready or complete termination, and on scale down will delete
          all Pods at once.
          Cannot be updated.
        enum:
          - OrderedReady
          - Parallel
        type: string
        x-kab-description-zh: |-
          此字段用来控制初始扩容期间、在节点上替换 Pod 期间以及缩容期间如何创建 Pod。
          默认的策略是 `"OrderedReady"`，意味着 Pod 会按顺序递增的方式创建，
          每次控制器都会等待当前 Pod 就绪之后才继续下一个 Pod 的创建。
          在缩容过程中，Pod 按相反的顺序逐个被移除。
          继续处理的判断标准是当前 Pod 以及就绪或者被终止。在任一时刻，只能有一个 Pod 会被变更。

          另一种策略是 `"Parallel"`，Pod 会被并行创建以尽快达到期望的规模，每个 Pod
          的创建都不会依赖于其他 Pod 就绪。在缩容期间，所有 Pod 都一起被删除，不会出现一个
          Pod 等待另一个 Pod 结束的状况。

          此字段不可变更。
      replicas:
        default: 1
        description: |-
          The desired number of replicas of the given `template`.
          These are replicas in the sense that they are instantiations of the same `template`,
          but individual replicas also have a consistent identity.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          期望运行的、使用给定 `template` 的副本个数。这里的副本都是基于同一个 `template` 创建的，
          不过各个副本都有一个一致性的标识。
      revisionHistoryLimit:
        default: 10
        description: |-
          The maximum number of revisions that will be maintained in the StatefulSet's revision history.
          The revision history consists of all revisions not represented by a currently
          applied spec version. Cannot be updated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在 StatefulSet 的修订历史中可以维护的修订版本个数上限。
          修订历史中包含的是与当前应用的规约不同的修订版本。
          此字段不可变更。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the `replicas` count.
          It must match the Pod template's `labels`.
          Cannot be updated.
        x-kab-description-zh: |-
          此字段是一个针对 Pod 的标签查询条件，匹配到的 Pod 个数应该与 `replicas` 计数相同。
          选择算符必须与 Pod 模板中的 `labels` 完全一致。
          此字段不可变更。
      serviceName:
        description: |-
          The name of the Service that governs this StatefulSet.
          This Service must exist before the StatefulSet, and is responsible for
          the network identity of the set.
          Pods get DNS/hostnames that follow the pattern:
          ```
          <pod-specific-string>.serviceName.default.svc.cluster.local
          ```

          where `pod-specific-string` is managed by the StatefulSet controller.
          Cannot be updated.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          与此 StatefulSet 对应的 Service 的名称。
          此 Service 必须先于 StatefulSet 存在，负责为集合中的 Pod 提供网络标识。
          集合中的 Pod 会获得模式如下的 DNS 和主机名：

          ```
          <pod-specific-string>.serviceName.default.svc.cluster.local
          ```

          其中 `pod-specific-string` 由 StatefulSet 控制器管理。

          此字段不可更新。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: |-
          An object that describes the Pod that will be created if insufficient replicas are detected.
          Each Pod stamped out by the StatefulSet will fulfill this `template`,
          but have a unique identity from the rest of the StatefulSet.
          Each Pod will be named with the format `<statefulsetname>-<podindex>`.
          For example, a Pod in a StatefulSet named `"web"` with index number `"3"` would be named `"web-3"`.
          Currently only check if the `metadata.labels` are set.
          This field can be updated.
          The only allowed `template.spec.restartPolicy` value is "Always".
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。当检测到副本个数不足时，会基于此对象来创建 Pod。
          StatefulSet 所创建的每个 Pod 都是基于此 `template` 的，但各个 Pod 都有一个与众不同的标识。
          所有 Pod 的名称都遵从 `<StatefulSet 名称>-<Pod 索引>` 的格式。
          例如，对于一个名为 `"web"` 的 StatefulSet 中的、索引编号为 `"3"` 的 Pod，
          其名称为 `"web-3"`。
          目前，服务器端仅检查 `metadata.labels` 是否被设置了。
          另外，模板中的 `spec.restartPolicy` 只能取值 `"Always"`。
          此字段可以变更。
      updateStrategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy'
        description: |-
          The update strategy that will be employed to update Pods in the StatefulSet
          when a revision is made to `template`.
          This field can be updated.
        x-kab-description-zh: |-
          当对 `template` 进行修订时，需要更新 StatefulSet 中的 Pod。
          此字段用来确定更新的策略。此字段可以变更。
      volumeClaimTemplates:
        description: |-
          A list of claims that Pods are allowed to reference.
          The StatefulSet controller is responsible for mapping network identities to
          claims in a way that maintains the identity of a Pod.
          Every claim in this list must have at least one matching (by name) `volumeMount`
          in one container in the template.
          A claim in this list takes precedence over any volumes in the template, with
          the same name.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.CREATE'
        type: array
        x-kab-description-zh: |-
          此字段包含若干 PVC，可供 Pod 引用。
          StatefulSet 的控制器负责将网络标识符映射到 PVC，并且确保维持每个 Pod 的标识。
          列表中的每个 PVC 都必须在 `template` 的一个容器的 `volumeMount` 中出现。
          列表中的 PVC 会优先于 `template` 中所指定的所有同名数据卷。

          此字段不可变更。
        x-kubernetes-list-type: atomic
    required:
      - selector
      - serviceName
      - template
    type: object
    x-kab-description-zh: StatefulSet 的规约。
  io.k8s.api.apps.v1.StatefulSetSpec.GET:
    description: The specification of a StatefulSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its Container crashing for it to be considered available.
          Defaults to 0 (Pod will be considered available as soon as it is ready).
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入到没有容器崩溃的就绪状态，并持续给定的秒数之后，才会被认为可用。
          默认值 0 （Pod 一旦进入就绪状态之后立即被视为可用）。
      ordinals:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetOrdinals'
        description: |-
          `ordinals` controls the numbering of replica indices in a StatefulSet.
          The default ordinals behavior assigns a `0` index to the first replica and increments
          the index by one for each additional replica requested.
          Using the `ordinals` field requires the `StatefulSetStartOrdinal` feature gate
          to be enabled, which is Beta.
        x-kab-description-zh: |-
          此字段控制如何为 StatefulSet 中的副本索引编号。
          默认的序号分配行为是将索引 `0` 分配给第一个副本，之后对所请求的每个额外副本将索引加一。
          使用 `ordinals` 字段需要启用 `StatefulSetStartOrdinal` 特性门控。
          该特性目前处于 Beta 阶段。
      persistentVolumeClaimRetentionPolicy:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy'
        description: |-
          This describes the lifecycle of persistent volume claims created from `volumeClaimTemplates`.
          By default, all persistent volume claims are created as needed and retained
          until manually deleted.
          This policy allows the lifecycle to be altered, for example by deleting persistent
          volume claims when their StatefulSet is deleted, or when their Pod is scaled down.
          This requires the `StatefulSetAutoDeletePVC` feature gate to be enabled, which is Alpha.
        x-kab-description-zh: |-
          此字段描述基于 `volumeClaimTemplates` 所创建的 PVC 的生命周期。
          默认情况下，按需创建的所有 PVC 都会被保留，直至手动删除。
          这一字段允许 PVC 的生命周期用不同方式管理。例如当它们所对应的 StatefulSet 被删除，
          或者 Pod 集合被缩容时，可以删除按需创建的 PVC。
          设置此字段要求启用 `StatefulSetAutoDeletePVC` 特性门控。该特性目前处于 Alpha 阶段。
      podManagementPolicy:
        default: OrderedReady
        description: |-
          This controls how Pods are created during initial scale up, when replacing Pods
          on nodes, or when scaling down.
          The default policy is `"OrderedReady"`, where Pods are created in increasing order
          and the controller will wait until each Pod is ready before continuing.
          When scaling down, the Pods are removed in the opposite order.
          Progressing only when the previous Pod is ready or terminated.
          At most one Pod will be changed at any time. The alternative policy is `"Parallel"`
          which will create Pods in parallel to match the desired scale without waiting
          for Pods to be ready or complete termination, and on scale down will delete
          all Pods at once.
          Cannot be updated.
        enum:
          - OrderedReady
          - Parallel
        type: string
        x-kab-description-zh: |-
          此字段用来控制初始扩容期间、在节点上替换 Pod 期间以及缩容期间如何创建 Pod。
          默认的策略是 `"OrderedReady"`，意味着 Pod 会按顺序递增的方式创建，
          每次控制器都会等待当前 Pod 就绪之后才继续下一个 Pod 的创建。
          在缩容过程中，Pod 按相反的顺序逐个被移除。
          继续处理的判断标准是当前 Pod 以及就绪或者被终止。在任一时刻，只能有一个 Pod 会被变更。

          另一种策略是 `"Parallel"`，Pod 会被并行创建以尽快达到期望的规模，每个 Pod
          的创建都不会依赖于其他 Pod 就绪。在缩容期间，所有 Pod 都一起被删除，不会出现一个
          Pod 等待另一个 Pod 结束的状况。

          此字段不可变更。
      replicas:
        default: 1
        description: |-
          The desired number of replicas of the given `template`.
          These are replicas in the sense that they are instantiations of the same `template`,
          but individual replicas also have a consistent identity.
          This field can be updated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          期望运行的、使用给定 `template` 的副本个数。这里的副本都是基于同一个 `template` 创建的，
          不过各个副本都有一个一致性的标识。
          此字段可以变更。
      revisionHistoryLimit:
        default: 10
        description: |-
          The maximum number of revisions that will be maintained in the StatefulSet's revision history.
          The revision history consists of all revisions not represented by a currently
          applied spec version. Cannot be updated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在 StatefulSet 的修订历史中可以维护的修订版本个数上限。
          修订历史中包含的是与当前应用的规约不同的修订版本。
          此字段不可变更。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the `replicas` count.
          It must match the Pod template's `labels`.
          Cannot be updated.
        x-kab-description-zh: |-
          此字段是一个针对 Pod 的标签查询条件，匹配到的 Pod 个数应该与 `replicas` 计数相同。
          选择算符必须与 Pod 模板中的 `labels` 完全一致。
          此字段不可变更。
      serviceName:
        description: |-
          The name of the Service that governs this StatefulSet.
          This Service must exist before the StatefulSet, and is responsible for
          the network identity of the set.
          Pods get DNS/hostnames that follow the pattern:
          ```
          <pod-specific-string>.serviceName.default.svc.cluster.local
          ```

          where `pod-specific-string` is managed by the StatefulSet controller.
          Cannot be updated.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          与此 StatefulSet 对应的 Service 的名称。
          此 Service 必须先于 StatefulSet 存在，负责为集合中的 Pod 提供网络标识。
          集合中的 Pod 会获得模式如下的 DNS 和主机名：

          ```
          <pod-specific-string>.serviceName.default.svc.cluster.local
          ```

          其中 `pod-specific-string` 由 StatefulSet 控制器管理。

          此字段不可更新。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: |-
          An object that describes the Pod that will be created if insufficient replicas are detected.
          Each Pod stamped out by the StatefulSet will fulfill this `template`,
          but have a unique identity from the rest of the StatefulSet.
          Each Pod will be named with the format `<statefulsetname>-<podindex>`.
          For example, a Pod in a StatefulSet named `"web"` with index number `"3"` would be named `"web-3"`.
          Currently only check if the `metadata.labels` are set.
          This field can be updated.
          The only allowed `template.spec.restartPolicy` value is "Always".
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。当检测到副本个数不足时，会基于此对象来创建 Pod。
          StatefulSet 所创建的每个 Pod 都是基于此 `template` 的，但各个 Pod 都有一个与众不同的标识。
          所有 Pod 的名称都遵从 `<StatefulSet 名称>-<Pod 索引>` 的格式。
          例如，对于一个名为 `"web"` 的 StatefulSet 中的、索引编号为 `"3"` 的 Pod，
          其名称为 `"web-3"`。
          目前，服务器端仅检查 `metadata.labels` 是否被设置了。
          另外，模板中的 `spec.restartPolicy` 只能取值 `"Always"`。
          此字段不可变更。
      updateStrategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy'
        description: |-
          The update strategy that will be employed to update Pods in the StatefulSet
          when a revision is made to `template`.
          This field can be updated.
        x-kab-description-zh: |-
          当对 `template` 进行修订时，需要更新 StatefulSet 中的 Pod。
          此字段用来确定更新的策略。其配置不可变更。
      volumeClaimTemplates:
        description: |-
          A list of claims that Pods are allowed to reference.
          The StatefulSet controller is responsible for mapping network identities to
          claims in a way that maintains the identity of a Pod.
          Every claim in this list must have at least one matching (by name) `volumeMount`
          in one container in the template.
          A claim in this list takes precedence over any volumes in the template, with
          the same name.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
        type: array
        x-kab-description-zh: |-
          此字段包含若干 PVC，可供 Pod 引用。
          StatefulSet 的控制器负责将网络标识符映射到 PVC，并且确保维持每个 Pod 的标识。
          列表中的每个 PVC 都必须在 `template` 的一个容器的 `volumeMount` 中出现。
          列表中的 PVC 会优先于 `template` 中所指定的所有同名数据卷。

          此字段不可变更。
        x-kubernetes-list-type: atomic
    required:
      - podManagementPolicy
      - replicas
      - revisionHistoryLimit
      - selector
      - serviceName
      - template
      - updateStrategy
      - volumeClaimTemplates
    type: object
    x-kab-description-zh: StatefulSet 的规约。
  io.k8s.api.apps.v1.StatefulSetSpec.UPDATE:
    description: The specification of a StatefulSet.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without
          any of its Container crashing for it to be considered available.
          Defaults to 0 (Pod will be considered available as soon as it is ready).
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 需要进入到没有容器崩溃的就绪状态，并持续给定的秒数之后，才会被认为可用。
          默认值 0 （Pod 一旦进入就绪状态之后立即被视为可用）。
      ordinals:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetOrdinals'
        description: |-
          `ordinals` controls the numbering of replica indices in a StatefulSet.
          The default ordinals behavior assigns a `0` index to the first replica and increments
          the index by one for each additional replica requested.
          Using the `ordinals` field requires the `StatefulSetStartOrdinal` feature gate
          to be enabled, which is Beta.
        x-kab-description-zh: |-
          此字段控制如何为 StatefulSet 中的副本索引编号。
          默认的序号分配行为是将索引 `0` 分配给第一个副本，之后对所请求的每个额外副本将索引加一。
          使用 `ordinals` 字段需要启用 `StatefulSetStartOrdinal` 特性门控。
          该特性目前处于 Beta 阶段。
      persistentVolumeClaimRetentionPolicy:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetPersistentVolumeClaimRetentionPolicy'
        description: |-
          This describes the lifecycle of persistent volume claims created from `volumeClaimTemplates`.
          By default, all persistent volume claims are created as needed and retained
          until manually deleted.
          This policy allows the lifecycle to be altered, for example by deleting persistent
          volume claims when their StatefulSet is deleted, or when their Pod is scaled down.
          This requires the `StatefulSetAutoDeletePVC` feature gate to be enabled, which is Alpha.
        x-kab-description-zh: |-
          此字段描述基于 `volumeClaimTemplates` 所创建的 PVC 的生命周期。
          默认情况下，按需创建的所有 PVC 都会被保留，直至手动删除。
          这一字段允许 PVC 的生命周期用不同方式管理。例如当它们所对应的 StatefulSet 被删除，
          或者 Pod 集合被缩容时，可以删除按需创建的 PVC。
          设置此字段要求启用 `StatefulSetAutoDeletePVC` 特性门控。该特性目前处于 Alpha 阶段。
      replicas:
        default: 1
        description: |-
          The desired number of replicas of the given `template`.
          These are replicas in the sense that they are instantiations of the same `template`,
          but individual replicas also have a consistent identity.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          期望运行的、使用给定 `template` 的副本个数。这里的副本都是基于同一个 `template` 创建的，
          不过各个副本都有一个一致性的标识。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: |-
          An object that describes the Pod that will be created if insufficient replicas are detected.
          Each Pod stamped out by the StatefulSet will fulfill this `template`,
          but have a unique identity from the rest of the StatefulSet.
          Each Pod will be named with the format `<statefulsetname>-<podindex>`.
          For example, a Pod in a StatefulSet named `"web"` with index number `"3"` would be named `"web-3"`.
          Currently only check if the `metadata.labels` are set.
          The only allowed `template.spec.restartPolicy` value is "Always".
        x-kab-description-zh: |-
          一个用来描述要被创建的 Pod 的对象。当检测到副本个数不足时，会基于此对象来创建 Pod。
          StatefulSet 所创建的每个 Pod 都是基于此 `template` 的，但各个 Pod 都有一个与众不同的标识。
          所有 Pod 的名称都遵从 `<StatefulSet 名称>-<Pod 索引>` 的格式。
          例如，对于一个名为 `"web"` 的 StatefulSet 中的、索引编号为 `"3"` 的 Pod，
          其名称为 `"web-3"`。
          目前，服务器端仅检查 `metadata.labels` 是否被设置了。
          另外，模板中的 `spec.restartPolicy` 只能取值 `"Always"`。
      updateStrategy:
        $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetUpdateStrategy'
        description: |-
          The update strategy that will be employed to update Pods in the StatefulSet
          when a revision is made to `template`.
        x-kab-description-zh: |-
          当对 `template` 进行修订时，需要更新 StatefulSet 中的 Pod。
          此字段用来确定更新的策略。
    type: object
    x-kab-description-zh: StatefulSet 的规约。
  io.k8s.api.apps.v1.StatefulSetStatus:
    description: The current state of a StatefulSet.
    properties:
      availableReplicas:
        description: Total number of available Pods (ready for at least `minReadySeconds`)
          targeted by this StatefulSet.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 此 StatefulSet 的处于可用状态下（持续 `minReadySeconds` 秒保持就绪）的副本个数。
      collisionCount:
        description: |-
          The count of hash collisions for the StatefulSet.
          The StatefulSet controller uses this field as a collision avoidance mechanism when
          it needs to create the name for the newest `ControllerRevision`.
          When updated, this field cannot be decremented.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          StatefulSet 上发生的哈希冲突计数。
          StatefulSet 控制器在为最新的 ControllerRevision 生成名字时，
          使用此字段来作为一种冲突避免机制，
          更新此字段时，字段值不可以减少。
      conditions:
        description: The latest observations of a StatefulSet's state.
        items:
          $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetCondition'
        type: array
        x-kab-description-zh: 关于 StatefulSet 状态的最新观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      currentReplicas:
        description: |-
          The number of Pods created by the StatefulSet controller from the
          StatefulSet version indicated by `currentRevision`.
          Cannot be greater than `replicas`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          StatefulSet 控制器基于 `currentRevision` 所给出的 StatefulSet
          版本所生成的 Pod 个数。
          此字段值不可以大于 `replicas` 值。
      currentRevision:
        description: |-
          If not empty, indicates the version of the StatefulSet used to generate
          Pods in the sequence `[0, currentReplicas)`.
        type: string
        x-kab-description-zh: |-
          若此字段不为空，则其字段值给出的是 StatefulSet 用来生成序号为 `[0, currentReplicas)`
          范围内的各个 Pod 时所用的版本。
      observedGeneration:
        description: |-
          The most recent generation observed by the StatefulSet controller.
          It corresponds to the StatefulSet's generation, which is updated on mutation
          by the API Server.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Deployment 控制器所观测到的最新的代数。
          此值对应于 StatefulSet 的代数，由 API 服务器在变更时更新。
      readyReplicas:
        description: |-
          The number of Pods created for the StatefulSet with a `"Ready"` condition.
          Cannot be greater than `replicas`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          为 StatefulSet 所创建的 Pod 中，带有 `"Ready"` 状况标记的 Pod 个数。
          此字段值不会大于 `replicas` 取值。
      replicas:
        description: The number of Pods created by the StatefulSet controller.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: StatefulSet 控制器所创建的 Pod 总数。
      updateRevision:
        description: |-
          If not empty, indicates the version of the StatefulSet used to generate
          Pods in the sequence `[replicas-updatedReplicas, replicas)`.
        type: string
        x-kab-description-zh: |-
          若此字段不为空，则其字段值给出的是 StatefulSet 用来生成序号为
          `[replicas-updatedReplicas, replicas)` 范围内的各个 Pod 时所用的版本。
      updatedReplicas:
        description: |-
          The number of Pods created by the StatefulSet controller from the
          StatefulSet version indicated by `updateRevision`. Cannot be greater than `replicas`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          StatefulSet 控制器基于 `updateRevision` 所给出的 StatefulSet
          版本所生成的 Pod 个数。
          此字段值不可以大于 `replicas` 值。
    required:
      - replicas
    type: object
    x-kab-description-zh: StatefulSet 的当前状态。
  io.k8s.api.apps.v1.StatefulSetUpdateStrategy:
    description: |-
      StatefulSetUpdateStrategy indicates the strategy that the StatefulSet
      controller will use to perform updates.
      It includes any additional parameters necessary to perform the update
      for the indicated strategy.
    properties:
      rollingUpdate:
        $ref: '#/definitions/io.k8s.api.apps.v1.RollingUpdateStatefulSetStrategy'
        description: |-
          Rolling update configuration parameters.
          Present only if `type` is set to `"RollingUpdate"`.
          This is required for rolling update.
          It cannot be specified when `type` is not `"RollingUpdate"`.
        x-kab-description-zh: |-
          滚动更新的配置参数。当 `type` 为 `"RollingUpdate"` 时，此字段是必需的。
          当 `type` 是 `"Recreate"` 时，此字段不可设置。
      type:
        default: RollingUpdate
        description: |-
          This indicates the type of the StatefulSet update strategy.
          Possible enum values:

          - `"OnDelete"`: triggers the legacy behavior.
            Version tracking and ordered rolling restarts are disabled.
            Pods are recreated from the StatefulSet spec when they are manually deleted.
            When a scale operation is performed with this strategy, specification version
            indicated by the StatefulSet's `currentRevision`.
          - `"RollingUpdate"`: indicates that update will be applied to all Pods
            in the StatefulSet with respect to the StatefulSet ordering constraints.
            When a scale operation is performed with this strategy, new Pods will be created
            from the specification version indicated by the StatefulSet's `updateRevision`.
        enum:
          - OnDelete
          - RollingUpdate
        type: string
        x-kab-description-zh: |-
          此字段标明 StatefulSet 更新策略的类型。可选值包括：

          - `"OnDelete"`：触发原来的更新行为；不支持版本跟踪和带顺序的滚动重启操作。
            当 Pod 被手动删除时，会基于 StatefulSet 的规约来重新创建。
            设置了此策略之后，执行规模扩缩操作时，会使用 StatefulSet 的 `currentVersion`
            所给的规约版本。
          - `"RollingUpdate"`：标明对 StatefulSet 中所有 Pod 执行更新操作时都会遵从
            StatefulSet 的顺序约束。
            设置了此策略之后，执行规模扩缩操作时，创建新 Pod 会使用 StatefulSet 的
            `updateVersion` 所给的规约版本。
    type: object
    x-kab-description-zh: |-
      StatefulSetUpdateStrategy 设置 StatefulSet 控制器用来执行更新的策略。
      其中包含针对所给策略来执行更新时所需要的参数。
  io.k8s.api.authentication.v1.BoundObjectReference:
    description: A reference to an object that a token is bound to.
    properties:
      apiVersion:
        description: API group and version of the referent
        minLength: 1
        type: string
        x-kab-description-zh: 被引用者的 API 组与版本。
      kind:
        description: Kind name of the referent
        enum:
          - Pod
          - Secret
        type: string
        x-kab-description-zh: 被引用者的类别（Kind）名称。
      name:
        description: Name of the referent.
        type: string
        x-kab-description-zh: 被引用者的名称。
      uid:
        description: UID of the referent.
        type: string
        x-kab-description-zh: 被引用者的 ID。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: 对令牌所绑定的某个对象的引用。
  io.k8s.api.authentication.v1.SelfSubjectReview.CREATE:
    description: |-
      SelfSubjectReview contains the user information that the kube-apiserver
      has about the user making this request.
      When using impersonation, users will receive the user info of the user
      being impersonated.
      If impersonation or request header authentication is used, any extra keys
      will have their case ignored and returned as lowercase.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      SelfSubjectReview 包含 kube-apiserver 所了解的、关于发起请求的用户相关的信息。
      当使用身份伪装时，用户会收到被伪装的用户的信息。
      如果使用了身份伪装或者基于头部的身份认证，则服务器会忽略所有额外的主键的大小写，
      并以小写字母的形式返回。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1
  io.k8s.api.authentication.v1.SelfSubjectReview.GET:
    description: |-
      SelfSubjectReview contains the user information that the kube-apiserver
      has about the user making this request.
      When using impersonation, users will receive the user info of the user
      being impersonated.
      If impersonation or request header authentication is used, any extra keys
      will have their case ignored and returned as lowercase.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
      status:
        $ref: '#/definitions/io.k8s.api.authentication.v1.SelfSubjectReviewStatus'
        description: '`status` is filled in by the server with the user attributes.'
        x-kab-description-zh: '`status` 由服务器填充，其中包含用户属性信息。'
    required:
      - apiVersion
      - kind
      - metadata
      - status
    type: object
    x-kab-description-zh: |-
      SelfSubjectReview 包含 kube-apiserver 所了解的、关于发起请求的用户相关的信息。
      当使用身份伪装时，用户会收到被伪装的用户的信息。
      如果使用了身份伪装或者基于头部的身份认证，则服务器会忽略所有额外的主键的大小写，
      并以小写字母的形式返回。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1
  io.k8s.api.authentication.v1.SelfSubjectReviewStatus:
    description: SelfSubjectReviewStatus is filled by the kube-apiserver and sent
      back to a user.
    properties:
      userInfo:
        $ref: '#/definitions/io.k8s.api.authentication.v1.UserInfo'
        description: User attributes of the user making this request.
        x-kab-description-zh: 发起当前请求的用户的用户信息。
    required:
      - userInfo
    type: object
    x-kab-description-zh: SelfSubjectReviewStatus 由 API 服务器填充并返回给用户。
  io.k8s.api.authentication.v1.TokenRequest.CREATE:
    description: TokenRequest requests a token for a given service account.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - TokenRequest
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec'
        description: Information about the request being evaluated.
        x-kab-description-zh: 关于所评估的请求的信息。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: TokenRequest 为一个给定的用户账号请求令牌。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: TokenRequest
        version: v1
  io.k8s.api.authentication.v1.TokenRequest.GET:
    description: TokenRequest requests a token for a given service account.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - TokenRequest
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequestSpec'
        description: Information about the request being evaluated.
        x-kab-description-zh: 关于所评估的请求的信息。
      status:
        $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequestStatus'
        description: |-
          This field is filled in by the server and indicates whether the token
          can be authenticated.
        x-kab-description-zh: 此字段由服务器填充，标明令牌是否可用于身份认证。
    required:
      - apiVersion
      - kind
      - spec
      - status
    type: object
    x-kab-description-zh: TokenRequest 为一个给定的用户账号请求令牌。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: TokenRequest
        version: v1
  io.k8s.api.authentication.v1.TokenRequestSpec:
    description: Client provided parameters for a token request.
    properties:
      audiences:
        description: |-
          The intendend audiences of the token.
          A recipient of a token must identify himself with an identifier in the list of
          `audiences` of the token, and otherwise should reject the token.
          A token issued for multiple `audiences` may be used to authenticate against
          any of the `audiences` listed but implies a high degree of trust
          between the target audiences.
        items:
          description: One of the audiences.
          minLength: 1
          type: string
          x-kab-description-zh: 受众之一
        type: array
        x-kab-description-zh: |-
          令牌所针对的受众。
          收到此令牌者必须能够提供一个身份标识，并且该身份标识位于令牌的 `audiences`
          列表中，否则就应该拒绝此令牌。
          针对多个 `audiences` 所发放的令牌可以用来对 `audiences`
          列表中的任意标识提供身份认证，不过这也意味着着目标受众之间存在高度信任。
        x-kubernetes-list-type: atomic
      boundObjectRef:
        $ref: '#/definitions/io.k8s.api.authentication.v1.BoundObjectReference'
        description: |-
          A reference to an object that the token will be bound to.
          The token will only be valid for as long as the bound object exists.
          The API server's `TokenReview` endpoint will validate the `boundObjectRef`,
          but other `audiences` may not.
          Keep `expirationSeconds` small if you want prompt revocation.
        x-kab-description-zh: |-
          对令牌将要绑定的对象的引用。
          只有在所绑定的对象存在时，令牌是合法有效的。
          API 服务器的 `TokenReview` 端点会对 `boundObjectRef` 作合法性检查，
          但 `audiences` 中的其他主体未必这样做。
          如果你希望令牌能够被及时回收，可以控制 `expirationSeconds` 的值不要过大。
      expirationSeconds:
        description: |-
          The requested duration of validity of the request.
          The token issuer may return a token with a different validity duration
          so a client needs to check the `expirationTimestamp` field in a response.
        format: int64
        maximum: 4294967295
        minimum: 600
        type: integer
        x-kab-description-zh: |-
          请求中对令牌合法期限的要求。
          令牌的发放者可能会返回一个合法期限时长不同的令牌，所以客户端需要检查响应中的
          `expirationTimestamp` 字段值。
    required:
      - audiences
    type: object
    x-kab-description-zh: 客户端为令牌请求提供的参数。
  io.k8s.api.authentication.v1.TokenRequestStatus:
    description: The result of a token request.
    properties:
      expirationTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time of expiration of the returned token.
        x-kab-description-zh: 所返回的令牌的到期时间点。
      token:
        description: The opaque bearer token.
        minLength: 1
        type: string
        x-kab-description-zh: 不透明的持有者令牌本身。
    required:
      - expirationTimestamp
      - token
    type: object
    x-kab-description-zh: 令牌请求的结果。
  io.k8s.api.authentication.v1.TokenReview.CREATE:
    description: |-
      TokenReview attempts to authenticate a token to a known user.
      **Note**: TokenReview requests may be cached by the webhook token authenticator
      plugin in the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - TokenReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。元数据中不能指定 `namespace`。
      spec:
        $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec'
        description: Information about the request being evaluated
        x-kab-description-zh: 关于所评估的请求的信息。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: |-
      TokenReview API 会尝试基于令牌来为某个已知用户提供身份认证。
      **注意**：TokenReview 请求可能会被 API 服务器中的令牌身份校验
      Webhook 组件缓存。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: TokenReview
        version: v1
  io.k8s.api.authentication.v1.TokenReview.GET:
    description: |-
      TokenReview attempts to authenticate a token to a known user.
      **Note**: TokenReview requests may be cached by the webhook token authenticator
      plugin in the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - TokenReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReviewSpec'
        description: Information about the request being evaluated
        x-kab-description-zh: 关于所评估的请求的信息。
      status:
        $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReviewStatus'
        description: Indicates whether the request can be authenticated; filled in
          by the server.
        x-kab-description-zh: 标明请求是否可通过身份认证的信息，由服务器填充。
    required:
      - apiVersion
      - kind
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      TokenReview API 会尝试基于令牌来为某个已知用户提供身份认证。
      **注意**：TokenReview 请求可能会被 API 服务器中的令牌身份校验
      Webhook 组件缓存。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: TokenReview
        version: v1
  io.k8s.api.authentication.v1.TokenReviewSpec:
    description: A description of the token authentication request.
    properties:
      audiences:
        description: |-
          A list of the identifiers that the resource server presented with
          the token identifies as.
          Audience-aware token authenticators will verify that the token was intended
          for at least one of the `audiences`.
          If no audiences are provided, the `audiences` will default to the
          audiences of the Kubernetes API server.
        items:
          description: An audience that can be identified.
          type: string
          x-kab-description-zh: 可以识别的受众之一。
        type: array
        x-kab-description-zh: |-
          资源服务器收到令牌之后可以识别的标识列表。
          能够感知受众的令牌身份认证组件会确认令牌至少与 `audiences` 中的一项相对应。
          如果请求中没有提供受众信息，则默认的 `audiences` 是 Kubernetes API
          服务器的受众。
        x-kubernetes-list-type: atomic
      token:
        description: The opaque bearer token.
        minLength: 1
        type: string
        x-kab-description-zh: 不透明的持有者令牌数据。
    required:
      - token
    type: object
    x-kab-description-zh: 关于令牌身份认证请求的描述。
  io.k8s.api.authentication.v1.TokenReviewStatus:
    description: The result of the token authentication request.
    properties:
      audiences:
        description: |-
          The audience identifiers chosen by the authenticator that are compatible
          with both the TokenReview and `token`.
          An identifier is any identifier in the intersection of the `audiences`
          in the TokenReview's `spec` and the token's `audiences`.
          A client of the TokenReview API that sets the `spec.audiences` field
          should validate that a compatible audience identifier is returned in the
          `status.audiences` field to ensure that the TokenReview server is audience aware.
          If a TokenReview returns an empty `status.audiences` field where
          `status.authenticated` is `"true"`, the token is valid against the audience
          of the Kubernetes API server.
        items:
          description: One of the audience identifiers.
          type: string
          x-kab-description-zh: 受众标识之一。
        type: array
        x-kab-description-zh: |-
          身份认证组件所选择的受众标识列表，其中的身份标识与 TokenReview 和 `token` 兼容。
          所谓的标识（Identifier）可以是 TokenReview 的 `spec` 中的 `audiences`
          与令牌的 `audiences` 的交集中的任何一个受众标识。
          TokenRview API 的客户端如果设置了 `spec.audiences` 字段，就需要对
          `status.audiences` 字段中返回的受众标识符是否兼容，从而确认 TokenReview
          服务器是否能够感知受众信息。
          如果 TokenReview API 返回的 `status.audiences` 字段为空，而
          `status.authenticated` 为 `"true"`，则可认为令牌对于 Kubernetes API
          服务器的受众而言是合法的。
        x-kubernets-list-type: atomic
      authenticated:
        description: This indicates that the token was associated with a known user.
        type: boolean
        x-kab-description-zh: 此字段标明令牌是否与某用户关联。
      error:
        description: This indicates that the token couldn't be checked
        type: string
        x-kab-description-zh: 此字段表明令牌无法被检验。
      user:
        $ref: '#/definitions/io.k8s.api.authentication.v1.UserInfo'
        description: The UserInfo associated with the provided token.
        x-kab-description-zh: 与所提供的令牌相关的 UserInfo。
    required:
      - audiences
    type: object
    x-kab-description-zh: 令牌身份认证请求的结果。
  io.k8s.api.authentication.v1.UserInfo:
    description: Information about a user
    properties:
      extra:
        additionalProperties:
          items:
            type: string
          type: array
        description: Additional information provided by the authenticator.
        type: object
        x-kab-description-zh: 身份校验组件所提供的额外信息。
      groups:
        description: The names of groups this user is a part of.
        items:
          description: Name of a user group the user belongs to.
          type: string
          x-kab-description-zh: 用户所属的某个组的组名。
        type: array
        x-kab-description-zh: 用户所属的用户组的列表。
        x-kubernetes-list-type: atomic
      uid:
        description: |-
          A unique value that identifies this user across time.
          If this user is deleted and another user by the same name is added,
          they will have different `uid`.
        type: string
        x-kab-description-zh: |-
          一个用来跨不同时间区间来标识当前用户的唯一字符串值。
          如果此用户被删除，而且系统中添加了新的同名用户，新用户的 `uid` 会不同与老用户。
      username:
        description: The name that uniquely identifies this user among all active
          users.
        type: string
        x-kab-description-zh: 在所有活跃用户之间用来唯一标识当前用户的一个名称字符串。
    type: object
    x-kab-description-zh: 关于某个用户的信息。
  io.k8s.api.authentication.v1alpha1.SelfSubjectReview.CREATE:
    description: |-
      SelfSubjectReview contains the user information that the kube-apiserver
      has about the user making this request.
      When using impersonation, users will receive the user info of the user
      being impersonated.
      If impersonation or request header authentication is used, any extra keys
      will have their case ignored and returned as lowercase.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      SelfSubjectReview 包含 kube-apiserver 所了解的、关于发起请求的用户相关的信息。
      当使用身份伪装时，用户会收到被伪装的用户的信息。
      如果使用了身份伪装或者基于头部的身份认证，则服务器会忽略所有额外的主键的大小写，
      并以小写字母的形式返回。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1alpha1
  io.k8s.api.authentication.v1alpha1.SelfSubjectReview.GET:
    description: |-
      SelfSubjectReview contains the user information that the kube-apiserver
      has about the user making this request.
      When using impersonation, users will receive the user info of the user
      being impersonated.
      If impersonation or request header authentication is used, any extra keys
      will have their case ignored and returned as lowercase.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
      status:
        $ref: '#/definitions/io.k8s.api.authentication.v1alpha1.SelfSubjectReviewStatus'
        description: '`status` is filled in by the server with the user attributes.'
        x-kab-description-zh: '`status` 由服务器填充，其中包含用户属性信息。'
    required:
      - apiVersion
      - kind
      - metadata
      - status
    type: object
    x-kab-description-zh: |-
      SelfSubjectReview 包含 kube-apiserver 所了解的、关于发起请求的用户相关的信息。
      当使用身份伪装时，用户会收到被伪装的用户的信息。
      如果使用了身份伪装或者基于头部的身份认证，则服务器会忽略所有额外的主键的大小写，
      并以小写字母的形式返回。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1alpha1
  io.k8s.api.authentication.v1alpha1.SelfSubjectReviewStatus:
    description: SelfSubjectReviewStatus is filled by the kube-apiserver and sent
      back to a user.
    properties:
      userInfo:
        $ref: '#/definitions/io.k8s.api.authentication.v1.UserInfo'
        description: User attributes of the user making this request.
        x-kab-description-zh: 发起当前请求的用户的用户信息。
    required:
      - userInfo
    type: object
    x-kab-description-zh: SelfSubjectReviewStatus 由 API 服务器填充并返回给用户。
  io.k8s.api.authentication.v1beta1.SelfSubjectReview.CREATE:
    description: |-
      SelfSubjectReview contains the user information that the kube-apiserver
      has about the user making this request.
      When using impersonation, users will receive the user info of the user
      being impersonated.
      If impersonation or request header authentication is used, any extra keys
      will have their case ignored and returned as lowercase.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      SelfSubjectReview 包含 kube-apiserver 所了解的、关于发起请求的用户相关的信息。
      当使用身份伪装时，用户会收到被伪装的用户的信息。
      如果使用了身份伪装或者基于头部的身份认证，则服务器会忽略所有额外的主键的大小写，
      并以小写字母的形式返回。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1beta1
  io.k8s.api.authentication.v1beta1.SelfSubjectReview.GET:
    description: |-
      SelfSubjectReview contains the user information that the kube-apiserver
      has about the user making this request.
      When using impersonation, users will receive the user info of the user
      being impersonated.
      If impersonation or request header authentication is used, any extra keys
      will have their case ignored and returned as lowercase.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authentication.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
      status:
        $ref: '#/definitions/io.k8s.api.authentication.v1beta1.SelfSubjectReviewStatus'
        description: '`status` is filled in by the server with the user attributes.'
        x-kab-description-zh: '`status` 由服务器填充，其中包含用户属性信息。'
    required:
      - apiVersion
      - kind
      - metadata
      - status
    type: object
    x-kab-description-zh: |-
      SelfSubjectReview 包含 kube-apiserver 所了解的、关于发起请求的用户相关的信息。
      当使用身份伪装时，用户会收到被伪装的用户的信息。
      如果使用了身份伪装或者基于头部的身份认证，则服务器会忽略所有额外的主键的大小写，
      并以小写字母的形式返回。
    x-kubernetes-group-version-kind:
      - group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1beta1
  io.k8s.api.authentication.v1beta1.SelfSubjectReviewStatus:
    description: SelfSubjectReviewStatus is filled by the kube-apiserver and sent
      back to a user.
    properties:
      userInfo:
        $ref: '#/definitions/io.k8s.api.authentication.v1.UserInfo'
        description: User attributes of the user making this request.
        x-kab-description-zh: 发起当前请求的用户的用户信息。
    required:
      - userInfo
    type: object
    x-kab-description-zh: SelfSubjectReviewStatus 由 API 服务器填充并返回给用户。
  io.k8s.api.authorization.v1.LocalSubjectAccessReview.CREATE:
    description: |-
      LocalSubjectAccessReview checks whether or not a user or group can perform
      an action in a given namespace. Having a namespace scoped resource makes it much
      easier to grant namespace scoped policy that includes permissions checking.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - LocalSubjectAccessReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. Only the `namespace` field is allowed for
          a `LocalSubjectAccessReview` object.
        x-kab-description-zh: 标准的对象元数据。对于 `LocalSubjectAccessReview` 对象而言，只能设置 `namespace`
          字段。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec'
        description: |-
          Information about the request being evaluated.
          The `namespace` of the `spec.resourceAttributes` must be equal to
          the namespace you made the request against, i.e. the `metadata.namespace`.
          If empty, it is defaulted. The `spec.resourceAttributes`
          must be empty for a `LocalSubjectAccessReview` object.
        x-kab-description-zh: |-
          关于要被评估的请求的信息。
          `spec.resourceAttributes` 的 `namespace` 必须与请求所针对的名字空间
          （即 `metadata.namespace`）相同。
          如果字段为空，则全部采用默认值填充。
          对于 `LocalSubjectAccessReview` 对象而言，`spec.resourceAttributes` 必须为空。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: |-
      LocalSubjectAccessReview 检查是否用户或组可以在给定的名字空间中执行某操作。
      提供一个名字空间作用域的资源能够简化名字空间层面的策略，方便执行权限检查。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: LocalSubjectAccessReview
        version: v1
  io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET:
    description: |-
      LocalSubjectAccessReview checks whether or not a user or group can perform
      an action in a given namespace. Having a namespace scoped resource makes it much
      easier to grant namespace scoped policy that includes permissions checking.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - LocalSubjectAccessReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec'
        description: |-
          Information about the request being evaluated.
          The `namespace` of the `spec.resourceAttributes` must be equal to
          the namespace you made the request against, i.e. the `metadata.namespace`.
          If empty, it is defaulted.
        x-kab-description-zh: |-
          关于要被评估的请求的信息。
          `spec.resourceAttributes` 的 `namespace` 必须与请求所针对的名字空间
          （即 `metadata.namespace`）相同。
          如果字段为空，则全部采用默认值填充。
      status:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus'
        description: |-
          Status is filled in by the server and indicates whether the request
          is allowed or not.
        x-kab-description-zh: 状态信息由服务器填充，表明请求是否被允许。
    required:
      - apiVersion
      - kind
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      LocalSubjectAccessReview 检查是否用户或组可以在给定的名字空间中执行某操作。
      提供一个名字空间作用域的资源能够简化名字空间层面的策略，方便执行权限检查。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: LocalSubjectAccessReview
        version: v1
  io.k8s.api.authorization.v1.NonResourceAttributes:
    description: The authorization attributes available for non-resource requests
    properties:
      path:
        description: The URL path of the request
        type: string
        x-kab-description-zh: 请求的 URL 路径。
      verb:
        description: The standard HTTP verb
        type: string
        x-kab-description-zh: 请求的标准 HTTP 动词。
    type: object
    x-kab-description-zh: 供鉴权使用的非资源请求属性。
  io.k8s.api.authorization.v1.NonResourceRule:
    description: Information that describes a rule for the non-resource path.
    properties:
      nonResourceURLs:
        description: |-
          A set of partial URLs that a user should have access to.
          Wildcards (`"*"`) are allowed, but only as the full, final step in the path.
          `"*"` means all.
        items:
          description: A partial URL that a user should have access to.
          type: string
          x-kab-description-zh: 一个不完整的 URL，用来代表用户应该有权访问的路径。
        type: array
        x-kab-description-zh: |-
          此列表中的每一项都是一个不完整的 URL，用来代表用户应该有权访问的路径。
          可以使用通配符（`*`），但通配符只能出现在路径中的最后一段，并且作为完整的一段使用。
          通配符 `*` 表示所有子路径。
        x-kubernetes-list-type: atomic
      verbs:
        description: |-
          A list of HTTP API verbs, like: `"get"`, `"post"`, `"put"`, `"delete"`,
          `"patch"`, `"head"`, `"options"`. `"*"` means all.
        items:
          description: A HTTP API verb.
          type: string
          x-kab-description-zh: 一个 HTTP API 动词。
        type: array
        x-kab-description-zh: |-
          此列表给出一组 HTTP API 动词，例如：`"get"`、`"post"`、`"put"`、`"delete"`、
          `"patch"`、`"head"`、`"options"`。
          `"*"` 表示所有动词。
        x-kubernetes-list-type: atomic
    required:
      - verbs
    type: object
    x-kab-description-zh: 用来描述与某非资源路径相关的规则。
  io.k8s.api.authorization.v1.ResourceAttributes:
    description: The authorization attributes available for resource requests
    properties:
      group:
        description: The API group of the `resource`. `"*"` means all.
        type: string
        x-kab-description-zh: '`resource` 指定的资源所属的 API 组。`"*"` 意为所有 API 组。'
      name:
        description: |-
          The name of the resource being requested for a `"get"` request or deleted
          for a `"delete"` request. `""` (empty) means all.
        type: string
        x-kab-description-zh: |-
          `"get"` 请求所要访问的，或者 `"delete"` 请求所要删除的资源的名称。
          `""` （空字符串）意为所有资源。
      namespace:
        description: |-
          The namespace of the action being requested.
          Currently, there is no distinction between no namespace and all namespaces.
          Empty string (`""`) is defaulted for `LocalSubjectAccessReviews`.
          Value should be empty string (`""`) for cluster-scoped resources.
          Empty string (`""`) means *all* for namespace scoped resources from a
          `SubjectAccessReview` or `SelfSubjectAccessReview`.
        type: string
        x-kab-description-zh: |-
          请求的操作所针对的名字空间。
          目前尚无法区别未指定名字空间与所有名字空间这两种情形。
          对于 `LocalSubjectAccessReview` 而言，默认值为空字符串（`""`）。
          对于集群作用域的资源，此字符串的值应该是空字符串（`""`）。
          对于 `SubjectAccessReview` 或者 `SelfSubjectAccessReview` 而言，
          空字符串（`""`）意味着**所有**名字空间作用域的资源。
      resource:
        description: One of the existing resource types. `"*"` means all.
        k-kab-description-zh: 现有资源类别之一。`"*"` 意为所有资源类别。
        type: string
      subresource:
        description: One of the existing resource types. `""` means none.
        k-kab-description-zh: 现有资源类别之一。`""` 意为排除所有资源类别。
        type: string
      verb:
        description: |-
          A kubernetes resource API verb, like: `"get"`, `"list"`, `"watch"`,
          `"create"`, `"update"`, `"delete"`, `"proxy"`. `"*"` means all.
        k-kab-description-zh: |-
          一个 Kubernetes 资源 API 动词。例如：`"get"`、`"list"`、`"watch"`、
          `"create"`、`"update"`、`"delete"`、`"proxy"`。`"*"` 意为所有动词。
        type: string
      version:
        description: The API version of the `resource`. `"*"` means all.
        type: string
        x-kab-description-zh: '`resource` 中资源所对应的 API 版本。`"*"` 意为所有 API 版本。'
    type: object
    x-kab-description-zh: 供鉴权使用的资源请求属性。
  io.k8s.api.authorization.v1.ResourceRule:
    description: |-
      The list of actions the subject is allowed to perform on resources.
      The list ordering isn't significant, may contain duplicates, and
      possibly be incomplete.
    properties:
      apiGroups:
        description: |-
          The name of the API group that contains the resources.
          If multiple API groups are specified, any action requested against
          one of the enumerated resources in any API group will be allowed.
          `"*"` means all.
        items:
          description: The name of the API group that contains the resources. `"*"`
            means all.
          type: string
          x-kab-description-zh: 包含资源的 API 组的名称。"*"` 表示所有 API 组。
        type: array
        x-kab-description-zh: |-
          包含资源的 API 组的名称。当存在多个 API 组时，如果所列出的资源出现任一
          API 组中，则意味着允许访问这些资源。`"*"` 表示所有 API 组。
        x-kubernetes-list-type: atomic
      resourceNames:
        description: |-
          An optional list of names that the rule applies to.
          An empty set means that everything is allowed.
          `"*"` means all.
        items:
          description: A name of the resource that the rule applies to. `"*"` means
            all.
          minLength: 1
          type: string
          x-kab-description-zh: 规则所适用的资源名称。`"*"` 同样意味着所有资源都可访问。
        type: array
        x-kab-description-zh: |-
          可选的列表值，其中每个元素是规则所适用的资源名称。
          列表为空意味着所有资源都可以访问。
          列表中存在 `"*"` 同样意味着所有资源都可访问。
        x-kubernetes-list-type: atomic
      resources:
        description: |-
          A list of resources this rule applies to:
          - `"*"` means all in the specified `apiGroups`.
          - `"*/foo"` represents the subresource `"foo"` for all resources
            in the specified `apiGroups`.
        items:
          description: A resource this rule applies to.
          minLength: 1
          type: string
          x-kab-description-zh: 规则所适用的资源。
        type: array
        x-kab-description-zh: |-
          此规则所适用的资源类别列表，特殊通配符包括：
          - `"*"` 意味着给定 `apiGroups` 范围的所有资源；
          - `"*/foo"` 表示给定 `apiGroups` 范围内所有资源的 `"foo"` 子资源。
        x-kubernetes-list-type: atomic
      verbs:
        description: |-
          A list of kubernetes resource API verbs, like: `"get"`, `"list"`,
          `"watch"`, `"create"`, `"update"`, `"delete"`, `"proxy"`.
          `"*"` means all.
        items:
          description: A resource API verb.
          minLength: 1
          type: string
          x-kab-description-zh: 一个资源 API 动词。
        type: array
        x-kab-description-zh: |-
          此列表给出一组 Kubernetes 资源 API 动词，例如：`"get"`、`"list"`、
          `"watch"`、`"create"`、`"update"`、`"delete"`、`"proxy"`。
          `"*"` 表示所有动词。
        x-kubernetes-list-type: atomic
    required:
      - verbs
    type: object
    x-kab-description-zh: |-
      访问主体针对资源可以执行的操作的列表。
      此列表中条目的顺序并不重要，并且可能包含重复表项。
      列表可能不完整。
  io.k8s.api.authorization.v1.SelfSubjectAccessReview.CREATE:
    description: |-
      SelfSubjectAccessReview checks whether or the current user can perform an action.
      Not filling in a `spec.namespace` means *in all namespaces*.
      Self is a special case, because users should always be able to check
      whether they can perform an action.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectAccessReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. For `SelfSubjectAccessReview`, this
          must be empty.
        x-kab-description-zh: 标准的对象元数据。对于 `SelfSubjectAccessReview` 对象而言，此字段必须为空。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec'
        description: Information about the request being evaluated.
        x-kab-description-zh: 关于要被评估的请求的信息。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: |-
      SelfSubjectAccessReview 检查是否当前用户可以执行某操作。
      如果不设置 `spec.namespace`，则意味着**在所有的名字空间中**。
      `Self-` 是一种特殊情况，因为用户总应该能够检查自己是否能够执行某项操作。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: SelfSubjectAccessReview
        version: v1
  io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET:
    description: |-
      SelfSubjectAccessReview checks whether or the current user can perform an action.
      Not filling in a `spec.namespace` means *in all namespaces*.
      Self is a special case, because users should always be able to check
      whether they can perform an action.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectAccessReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec'
        description: Information about the request being evaluated.
      status:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus'
        description: Status filled by the server and indicates whether the request
          is allowed or not.
        x-kab-description-zh: 由服务器填充的状态信息，表明请求是否被允许。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      SelfSubjectAccessReview 检查是否当前用户可以执行某操作。
      如果不设置 `spec.namespace`，则意味着**在所有的名字空间中**。
      `Self-` 是一种特殊情况，因为用户总应该能够检查自己是否能够执行某项操作。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: SelfSubjectAccessReview
        version: v1
  io.k8s.api.authorization.v1.SelfSubjectAccessReviewSpec:
    description: |-
      A description of the access request. One and only one of `nonResourceAttributes`
      and `resourceAttributes` should be specified.
    properties:
      nonResourceAttributes:
        $ref: '#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes'
        description: Information for a non-resource access request
        x-kab-description-zh: 关于非资源访问请求的信息。
      resourceAttributes:
        $ref: '#/definitions/io.k8s.api.authorization.v1.ResourceAttributes'
        description: Information for a resource access request
        x-kab-description-zh: 关于资源访问请求的信息。
    type: object
    x-kab-description-zh: |-
      关于访问请求的描述。`nonResourceAttributes` 和 `resourceAttributes`
      二者必须设置其一，且只能设置其一。
  io.k8s.api.authorization.v1.SelfSubjectRulesReview.CREATE:
    description: |-
      SelfSubjectRulesReview enumerates the set of actions the current user can perform
      within a namespace. The returned list of actions may be incomplete depending on
      the server's authorization mode, and any errors experienced during the evaluation.
      SelfSubjectRulesReview should be used by UIs to show/hide actions,
      or to quickly let an end user reason about their permissions.
      It should **NOT** Be used by external systems to drive authorization decisions
      as this raises confused deputy, cache lifetime/revocation, and correctness concerns.
      `SubjectAccessReview` and `LocalAccessReview` are the correct way to
      defer authorization decisions to the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectRulesReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec'
        description: Information about the request being evaluated.
        x-kab-description-zh: 关于要判断的请求的信息。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: |-
      SelfSubjectRulesReview 列举当前用户可以在给定名字空间中执行的动作。
      返回的动作列表可能是不完整的，取决于服务器上的鉴权模式以及权限评估过程中的出错情况。
      SelfSubjectRulesReview 应该供用户界面来显示或者隐藏动作，
      或者用于最终用户快速查看访问权限。
      外部系统**不要**使用这个 API 来执行鉴权决策，因为这样做会带来责任上的混乱、
      权限缓存生命周期、权限回收甚至正确性上的问题。
      如要判断 API 服务器上的鉴权决策，应该使用 `SubjectAccessReview` 和 `LocalAccessReview`
      这两种资源。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: SelfSubjectRulesReview
        version: v1
  io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET:
    description: |-
      SelfSubjectRulesReview enumerates the set of actions the current user can perform
      within a namespace. The returned list of actions may be incomplete depending on
      the server's authorization mode, and any errors experienced during the evaluation.
      SelfSubjectRulesReview should be used by UIs to show/hide actions,
      or to quickly let an end user reason about their permissions.
      It should **NOT** Be used by external systems to drive authorization decisions
      as this raises confused deputy, cache lifetime/revocation, and correctness concerns.
      `SubjectAccessReview` and `LocalAccessReview` are the correct way to
      defer authorization decisions to the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SelfSubjectRulesReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec'
        description: Information about the request being evaluated.
        x-kab-description-zh: 关于要判断的请求的信息。
      status:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectRulesReviewStatus'
        description: |-
          Status is filled in by the server and indicates the set of actions
          a user can perform.
        x-kab-description-zh: 状态信息由服务器端填充，用来标明用户可以执行的操作集合。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      SelfSubjectRulesReview 列举当前用户可以在给定名字空间中执行的动作。
      返回的动作列表可能是不完整的，取决于服务器上的鉴权模式以及权限评估过程中的出错情况。
      SelfSubjectRulesReview 应该供用户界面来显示或者隐藏动作，
      或者用于最终用户快速查看访问权限。
      外部系统**不要**使用这个 API 来执行鉴权决策，因为这样做会带来责任上的混乱、
      权限缓存生命周期、权限回收甚至正确性上的问题。
      如要判断 API 服务器上的鉴权决策，应该使用 `SubjectAccessReview` 和 `LocalAccessReview`
      这两种资源。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: SelfSubjectRulesReview
        version: v1
  io.k8s.api.authorization.v1.SelfSubjectRulesReviewSpec:
    description: Information about the request being evaluated.
    properties:
      namespace:
        description: Namespace to evaluate rules for.
        minLength: 1
        type: string
        x-kab-description-zh: 要评估的名字空间。
    required:
      - namespace
    type: object
    x-kab-description-zh: 关于要判断的请求的信息。
  io.k8s.api.authorization.v1.SubjectAccessReview.CREATE:
    description: SubjectAccessReview checks whether or not a user or group can perform
      an action.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SubjectAccessReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This must be an empty object.
        x-kab-description-zh: 标准的对象元数据。此字段必须为空。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec'
        description: Information about the request being evaluated
        x-kab-description-zh: 关于要被评估的请求的信息。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: SubjectAccessReview 检查某用户或组是否可以执行某个动作。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: SubjectAccessReview
        version: v1
  io.k8s.api.authorization.v1.SubjectAccessReview.GET:
    description: SubjectAccessReview checks whether or not a user or group can perform
      an action.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - SubjectAccessReview
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewSpec'
        description: Information about the request being evaluated
        x-kab-description-zh: 关于要被评估的请求的信息。
      status:
        $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReviewStatus'
        description: |-
          Status is filled in by the server and indicates whether the request
          is allowed or not.
        x-kab-description-zh: 状态信息由服务器端填充，用来标明用户可以执行的操作集合。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: SubjectAccessReview 检查某用户或组是否可以执行某个动作。
    x-kubernetes-group-version-kind:
      - group: authorization.k8s.io
        kind: SubjectAccessReview
        version: v1
  io.k8s.api.authorization.v1.SubjectAccessReviewSpec:
    description: |-
      A description of the access request. Exactly one of `resourceAttributes`
      and `nonResourceAttributes` must be set. At least one of `user` and `groups` must
      be specified.
    properties:
      extra:
        additionalProperties:
          items:
            type: string
          type: array
        description: |-
          This contains some extra information about the user, returned from the authenticator.
          Since that is input to the authorizer it needs a reflection here.
        type: object
        x-kab-description-zh: |-
          此字段包含身份认证组件所返回的、关于用户的一些附加信息。
          由于这些信息是提供给鉴权组件的输入数据，这里为审视这些数据提供一个机会。
      groups:
        description: The groups for testing. At least one of `user` or `groups` must
          be specified.
        items:
          description: A group for testing.
          type: string
          x-kab-description-zh: 要测试的用户组之一。
        type: array
        x-kab-description-zh: 要测试的用户组列表。`user` 和 `groups` 必须至少设置其一。
        x-kubernetes-list-type: atomic
      nonResourceAttributes:
        $ref: '#/definitions/io.k8s.api.authorization.v1.NonResourceAttributes'
        description: Information for a non-resource access request.
        x-kab-description-zh: 关于非资源访问请求的信息。
      resourceAttributes:
        $ref: '#/definitions/io.k8s.api.authorization.v1.ResourceAttributes'
        description: Information for a resource access request.
        x-kab-description-zh: 关于资源访问请求的信息。
      uid:
        description: UID of the requesting user.
        type: string
        x-kab-description-zh: 发出请求的用户的 UID。
      user:
        description: |-
          The user for testing. At least one of `user` or `groups` must be specified.
          If you specify `user` but not `groups`, then is it interpreted as
          "What if User were not a member of any groups"?
        type: string
        x-kab-description-zh: |-
          要测试的用户组。至少必须设置 `user` 或 `groups` 之一。
          如果设置了 `user`，但未设置 `groups`，则这一请求被解释为
          “如果用户不属于任何一个用户组会怎样？”。
    type: object
    x-kab-description-zh: |-
      关于访问请求的描述。`nonResourceAttributes` 和 `resourceAttributes`
      二者必须设置其一，且只能设置其一。`user` 和 `groups` 二者至少设置其一。
  io.k8s.api.authorization.v1.SubjectAccessReviewStatus:
    description: Status of authorization test request.
    properties:
      allowed:
        description: Flag indicating whether the action would be allowed.
        type: boolean
        x-kab-description-zh: 表明动作是否被允许的标志。
      denied:
        description: |-
          Flag indicating whether the action would be denied.
          If both `allowed` is `false` and `denied` is `false`, then
          the authorizer has no opinion on whether to authorize the action.
          `denied` may not be `true` if `allowed` is `true`.
        type: boolean
        x-kab-description-zh: |-
          表明操作是否被拒绝的标志。
          如果 `allowed` 和 `denied` 都是 `false`，
          则意味着鉴权组件对于是否授权执行该操作没有明确意见。
          如果 `allowed` 是 `true`，则 `denied` 不可以是 `true`。
      evaluationError:
        description: |-
          An indication that some error occurred during the authorization check.
          It is entirely possible to get an error and be able to
          continue determine authorization status in spite of it.
          For instance, RBAC can be missing a role, but enough
          roles are still present and bound to reason about the request.
        type: string
        x-kab-description-zh: |-
          鉴权检查过程中发生某种错误的一个信号。
          收到错误信息，但仍然能够确定鉴权状态的可能性是完全存在的。
          例如，RBAC 可能没有某个角色的信息，但是现有的角色已经能够对请求给出判定。
      reason:
        description: This indicates why a request was allowed or denied.
        type: string
        x-kab-description-zh: 此字段表明某个请求是被准许还是被拒绝。
    required:
      - allowed
    type: object
    x-kab-description-zh: 鉴权测试请求的状态。
  io.k8s.api.authorization.v1.SubjectRulesReviewStatus:
    description: |-
      The result of a rules check.
      This check can be incomplete depending on the set of authorizers the server
      is configured with and any errors experienced during evaluation.
      Because authorization rules are additive, if a rule appears in a list,
      it's safe to assume the subject has that permission even if that list is incomplete.
    properties:
      evaluationError:
        description: |-
          This can appear in combination with `resourceRules` or `nonResourceRules`.
          It indicates an error occurred during rule evaluation, such as
          an authorizer that doesn't support rule evaluation, and that
          `resourceRules` and/or `nonResourceRules` may be incomplete.
        type: string
        x-kab-description-zh: |-
          这一属性可能与 `resourceRules` 或 `nonResourceRules` 一起出现，
          用来标示规则判定期间发生的错误，例如某个鉴权组件不支持规则判定，
          以及 `resourceRules` 与/或 `nonResourceRules` 可能不完整等等这类错误。
      incomplete:
        description: |-
          This indicates that the rules returned by this call are incomplete.
          This is most commonly encountered when an authorizer, such as
          an external authorizer, doesn't support rules evaluation.
        type: boolean
        x-kab-description-zh: |-
          此字段用来标示此调用返回的规则可能是不完整的。
          出现这类问题的常见原因是某个鉴权组件（如某个外部鉴权服务）不支持规则判定。
      nonResourceRules:
        description: |-
          The list of actions the subject is allowed to perform on non-resources.
          The list ordering isn't significant, may contain duplicates, and
          possibly be incomplete.
        items:
          $ref: '#/definitions/io.k8s.api.authorization.v1.NonResourceRule'
        type: array
        x-kab-description-zh: |-
          此列表给出允许访问主体对非资源路径执行的操作。
          列表的顺序可能并不重要，并且其中可能包含重复条目，甚至还可能列表也不完整。
        x-kubernetes-list-type: atomic
      resourceRules:
        description: |-
          The list of actions the subject is allowed to perform on resources.
          The list ordering isn't significant, may contain duplicates, and
          possibly be incomplete.
        items:
          $ref: '#/definitions/io.k8s.api.authorization.v1.ResourceRule'
        type: array
        x-kab-description-zh: |-
          此列表给出允许访问主体针对资源执行的操作。
          列表的顺序可能并不重要，并且其中可能包含重复条目，甚至还可能列表也不完整。
        x-kubernetes-list-type: atomic
    required:
      - incomplete
      - nonResourceRules
      - resourceRules
    type: object
    x-kab-description-zh: |-
      规则检查的结果。这一检查的结果可能是不完整的，取决于服务器端在使用的鉴权组件，
      以及鉴权过程中的出错情况。由于执行鉴权的各个规则是相互叠加的，如果某个规则出现在列表中，
      即使列表是不完整的，也可以肯定地认为访问主体具有对应的访问权限。
  io.k8s.api.autoscaling.v1.CrossVersionObjectReference:
    description: Information for identifying a referenced resource.
    properties:
      apiVersion:
        description: API group and version of the referent
        type: string
      kind:
        description: Kind of the referent.
        minLength: 1
        type: string
      name:
        description: Name of the referent. The value cannot be `"."` or `".."`, and
          it can not contain `'/'` or `'%'`.
        minLength: 1
        type: string
    required:
      - kind
      - name
    type: object
    x-kubernetes-map-type: atomic
  io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.CREATE:
    description: The configuration for a horizontal Pod autoscaler (HPA).
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v1
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscaler
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec'
        description: Specification of the behavior of the autoscaler
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET:
    description: The configuration for a horizontal Pod autoscaler (HPA).
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v1
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscaler
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec'
        description: Specification of the behavior of the autoscaler
      status:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus'
        description: Current information about the autoscaler.
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE:
    description: The configuration for a horizontal Pod autoscaler (HPA).
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v1
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscaler
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec'
        description: Specification of the behavior of the autoscaler
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList:
    description: A list of HorizontalPodAutoscaler objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v1
        type: string
      items:
        description: A list of HorizontalPodAutoscaler objects.
        items:
          $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
        type: array
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscalerList
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscalerList
        version: v1
  io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerSpec:
    description: The specification of a horizontal Pod autoscaler (HPA).
    properties:
      maxReplicas:
        description: Upper limit for the number of Pods that can be set by the autoscaler;
          cannot be smaller than `minReplicas`.
        format: int32
        minimum: 1
        type: integer
      minReplicas:
        default: 1
        description: The lower limit for the number of replicas to which the autoscaler
          can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate
          `HPAScaleToZero` is enabled and at least one `"Object"` or `"External"`
          metric is configured. Scaling is active as long as at least one metric value
          is available.
        format: int32
        type: integer
      scaleTargetRef:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.CrossVersionObjectReference'
        description: Reference to scaled resource; horizontal Pod autoscaler will
          learn the current resource consumption and will set the desired number of
          Pods by using its `scale` subresource.
      targetCPUUtilizationPercentage:
        description: Target average CPU utilization (represented as a percentage of
          requested CPU) over all the Pods; if not specified the default autoscaling
          policy will be used.
        format: int32
        type: integer
    required:
      - maxReplicas
      - scaleTargetRef
    type: object
  io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerStatus:
    description: Current status of a horizontal Pod autoscaler
    properties:
      currentCPUUtilizationPercentage:
        description: Current average CPU utilization over all Pods, represented as
          a percentage of requested CPU, e.g. 70 means that an average Pod is using
          now 70% of its requested CPU.
        format: int32
        type: integer
      currentReplicas:
        description: Current number of replicas of Pods managed by this autoscaler.
        format: int32
        minimum: 0
        type: integer
      desiredReplicas:
        description: Desired number of replicas of Pods managed by this autoscaler.
        format: int32
        minimum: 0
        type: integer
      lastScaleTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the HorizontalPodAutoscaler scaled the number of Pods;
          used by the autoscaler to control how often the number of Pods is changed.
      observedGeneration:
        description: Most recent generation observed by this autoscaler.
        format: int64
        type: integer
    required:
      - currentCPUUtilizationPercentage
      - currentReplicas
      - desiredReplicas
      - lastScaleTime
      - observedGeneration
    type: object
  io.k8s.api.autoscaling.v1.Scale.GET:
    description: The scale for a resource.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v1
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - Scale
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec'
        description: Defines the behavior of the scale.
      status:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.ScaleStatus'
        description: Current status of the scale. Read-only.
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: Scale
        version: v1
  io.k8s.api.autoscaling.v1.Scale.UPDATE:
    description: The scale for a resource.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v1
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - Scale
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v1.ScaleSpec'
        description: Defines the behavior of the scale.
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: Scale
        version: v1
  io.k8s.api.autoscaling.v1.ScaleSpec:
    description: The attributes of a scale subresource.
    properties:
      replicas:
        description: The desired number of instances for the scaled object.
        format: int32
        minimum: 0
        type: integer
    type: object
  io.k8s.api.autoscaling.v1.ScaleStatus:
    description: The current status of a scale subresource.
    properties:
      replicas:
        description: The actual number of observed instances of the scaled object.
        format: int32
        type: integer
      selector:
        description: Label query over Pods that should match the replicas count. This
          is same as the label selector but in the string format to avoid introspection
          by clients. The string will be in the same format as the query-param syntax.
        type: string
    required:
      - replicas
      - selector
    type: object
  io.k8s.api.autoscaling.v2.ContainerResourceMetricSource:
    description: ContainerResourceMetricSource indicates how to scale on a resource
      metric known to Kubernetes, as specified in `requests` and `limits`, describing
      each Pod in the current scale target (e.g. CPU or memory).  The values will
      be averaged together before being compared to the target. Such metrics are built
      into Kubernetes, and have special scaling options on top of those available
      to normal per-Pod metrics using the `"pods"` source. Only one `"target"` type
      should be set.
    properties:
      container:
        description: The name of the container in the Pods of the scaling target.
          It must be a valid DNS label string.
        minLength: 1
        type: string
      name:
        description: The name of the resource in question.
        minLength: 1
        type: string
      target:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricTarget'
        description: The target value for the given `metric`.
    required:
      - container
      - name
      - target
    type: object
  io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus:
    description: ContainerResourceMetricStatus indicates the current value of a resource
      metric known to Kubernetes, as specified in `requests` and `limits`, describing
      a single container in each Pod in the current scale target (e.g. CPU or memory).
      Such metrics are built into Kubernetes, and have special scaling options on
      top of those available to normal per-Pod metrics using the `"pods"` source.
    properties:
      container:
        description: The name of the container in the Pods of the scaling target
        type: string
      current:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus'
        description: The current value for the given `metric`
      name:
        description: The name of the resource in question.
        type: string
    required:
      - container
      - current
      - name
    type: object
  io.k8s.api.autoscaling.v2.CrossVersionObjectReference:
    description: Information for identifying a referenced resource.
    properties:
      apiVersion:
        description: API group and version of the referent
        type: string
      kind:
        description: Kind of the referent.
        minLength: 1
        type: string
      name:
        description: Name of the referent. The value cannot be `"."` or `".."`, and
          it can not contain `'/'` or `'%'`.
        minLength: 1
        type: string
    required:
      - kind
      - name
    type: object
  io.k8s.api.autoscaling.v2.ExternalMetricSource:
    description: This indicates how to scale on a metric not associated with any Kubernetes
      object (for example length of queue in cloud messaging service, or QPS from
      loadbalancer running outside of cluster).
    properties:
      metric:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier'
        description: The target metric by name and selector
      target:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricTarget'
        description: The target value for the given `metric`
    required:
      - metric
      - target
    type: object
  io.k8s.api.autoscaling.v2.ExternalMetricStatus:
    description: The current value of a global metric which is not associated with
      any Kubernetes object.
    properties:
      current:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus'
        description: The current value for the given `metric`
      metric:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier'
        description: The target metric by name and selector
    required:
      - current
      - metric
    type: object
  io.k8s.api.autoscaling.v2.HPAScalingPolicy:
    description: HPAScalingPolicy is a single policy which must hold true for a specified
      past interval.
    properties:
      periodSeconds:
        default: 15
        description: The time window for which the policy should hold true.
        format: int32
        maximum: 1800
        minimum: 1
        type: integer
      type:
        description: |-
          This is used to specify the scaling policy.

          - `"Pods"` means the policy is about the change in absolute number of Pods.
          - `"Percent"` means the policy is about the relative number of change with respect to the current number of Pods.
        enum:
          - Pods
          - Percent
        minLength: 1
        type: string
      value:
        description: The amount of change permitted by the policy. When `type` is
          set to `"Percent"`, the maximum value is 100.
        format: int32
        minimum: 1
        type: integer
    required:
      - periodSeconds
      - type
      - value
    type: object
  io.k8s.api.autoscaling.v2.HPAScalingRules:
    description: HPAScalingRules configures the scaling behavior for one direction.
      These rules are applied after calculating the desired replicas from metrics
      for the HPA. They can limit the scaling velocity by specifying scaling policies.
      They can prevent flapping by specifying the stabilization window, so that the
      number of replicas is not set instantly. Instead, the safest value from the
      stabilization window is chosen.
    properties:
      policies:
        description: A list of potential scaling polices which can be used during
          scaling. At least one policy must be specified, otherwise the whole rule
          will be discarded as invalid
        items:
          $ref: '#/definitions/io.k8s.api.autoscaling.v2.HPAScalingPolicy'
        minItems: 1
        type: array
        x-kubernetes-list-type: atomic
      selectPolicy:
        default: Max
        description: |-
          This is used to specify the policy to use.

          - `"Max"` means selecting the policy with the highest possible change.
          - `"Min"` means selecting the policy with the lowest possible change.
        enum:
          - Max
          - Min
        type: string
      stabilizationWindowSeconds:
        description: The number of seconds after which recommendations are to be considered
          while scaling up or scaling down. For scaling up, the default value is 0
          (i.e., no stabilization is done); for scale down, the default value is 300
          (i.e., the stabilization window is 300 seconds long).
        format: int32
        maximum: 3600
        minimum: 0
        type: integer
    type: object
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.CREATE:
    description: The configuration for a horizontal Pod autoscaler, which automatically
      manages the replica count of any resource implementing the `scale` subresource
      based on the `metrics` specified.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v2
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscaler
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec'
        description: Specification of the behavior of the autoscaler
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET:
    description: The configuration for a horizontal Pod autoscaler, which automatically
      manages the replica count of any resource implementing the `scale` subresource
      based on the `metrics` specified.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v2
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscaler
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec'
        description: Specification of the behavior of the autoscaler
      status:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus'
        description: The current information about the autoscaler.
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.UPDATE:
    description: The configuration for a horizontal Pod autoscaler, which automatically
      manages the replica count of any resource implementing the `scale` subresource
      based on the `metrics` specified.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v2
        type: string
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscaler
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
      spec:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec'
        description: Specification of the behavior of the autoscaler
    required:
      - apiVersion
      - kind
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior:
    description: Configuration of the scaling behavior of the target in both up and
      down directions (`scaleUp` and `scaleDown` fields respectively).
    properties:
      scaleDown:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules'
        description: The scaling policy for scaling down. If not set, the default
          value is to allow to scale down to `minReplicas` Pods, with a 300 second
          stabilization window (i.e., the highest recommendation for the last 300sec
          is used).
      scaleUp:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HPAScalingRules'
        description: |-
          The scaling policy for scaling Up. If not set, the default value is the higher of:

          1. increase no more than 4 Pods per 60 seconds;
          1. double the number of Pods per 60 seconds.

          No stabilization is used.
    type: object
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition:
    description: The state of a HorizontalPodAutoscaler at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the condition transitioned from one status to another
      message:
        description: A human-readable explanation containing details about the transition
        type: string
      reason:
        description: The reason for the condition's last transition.
        type: string
      status:
        description: The status of the condition
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
      type:
        description: Type of the current condition
        minLength: 1
        type: string
    required:
      - status
      - type
    type: object
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList:
    description: A list of HorizontalPodAutoscaler objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - autoscaling/v2
        type: string
      items:
        description: A list of HorizontalPodAutoscaler objects.
        items:
          $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
        type: array
      kind:
        description: A string value representing the REST resource
        enum:
          - HorizontalPodAutoscalerList
        type: string
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kubernetes-group-version-kind:
      - group: autoscaling
        kind: HorizontalPodAutoscalerList
        version: v2
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerSpec:
    description: The specification of a horizontal Pod autoscaler (HPA).
    properties:
      behavior:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerBehavior'
        description: The scaling behavior configuration of the target in both up and
          down directions (`scaleUp` and `scaleDown` fields respectively). If not
          set, the default HPAScalingRules for scale up and scale down are used.
      maxReplicas:
        description: Upper limit for the number of replicas to which the autoscaler
          can scale up. It cannot be less than `minReplicas`.
        format: int32
        minimum: 1
        type: integer
      metrics:
        description: The specifications to use for calculating the desired replica
          count. The maximum value across all metrics will be used. The desired replica
          count is calculated by multiplying the ratio between the target value and
          the current value by the current number of Pods. Ergo, metrics used must
          decrease as the Pod count is increased, and vice-versa. See the individual
          metric source types for more information about how each `type` of metric
          must respond. If not set, the default metrics will be set to `80%` average
          CPU utilization.
        items:
          $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricSpec'
        type: array
        x-kubernetes-list-type: atomic
      minReplicas:
        default: 1
        description: The lower limit for the number of replicas to which the autoscaler
          can scale down. `minReplicas` is allowed to be 0 if the alpha feature gate
          `HPAScaleToZero` is enabled and at least one `"Object"` or `"External"`
          metric is configured. Scaling is active as long as at least one metric value
          is available.
        format: int32
        type: integer
      scaleTargetRef:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference'
        description: This points to the target resource to scale, and is used to identify
          the Pods for which metrics should be collected, as well as to actually change
          the replica count.
    required:
      - maxReplicas
      - scaleTargetRef
    type: object
  io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerStatus:
    description: Current status of a horizontal Pod autoscaler
    properties:
      conditions:
        description: The set of conditions required for this autoscaler to scale its
          target. It indicates whether or not those conditions are met.
        items:
          $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerCondition'
        type: array
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      currentMetrics:
        description: The last read state of the metrics used by this autoscaler.
        items:
          $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricStatus'
        type: array
        x-kubernetes-list-type: atomic
      currentReplicas:
        description: Current number of replicas of Pods managed by this autoscaler,
          as last seen by the autoscaler.
        format: int32
        type: integer
      desiredReplicas:
        description: Desired number of replicas of Pods managed by this autoscaler,
          as last calculated by the autoscaler.
        format: int32
        type: integer
      lastScaleTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the HorizontalPodAutoscaler scaled the number of Pods;
          used by the autoscaler to control how often the number of Pods is changed.
      observedGeneration:
        description: Most recent generation observed by this autoscaler.
        format: int64
        type: integer
    required:
      - currentMetrics
      - currentReplicas
      - desiredReplicas
      - lastScaleTime
      - observedGeneration
    type: object
  io.k8s.api.autoscaling.v2.MetricIdentifier:
    description: The name and optionally the selector for a metric
    properties:
      name:
        description: The name of the given metric. The name cannot be `"."` or `".."`
          and it cannot contain `'/'` or `'%'`.
        minLength: 1
        type: string
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: The string-encoded form of a standard kubernetes label selector
          for the given metric. When set, it is passed as an additional parameter
          to the metrics server for more specific metrics scoping. When unset, just
          the `name` will be used to gather metrics.
    required:
      - name
    type: object
  io.k8s.api.autoscaling.v2.MetricSpec:
    description: This specifies how to scale based on a single metric (only `type`
      and one other matching field should be set at once).
    properties:
      containerResource:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricSource'
        description: |-
          `containerResource` refers to a resource metric (such as those specified in `requests` and `limits`)
          known to Kubernetes describing a single container in each Pod of the current scale target (e.g. CPU or memory).
          Such metrics are built in to Kubernetes, and have special scaling options on top of those available to
          normal per-Pod metrics using the `"pods"` source.
          This is an Alpha feature and can be enabled by the `HPAContainerMetrics` feature gate.
        x-kab-description-zh: |-
          `containerResource` 引用 Kubernetes 所了解的某资源指标（例如在 `requests` 和 `limits` 中所设置的），
          该指标描述的是当前扩缩目标中每个 Pod 中的一个容器（例如，CPU 或内存）。
          这类指标是内建于 Kubernetes 中的，与使用 `"pods"` 指标源时所获得的普通 Pod 指标相比，`containerResource` 指标对应着特殊的扩缩选项。
          此特性处于 Alpha 阶段，可以通过 `HPAContainerMetrics` 特性门控启用。
      external:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricSource'
        description: |-
          Reference to a global metric that is not associated with any Kubernetes object.
          It allows autoscaling based on information from outside of cluster
          (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
        x-kab-description-zh: |-
          引用某个与任何 Kubernetes 对象都没有关联的全局性指标。
          这个字段使得我们可以基于来自集群外部的信息（例如云消息服务中的队列长度，或者集群外某负载均衡器上的 QPS）
          来执行自动扩缩操作。
      object:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricSource'
        description: Reference to a metric describing a single Kubernetes object (for
          example, `"hits-per-second"` on an Ingress object).
        x-kab-description-zh: 对描述某个 Kubernetes 对象的指标（例如，Ingress 对象上的 `"hits-per-second"`）的引用。
      pods:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.PodsMetricSource'
        description: |-
          Reference to a metric describing each Pod in the current scale target (for example, `"transactions-processed-per-second"`).
          The values will be averaged together before being compared to the target value.
        x-kab-description-zh: |-
          对描述当前扩缩目标中 Pod 的指标（例如，`"transactions-processed-per-second"`）的引用。
          度量值会被求均值之后再与目标值作比较。
      resource:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricSource'
        description: |-
          Reference to a resource metric (such as those specified in `requests` and `limits`)
          known to Kubernetes describing each Pod in the current scale target (e.g. CPU or memory).
          Such metrics are built into Kubernetes, and have special scaling options on top of those available to
          normal per-Pod metrics using the `"pods"` source.
        x-kab-description-zh: |-
          对 Kubernetes 所了解的某种资源度量指标（如在 `requests` 和 `limits` 中所设置的）的引用。
          这些指标所描述的是当前扩缩目标中的 Pod（例如，CPU 或内存）。
          这类指标是内建于 Kubernetes 中的，与使用 `"pods"` 指标源时所获得的普通 Pod 指标相比，`resource` 指标对应着特殊的扩缩选项。
      type:
        description: |-
          The type of metric source. Each type maps to a matching field in the object.
          **Note** `"ContainerResource"` type is available only when the feature gate `HPAContainerMetrics` is enabled.
        enum:
          - ContainerResource
          - External
          - Object
          - Pods
          - Resource
        minLength: 1
        type: string
        x-kab-description-zh: |-
          指标来源的类型。每种类型对应此对象中的一个匹配的字段。
          **Note** `"ContainerResource"` 类型只有当启用了 `HPAContainerMetrics` 特性门控时才可用。
    required:
      - type
    type: object
    x-kab-description-zh: |-
      此结构用来设置如何基于某个指标来执行扩缩操作。
      只能设置 `type` 和与之对应的字段之一。
  io.k8s.api.autoscaling.v2.MetricStatus:
    description: The last-read state of a single metric.
    properties:
      containerResource:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ContainerResourceMetricStatus'
        description: |-
          This refers to a resource metric (such as those specified in `requests` and `limits`)
          known to Kubernetes describing a single container in each Pod in the current scale target (e.g. CPU or memory).
          Such metrics are built in to Kubernetes, and have special scaling options on top of those available
          to normal per-Pod metrics using the `"pods"` source.
          This is an Alpha feature and can be enabled by the `HPAContainerMetrics` feature gate.
        x-kab-description-zh: |-
          `containerResource` 引用 Kubernetes 所了解的某资源指标（例如在 `requests` 和 `limits` 中所设置的），
          该指标描述的是当前扩缩目标中每个 Pod 中的一个容器（例如，CPU 或内存）。
          这类指标是内建于 Kubernetes 中的，与使用 `"pods"` 指标源时所获得的普通 Pod 指标相比，`containerResource` 指标对应着特殊的扩缩选项。
          此特性处于 Alpha 阶段，可以通过 `HPAContainerMetrics` 特性门控启用。
      external:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ExternalMetricStatus'
        description: |-
          This refers to a global metric that is not associated with any Kubernetes object.
          It allows autoscaling based on information coming from components running outside of cluster
          (for example length of queue in cloud messaging service, or QPS from loadbalancer running outside of cluster).
        x-kab-description-zh: |-
          引用某个与任何 Kubernetes 对象都没有关联的全局性指标。
          这个字段使得我们可以基于来自集群外部的信息（例如云消息服务中的队列长度，或者集群外某负载均衡器上的 QPS）
          来执行自动扩缩操作。
      object:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ObjectMetricStatus'
        description: This refers to a metric describing a single kubernetes object
          (for example, `"hits-per-second"` on an Ingress object).
        x-kab-description-zh: 对描述某个 Kubernetes 对象的指标（例如，Ingress 对象上的 `"hits-per-second"`）的引用。
      pods:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.PodsMetricStatus'
        description: |-
          This refers to a metric describing each pod in the current scale target (for example, `"transactions-processed-per-second"`).
          The values will be averaged together before being compared to the target value.
        x-kab-description-zh: |-
          对描述当前扩缩目标中 Pod 的指标（例如，`"transactions-processed-per-second"`）的引用。
          度量值会被求均值之后再与目标值作比较。
      resource:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.ResourceMetricStatus'
        description: |-
          This refers to a resource metric (such as those specified in `requests` and `limits`) known to Kubernetes
          describing each Pod in the current scale target (e.g. CPU or memory).
          Such metrics are built in to Kubernetes, and have special scaling options on top of those available to
          normal per-Pod metrics using the `"pods"` source.
        x-kab-description-zh: |-
          对 Kubernetes 所了解的某种资源度量指标（如在 `requests` 和 `limits` 中所设置的）的引用。
          这些指标所描述的是当前扩缩目标中的 Pod（例如，CPU 或内存）。
          这类指标是内建于 Kubernetes 中的，与使用 `"pods"` 指标源时所获得的普通 Pod 指标相比，`resource` 指标对应着特殊的扩缩选项。
      type:
        description: |-
          The type of metric source. Each corresponds to a matching field in the object.
          **Note** `"ContainerResource"` type is available on when the feature-gate `HPAContainerMetrics` is enabled.
        enum:
          - ContainerResource
          - External
          - Object
          - Pods
          - Resource
        minLength: 1
        type: string
        x-kab-description-zh: |-
          指标来源的类型。每种类型对应此对象中的一个匹配的字段。
          **Note** `"ContainerResource"` 仅在启用了 `HPAContainerMetrics` 特性门控时才可用。
    required:
      - type
    type: object
    x-kab-description-zh: 某个指标上次读取时的状态。
  io.k8s.api.autoscaling.v2.MetricTarget:
    description: |-
      The target value, average value, or average utilization of a specific metric.

      - For `"Object"` type of metrics, one of `value` and `averageValue` must be specified.
      - For `"External"` type of metrics, one and only one of `value` or `averageValue` must be set.
      - For `"Pod"` type of metrics, `averageValue` must be set.
      - For `"Resource"` type of metrics, either `averageUtilization` or `averageValue` should be specified but not both.
    properties:
      averageUtilization:
        description: Target value of the average of the resource metric across all
          relevant Pods, represented as a percentage of the requested value of the
          resource for the Pods. Currently only valid for `"Resource"` metric source
          type
        format: int32
        minimum: 1
        type: integer
      averageValue:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: The target value of the average of the metric across all relevant
          Pods. The value must be positive if specified.
      type:
        description: Type of the metric value.
        enum:
          - AverageValue
          - Utilization
          - Value
        minLength: 1
        type: string
      value:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: The target value of the metric (as a quantity). The value must
          be positive if specified.
    required:
      - type
    type: object
  io.k8s.api.autoscaling.v2.MetricValueStatus:
    description: The current value for a metric
    properties:
      averageUtilization:
        description: The current value of the average of the resource metric across
          all relevant Pods, represented as a percentage of the requested value of
          the resource for the Pods.
        format: int32
        type: integer
      averageValue:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: The current value of the average of the metric across all relevant
          Pods (as a quantity)
      value:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: The current value of the metric (as a quantity).
    type: object
  io.k8s.api.autoscaling.v2.ObjectMetricSource:
    description: This indicates how to scale on a metric describing a kubernetes object
      (for example, hits-per-second on an Ingress object).
    properties:
      describedObject:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference'
        description: A reference to the object to be evaluated.
      metric:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier'
        description: The target metric by `name` and `selector`.
      target:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricTarget'
        description: The target value for the given `metric`.
    required:
      - describedObject
      - metric
      - target
    type: object
  io.k8s.api.autoscaling.v2.ObjectMetricStatus:
    description: The current value of a metric describing a kubernetes object.
    properties:
      current:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus'
        description: The current value for the given `metric`
      describedObject:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.CrossVersionObjectReference'
        description: The reference to an object.
      metric:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier'
        description: The target metric by name and selector
    required:
      - current
      - describedObject
      - metric
    type: object
  io.k8s.api.autoscaling.v2.PodsMetricSource:
    description: This object describes how to scale on a metric describing each pod
      in the current scale target (for example, transactions-processed-per-second).
      The values will be averaged together before being compared to the target value.
    properties:
      metric:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier'
        description: This identifies the target metric by name and selector
      target:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricTarget'
        description: The target value for the given `metric`
    required:
      - metric
      - target
    type: object
  io.k8s.api.autoscaling.v2.PodsMetricStatus:
    description: This contains the current value of a metric describing each Pod in
      the current scale target (for example, transactions-processed-per-second).
    properties:
      current:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus'
        description: The current value for the given `metric`
      metric:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricIdentifier'
        description: This identifies the target metric by name and selector
    required:
      - current
      - metric
    type: object
  io.k8s.api.autoscaling.v2.ResourceMetricSource:
    description: A resource metric describing each Pod in the current scale target.
      The resource is known to Kubernetes as it can be specified in `requests` and
      `limits`. The values will be averaged together before being compared to the
      target. Such metrics are built in to Kubernetes, and have special scaling options
      on top of those available to normal per-Pod metrics using the `"pods"` source.  Only
      one `target` type should be set.
    properties:
      name:
        description: The name of the resource in question.
        minLength: 1
        type: string
      target:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricTarget'
        description: The target value for the given metric
    required:
      - name
      - target
    type: object
  io.k8s.api.autoscaling.v2.ResourceMetricStatus:
    description: The current value of a resource metric known to Kubernetes, as specified
      in `requests` and `limits`, describing each Pod in the current scale target
      (e.g. CPU or memory).  Such metrics are built in to Kubernetes, and have special
      scaling options on top of those available to normal per-Pod metrics using the
      `"pods"` source.
    properties:
      current:
        $ref: '#/definitions/io.k8s.api.autoscaling.v2.MetricValueStatus'
        description: The current value for the given metric
      name:
        description: The name of the resource in question.
        minLength: 1
        type: string
    required:
      - current
      - name
    type: object
  io.k8s.api.batch.v1.CronJob.CREATE:
    description: The configuration of a CronJob.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - CronJob
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The `name` can be at most 52 characters long because
          the CronJob controller will append a 11-character suffix to the name.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 的最大长度是 52 字符，因为 CronJob
          控制器会在名字后面追加 11 个字符的后缀。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.CronJobSpec'
        description: Specification of the desired behavior of a CronJob, including
          the schedule.
        x-kab-description-zh: CronJob 的期望行为的规约，包括其排期表（Schedule）。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: CronJob 的配置。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: CronJob
        version: v1
  io.k8s.api.batch.v1.CronJob.GET:
    description: The configuration of a CronJob.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - CronJob
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.CronJobSpec'
        description: Specification of the desired behavior of a CronJob, including
          the schedule.
        x-kab-description-zh: CronJob 的期望行为的规约，包括其排期表（Schedule）。
      status:
        $ref: '#/definitions/io.k8s.api.batch.v1.CronJobStatus'
        description: Current status of the CronJob.
        x-kab-description-zh: CronJob 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: CronJob 的配置。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: CronJob
        version: v1
  io.k8s.api.batch.v1.CronJob.UPDATE:
    description: The configuration of a CronJob.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - CronJob
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The `name` can be at most 52 characters long because
          the CronJob controller will append a 11-character suffix to the name.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 的最大长度是 52 字符，因为 CronJob
          控制器会在名字后面追加 11 个字符的后缀。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.CronJobSpec'
        description: Specification of the desired behavior of a CronJob, including
          the schedule.
        x-kab-description-zh: CronJob 的期望行为的规约，包括其排期表（Schedule）。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: CronJob 的配置。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: CronJob
        version: v1
  io.k8s.api.batch.v1.CronJobList:
    description: A list of CronJob objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of CronJob objects.
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
        type: array
        x-kab-description-zh: CronJob 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - CronJobList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: CronJob 对象的列表。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: CronJobList
        version: v1
  io.k8s.api.batch.v1.CronJobSpec:
    description: This describes how the job execution will look like and when it will
      actually run.
    properties:
      concurrencyPolicy:
        default: Allow
        description: |-
          Specifies how to treat concurrent executions of a Job. Possible enum values:
          - `"Allow"` allows CronJobs to run concurrently.
          - `"Forbid"` forbids concurrent runs, skipping next run if previous hasn't
            finished yet.
          - `"Replace"` cancels currently running Job and replaces it with a new one.
        enum:
          - Allow
          - Forbid
          - Replace
        type: string
        x-kab-description-zh: |-
          设置如何处理 Job 的并发执行。可选的值包括：
          - `"Allow"`允许 CronJob 并发执行；
          - `"Forbid"`：禁止并发执行，如果前一个 Job 尚未结束，下一个 Job 会被略过。
          - `"Replace"`：取消当前运行的 Job，用新的 Job 替换之。
      failedJobsHistoryLimit:
        default: 1
        description: |-
          The number of failed finished Jobs to retain.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          要保留的、已经失败的 Job 个数。
          实现上，此字段是一个指针，用以区分显式的取零和未设置时的空值。
      jobTemplate:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobTemplateSpec'
        description: Specifies the Job that will be created when executing a CronJob.
        x-kab-description-zh: 设置在执行 CronJob 时要创建的 Job 的模板。
      schedule:
        description: |-
          The schedule in Cron format, see [Cron Syntax](https://en.wikipedia.org/wiki/Cron).
          This field cannot have `"TZ"` in it when `timeZone` is specified.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          用 Cron 格式给出的排期表，参见 [Cron 语法](https://zh.wikipedia.org/wiki/Cron)。
          当设置了 `timeZone` 时，此字段之不能包含 `"TZ"`。
      startingDeadlineSeconds:
        description: |-
          Optional deadline in seconds for starting the Job if it misses scheduled
          time for any reason. Missed Jobs executions will be counted as failed ones.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          可选字段，用秒数来表达此 CronJob 因为某种原因错过启动时间时的启动期限。
          错失执行时间的 Job 会被视为失败的 Job。
      successfulJobsHistoryLimit:
        default: 3
        description: |-
          The number of successful finished Jobs to retain.
          This is a pointer to distinguish between explicit zero and not specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          要保留的、成功完成的 Job 个数。
          实现上，此字段是一个指针，用以区分显式的取零和未设置时的空值。
      suspend:
        default: false
        description: |-
          This flag tells the controller to suspend subsequent executions,
          it does not apply to already started executions.
        type: boolean
        x-kab-description-zh: 此标志告诉控制器要挂起后续的执行。设置此字段不会影响已经启动的 Job 执行。
      timeZone:
        description: |-
          The time zone for the given schedule, see
          [time zone list on wikipedia](https://en.wikipedia.org/wiki/List_of_tz_database_time_zones).
          If not specified, this will default to the time zone of the
          `kube-controller-manager` process. The set of valid time zone names and
          the time zone offset is loaded from the system-wide time zone database
          by the API server during CronJob validation and the controller manager
          during execution.
          If no system-wide time zone database can be found, a bundled version of
          the database is used instead. If the time zone name becomes invalid
          during the lifetime of a CronJob or due to a change in host configuration,
          the controller will stop creating new Jobs and will create a system event
          with the reason `"UnknownTimeZone"`.
          This field, when specified, cannot be empty string.
          It cannot be specified when the `schedule` field contains `"TZ"`.
          The time zone value cannot be `"Local"`. When the value is `"UTC"`,
          the UTC time zone is used.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          给定排期表所对应的时区设置，参见[Wikipedia 上的时区列表](https://zh.wikipedia.org/wiki/List_of_tz_database_time_zones)。

          如果此字段没有设置，则默认使用 `kube-controller-manager` 进程的时区。
          在对 CronJob 做合法性检查时，API
          服务器会从系统范围的时区数据库加载合法的时区名称和偏移值。
          在执行 CronJob 时，控制器管理器也会做同样的操作。
          如果找不到系统范围的失去数据库，则系统会使用内置版本的数据库。
          如果在 CronJob 的生命期内时区名称变得非法，或者主机层的配置发生变更，
          则控制器会停止创建新的 Job，并生成一个原因为 `"UnknownTimeZone"` 的系统事件。

          如果设置了此字段，其取值不可以是空字符串。
          当 `schedule` 字段值包含 `"TZ"`，则不能设置此字段。
          时区值不可以是 `"Local"`。当此值为 `"UTC"` 时，意味着使用 UTC 时区。
    required:
      - jobTemplate
      - schedule
    type: object
    x-kab-description-zh: 此结构描述 Job 合适执行以及怎样执行。
  io.k8s.api.batch.v1.CronJobStatus:
    description: The current state of a CronJob.
    properties:
      active:
        description: A list of references to currently running Jobs.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
          description: A reference to a currently running Job.
          x-kab-description-zh: 对当前运行中的 Job 的引用。
        type: array
        x-kab-description-zh: 对当前运行中的 Job 的引用的列表。
        x-kubernetes-list-type: atomic
      lastScheduleTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the Job was successfully scheduled.
        x-kab-description-zh: Job 上次成功调度的时间。
      lastSuccessfulTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the Job successfully completed.
        x-kab-description-zh: Job 上次完成调度的时间。
    required:
      - active
      - lastScheduleTime
    type: object
    x-kab-description-zh: CronJob 的当前状态。
  io.k8s.api.batch.v1.Job.CREATE:
    description: The configuration of a Job.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Job
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 取值必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE'
        description: Specification of the desired behavior of a Job.
        x-kab-description-zh: 对 Job 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: Job 的配置。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: Job
        version: v1
  io.k8s.api.batch.v1.Job.GET:
    description: The configuration of a Job.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Job
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobSpec.GET'
        description: Specification of the desired behavior of a Job
        x-kab-description-zh: 对 Job 的预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobStatus'
        description: Current status of a Job
        x-kab-description-zh: Job 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: Job 的配置。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: Job
        version: v1
  io.k8s.api.batch.v1.Job.UPDATE:
    description: The configuration of a Job.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Job
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobSpec.UPDATE'
        description: Specification of the desired behavior of a Job
        x-kab-description-zh: 对 Job 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Job 的配置。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: Job
        version: v1
  io.k8s.api.batch.v1.JobCondition:
    description: JobCondition describes the current state of a Job.
    properties:
      lastProbeTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition was checked.
        x-kab-description-zh: 上次检查状况的时间。
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transit from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: Human readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出上次状况转换的细节。
      reason:
        description: The (brief) reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的（简短）原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          Type of Job condition. Possible enum values:
          - `"Complete"` means the Job has completed its execution.
          - `"Failed"` means the Job has failed its execution.
          - `"Suspended"` means the Job has been suspended.
        enum:
          - Compelte
          - Failed
          - Suspended
        minLength: 1
        type: string
        x-kab-description-zh: |-
          Job 状况的类型。可能的取值包括：
          - `"Complete"` 表示 Job 已经完成其执行；
          - `"Failed"` 表示 Job 的执行失败；
          - `"Suspended"` 表示 Job 已经被挂起。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: JobCondition 描述 Job 的当前状态。
  io.k8s.api.batch.v1.JobList:
    description: A list of Job objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - batch/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Job objects.
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
        type: array
        x-kab-description-zh: Job 对象的列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - JobList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: Job 对象的列表。
    x-kubernetes-group-version-kind:
      - group: batch
        kind: JobList
        version: v1
  io.k8s.api.batch.v1.JobSpec.CREATE:
    description: This describes how the Job execution will look like.
    properties:
      activeDeadlineSeconds:
        description: |-
          The duration in seconds relative to the `startTime` that the Job may be continuously
          active before the system tries to terminate it.
          If a Job is suspended (at creation or through an update), this timer will effectively
          be stopped and reset when the Job is resumed again.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          在系统尝试终止 Job 之前，Job 可以保持活跃的时长。计时起点为 Job 的 `startTIme`，以秒计。
          如果某 Job（创建时或者通过更新操作）被挂起，此计时器会被停止，并在 Job 恢复执行时复位。
      backoffLimit:
        default: 6
        description: The number of retries before marking this Job as failed.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 在标记 Job 为失败状态之前 Job 可以进行的重试次数。
      backoffLimitPerIndex:
        description: |-
          Specifies the limit for the number of retries within an index before marking this index
          as failed. When enabled the number of failures per index is kept in the Pod's
          `batch.kubernetes.io/job-index-failure-count` annotation.
          It can only be set when Job's `completionMode=Indexed`, and the Pod's `restartPolicy`
          is `"Never"`. The field is immutable. This field is Beta-level.
          It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled
          (enabled by default). This field is required when `maxFailedIndexes` is specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在将某个索引标记为失败之前，对该索引可以进行的重试次数上限。
          启用此特性之后，每个索引的失败次数会被保存在 Pod 的注解
          `batch.kubernetes.io/job-index-failure-count` 中。
          只有当 Job 的 `completionMode` 设置为 `"Indexed"`，并且 Pod 的 `restartPolicy`
          为 `"Never"` 时才可以设置这个字段。
          此字段是不可变更的。目前是一个 Beta 阶段的特性。
          需要启用 `JobBackoffLimitPerIndex` 特性门控（默认被启用）。
          当设置了 `maxFailedIndexes` 属性时，此字段是必须设置的。
      completionMode:
        default: NonIndexed
        description: |-
          This specifies how Pod completions are tracked. - `"NonIndexed"` means that the Job is considered complete when there have been `.spec.completions` successfully completed Pods. Each Pod completion is homologous to each other. - `"Indexed"` means that the Pods of a Job get an associated completion index from 0 to `(.spec.completions - 1)`, available in the annotation `"batch.kubernetes.io/job-completion-index"`. The Job is considered complete when there is one successfully completed Pod for each index. When value is `"Indexed"`, `.spec.completions` must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, the Pod name takes the form `<job-name>-<index>-<random-string>` and the Pod host name takes the form `<job-name>-<index>`.
          More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
        enum:
          - Indexed
          - NonIndexed
        type: string
        x-kab-description-zh: |-
          此字段用来设置如何跟踪 Pod 的完成情况。
          - `"NonIndexed"` 意味着当 Job 中成功完成的 Pod 个数为 `.spec.completions`
            时可以认为 Job 完成。所有 Pod 完成都是等价无差别的。
          - `"Indexed"` 意味着 Job 的 Pod 都会获得一个介于 0 和 `(.spec.completions - 1)`
            之间的完成索引，该索引值记录在 Pod 注解 `"batch.kubernetes.io/job-completion-index"`
            中。当对应每个索引都有一个成功完成的 Pod 时，可以认为 Job 成功完成。
            当字段值设置为 `"Indexed"` 时，必须为 Job 设置 `.spec.completions`，
            并且 `.spec.parallelism` 必须小于等于 10^5。
            此外，Pod 的名字格式也会变成 `<Job 名称>-<索引>-<随机字符串>` 形式，
            而 Pod 的主机名也会变为 `<Job 名称>-<索引>` 格式。

          在未来的 API 版本中，可能会有新的完成模式被添加进来。
          如果 Job 控制器看到一个它无法识别或处理的模式（升级过程中可能因为版本偏差而导致这种情况），
          控制器会略过对 Job 的更新。
      completions:
        description: |-
          The desired number of successfully finished Pods the Job should be run with.
          Setting to `null` means that the success of any Pod signals the success of all Pods,
          and allows `parallelism` to have any positive value.
          Setting to `1` means that `parallelism` is limited to 1 and the success of
          that Pod signals the success of the Job. This field cannot be updated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Job 要运行的所有 Pod 中，预期成功完成的 Pod 个数。
          字段值设为 `null` 意味着任何一个 Pod 成功完成都可以视为所有 Pod 都成功，
          这时 `parallelism` 可以取任何正整数值。
          字段值设置为 `1` 时意味着 `parallelism` 也只能设置为 `1`，并且 Pod
          的成功完成意味着 Job 成功。
          此字段不可更新。
      managedBy:
        description: |-
          This field indicates the controller that manages a Job.
          The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string
          `"kubernetes.io/job-controller"`, but skips reconciling Jobs with a custom value for this field.
          The value must be a valid domain-prefixed path (e.g. `"acme.io/foo"`) - all characters before the first `/` must be a valid subdomain
          as defined by RFC 1123. All characters trailing the first `/` must be valid HTTP Path characters as defined by RFC 3986.
          The value cannot exceed 64 characters.

          This field is Alpha-level. The Job controller accepts setting the field when the feature gate `JobManagedBy` is enabled.
        maxLength: 64
        type: string
        x-kab-description-zh: |-
          此字段给出用来管理 Job 的控制器。
          如果 Job 未设置此字段，或者将此字段设置为字符串 `"kubernetes.io/job-controller"`，则 Kubernetes 内部的 Job 控制器会负责协调此 Job 的状态。
          反之，如果此字段被设置为其他字符串值，则 Kubernetes 内部的 Job 控制器会忽略此 Job。
          字段取值必须是合法的、带域名前缀的路径（例如，`"acme.io/foo"`）：第一个 `/` 之前的字符串必须构成符合 RFC 1123 规范的合法域名；
          而第一个 `/` 之后的所有字符必须构成一个符合 RFC 3986 规范的合法 HTTP 路径。

          此字段目前处于 Alpha 状态。当特性门控 `JobManagedBy` 被启用时，Job 控制器会接受此字段的设置。
      manualSelector:
        description: |-
          This controls the generation of Pod labels and Pod selectors.
          Leave `manualSelector` unset unless you are certain what you are doing.
          When `false` or unset, the system pick labels unique to this Job and appends those labels to the Pod template.
          When `true`, the user is responsible for picking unique labels and specifying the `selector`.
          Failure to pick a unique label may cause this and other Jobs to not function correctly.
          However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.
        type: boolean
        x-kab-description-zh: |-
          此字段控制 Pod 标签与选择算符的生成逻辑。
          如果你不清楚设置此字段的后果，可以不设置 `manualSelector`。
          当此字段设置为 `false` 或者未设置时，系统会为字段选择一个对此 Job 唯一的标签，
          并将这一标签追加到 Pod 模板中定义的标签之后。
          当此字段值设置为 `true` 时，用户要负责选择唯一性的标签，并手动设置 `selector`。
          如果未能成功地选择唯一标签，可能会导致当前 Job 以及其他 Job 无法正常工作。
          不过，你也可能会看到使用老的 `extensions/v1beta1` API 所创建的 Job
          中设置了 `manualSelector=true`。
      maxFailedIndexes:
        description: |-
          Specifies the maximal number of failed indexes before marking the Job as failed,
          when `backoffLimitPerIndex` is set.
          Once the number of failed indexes exceeds this number,
          the entire Job is marked as `"Failed"` and its execution is terminated.
          When left as null the Job continues execution of all of its indexes and is marked with the `Complete` Job condition.
          It can only be specified when `backoffLimitPerIndex` is set.
          It can be null or up to `completions`.
          It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is Beta-level.
          It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
        format: int32
        type: integer
        x-kab-description-zh: |-
          对于设置了 `backoffLimitPerIndex` 的 Job 而言，此字段设置在标记 Job
          失败之前可以失败的索引个数上限。
          一旦失败的索引个数达到这里设置的数目，整个 Job 被标记为 `"Failed"` 并停止执行。
          当此字段保持为 null 时，Job 会继续执行其所有索引，并且 Job 会被标记 `Complete` 状况。

          只有设置了 `backoffLimitPerIndex` 的时候，才可以设置此字段。
          字段的取值可以是 null，或者至多为 `completions`。
          当 `completions` 大于 10^5 时，此字段必须设置，并且其取值必须小于等于 10^4。
          此字段的设置是一个 Beta 阶段特性。
          只有启用了 `JobBackoffLimitPerIndex` 特性门控时（默认启用）才可以设置。
      parallelism:
        description: |-
          The maximum desired number of Pods the Job should run at any given time.
          The actual number of Pods running in steady state will be less than this number when
          `((.spec.completions - .status.successful) < .spec.parallelism)`,
          i.e. when the work left to do is less than max `parallelism`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在任一时刻 Job 中预期可以同时运行的 Pod 个数上限。
          当 `((.spec.completions - .status.successful) < .spec.parallelism)` 时，
          也就是剩下的需要运行的工作少于 `parallelism` 这一上限时，
          实际处于稳定运行状态的 Pod 个数会低于此值。
      podFailurePolicy:
        $ref: '#/definitions/io.k8s.api.batch.v1.PodFailurePolicy'
        description: |-
          Specifies the policy of handling failed Pods.
          In particular, it allows to specify the set of actions and conditions
          which need to be satisfied to take the associated action.
          If empty, the default behaviour applies - the counter of failed Pods,
          represented by the Jobs's `.status.failed` field, is incremented and
          it is checked against the `backoffLimit`.
          This field cannot be used in combination with `restartPolicy=OnFailure`.

          This field is Beta-level. It can be used when the `JobPodFailurePolicy`
          feature gate is enabled (enabled by default)."
        x-kab-description-zh: |-
          设置处理失败 Pod 的策略。
          使用这一字段，可以设置处置动作以及采取相应动作之前需要满足的条件。
          如果为空，则采用默认的行为 -- 用 Job 的 `.status.failed` 字段所代表的失败
          Pod 计数会被增一，并且控制器会检查计数值是否超过 `backoffLimit`。
          此字段不能在 `restartPolicy` 设置为 `"OnFailure"` 时使用。

          此字段为 Beta 阶段。需要启用 `JobPodFailurePolicy` 特性门控。
      podReplacementPolicy:
        description: |-
          This specifies when to create replacement Pods. Possible values are:
          - `"TerminatingOrFailed"`: means that we recreate pods when they are terminating
            (has a `metadata.deletionTimestamp`) or failed.
          - `"Failed"`: means to wait until a previously created Pod is fully terminated
            (has phase `"Failed"` or `"Succeeded"`) before creating a replacement Pod.

          When using `podFailurePolicy`, `"Failed"` is the the only allowed value.
          `"TerminatingOrFailed"` and `"Failed"` are allowed values when `podFailurePolicy`
          is not in use. This is an Beta field.
          Enable the `JobPodReplacementPolicy` feature gate to be able to use this field.
        enum:
          - Failed
          - TerminatingOrFailed
        type: string
        x-kab-description-zh: |-
          此字段设置何时创建替代 Pod。可选值包括：
          - `"TerminatingOrFailed"`：当现有 Pod 被终止（`metadata.deletionTimestamp` 非空）
            或者失败时，要重新创建 Pod。
          - `"Failed"`：要等待之前创建的 Pod 彻底终止（阶段为 `"Failed"` 或 `"Succeeded"`）
            时才能创建替代 Pod。

          设置了 `podFailurePolicy` 字段时，此字段只能设置为 `"Failed"`。
          未设置 `podFailurePolicy` 时，可以选择 `"TerminatingOrFailed"` 和 `"Failed"` 之一。

          此字段处于 Beta 阶段，需要启用 `JobPodReplacementPolicy` 特性门控（默认启用）。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the Pod count.
          Normally, the system sets this field for you.
          The `selector` must match the `labels` defined on the Pod template.
          This field cannot be updated.
        x-kab-description-zh: |-
          对 Pod 的标签查询算符，选中的 Pod 要与 Pod 计数匹配。通常，系统会自动设置此字段。
          `selector` 的设置值必须与 Pod 模板中定义的 `labels` 匹配。

          此字段不可更新。
      successPolicy:
        $ref: '#/definitions/io.k8s.api.batch.v1.SuccessPolicy'
        description: |-
          successPolicy specifies the policy when the Job can be declared as succeeded.
          If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions.
          When the field is specified, it must be immutable and works only for the Indexed Jobs.
          Once the Job meets the SuccessPolicy, the lingering pods are terminated.

          This field is Alpha-level. To use this field, you must enable the `JobSuccessPolicy` feature gate.
        x-kab-description-zh: |-
          此字段设置何时可以宣称 Job 成功。
          此字段为空时，系统的默认行为是在 Job 中成功的 Pod 个数等于其 `completions` 字段设置时宣称 Job 成功。
          此字段一旦设置则不能变更，并且字段仅对带索引的 Job 起作用。
          一旦 Job 满足了 SuccessPolicy 策略所规定的条件，则剩余的 Pod 都会被终止。

          此字段处于 Alpha 状态。使用此字段需要启用 `JobSuccessPolicy` 特性门控。
      suspend:
        default: false
        description: |-
          This specifies whether the Job controller should create Pods or not.
          If a Job is created with `suspend` set to `true`, no Pods are created by the
          Job controller.
          If a Job is suspended after creation (i.e. the flag goes from `false` to `true`),
          the Job controller will delete all active Pods associated with this Job.
          Users must design their workload to gracefully handle this.
          Suspending a Job will reset the `startTime` field of the Job,
          effectively resetting the `activeDeadlineSeconds` timer too.
        type: boolean
        x-kab-description-zh: |-
          此字段设置是否 Job 控制器需要创建 Pod。
          如果 Job 在创建时其 `suspend` 被设置为 `true`，Job 控制器不会为其创建 Pod。
          如果 Job 在创建之后被挂起（即此字段取值从 `false` 变为 `true`），则
          Job 控制器会删除与此 Job 相关的所有处于活跃状态的 Pod，
          用户必须设计自己的工作负载以便能够让 Pod 体面地结束。
          挂起 Job 的操作会重置 Job 的 `startTime` 字段值，
          相当于也会重置 `activeDeadlineSeconds` 计时器。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: |-
          Describes the Pod that will be created when executing a Job.
          This field cannot be updated. For a Job, the `restartPolicy` must be explicitly
          set because the default value `"Always"` is not acceptable.
          The valid value is one of `"OnFailure"` and `"Never"`.
          Also the `containers` field cannot be empty.
        x-kab-description-zh: |-
          此字段描述执行 Job 时将被创建的 Pod。
          对于 Job 而言，Pod 的 `restartPolicy` 必须被显式设置，因为默认值 `"Always"`
          是不可接受的。合法值是 `"OnFailure"` 和 `"Never"` 之一。
          此外，Pod 的 `containers` 字段不可以为空。
          此字段不可变更。
      ttlSecondsAfterFinished:
        description: |-
          This limits the lifetime of a Job that has finished execution
          (either `"Complete"` or `"Failed"`). If this field is set,
          the specified seconds after the Job finishes, it is eligible to be
          automatically deleted.
          When the Job is being deleted, its lifecycle guarantees (e.g. `finalizers`)
          will be honored. If this field is unset, the Job won't be automatically deleted.
          If this field is set to zero, the Job becomes eligible to be deleted
          immediately after it finishes.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此字段用来限制已经终止执行（`"Complete"` 或者 `"Failed"`）的 Job 的生命周期。
          如果设置了此字段，在 Job 完成之后经过指定的秒数之后，Job 可以被自动删除。
          当 Job 被删除时，控制器会关注到其生命周期保障（例如：`finalizers`）。
          如果未设置 `ttsSecondsAfterFinished`，则 Job 不会被自动删除。
          如果此字段被设置为零，Job 在结束之后立即可被删除。
    required:
      - template
    type: object
    x-kab-description-zh: 此结构描述 Job 的执行方式。
  io.k8s.api.batch.v1.JobSpec.GET:
    description: This describes how the Job execution will look like.
    properties:
      activeDeadlineSeconds:
        description: |-
          The duration in seconds relative to the `startTime` that the Job may be continuously
          active before the system tries to terminate it.
          If a Job is suspended (at creation or through an update), this timer will effectively
          be stopped and reset when the Job is resumed again.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          在系统尝试终止 Job 之前，Job 可以保持活跃的时长。计时起点为 Job 的 `startTIme`，以秒计。
          如果某 Job（创建时或者通过更新操作）被挂起，此计时器会被停止，并在 Job 恢复执行时复位。
      backoffLimit:
        default: 6
        description: The number of retries before marking this Job as failed.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 在标记 Job 为失败状态之前 Job 可以进行的重试次数。
      backoffLimitPerIndex:
        description: |-
          Specifies the limit for the number of retries within an index before marking this index
          as failed. When enabled the number of failures per index is kept in the Pod's
          `batch.kubernetes.io/job-index-failure-count` annotation.
          It can only be set when Job's `completionMode=Indexed`, and the Pod's `restartPolicy`
          is `"Never"`. The field is immutable. This field is Beta-level.
          It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled
          (enabled by default). This field is required when `maxFailedIndexes` is specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在将某个索引标记为失败之前，对该索引可以进行的重试次数上限。
          启用此特性之后，每个索引的失败次数会被保存在 Pod 的注解
          `batch.kubernetes.io/job-index-failure-count` 中。
          只有当 Job 的 `completionMode` 设置为 `"Indexed"`，并且 Pod 的 `restartPolicy`
          为 `"Never"` 时才可以设置这个字段。
          此字段是不可变更的。目前是一个 Beta 阶段的特性。
          需要启用 `JobBackoffLimitPerIndex` 特性门控（默认被启用）。
          当设置了 `maxFailedIndexes` 属性时，此字段是必须设置的。
      completionMode:
        default: NonIndexed
        description: |-
          This specifies how Pod completions are tracked. - `"NonIndexed"` means that the Job is considered complete when there have been `.spec.completions` successfully completed Pods. Each Pod completion is homologous to each other. - `"Indexed"` means that the Pods of a Job get an associated completion index from 0 to `(.spec.completions - 1)`, available in the annotation `"batch.kubernetes.io/job-completion-index"`. The Job is considered complete when there is one successfully completed Pod for each index. When value is `"Indexed"`, `.spec.completions` must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, the Pod name takes the form `<job-name>-<index>-<random-string>` and the Pod host name takes the form `<job-name>-<index>`.
          More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
        enum:
          - Indexed
          - NonIndexed
        type: string
        x-kab-description-zh: |-
          此字段用来设置如何跟踪 Pod 的完成情况。
          - `"NonIndexed"` 意味着当 Job 中成功完成的 Pod 个数为 `.spec.completions`
            时可以认为 Job 完成。所有 Pod 完成都是等价无差别的。
          - `"Indexed"` 意味着 Job 的 Pod 都会获得一个介于 0 和 `(.spec.completions - 1)`
            之间的完成索引，该索引值记录在 Pod 注解 `"batch.kubernetes.io/job-completion-index"`
            中。当对应每个索引都有一个成功完成的 Pod 时，可以认为 Job 成功完成。
            当字段值设置为 `"Indexed"` 时，必须为 Job 设置 `.spec.completions`，
            并且 `.spec.parallelism` 必须小于等于 10^5。
            此外，Pod 的名字格式也会变成 `<Job 名称>-<索引>-<随机字符串>` 形式，
            而 Pod 的主机名也会变为 `<Job 名称>-<索引>` 格式。

          在未来的 API 版本中，可能会有新的完成模式被添加进来。
          如果 Job 控制器看到一个它无法识别或处理的模式（升级过程中可能因为版本偏差而导致这种情况），
          控制器会略过对 Job 的更新。
      completions:
        description: |-
          The desired number of successfully finished Pods the Job should be run with.
          Setting to `null` means that the success of any Pod signals the success of all Pods,
          and allows `parallelism` to have any positive value.
          Setting to `1` means that `parallelism` is limited to 1 and the success of
          that Pod signals the success of the Job. This field cannot be updated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Job 要运行的所有 Pod 中，预期成功完成的 Pod 个数。
          字段值设为 `null` 意味着任何一个 Pod 成功完成都可以视为所有 Pod 都成功，
          这时 `parallelism` 可以取任何正整数值。
          字段值设置为 `1` 时意味着 `parallelism` 也只能设置为 `1`，并且 Pod
          的成功完成意味着 Job 成功。
          此字段不可更新。
      managedBy:
        description: |-
          This field indicates the controller that manages a Job.
          The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string
          `"kubernetes.io/job-controller"`, but skips reconciling Jobs with a custom value for this field.
          The value must be a valid domain-prefixed path (e.g. `"acme.io/foo"`) - all characters before the first `/` must be a valid subdomain
          as defined by RFC 1123. All characters trailing the first `/` must be valid HTTP Path characters as defined by RFC 3986.
          The value cannot exceed 64 characters.

          This field is Alpha-level. The Job controller accepts setting the field when the feature gate `JobManagedBy` is enabled.
        maxLength: 64
        type: string
        x-kab-description-zh: |-
          此字段给出用来管理 Job 的控制器。
          如果 Job 未设置此字段，或者将此字段设置为字符串 `"kubernetes.io/job-controller"`，则 Kubernetes 内部的 Job 控制器会负责协调此 Job 的状态。
          反之，如果此字段被设置为其他字符串值，则 Kubernetes 内部的 Job 控制器会忽略此 Job。
          字段取值必须是合法的、带域名前缀的路径（例如，`"acme.io/foo"`）：第一个 `/` 之前的字符串必须构成符合 RFC 1123 规范的合法域名；
          而第一个 `/` 之后的所有字符必须构成一个符合 RFC 3986 规范的合法 HTTP 路径。

          此字段目前处于 Alpha 状态。当特性门控 `JobManagedBy` 被启用时，Job 控制器会接受此字段的设置。
      manualSelector:
        description: |-
          This controls the generation of Pod labels and Pod selectors.
          Leave `manualSelector` unset unless you are certain what you are doing.
          When `false` or unset, the system pick labels unique to this Job and appends those labels to the Pod template.
          When `true`, the user is responsible for picking unique labels and specifying the `selector`.
          Failure to pick a unique label may cause this and other Jobs to not function correctly.
          However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.
        type: boolean
        x-kab-description-zh: |-
          此字段控制 Pod 标签与选择算符的生成逻辑。
          如果你不清楚设置此字段的后果，可以不设置 `manualSelector`。
          当此字段设置为 `false` 或者未设置时，系统会为字段选择一个对此 Job 唯一的标签，
          并将这一标签追加到 Pod 模板中定义的标签之后。
          当此字段值设置为 `true` 时，用户要负责选择唯一性的标签，并手动设置 `selector`。
          如果未能成功地选择唯一标签，可能会导致当前 Job 以及其他 Job 无法正常工作。
          不过，你也可能会看到使用老的 `extensions/v1beta1` API 所创建的 Job
          中设置了 `manualSelector=true`。
      maxFailedIndexes:
        description: |-
          Specifies the maximal number of failed indexes before marking the Job as failed,
          when `backoffLimitPerIndex` is set.
          Once the number of failed indexes exceeds this number,
          the entire Job is marked as `"Failed"` and its execution is terminated.
          When left as null the Job continues execution of all of its indexes and is marked with the `Complete` Job condition.
          It can only be specified when `backoffLimitPerIndex` is set.
          It can be null or up to `completions`.
          It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is Beta-level.
          It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
        format: int32
        type: integer
        x-kab-description-zh: |-
          对于设置了 `backoffLimitPerIndex` 的 Job 而言，此字段设置在标记 Job
          失败之前可以失败的索引个数上限。
          一旦失败的索引个数达到这里设置的数目，整个 Job 被标记为 `"Failed"` 并停止执行。
          当此字段保持为 null 时，Job 会继续执行其所有索引，并且 Job 会被标记 `Complete` 状况。

          只有设置了 `backoffLimitPerIndex` 的时候，才可以设置此字段。
          字段的取值可以是 null，或者至多为 `completions`。
          当 `completions` 大于 10^5 时，此字段必须设置，并且其取值必须小于等于 10^4。
          此字段的设置是一个 Beta 阶段特性。
          只有启用了 `JobBackoffLimitPerIndex` 特性门控时（默认启用）才可以设置。
      parallelism:
        description: |-
          The maximum desired number of Pods the Job should run at any given time.
          The actual number of Pods running in steady state will be less than this number when
          `((.spec.completions - .status.successful) < .spec.parallelism)`,
          i.e. when the work left to do is less than max `parallelism`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在任一时刻 Job 中预期可以同时运行的 Pod 个数上限。
          当 `((.spec.completions - .status.successful) < .spec.parallelism)` 时，
          也就是剩下的需要运行的工作少于 `parallelism` 这一上限时，
          实际处于稳定运行状态的 Pod 个数会低于此值。
      podFailurePolicy:
        $ref: '#/definitions/io.k8s.api.batch.v1.PodFailurePolicy'
        description: |-
          Specifies the policy of handling failed Pods.
          In particular, it allows to specify the set of actions and conditions
          which need to be satisfied to take the associated action.
          If empty, the default behaviour applies - the counter of failed Pods,
          represented by the Jobs's `.status.failed` field, is incremented and
          it is checked against the `backoffLimit`.
          This field cannot be used in combination with `restartPolicy=OnFailure`.

          This field is Beta-level. It can be used when the `JobPodFailurePolicy`
          feature gate is enabled (enabled by default)."
        x-kab-description-zh: |-
          设置处理失败 Pod 的策略。
          使用这一字段，可以设置处置动作以及采取相应动作之前需要满足的条件。
          如果为空，则采用默认的行为 -- 用 Job 的 `.status.failed` 字段所代表的失败
          Pod 计数会被增一，并且控制器会检查计数值是否超过 `backoffLimit`。
          此字段不能在 `restartPolicy` 设置为 `"OnFailure"` 时使用。

          此字段为 Beta 阶段。需要启用 `JobPodFailurePolicy` 特性门控。
      podReplacementPolicy:
        description: |-
          This specifies when to create replacement Pods. Possible values are:
          - `"TerminatingOrFailed"`: means that we recreate pods when they are terminating
            (has a `metadata.deletionTimestamp`) or failed.
          - `"Failed"`: means to wait until a previously created Pod is fully terminated
            (has phase `"Failed"` or `"Succeeded"`) before creating a replacement Pod.

          When using `podFailurePolicy`, `"Failed"` is the the only allowed value.
          `"TerminatingOrFailed"` and `"Failed"` are allowed values when `podFailurePolicy`
          is not in use. This is an Beta field.
          Enable the `JobPodReplacementPolicy` feature gate to be able to use this field.
        enum:
          - Failed
          - TerminatingOrFailed
        type: string
        x-kab-description-zh: |-
          此字段设置何时创建替代 Pod。可选值包括：
          - `"TerminatingOrFailed"`：当现有 Pod 被终止（`metadata.deletionTimestamp` 非空）
            或者失败时，要重新创建 Pod。
          - `"Failed"`：要等待之前创建的 Pod 彻底终止（阶段为 `"Failed"` 或 `"Succeeded"`）
            时才能创建替代 Pod。

          设置了 `podFailurePolicy` 字段时，此字段只能设置为 `"Failed"`。
          未设置 `podFailurePolicy` 时，可以选择 `"TerminatingOrFailed"` 和 `"Failed"` 之一。

          此字段处于 Beta 阶段，需要启用 `JobPodReplacementPolicy` 特性门控（默认启用）。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the Pod count.
          Normally, the system sets this field for you.
          The `selector` must match the `labels` defined on the Pod template.
          This field cannot be updated.
        x-kab-description-zh: |-
          对 Pod 的标签查询算符，选中的 Pod 要与 Pod 计数匹配。通常，系统会自动设置此字段。
          `selector` 的设置值必须与 Pod 模板中定义的 `labels` 匹配。

          此字段不可更新。
      successPolicy:
        $ref: '#/definitions/io.k8s.api.batch.v1.SuccessPolicy'
        description: |-
          successPolicy specifies the policy when the Job can be declared as succeeded.
          If empty, the default behavior applies - the Job is declared as succeeded only when the number of succeeded pods equals to the completions.
          When the field is specified, it must be immutable and works only for the Indexed Jobs.
          Once the Job meets the SuccessPolicy, the lingering pods are terminated.

          This field is Alpha-level. To use this field, you must enable the `JobSuccessPolicy` feature gate.
        x-kab-description-zh: |-
          此字段设置何时可以宣称 Job 成功。
          此字段为空时，系统的默认行为是在 Job 中成功的 Pod 个数等于其 `completions` 字段设置时宣称 Job 成功。
          此字段一旦设置则不能变更，并且字段仅对带索引的 Job 起作用。
          一旦 Job 满足了 SuccessPolicy 策略所规定的条件，则剩余的 Pod 都会被终止。

          此字段处于 Alpha 状态。使用此字段需要启用 `JobSuccessPolicy` 特性门控。
      suspend:
        default: false
        description: |-
          This specifies whether the Job controller should create Pods or not.
          If a Job is created with `suspend` set to `true`, no Pods are created by the
          Job controller.
          If a Job is suspended after creation (i.e. the flag goes from `false` to `true`),
          the Job controller will delete all active Pods associated with this Job.
          Users must design their workload to gracefully handle this.
          Suspending a Job will reset the `startTime` field of the Job,
          effectively resetting the `activeDeadlineSeconds` timer too.
        type: boolean
        x-kab-description-zh: |-
          此字段设置是否 Job 控制器需要创建 Pod。
          如果 Job 在创建时其 `suspend` 被设置为 `true`，Job 控制器不会为其创建 Pod。
          如果 Job 在创建之后被挂起（即此字段取值从 `false` 变为 `true`），则
          Job 控制器会删除与此 Job 相关的所有处于活跃状态的 Pod，
          用户必须设计自己的工作负载以便能够让 Pod 体面地结束。
          挂起 Job 的操作会重置 Job 的 `startTime` 字段值，
          相当于也会重置 `activeDeadlineSeconds` 计时器。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: |-
          Describes the Pod that will be created when executing a Job.
          This field cannot be updated. For a Job, the `restartPolicy` must be explicitly
          set because the default value `"Always"` is not acceptable.
          The valid value is one of `"OnFailure"` and `"Never"`.
          Also the `containers` field cannot be empty.
        x-kab-description-zh: |-
          此字段描述执行 Job 时将被创建的 Pod。
          对于 Job 而言，Pod 的 `restartPolicy` 必须被显式设置，因为默认值 `"Always"`
          是不可接受的。合法值是 `"OnFailure"` 和 `"Never"` 之一。
          此外，Pod 的 `containers` 字段不可以为空。
          此字段不可变更。
      ttlSecondsAfterFinished:
        description: |-
          This limits the lifetime of a Job that has finished execution
          (either `"Complete"` or `"Failed"`). If this field is set,
          the specified seconds after the Job finishes, it is eligible to be
          automatically deleted.
          When the Job is being deleted, its lifecycle guarantees (e.g. `finalizers`)
          will be honored. If this field is unset, the Job won't be automatically deleted.
          If this field is set to zero, the Job becomes eligible to be deleted
          immediately after it finishes.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此字段用来限制已经终止执行（`"Complete"` 或者 `"Failed"`）的 Job 的生命周期。
          如果设置了此字段，在 Job 完成之后经过指定的秒数之后，Job 可以被自动删除。
          当 Job 被删除时，控制器会关注到其生命周期保障（例如：`finalizers`）。
          如果未设置 `ttsSecondsAfterFinished`，则 Job 不会被自动删除。
          如果此字段被设置为零，Job 在结束之后立即可被删除。
    required:
      - activeDeadlineSeconds
      - backoffLimit
      - completions
      - manualSelector
      - parallelism
      - selector
      - template
      - ttlSecondsAfterFinished
    type: object
    x-kab-description-zh: 此结构描述 Job 的执行方式。
  io.k8s.api.batch.v1.JobSpec.UPDATE:
    description: This describes how the Job execution will look like.
    properties:
      activeDeadlineSeconds:
        description: |-
          The duration in seconds relative to the `startTime` that the Job may be continuously
          active before the system tries to terminate it.
          If a Job is suspended (at creation or through an update), this timer will effectively
          be stopped and reset when the Job is resumed again.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          在系统尝试终止 Job 之前，Job 可以保持活跃的时长。计时起点为 Job 的 `startTIme`，以秒计。
          如果某 Job（创建时或者通过更新操作）被挂起，此计时器会被停止，并在 Job 恢复执行时复位。
      backoffLimit:
        default: 6
        description: The number of retries before marking this Job as failed.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 在标记 Job 为失败状态之前 Job 可以进行的重试次数。
      backoffLimitPerIndex:
        description: |-
          Specifies the limit for the number of retries within an index before marking this index
          as failed. When enabled the number of failures per index is kept in the Pod's
          `batch.kubernetes.io/job-index-failure-count` annotation.
          It can only be set when Job's `completionMode=Indexed`, and the Pod's `restartPolicy`
          is `"Never"`. The field is immutable. This field is Beta-level.
          It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled
          (enabled by default). This field is required when `maxFailedIndexes` is specified.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在将某个索引标记为失败之前，对该索引可以进行的重试次数上限。
          启用此特性之后，每个索引的失败次数会被保存在 Pod 的注解
          `batch.kubernetes.io/job-index-failure-count` 中。
          只有当 Job 的 `completionMode` 设置为 `"Indexed"`，并且 Pod 的 `restartPolicy`
          为 `"Never"` 时才可以设置这个字段。
          此字段是不可变更的。目前是一个 Beta 阶段的特性。
          需要启用 `JobBackoffLimitPerIndex` 特性门控（默认被启用）。
          当设置了 `maxFailedIndexes` 属性时，此字段是必须设置的。
      completionMode:
        default: NonIndexed
        description: |-
          This specifies how Pod completions are tracked. - `"NonIndexed"` means that the Job is considered complete when there have been `.spec.completions` successfully completed Pods. Each Pod completion is homologous to each other. - `"Indexed"` means that the Pods of a Job get an associated completion index from 0 to `(.spec.completions - 1)`, available in the annotation `"batch.kubernetes.io/job-completion-index"`. The Job is considered complete when there is one successfully completed Pod for each index. When value is `"Indexed"`, `.spec.completions` must be specified and `.spec.parallelism` must be less than or equal to 10^5. In addition, the Pod name takes the form `<job-name>-<index>-<random-string>` and the Pod host name takes the form `<job-name>-<index>`.
          More completion modes can be added in the future. If the Job controller observes a mode that it doesn't recognize, which is possible during upgrades due to version skew, the controller skips updates for the Job.
        enum:
          - Indexed
          - NonIndexed
        type: string
        x-kab-description-zh: |-
          此字段用来设置如何跟踪 Pod 的完成情况。
          - `"NonIndexed"` 意味着当 Job 中成功完成的 Pod 个数为 `.spec.completions`
            时可以认为 Job 完成。所有 Pod 完成都是等价无差别的。
          - `"Indexed"` 意味着 Job 的 Pod 都会获得一个介于 0 和 `(.spec.completions - 1)`
            之间的完成索引，该索引值记录在 Pod 注解 `"batch.kubernetes.io/job-completion-index"`
            中。当对应每个索引都有一个成功完成的 Pod 时，可以认为 Job 成功完成。
            当字段值设置为 `"Indexed"` 时，必须为 Job 设置 `.spec.completions`，
            并且 `.spec.parallelism` 必须小于等于 10^5。
            此外，Pod 的名字格式也会变成 `<Job 名称>-<索引>-<随机字符串>` 形式，
            而 Pod 的主机名也会变为 `<Job 名称>-<索引>` 格式。

          在未来的 API 版本中，可能会有新的完成模式被添加进来。
          如果 Job 控制器看到一个它无法识别或处理的模式（升级过程中可能因为版本偏差而导致这种情况），
          控制器会略过对 Job 的更新。
      completions:
        description: |-
          The desired number of successfully finished Pods the Job should be run with.
          Setting to `null` means that the success of any Pod signals the success of all Pods,
          and allows `parallelism` to have any positive value.
          Setting to `1` means that `parallelism` is limited to 1 and the success of
          that Pod signals the success of the Job. This field cannot be updated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          Job 要运行的所有 Pod 中，预期成功完成的 Pod 个数。
          字段值设为 `null` 意味着任何一个 Pod 成功完成都可以视为所有 Pod 都成功，
          这时 `parallelism` 可以取任何正整数值。
          字段值设置为 `1` 时意味着 `parallelism` 也只能设置为 `1`，并且 Pod
          的成功完成意味着 Job 成功。
          此字段不可更新。
      managedBy:
        description: |-
          This field indicates the controller that manages a Job.
          The k8s Job controller reconciles jobs which don't have this field at all or the field value is the reserved string
          `"kubernetes.io/job-controller"`, but skips reconciling Jobs with a custom value for this field.
          The value must be a valid domain-prefixed path (e.g. `"acme.io/foo"`) - all characters before the first `/` must be a valid subdomain
          as defined by RFC 1123. All characters trailing the first `/` must be valid HTTP Path characters as defined by RFC 3986.
          The value cannot exceed 64 characters.

          This field is Alpha-level. The Job controller accepts setting the field when the feature gate `JobManagedBy` is enabled.
        maxLength: 64
        type: string
        x-kab-description-zh: |-
          此字段给出用来管理 Job 的控制器。
          如果 Job 未设置此字段，或者将此字段设置为字符串 `"kubernetes.io/job-controller"`，则 Kubernetes 内部的 Job 控制器会负责协调此 Job 的状态。
          反之，如果此字段被设置为其他字符串值，则 Kubernetes 内部的 Job 控制器会忽略此 Job。
          字段取值必须是合法的、带域名前缀的路径（例如，`"acme.io/foo"`）：第一个 `/` 之前的字符串必须构成符合 RFC 1123 规范的合法域名；
          而第一个 `/` 之后的所有字符必须构成一个符合 RFC 3986 规范的合法 HTTP 路径。

          此字段目前处于 Alpha 状态。当特性门控 `JobManagedBy` 被启用时，Job 控制器会接受此字段的设置。
      manualSelector:
        description: |-
          This controls the generation of Pod labels and Pod selectors.
          Leave `manualSelector` unset unless you are certain what you are doing.
          When `false` or unset, the system pick labels unique to this Job and appends those labels to the Pod template.
          When `true`, the user is responsible for picking unique labels and specifying the `selector`.
          Failure to pick a unique label may cause this and other Jobs to not function correctly.
          However, You may see `manualSelector=true` in Jobs that were created with the old `extensions/v1beta1` API.
        type: boolean
        x-kab-description-zh: |-
          此字段控制 Pod 标签与选择算符的生成逻辑。
          如果你不清楚设置此字段的后果，可以不设置 `manualSelector`。
          当此字段设置为 `false` 或者未设置时，系统会为字段选择一个对此 Job 唯一的标签，
          并将这一标签追加到 Pod 模板中定义的标签之后。
          当此字段值设置为 `true` 时，用户要负责选择唯一性的标签，并手动设置 `selector`。
          如果未能成功地选择唯一标签，可能会导致当前 Job 以及其他 Job 无法正常工作。
          不过，你也可能会看到使用老的 `extensions/v1beta1` API 所创建的 Job
          中设置了 `manualSelector=true`。
      maxFailedIndexes:
        description: |-
          Specifies the maximal number of failed indexes before marking the Job as failed,
          when `backoffLimitPerIndex` is set.
          Once the number of failed indexes exceeds this number,
          the entire Job is marked as `"Failed"` and its execution is terminated.
          When left as null the Job continues execution of all of its indexes and is marked with the `Complete` Job condition.
          It can only be specified when `backoffLimitPerIndex` is set.
          It can be null or up to `completions`.
          It is required and must be less than or equal to 10^4 when is completions greater than 10^5. This field is Beta-level.
          It can be used when the `JobBackoffLimitPerIndex` feature gate is enabled (enabled by default).
        format: int32
        type: integer
        x-kab-description-zh: |-
          对于设置了 `backoffLimitPerIndex` 的 Job 而言，此字段设置在标记 Job
          失败之前可以失败的索引个数上限。
          一旦失败的索引个数达到这里设置的数目，整个 Job 被标记为 `"Failed"` 并停止执行。
          当此字段保持为 null 时，Job 会继续执行其所有索引，并且 Job 会被标记 `Complete` 状况。

          只有设置了 `backoffLimitPerIndex` 的时候，才可以设置此字段。
          字段的取值可以是 null，或者至多为 `completions`。
          当 `completions` 大于 10^5 时，此字段必须设置，并且其取值必须小于等于 10^4。
          此字段的设置是一个 Beta 阶段特性。
          只有启用了 `JobBackoffLimitPerIndex` 特性门控时（默认启用）才可以设置。
      parallelism:
        description: |-
          The maximum desired number of Pods the Job should run at any given time.
          The actual number of Pods running in steady state will be less than this number when
          `((.spec.completions - .status.successful) < .spec.parallelism)`,
          i.e. when the work left to do is less than max `parallelism`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在任一时刻 Job 中预期可以同时运行的 Pod 个数上限。
          当 `((.spec.completions - .status.successful) < .spec.parallelism)` 时，
          也就是剩下的需要运行的工作少于 `parallelism` 这一上限时，
          实际处于稳定运行状态的 Pod 个数会低于此值。
      podFailurePolicy:
        $ref: '#/definitions/io.k8s.api.batch.v1.PodFailurePolicy'
        description: |-
          Specifies the policy of handling failed Pods.
          In particular, it allows to specify the set of actions and conditions
          which need to be satisfied to take the associated action.
          If empty, the default behaviour applies - the counter of failed Pods,
          represented by the Jobs's `.status.failed` field, is incremented and
          it is checked against the `backoffLimit`.
          This field cannot be used in combination with `restartPolicy=OnFailure`.

          This field is Beta-level. It can be used when the `JobPodFailurePolicy`
          feature gate is enabled (enabled by default)."
        x-kab-description-zh: |-
          设置处理失败 Pod 的策略。
          使用这一字段，可以设置处置动作以及采取相应动作之前需要满足的条件。
          如果为空，则采用默认的行为 -- 用 Job 的 `.status.failed` 字段所代表的失败
          Pod 计数会被增一，并且控制器会检查计数值是否超过 `backoffLimit`。
          此字段不能在 `restartPolicy` 设置为 `"OnFailure"` 时使用。

          此字段为 Beta 阶段。需要启用 `JobPodFailurePolicy` 特性门控。
      podReplacementPolicy:
        description: |-
          This specifies when to create replacement Pods. Possible values are:
          - `"TerminatingOrFailed"`: means that we recreate pods when they are terminating
            (has a `metadata.deletionTimestamp`) or failed.
          - `"Failed"`: means to wait until a previously created Pod is fully terminated
            (has phase `"Failed"` or `"Succeeded"`) before creating a replacement Pod.

          When using `podFailurePolicy`, `"Failed"` is the the only allowed value.
          `"TerminatingOrFailed"` and `"Failed"` are allowed values when `podFailurePolicy`
          is not in use. This is an Beta field.
          Enable the `JobPodReplacementPolicy` feature gate to be able to use this field.
        enum:
          - Failed
          - TerminatingOrFailed
        type: string
        x-kab-description-zh: |-
          此字段设置何时创建替代 Pod。可选值包括：
          - `"TerminatingOrFailed"`：当现有 Pod 被终止（`metadata.deletionTimestamp` 非空）
            或者失败时，要重新创建 Pod。
          - `"Failed"`：要等待之前创建的 Pod 彻底终止（阶段为 `"Failed"` 或 `"Succeeded"`）
            时才能创建替代 Pod。

          设置了 `podFailurePolicy` 字段时，此字段只能设置为 `"Failed"`。
          未设置 `podFailurePolicy` 时，可以选择 `"TerminatingOrFailed"` 和 `"Failed"` 之一。

          此字段处于 Beta 阶段，需要启用 `JobPodReplacementPolicy` 特性门控（默认启用）。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over Pods that should match the Pod count.
          Normally, the system sets this field for you.
          The `selector` must match the `labels` defined on the Pod template.
          This field cannot be updated.
        x-kab-description-zh: |-
          对 Pod 的标签查询算符，选中的 Pod 要与 Pod 计数匹配。通常，系统会自动设置此字段。
          `selector` 的设置值必须与 Pod 模板中定义的 `labels` 匹配。

          此字段不可更新。
      suspend:
        default: false
        description: |-
          This specifies whether the Job controller should create Pods or not.
          If a Job is created with `suspend` set to `true`, no Pods are created by the
          Job controller.
          If a Job is suspended after creation (i.e. the flag goes from `false` to `true`),
          the Job controller will delete all active Pods associated with this Job.
          Users must design their workload to gracefully handle this.
          Suspending a Job will reset the `startTime` field of the Job,
          effectively resetting the `activeDeadlineSeconds` timer too.
        type: boolean
        x-kab-description-zh: |-
          此字段设置是否 Job 控制器需要创建 Pod。
          如果 Job 在创建时其 `suspend` 被设置为 `true`，Job 控制器不会为其创建 Pod。
          如果 Job 在创建之后被挂起（即此字段取值从 `false` 变为 `true`），则
          Job 控制器会删除与此 Job 相关的所有处于活跃状态的 Pod，
          用户必须设计自己的工作负载以便能够让 Pod 体面地结束。
          挂起 Job 的操作会重置 Job 的 `startTime` 字段值，
          相当于也会重置 `activeDeadlineSeconds` 计时器。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: |-
          Describes the Pod that will be created when executing a Job.
          This field cannot be updated. For a Job, the `restartPolicy` must be explicitly
          set because the default value `"Always"` is not acceptable.
          The valid value is one of `"OnFailure"` and `"Never"`.
          Also the `containers` field cannot be empty.
        x-kab-description-zh: |-
          此字段描述执行 Job 时将被创建的 Pod。
          对于 Job 而言，Pod 的 `restartPolicy` 必须被显式设置，因为默认值 `"Always"`
          是不可接受的。合法值是 `"OnFailure"` 和 `"Never"` 之一。
          此外，Pod 的 `containers` 字段不可以为空。
          此字段不可变更。
      ttlSecondsAfterFinished:
        description: |-
          This limits the lifetime of a Job that has finished execution
          (either `"Complete"` or `"Failed"`). If this field is set,
          the specified seconds after the Job finishes, it is eligible to be
          automatically deleted.
          When the Job is being deleted, its lifecycle guarantees (e.g. `finalizers`)
          will be honored. If this field is unset, the Job won't be automatically deleted.
          If this field is set to zero, the Job becomes eligible to be deleted
          immediately after it finishes.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          此字段用来限制已经终止执行（`"Complete"` 或者 `"Failed"`）的 Job 的生命周期。
          如果设置了此字段，在 Job 完成之后经过指定的秒数之后，Job 可以被自动删除。
          当 Job 被删除时，控制器会关注到其生命周期保障（例如：`finalizers`）。
          如果未设置 `ttsSecondsAfterFinished`，则 Job 不会被自动删除。
          如果此字段被设置为零，Job 在结束之后立即可被删除。
    required:
      - selector
      - template
    type: object
    x-kab-description-zh: 此结构描述 Job 的执行方式。
  io.k8s.api.batch.v1.JobStatus:
    description: The current status of a Job.
    properties:
      active:
        description: The number of pending and running Pods which are not terminating
          (without a deletionTimestamp). The value is zero for finished jobs.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 当前处于悬决和运行状态而未被终止（未设置 `deletionTimestamp`）的 Pod 个数。对于已终止的
          Job 而言，此字段为零。
      completedIndexes:
        description: |-
          This holds the completed indexes when `.spec.completionMode="Indexed"` in a text format.
          The indexes are represented as decimal integers separated by commas.
          The numbers are listed in increasing order.
          Three or more consecutive numbers are compressed and represented by the first and
          last element of the series, separated by a hyphen.
          For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as
          `"1,3-5,7"`.
        type: string
        x-kab-description-zh: |-
          此字段中是 `.spec.completionMode` 为 `"Indexed"` 时的 Pod 完成索引。
          这些索引值是用逗号分隔的十进制整数来表示的。列表中的整数按增序排列。
          三个或三个以上的连续整数序列会被压缩，表示为用连字符串接的第一个元素和最后一个元素。
          例如，如果完成索引为 1、3、4、5 和 7，则其表现形式为：`"1,3-5,7"`。
      completionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          Time when the Job was completed. It is not guaranteed to be set in **happens-before**
          order across separate operations. It is represented in RFC3339 form and is in UTC.
          The completion time is only set when the job finishes successfully, and only then.
          The value cannot be updated or removed.
          The value indicates the same or later point in time as the `startTime` field.
        x-kab-description-zh: |-
          Job 的完成时间。Job 上存在多个操作时，无法保证此时间戳的设置严格遵循先后顺序。
          字段值以 RFC3339 的形式给出，使用 UTC 时区。
          只有当 Job 成功结束时才会设置完成时间。此字段值不可被更新或删除。
          字段值可以与 `startTime` 字段值相同，或者比其晚一定的时间。
      conditions:
        description: |-
          The latest available observations of an object's current state.
          When a Job fails, one of the conditions will have `type` set to `"Failed"`.
          When a Job is suspended, one of the conditions will have `type` "Suspended" and
          `status` true; when the Job is resumed, the status of this condition will become `false`.
          When a Job is completed, one of the conditions will have type "Complete" and `status` true.

          A Job is considered finished when it is in a terminal condition, either `"Complete"` or `"Failed"`.
          A Job cannot have both the `"Complete"` and `"Failed"` conditions.
          Additionally, it cannot be in the `"Complete"` and `"FailureTarget"` conditions.
          The `"Complete"`, `"Failed"` and `"FailureTarget"` conditions cannot be disabled.
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.JobCondition'
        type: array
        x-kab-description-zh: |-
          关于 Job 当前状态的最新可用观测结果。
          如果 Job 失败了，其状况之一的 `type` 会被设置为 `"Failed"`。
          如果 Job 被挂起，则状况之一的 `type` 会是 `"Suspended"`，并且 `status` 为 `"True"`。
          当 Job 被恢复执行时，对应的 `"Suspended"` 状况的 `status` 会变为 `"False"`。
          当 Job 结束时，其状况之一的 `type` 会是 `"Complete"`，而 `status` 为 `"True"`。

          当 Job 进入某个终止状况（`"Complete"` 或者 `"Failed"`）时，可以认为 Job 结束（Finished）了。
          Job 不可以同时设置 `"Complete"` 和 `"Failed"` 状况。此外，Job 不可以同时处于 `"Complete"` 和 `"FailureTarget"` 这两种状况。
          状况 `"Complete"`、`"Failed"` 和 `"FailureTarget"` 都是不可以被禁止的。
        x-kubernetes-list-type: atomic
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      failed:
        description: The number of Pods which reached phase `"Failed"`. The value
          increases monotonically.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 到达 `"Failed"` 阶段的 Pod 个数。此字段的取值只能是单调增加。
      failedIndexes:
        description: |-
          This holds the failed indexes when `spec.backoffLimitPerIndex` is set.
          The indexes are represented in the text format analogous as for the `completedIndexes` field, i.e.
          they are kept as decimal integers separated by commas. The numbers are listed in increasing order.
          Three or more consecutive numbers are compressed and represented by the first and last element of the series, separated by a hyphen.
          For example, if the failed indexes are 1, 3, 4, 5 and 7, they are represented as `"1,3-5,7"`.
          The set of failed indexes cannot overlap with the set of completed indexes.\n\n

          This field is Beta-level. It can be used when the `JobBackoffLimitPerIndex` feature gate
          is enabled (enabled by default).
        type: string
        x-kab-description-zh: |-
          当 `.spec.backoffLImitPerIndex` 被设置时，此字段给出的是失败的 Pod 索引。
          索引值的表示方式与 `compeltedIndexes` 字段类似，也是用逗号分隔的十进制数字来表示的。
          索引数字按增序方式给出。三个以及三个以上的连续数字会被压缩，
          呈现为序列中第一个元素与最后一个元素之间添加连字符的形式。
          例如，如果失败索引为 1、3、4、5 和 7，则其表现形式为：`"1,3-5,7"`。

          此字段为 Beta 级别，可通过 `JobBackoffLimitPerIndex` 特性门控启用（默认启用）。
      ready:
        description: The number of Pods which have a Ready condition.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 包含 `"Ready"` 状况的 Pod 的 个数。
      startTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          The time when the Job controller started processing a Job.
          When a Job is created in the suspended state, this field is not set until
          the first time it is resumed.
          This field is reset every time a Job is resumed from suspension.
          It is represented in RFC3339 form and is in UTC.
          Once set, the field can only be removed when the Job is suspended.
          The field cannot be modified while the Job is unsuspended or finished.
        x-kab-description-zh: |-
          Job 控制器开始处理 Job 对象的时间。
          如果 Job 创建时处于挂起状态，则此字段直到 Job 被首次恢复执行时才会被设置。
          Job 每次从挂起状态恢复执行时，都会重置此字段。
          字段值的表示形式遵从 RFC3339 约定，并使用 UTC 时区。

          一旦设置了此字段，则只能在 Job 被挂起时删除所给的设置。
          在 Job 未被挂起或者 Job 已经结束时，此字段不可被更改。
      succeeded:
        description: |-
          The number of Pods which reached phase `"Succeeded"`.  The value increases monotonically for a given spec.
          However, it may decrease in reaction to scale down of elastic indexed Jobs.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          到达 `"Succeeded"` 阶段的 Pod 的个数。针对给定的 Pod 规约，此值是单调增加的。
          不过，对于弹性的带索引的 Job 而言，规模被缩小时也会出现字段值减少的情况。
      terminating:
        description: |-
          The number of Pods which are terminating (in phase `"Pending"` or `"Running"`
          and have a `deletionTimestamp`). This field is Beta-level.
          The Job controller populates the field when the feature gate `JobPodReplacementPolicy`
          is enabled (disabled by default).
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          处于正被终止状态的 Pod（阶段为 `"Pending"` 或 `"Running"` 且设置了 `deletionTimestamp`）
          的个数。此字段为 Beta 阶段。
          当 `JobPodReplacementPolicy` 特性门控被启用时（默认启用），Job 控制器会填充此字段。
      uncountedTerminatedPods:
        $ref: '#/definitions/io.k8s.api.batch.v1.UncountedTerminatedPods'
        description: |-
          This contains the UIDs of Pods that have terminated but the Job controller hasn't
          yet accounted for in the status counters.
          The Job controller creates Pods with a finalizer.
          When a Pod terminates (`Succeeded` or `Failed`), the controller does three steps
          to account for it in the Job status:
          (1) Add the Pod UID to the arrays in this field.
          (2) Remove the Pod finalizer.
          (3) Remove the Pod UID from the arrays while increasing the corresponding counter.
          Old Jobs might not be tracked using this field, in which case the field remains null.

          The structure is empty for finished Jobs.
        x-kab-description-zh: |-
          此字段包含已经被终止的 Pod 的 UID。Job 控制器尚未将这些 Pod 记入其状态计数器中。
          Job 控制器在创建 Pod 时会为其设置终结器（Finalizer）信息。
          Pod 终止时（`Succeeded` 或 `Failed`），控制器会执行以下三个步骤来将其计入 Job 状态：

          1. 将 Pod 的 UID 添加到此字段的数组值中；
          1. 去掉 Pod 上的终结器；
          1. 从此字段的数组中去除 Pod UID，同时将其对应的计数器加一。

          较老的 Job 可能不使用这一字段来实现状态跟踪，这些 Job 上的此字段会一直为 null 值。

          对于已经结束的 Job 而言，此结构为空。
    type: object
    x-kab-description-zh: Job 的当前状态。
  io.k8s.api.batch.v1.JobTemplateSpec:
    description: The data the Job should have when created from a template
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata for Jobs created from this template.
        x-kab-description-zh: 基于模板创建的 Job 的标准对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.batch.v1.JobSpec.CREATE'
        description: |-
          Specification of the desired behavior of the Job.
          The `selector` will be auto-generated so must not be specified.
          The `manualSelector` can be either nil or set to `false`.
        x-kab-description-zh: |-
          对 Job 的预期行为的规约。
          `selector` 是自动生成的，因此不可以设置。
          `manualSelector` 可以为 nil 或者设置为 `false`。
    required:
      - spec
    type: object
    x-kab-description-zh: 当基于某个模板来创建 Job 时，Job 应该具有的数据。
  io.k8s.api.batch.v1.PodFailurePolicy:
    description: PodFailurePolicy describes how failed Pods influence the `backoffLimit`.
    properties:
      rules:
        description: |-
          A list of Pod failure policy rules. The rules are evaluated in order.
          Once a rule matches a Pod failure, the remaining of the rules are ignored.
          When no rule matches the Pod failure, the default handling applies - the counter
          of Pod failures is incremented and it is checked against the `backoffLimit`.
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.PodFailurePolicyRule'
        maxItems: 20
        type: array
        x-kab-description-zh: |-
          Pod 失败策略规则的列表。控制器会逐个按顺序处理各项规则。
          一旦某条规则与 Pod 的失败情况匹配，则控制器不会处理余下的规则。
          如果没有规则可以与 Pod 的失败情况匹配，则采用默认的处理策略 --
          Pod 的失败计数被增一，并检查失败计数总数是否超过 `backoffLimit` 值。
        x-kubernetes-list-type: atomic
    required:
      - rules
    type: object
    x-kab-description-zh: PodFailurePolicy 描述失败的 Pod 如何影响 Job 的 `backoffLimit`。
  io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement:
    description: |-
      PodFailurePolicyOnExitCodesRequirement describes the requirement for
      handling a failed Pod based on its container exit codes.
      In particular, it lookups the `.state.terminated.exitCode` for each app container
      and init container status, represented by the `.status.containerStatuses` and
      `.status.initContainerStatuses` fields in the Pod status, respectively.
      Containers completed with success (exit code 0) are excluded from the requirement check.
    properties:
      containerName:
        description: |-
          Restricts the check for exit codes to the container with the specified name.
          When null, the rule applies to all containers.
          When specified, it should match one of the container or initContainer names
          in the Pod template.
        type: string
        x-kab-description-zh: |-
          限制仅对名字匹配的容器执行退出码检查。此字段为 null 时，检查所有容器。
          设置此字段时，字段值应该与 Pod 模板中的容器或者初始化容器的名字匹配。
      operator:
        description: |-
          Represents the relationship between the container exit code(s) and the specified values.
          Containers completed with success (exit code 0) are excluded from the requirement check.
          Possible values are:
          - `"In"`: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted by the
            `containerName` field) is in the set of specified values.
          - `"NotIn"`: the requirement is satisfied if at least one container exit code
            (might be multiple if there are multiple containers not restricted by the
            `containerName` field) is not in the set of specified values.

          Additional values are considered to be added in the future.
          Clients should react to an unknown operator by assuming the requirement is not satisfied.
        enum:
          - NotIn
          - In
        type: string
        x-kab-description-zh: |-
          此字段所包含的是容器退出码与特定数值之间的关系。
          执行需求检查时会忽略成功完成（退出码为 0）的容器。
          可选择值包括：
          - `"In"`：只要有一个容器的退出码位于所给的值集中则认为需求被满足。
            如果存在多个容器，且不存在 `containerName` 约束，则会有多个容器退出码。
          - `"NotIn"`：至少有一个容器的退出码不在所给的值集中，则认为需求被满足。
            如果存在多个容器，且不存在 `containerName` 约束，则会有多个容器退出码。

          在将来的版本中，可能会添加新的取值。
          客户端如果遇到无法识别的操作符，应该认为需求不满足。
      values:
        description: |-
          Specifies the set of values. Each returned container exit code
          (might be multiple in case of multiple containers) is checked against this set of values
          with respect to the `operator`.
          The list of values must be ordered and must not contain duplicates.
          Value '0' cannot be used for the `In` operator.
        items:
          format: int32
          type: integer
        maxItems: 255
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段给出用于需求判断的值集。针对每个容器的退出码（如果有多个容器则退出码也不止一个），
          控制器会结合 `operator` 的设置使用此值集来完成检查。
          此列表中的数值必须是有序的，并且不可以包含重复条目。
          对于 `"In"` 操作符而言，值集中不可以包含 `0`。
        x-kubernetes-list-type: set
    required:
      - operator
      - values
    type: object
    x-kab-description-zh: |-
      PodFailurePolicyOnExitCodesRequirement 如何描述基于 Pod 中容器的退出代码来决定处理 Pod
      失败状况的方式。
      这里设置的条件会检查每个应用容器和 Init 容器的 `.state.terminated.exitCode` 信息。
      对应的信息在 Pod 状态中分别呈现为 `.status.containerStatuses` and
      `.status.initContainerStatuses` 字段。
      执行需求检查时会忽略成功完成（退出码为 0）的容器。
  io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern:
    description: |-
      PodFailurePolicyOnPodConditionsPattern describes a pattern for matching
      an actual Pod condition type.
    properties:
      status:
        default: 'True'
        description: |-
          Specifies the required Pod condition status. To match a Pod condition,
          it is required that the specified `status` equals the Pod condition `status`.
        type: string
        x-kab-description-zh: |-
          此字段设置所要求的 Pod 状况状态。要与某个 Pod 状况匹配，要求这里所给的 `status`
          与 Pod 中状况的 `status` 相同。
      type:
        description: |-
          Specifies the required Pod condition type. To match a Pod condition,it
          is required that specified `type` equals the pod condition `type`.
        type: string
        x-kab-description-zh: |-
          此字段设置所要求的 Pod 状况类型。要与某个 Pod 状况匹配，要求这里所给的 `type`
          与 Pod 中状况的 `type` 相同。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: PodFailurePolicyOnPodConditionsPattern 描述的是用来匹配实际 Pod 状况类型的模式。
  io.k8s.api.batch.v1.PodFailurePolicyRule:
    description: PodFailurePolicyRule describes how a Pod failure is handled when
      the requirements are met. One of `onExitCodes` and `onPodConditions`, but not
      both, can be used in each rule.
    properties:
      action:
        description: |-
          This specifies the action taken on a Pod failure when the requirements are satisfied.
          Possible values are:
          - `"FailJob"`: indicates that the Pod's Job is marked as `Failed` and
            all running Pods are terminated.
          - `"FailIndex"`: indicates that the Pod's index is marked as `Failed` and
            will not be restarted.
            This value is Beta-level. It can be used when the `JobBackoffLimitPerIndex`
            feature gate is enabled (disabled by default).
          - `"Ignore": indicates that the counter towards the `.backoffLimit` is not incremented
            and a replacement Pod is created.
          - `"Count"`: indicates that the Pod is handled in the default way - the counter
            towards the `.backoffLimit` is incremented.
          Additional values are considered to be added in the future.
          Clients should react to an unknown action by skipping the rule.
        enum:
          - Count
          - FailIndex
          - FailedJob
          - Ignore
        type: string
        x-kab-description-zh: |-
          此字段决定当条件满足时，如何处理 Pod 失败的情况。可选的取值有：
          - `"FailJob"`：表明 Pod 所属的 Job 要被标记为 `"Failed"`，并且所有运行中的 Pod 都被终止。
          - `"FailIndex"`：表明 Pod 所对应的索引会被标记为 `"Failed"`，但不会被重新启动。
            此取值为 Beta 阶段。可以在启用了 `JobBackoffLimitPerIndex` 特性门控时使用（默认启用）。
          - `"Ignore"：表明 Pod 失败不会影响 `.backoffLimit` 字段值，并且控制器会创建替代 Pod。
          - `"Count"`：表明采用默认的方式来处理 Pod 失败的情况 -- 对 `.backoffLimit` 增一。
          将来可能会添加新的取值。客户端遇到无法识别的动作时应该略过对应的规则。
      onExitCodes:
        $ref: '#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnExitCodesRequirement'
        description: Represents the requirement on the container exit codes.
        x-kab-description-zh: 对容器退出代码的需求。
      onPodConditions:
        description: |-
          Represents the requirement on the Pod conditions.
          The requirement is represented as a list of Pod condition patterns.
          The requirement is satisfied if at least one pattern matches an actual Pod condition.
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.PodFailurePolicyOnPodConditionsPattern'
        maxItems: 20
        type: array
        x-kab-description-zh: |-
          对 Pod 状况的需求。
          需求表达为 Pod 状况模式的一个列表。
          如果其中任意一个模式与 Pod 的实际状况匹配，则认为此需求被满足。
        x-kubernetes-list-type: atomic
    required:
      - action
    type: object
    x-kab-description-zh: |-
      PodFailurePolicyRule 描述条件满足时如何处理 Pod 失败的情况。
      每条规则中可以设置 `onExitCodes` 和 `onPodConditions` 之一，但不可以同时设置二者。
  io.k8s.api.batch.v1.SuccessPolicy:
    description: SuccessPolicy describes when a Job can be declared as succeeded based
      on the success of some indexes.
    properties:
      rules:
        description: |-
          This represents the list of alternative rules for the declaring the Jobs as successful before `.status.succeeded >= .spec.completions`.
          Once any of the rules are met, the "SucceededCriteriaMet" condition is added, and the lingering pods are removed.
          The terminal state for such a Job has the "Complete" condition.
          Additionally, these rules are evaluated in order; Once the Job meets one of the rules, other rules are ignored.
          At most 20 elements are allowed.
        items:
          $ref: '#/definitions/io.k8s.api.batch.v1.SuccessPolicyRule'
        maxItems: 20
        type: array
        x-kab-description-zh: |-
          此字段给出一个列表，其中每个条目是一条规则。各个规则均描述在 `.status.succeeded >= .spec.completions` 之前是否以及如何宣称 Job 成功。
          只要列表中某一条或者多条规则被满足，则 `"SucceededCriteriaMet"` 状况就会被添加到 Job 上，而尚未终止的 Pod 都会被删除。
          这类 Job 的终止状态中会包含 `"Completed"` 状况。
          此外，系统会按顺序对这些规则进行评估，只要其中一条规则被满足，则其他规则会被忽略掉。
          列表最多包含 20 个元素（规则）。
        x-kubernetes-list-type: atomic
    required:
      - rules
    type: object
    x-kab-description-zh: SuccessPolicy 描述 Job 何时可以基于某些索引的成功来宣称整个 Job 成功。
  io.k8s.api.batch.v1.SuccessPolicyRule:
    description: |-
      SuccessPolicyRule describes rule for declaring a Job as succeeded.
      Each rule must have at least one of the `succeededIndexes` or `succeededCount` specified.
    properties:
      succeededCount:
        description: |-
          The `succeededCount` specifies the minimal required size of the actual set of the succeeded indexes for the Job.
          When `succeededCount` is used along with `succeededIndexes`, the check is constrained only to the set of indexes specified by `succeededIndexes`.
          For example, given that `succeededIndexes` is "1-4", `succeededCount` is "3", and completed indexes are "1", "3", and "5",
          the Job isn't declared as succeeded because only "1" and "3" indexes are considered in that rules.
          When this field is null, this doesn't default to any value and is never evaluated at any time.
        format: int32
        minimal: 1
        type: integer
        x-kab-description-zh: |-
          `succeededCount` 字段设置 Job 成功完成的索引个数的下限。
          当 `succeededCount` 与 `succeededIndexes` 结合使用时，统计索引个数时仅统计 `succeededIndexes` 所指定的索引。
          例如，当 `succeededIndexes` 取值为 `"1-4"` 而 `succeededCount` 为 3 时，如果已完成的索引为 1、3 和 5，
          则 Job 不会被宣布为已成功，因为规则中只会考虑索引为 1 和 3 的情况。
          如果此字段未设置，字段不会获得默认值，系统也不会就此作任何评估操作。
      succeededIndexes:
        description: |-
          `succeededIndexes` specifies the set of indexes which need to be contained in the actual set of the succeeded indexes for the Job.
          The list of indexes must be within 0 to ".spec.completions-1" and must not contain duplicates. At least one element is required.
          The indexes are represented as intervals separated by commas.
          The intervals can be a decimal integer or a pair of decimal integers separated by a hyphen.
          The number are listed in represented by the first and last element of the series, separated by a hyphen.
          For example, if the completed indexes are 1, 3, 4, 5 and 7, they are represented as "1,3-5,7".
          When this field is null, this field doesn't default to any value and is never evaluated at any time.
        type: string
        x-kab-description-zh: |-
          `succeededIndexes` 给出 Job 被宣布成功时其已成功的索引中必须包含的索引列表。
          索引的取值从 0 计数，最大为 `.spec.completions-1`，并且其中不可以包含重复数字。索引范围不能为空。
          索引值的表示方法是字符串，内容为用逗号分割的整数段。每个整数段可以是一个十进制整数，也可以是用连字符连接的两个整数。
          例如，如果完成的索引为 1、3、4、5 和 7，则可以表示为 `"1,3-5,7"`。
          此字段为空（未设置）时，不会获得默认值设置，系统也不会就此规则作任何评估。
    type: object
    x-kab-description-zh: |-
      SuccessPolicyRule 描述用来宣布 Job 成功的规则。
      每条规则至少要设置 `succeededIndexes` 或 `succeededCount` 之一。
  io.k8s.api.batch.v1.UncountedTerminatedPods:
    description: |-
      UncountedTerminatedPods holds UIDs of Pods that have terminated but haven't
      been accounted in Job status counters.
    properties:
      failed:
        description: UIDs of failed Pods.
        items:
          description: The UID of a failed Pod.
          type: string
          x-kab-description-zh: 某失败的 Pod 的 UID。
        type: array
        x-kab-description-zh: 失败的 Pod 的 UID 列表。
        x-kubernetes-list-type: set
      succeeded:
        description: UIDs of succeeded Pods.
        items:
          description: The UID of a succeeded Pod.
          type: string
          x-kab-description-zh: 某成功的 Pod 的 UID。
        type: array
        x-kab-description-zh: 成功的 Pod 的 UID 列表。
        x-kubernetes-list-type: set
    type: object
    x-kab-description-zh: UncountedTerminatedPods 中保存的是已经终止，但尚未被统计到 Job 状态计数器中的 Pod
      的 UID。
  io.k8s.api.certificates.v1.CertificateSigningRequest.CREATE:
    description: |-
      CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by
      submitting a certificate signing request, and having it asynchronously approved and issued.
      Kubelets use this API to obtain:

      1. client certificates to authenticate to `kube-apiserver`
         (with the `signerName` set to `"kubernetes.io/kube-apiserver-client-kubelet"`).
      1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely
          (with the `signerName` set to `"kubernetes.io/kubelet-serving"`).

      This API can be used to request client certificates to authenticate to `kube-apiserver`
      (with the `signerName` set to `"kubernetes.io/kube-apiserver-client"`), or to
      obtain certificates from custom non-Kubernetes signers.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - certificates.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - CertificateSigningRequest
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec'
        description: |-
          The certificate request itself and some additional information.
          It is immutable after creation. Only the `request`, `signerName`, `expirationSeconds`
          and `usages` fields can be set on creation.
          Other fields are derived by Kubernetes and cannot be modified by users.
        x-kab-description-zh: |-
          此字段包含证书请求自身，以及一些额外信息。对象创建之后，此字段不可变更。
          创建对象时只能设置 `request`、`signerName`、`expirationSeconds` 和 `usages` 字段。
          其他字段都是由 Kubernetes 推导获得的，不可以被用户修改。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CertificateSigningRequest 对象提供了一种获得 X.509 证书的机制，通过提供一份证书签名请求，
      并异步完成该请求的批准与发放，即可以获得证书。
      Kubeletes 使用此 API 来获得：

      1. 向 `kube-apiserver` 作身份认证的客户端证书
         （其 `signerName` 设置为 `"kubernetes.io/kube-apiserver-client-kubelet"`）；
      1. TLS 端点的服务端证书，便于 `kube-apiserver` 与其建立安全的链接
         （其 `signerName` 设置为 `"kubernetes.io/kubelet-serving"`）。

      此 API 可以用来获得客户端证书，以便完成向 `kube-apiserver` 的身份认证
      （`signerName` 设置为 `"kubernetes.io/kube-apiserver-client"`），
      或从定制的、非 Kubernetes 证书签发组件获得证书。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  io.k8s.api.certificates.v1.CertificateSigningRequest.GET:
    description: |-
      CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by
      submitting a certificate signing request, and having it asynchronously approved and issued.
      Kubelets use this API to obtain:

      1. client certificates to authenticate to `kube-apiserver`
         (with the `signerName` set to `"kubernetes.io/kube-apiserver-client-kubelet"`).
      1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely
          (with the `signerName` set to `"kubernetes.io/kubelet-serving"`).

      This API can be used to request client certificates to authenticate to `kube-apiserver`
      (with the `signerName` set to `"kubernetes.io/kube-apiserver-client"`), or to
      obtain certificates from custom non-Kubernetes signers.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - certificates.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - CertificateSigningRequest
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec'
        description: |-
          The certificate request itself and some additional information.
          It is immutable after creation. Only the `request`, `signerName`, `expirationSeconds`
          and `usages` fields can be set on creation.
          Other fields are derived by Kubernetes and cannot be modified by users.
        x-kab-description-zh: |-
          此字段包含证书请求自身，以及一些额外信息。对象创建之后，此字段不可变更。
          创建对象时只能设置 `request`、`signerName`、`expirationSeconds` 和 `usages` 字段。
          其他字段都是由 Kubernetes 推导获得的，不可以被用户修改。
      status:
        $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestStatus'
        description: |-
          Information about whether the request is approved or denied, and the certificate
          issued by the signer, or the failure condition indicating signer failure.
        x-kab-description-zh: 关于请求是否被批准或拒绝的信息，以及签名组件所颁发的证书或者表明签名组件失败的状况信息。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      CertificateSigningRequest 对象提供了一种获得 X.509 证书的机制，通过提供一份证书签名请求，
      并异步完成该请求的批准与发放，即可以获得证书。
      Kubeletes 使用此 API 来获得：

      1. 向 `kube-apiserver` 作身份认证的客户端证书
         （其 `signerName` 设置为 `"kubernetes.io/kube-apiserver-client-kubelet"`）；
      1. TLS 端点的服务端证书，便于 `kube-apiserver` 与其建立安全的链接
         （其 `signerName` 设置为 `"kubernetes.io/kubelet-serving"`）。

      此 API 可以用来获得客户端证书，以便完成向 `kube-apiserver` 的身份认证
      （`signerName` 设置为 `"kubernetes.io/kube-apiserver-client"`），
      或从定制的、非 Kubernetes 证书签发组件获得证书。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  io.k8s.api.certificates.v1.CertificateSigningRequest.UPDATE:
    description: |-
      CertificateSigningRequest objects provide a mechanism to obtain x509 certificates by
      submitting a certificate signing request, and having it asynchronously approved and issued.
      Kubelets use this API to obtain:

      1. client certificates to authenticate to `kube-apiserver`
         (with the `signerName` set to `"kubernetes.io/kube-apiserver-client-kubelet"`).
      1. serving certificates for TLS endpoints `kube-apiserver` can connect to securely
          (with the `signerName` set to `"kubernetes.io/kubelet-serving"`).

      This API can be used to request client certificates to authenticate to `kube-apiserver`
      (with the `signerName` set to `"kubernetes.io/kube-apiserver-client"`), or to
      obtain certificates from custom non-Kubernetes signers.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - certificates.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - CertificateSigningRequest
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestSpec'
        description: |-
          The certificate request itself and some additional information.
          It is immutable after creation. Only the `request`, `signerName`, `expirationSeconds`
          and `usages` fields can be set on creation.
          Other fields are derived by Kubernetes and cannot be modified by users.
        x-kab-description-zh: |-
          此字段包含证书请求自身，以及一些额外信息。对象创建之后，此字段不可变更。
          创建对象时只能设置 `request`、`signerName`、`expirationSeconds` 和 `usages` 字段。
          其他字段都是由 Kubernetes 推导获得的，不可以被用户修改。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CertificateSigningRequest 对象提供了一种获得 X.509 证书的机制，通过提供一份证书签名请求，
      并异步完成该请求的批准与发放，即可以获得证书。
      Kubeletes 使用此 API 来获得：

      1. 向 `kube-apiserver` 作身份认证的客户端证书
         （其 `signerName` 设置为 `"kubernetes.io/kube-apiserver-client-kubelet"`）；
      1. TLS 端点的服务端证书，便于 `kube-apiserver` 与其建立安全的链接
         （其 `signerName` 设置为 `"kubernetes.io/kubelet-serving"`）。

      此 API 可以用来获得客户端证书，以便完成向 `kube-apiserver` 的身份认证
      （`signerName` 设置为 `"kubernetes.io/kube-apiserver-client"`），
      或从定制的、非 Kubernetes 证书签发组件获得证书。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  io.k8s.api.certificates.v1.CertificateSigningRequestCondition:
    description: CertificateSigningRequestCondition describes a condition of a CertificateSigningRequest
      object.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          lastTransitionTime is the time the condition last transitioned from one status to another.
          If unset, when a new condition type is added or an existing condition's status is changed,
          the server defaults this to the current time.
        x-kab-description-zh: |-
          状况上次从一种状态转换为另一种状态的时间。
          若此字段为空，添加新的状况类型或者变更已有状况的状态时，服务器默认将此字段设置为当前时间。
      lastUpdateTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Timestamp of the last update to this condition.
        x-kab-description-zh: 上次状况更新的时间。
      message:
        description: Human readable message with details about the request state.
        type: string
        x-kab-description-zh: 人类可读的消息，给出上次状况转换的细节。
      reason:
        description: Brief reason for the request state.
        type: string
        x-kab-description-zh: 关于请求状态的简短原因。
      status:
        description: |-
          Status of the condition, one of "`True`", "`False`", "`Unknown`".
          `Approved`, `Denied`, and `Failed` conditions may not be "False" or "Unknown".
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: |-
          状况的状态，取值为 "`True`", "`False`", "`Unknown`" 之一。
          `"Approved"`、`"Denied"`、和 `"Failed"` 状况的状态不可以是 `"False"` 或 `"Unknown"`。
      type:
        description: |-
          Request approval state. Possible enum values:
          - `"Approved"` indicates the request was approved and should be issued by the signer.
            It is added via the `/approval` subresource.
          - `"Denied"` indicates the request was denied and should not be issued by the signer.
            It is added via the `/approval` subresource.
          - `"Failed"` indicates the signer failed to issue the certificate.
            It is added via the `/status` subresource.

          `"Approved"` and `"Denied"` conditions are mutually exclusive.
          `"Approved"`, `"Denied"`, and `"Failed"` conditions cannot be removed once added.
          Only one condition of a given type is allowed.
        enum:
          - Approved
          - Denied
          - Failed
        minLength: 1
        type: string
        x-kab-description-zh: |-
          请求的批复状态。可能的取值有：
          - `"Approved"` 表明请求已被批准，并应由签发组件来发放。
            此状况通过 `/approval` 子资源来添加。
          - `"Denied"` 表明请求已经被拒绝，且不能被签发组件发放。
            此状况通过 `/approval` 子资源来添加。
          - `"Failed"` 表明签发组件未能成功地签发证书。
            此状况通过 `/status` 子资源来添加。

          `"Approved"` 和 `"Denied"` 状况是互斥的。
          `"Approved"`、`"Denied"` 和 `"Failed"` 状况一旦添加之后即不可移除。
          给定状况类型只能有一个状况记录存在。
    required:
      - type
    type: object
    x-kab-description-zh: CertificateSigningRequestCondition 描述 CertificateSigningRequest
      对象的当前状况。
  io.k8s.api.certificates.v1.CertificateSigningRequestList:
    description: A list of CertificateSigningRequest objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - certificates.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of CertificateSigningRequest objects.
        items:
          $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
        type: array
        x-kab-description-zh: 包含 CertificateSigningRequest 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CertificateSigningRequestList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 CertificateSigningRequest 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: CertificateSigningRequestList
        version: v1
  io.k8s.api.certificates.v1.CertificateSigningRequestSpec:
    description: |-
      This information is immutable after the request is created.
      Only the `request`, `signerName`, `expirationSeconds` and `usages` fields can be set
      on creation, other fields are derived by Kubernetes and cannot be modified by users.
    properties:
      expirationSeconds:
        description: |-
          The requested duration of validity of the issued certificate.
          The certificate signer may issue a certificate with a different validity duration
          so a client must check the delta between the `notBefore` and `notAfter` fields
          in the issued certificate to determine the actual duration.

          The v1.22+ in-tree implementations of the well-known Kubernetes signers will honor
          this field as long as the requested duration is not greater than the maximum duration
          they will honor per the `--cluster-signing-duration` CLI flag to the Kubernetes controller
          manager.

          Certificate signers may not honor this field for various reasons:

          1. Old signer that is unaware of the field (such as the in-tree implementations
             prior to v1.22)
          1. Signer whose configured maximum is shorter than the requested duration
          1. Signer whose configured minimum is longer than the requested duration

          The minimum valid value for `expirationSeconds` is 600, i.e. 10 minutes.
        format: int32
        minimum: 600
        type: integer
        x-kab-description-zh: |-
          针对要发放的证书所请求的合法性时长。
          证书的签发者可能会签发一个合法性时长不同的证书，因此客户端必须检查所发放证书的
          `notBefore` 和 `notAfter` 这两个字段的时间差，确定实际上的证书合法性时长。

          在 v1.22 及之后的 Kubernetes 版本中，内置的、众所周知的签名者都会注意到这个字段的设置，
          只要所请求的时长没有超过通过 `kube-controller-manager` 命令行标志
          `--cluster-signing-duration` 所给出的时长上限，签名者都会尽可能满足这里的时长值请求。

          证书签名者可能会出于某些原因忽略此字段的设置：

          1. 签名组件版本较老的话（例如早于 v1.22 的内置版本），无法识别并处理此字段。
          1. 签名组件自身所配置的最大时长低于请求中要求的时长；
          1. 签名组件自身所配置的最小市场超出了请求中要求的时长。

          `expirationSeconds` 的最小合法值是 600，即 10 分钟。
      extra:
        additionalProperties:
          items:
            type: string
          type: array
        description: |-
          Extra attributes of the user that created the CertificateSigningRequest.
          Populated by the API server on creation and immutable.
        type: object
        x-kab-description-zh: |-
          关于发起此 CertificateSigningRequest 的用户的一些额外信息。
          API 服务器在创建对象时自动填充。所填充的值不可变更。
      groups:
        description: |-
          Group membership of the user that created the CertificateSigningRequest.
          Populated by the API server on creation and immutable.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          发起此 CertificateSigningRequest 的用户的组成员身份信息。
          API 服务器在创建对象时自动填充。所填充的值不可变更。
        x-kubernetes-list-type: atomic
      request:
        description: |-
          An x509 certificate signing request encoded in a `"CERTIFICATE REQUEST"` PEM block.
          When serialized as JSON or YAML, the data is additionally base64-encoded.
        format: byte
        minLength: 1
        type: string
        x-kab-description-zh: |-
          以 `"CERTIFICATE REQUEST"` PEM 块的形式编码的 X509 证书签名请求。
          当对象被序列化为 JSON 或者 YAML 时，其中的数据会被转化为 base64 编码。
        x-kubernetes-list-type: atomic
      signerName:
        description: |-
          The requested signer, and is a qualified name. A **list**/**watch** request for
          CertificateSigningRequests can filter on this field by setting the `fieldSelector`
          parameter to `\"spec.signerName=NAME\"`. Well-known Kubernetes signers are:

          1. `"kubernetes.io/kube-apiserver-client"` for issuing client certificates that
             can be used to authenticate to `kube-apiserver`.
             Requests for this signer are never auto-approved by the `kube-controller-manager`.
             It can be issued by the `csrsigning` controller in the `kube-controller-manager`.
          1. `"kubernetes.io/kube-apiserver-client-kubelet"` for issuing client certificates
             that a kubelet uses to authenticate to `kube-apiserver`.
             Requests for this signer can be auto-approved by the `csrapproving` controller
             in the `kube-controller-manager`. It can be issued by the `csrsigning` controller
             in the `kube-controller-manager`.
          1. `"kubernetes.io/kubelet-serving"` for issuing serving certificates a kubelet uses
             to serve TLS endpoints, which `kube-apiserver` can connect to securely.
             Requests for this signer are never auto-approved by the `kube-controller-manager`.
             It can be issued by the `csrsigning` controller in the `kube-controller-manager`.

          Custom `signerName`s can also be specified. The signer defines:
          1. Trust distribution: how trust (CA bundles) are distributed.
          1. Permitted subjects: and behavior when a disallowed subject is requested.
          1. Required, permitted, or forbidden x509 extensions in the request
             (including whether `subjectAltNames` are allowed, which types, restrictions on
             allowed values) and behavior when a disallowed extension is requested.
          1. Required, permitted, or forbidden key usages/extended key usages.
          1. Expiration/certificate lifetime: whether it is fixed by the signer,
             configurable by the admin.
          1. Whether or not requests for CA certificates are allowed.
        type: string
        x-kab-description-zh: |-
          所请求的签名者。字段值必须是限定名称（Qualified Name）。
          针对 CertificateSigningRequest 对象的 **list**/**watch** 请求可以通过设置
          `fieldSelector` 参数为 `"spec.signerName=<名称>"` 的方式，基于这个字段完成数据过滤。
          一些众所周知的（被广泛使用的）Kubernetes 签名者如下：

          1. `"kubernetes.io/kube-apiserver-client"` 负责颁发客户端证书，
             所颁发的证书可以用来向 `kube-apiserver` 完成身份认证。
             针对此签名者的请求从来不会被 `kube-controller-manager` 自动批准。
             这类证书可以使用 `kube-controller-manager` 中的 `csisigning` 控制器来颁发。
          1. `"kubernetes.io/kube-apiserver-client-kubelet"` 负责客户端证书，
             所颁发的证书可供 kubelet 完成向 `kube-apiserver` 的身份认证。
             针对此签名者的请求可以被 `kube-controller-manager` 中的 `csrapproving` 控制器自动批准。
             证书可以由 `kube-controller-manager` 中的 `csrsigning` 控制器来发放。
          1. `"kubernetes.io/kubelet-serving"` 负责发放服务端证书，可以为 kubelet
             签发用于在 TLS 端点上提供服务时的服务证书，`kube-apiserver` 可以安全地连接到这些端点。
             针对此签名者的请求从不会被 `kube-controller-manager` 自动批准。
             证书可以由 `kube-controller-manager` 中的 `csrsigning` 控制器来发放。

          请求中也可以设置自定义的 `signerName`。签名者要定义：

          1. 信任数据的分发：如何将信任（CA 证书包）分发出去；
          1. 可信任的主体，以及所请求的主体不在白名单内时的行为；
          1. 请求中必需存在的、准予存在的、不许存在的 X.509 扩展
             （包括是否允许给定 `subjectAltNames`、对合法值的类型和约束），
             以及请求中包含被禁止的扩展时的行为；
          1. 要求的、准许的或者禁止的秘钥用法及扩展秘钥用法；
          1. 过期时间（即证书生命周期）是由签名者硬编码确定，还是允许管理员来配置；
          1. 是否允许请求访问 CA 证书。
      uid:
        description: |-
          The UID of the user that created the CertificateSigningRequest.
          Populated by the API server on creation and immutable.
        type: string
        x-kab-description-zh: |-
          创建 CertificateSigningRequest 的用户的 UID。
          此字段由 API 服务器在创建此对象时填充，不可变更。
      usages:
        description: |-
          A set of key usages requested in the issued certificate.
          - Requests for TLS client certificates typically request:
            `"digital signature"`, `"key encipherment"`, `"client auth"`;
          - Requests for TLS serving certificates typically request:
            `"key encipherment"`, `"digital signature"`, `"server auth"`.
        items:
          enum:
            - any
            - cert sign
            - client auth
            - code signing
            - content commitment
            - crl sign
            - data encipherment
            - decipher only
            - digital signature
            - email protection
            - encipher only
            - ipsec end system
            - ipsec tunnel
            - ipsec user
            - key agreement
            - key encipherment
            - microsoft sgc
            - netscape sgc
            - ocsp signing
            - s/mime
            - server auth
            - signing
            - timestamping
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          所请求的一组秘钥用法选项，保存在所发放的证书中
          - 请求 TLS 客户端证书时通常会请求的用法有：
            `"digital signature"`、`"key encipherment"`、`"client auth"`；
          - 请求 TLS 服务端服务证书时通常会请求的用法有：
            `"key encipherment"`、`"digital signature"`、`"server auth"`。
        x-kubernetes-list-type: atomic
      username:
        description: |-
          The name of the user that created the CertificateSigningRequest.
          Populated by the API server on creation and immutable.
        type: string
        x-kab-description-zh: |-
          创建此 CertificateSigningRequest 对象的用户的用户名。
          此字段由 API 服务器在创建对象时填充，且不可变更。
    required:
      - request
      - signerName
      - usages
    type: object
    x-kab-description-zh: |-
      此信息在证书签名请求被创建之后即不可更改。
      创建证书签名请求时，只能设置 `request`、`signerName`、`expirationSeconds` 和 `usages`
      字段，其他字段都由 Kubernetes 负责推导，不可以被用户修改。
  io.k8s.api.certificates.v1.CertificateSigningRequestStatus:
    description: |-
      Conditions used to indicate approved/denied/failed status of the request,
      and the issued certificate.
    properties:
      certificate:
        description: |-
          An issued certificate by the signer if an `"Approved"` condition is present.
          This field is set via the `/status` subresource.  Once populated, this field is immutable.
          If the certificate signing request is denied, a condition of type `"Denied"`
          is added and this field remains empty.
          If the signer cannot issue the certificate, a condition of type `\"Failed\"` is added
          and this field remains empty. Validation requirements:
          1. certificate must contain one or more PEM blocks.
          1. All PEM blocks must have the `"CERTIFICATE"` label, contain no headers, and
             the encoded data must be a BER-encoded ASN.1 Certificate structure as described
             in section 4 of RFC5280.
          1. Non-PEM content may appear before or after the `"CERTIFICATE"` PEM blocks and
             is unvalidated, to allow for explanatory text as described in section 5.2 of RFC7468.

          If more than one PEM block is present, and the definition of the requested
          `spec.signerName` does not indicate otherwise, the first block is the issued certificate,
          and subsequent blocks should be treated as intermediate certificates and presented
          in TLS handshakes.

          The certificate is encoded in PEM format. When serialized as JSON or YAML, the data
          is additionally base64-encoded, so it consists of:

          ```
          base64(
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
          )
          ```
        format: byte
        type: string
        x-kab-description-zh: |-
          当存在 `"Approved"` 状况时，此字段包含签名者所签发的证书。
          此字段是由 `/status` 子资源设置的。一旦字段被设置，就不能被更改。
          如果证书签名请求被拒绝，则请求对象上会被添加一个类型为 `"Denied"` 的状况，
          而 `certificate` 字段保持为空。
          如果签名者无法发放证书，则请求对象上会被添加一个类型为 `"Failed"` 的状况，
          而 `certificate` 字段保持为空。

          对此字段的合法性检查规则如下：

          1. `certificate` 必须包含至少一个 PEM 块。
          1. 所有的 PEM 块都必须带有 `"CERTIFICATE"` 标签，没有头部字段，并且所编码的数据必须按
             RFC5280 第 4 节中所描述的那样，是一个用 BER 编码的 ASN.1 Certificate 结构。
          1. `"CERTIFICATE"` PEM 块的前面和后面都可以有非 PEM 内容，系统不会检查这些内容。
             用户可以在这些位置以 RFC7468 第 5.2 节描述的方式插入一些解释性文字。

          如果字段值中包含多个 PEM 块，并且所请求的 `spec.signerName` 没有对此作额外说明，
          则第一个 PEM 块是所发放的证书，而后续的 PEM 块应被视为中间证书，
          是在 TLS 握手过程中也要提供的内容。

          证书内容是用 PEM 格式编码的。序列化为 JSON 或者 YAML 时，数据会被 base64 编码。
          因此证书字段的内容是：

          ```
          base64(
          -----BEGIN CERTIFICATE-----
          ...
          -----END CERTIFICATE-----
          )
          ```
        x-kubernetes-list-type: atomic
      conditions:
        description: Conditions applied to the request.
        enum:
          - Approved
          - Denied
          - Failed
        items:
          $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestCondition'
        type: array
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
    required:
      - conditions
    type: object
    x-kab-description-zh: 此结构包含请求被批准、拒绝或者请求失败的状态，以及所签发的证书。
  io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.CREATE:
    description: |-
      ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
      ClusterTrustBundle objects are considered to be readable by any authenticated user
      in the cluster, because they can be mounted by Pods using the `clusterTrustBundle` projection.
      All service accounts have read access to ClusterTrustBundles by default.
      Users who only have namespace-level access to a cluster can read ClusterTrustBundles
      by impersonating a ServiceAccount that they have access to.

      It can be optionally associated with a particular assigner, in which case it contains
      one valid set of trust anchors for that signer.
      Signers may have multiple associated ClusterTrustBundles; each is an independent set of
      trust anchors for that signer.
      Admission control is used to enforce that only users with permissions on the signer can
      create or modify the corresponding bundle.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - certificates.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterTrustBundle
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata.
          The trust bundle must not have `':'` in its name if the `spec.signerName` is empty.
          If the `spec.signerName` is not empty, the name must has the `spec.signerName`
          as its prefix, with `'/'` replaced by `':'`.
          The name must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          标准的对象元数据。如果 `spec.signerName` 为空，则信任包的名字中不能包含 `':'` 字符。
          如果 `spec.signerName` 不是空字符串，则信任包对象的名称必须将 `spec.signerName`
          作为前缀，并将其中的 `'/'` 字符替换成 `':'` 字符。
          信任包的名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec'
        description: This contains the signer (if any) and trust anchors.
        x-kab-description-zh: 此字段包含签名者信息（可选）以及信任锚点数据。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ClusterTrustBundle 是一个集群作用域的容器，用来存放 X.509 信任锚点（Trust Anchor），
      也就是根证书。因为 ClusterTrustBundle 中的数据可以通过 `clusterTrustBundle` 投射挂载到
      Pod 中。可以认为集群中所有通过了身份认证的用户都可以读取 ClusterTrustBundle 对象。
      默认情况下，所有的服务账号都可以读取 ClusterTrustBundle 中的内容。
      对于只有某集群中名字空间级别访问权限的用户而言，可以通过伪装成他们可访问的 ServiceAccount
      之一来读取 ClusterTrustBundle 的内容。

      每个 ClusterTrustBundle 对象可以选择与特定的签名者关联起来，为该签名者保存合法信任锚点的集合。
      每个签名者则可以关联到多个 ClusterTrustBundle 对象，每个对象是该签名者的一个独立的信任锚点集合。
      系统内置的准入控制机制能够确保只有有权访问某签名者的用户才能创建或修改其所对应的信任包。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
  io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET:
    description: |-
      ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
      ClusterTrustBundle objects are considered to be readable by any authenticated user
      in the cluster, because they can be mounted by Pods using the `clusterTrustBundle` projection.
      All service accounts have read access to ClusterTrustBundles by default.
      Users who only have namespace-level access to a cluster can read ClusterTrustBundles
      by impersonating a ServiceAccount that they have access to.

      It can be optionally associated with a particular assigner, in which case it contains
      one valid set of trust anchors for that signer.
      Signers may have multiple associated ClusterTrustBundles; each is an independent set of
      trust anchors for that signer.
      Admission control is used to enforce that only users with permissions on the signer can
      create or modify the corresponding bundle.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - certificates.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterTrustBundle
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: |-
          Standard object metadata.
          The trust bundle must not have `':'` in its name if the `spec.signerName` is empty.
          If the `spec.signerName` is not empty, the name must has the `spec.signerName`
          as its prefix, with `'/'` replaced by `':'`.
          The name must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          标准的对象元数据。如果 `spec.signerName` 为空，则信任包的名字中不能包含 `':'` 字符。
          如果 `spec.signerName` 不是空字符串，则信任包对象的名称必须将 `spec.signerName`
          作为前缀，并将其中的 `'/'` 字符替换成 `':'` 字符。
          信任包的名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec'
        description: This contains the signer (if any) and trust anchors.
        x-kab-description-zh: 此字段包含签名者信息（可选）以及信任锚点数据。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ClusterTrustBundle 是一个集群作用域的容器，用来存放 X.509 信任锚点（Trust Anchor），
      也就是根证书。因为 ClusterTrustBundle 中的数据可以通过 `clusterTrustBundle` 投射挂载到
      Pod 中。可以认为集群中所有通过了身份认证的用户都可以读取 ClusterTrustBundle 对象。
      默认情况下，所有的服务账号都可以读取 ClusterTrustBundle 中的内容。
      对于只有某集群中名字空间级别访问权限的用户而言，可以通过伪装成他们可访问的 ServiceAccount
      之一来读取 ClusterTrustBundle 的内容。

      每个 ClusterTrustBundle 对象可以选择与特定的签名者关联起来，为该签名者保存合法信任锚点的集合。
      每个签名者则可以关联到多个 ClusterTrustBundle 对象，每个对象是该签名者的一个独立的信任锚点集合。
      系统内置的准入控制机制能够确保只有有权访问某签名者的用户才能创建或修改其所对应的信任包。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
  io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.UPDATE:
    description: |-
      ClusterTrustBundle is a cluster-scoped container for X.509 trust anchors (root certificates).
      ClusterTrustBundle objects are considered to be readable by any authenticated user
      in the cluster, because they can be mounted by Pods using the `clusterTrustBundle` projection.
      All service accounts have read access to ClusterTrustBundles by default.
      Users who only have namespace-level access to a cluster can read ClusterTrustBundles
      by impersonating a ServiceAccount that they have access to.

      It can be optionally associated with a particular assigner, in which case it contains
      one valid set of trust anchors for that signer.
      Signers may have multiple associated ClusterTrustBundles; each is an independent set of
      trust anchors for that signer.
      Admission control is used to enforce that only users with permissions on the signer can
      create or modify the corresponding bundle.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - certificates.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - ClusterTrustBundle
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata.
          The trust bundle must not have `':'` in its name if the `spec.signerName` is empty.
          If the `spec.signerName` is not empty, the name must has the `spec.signerName`
          as its prefix, with `'/'` replaced by `':'`.
          The name must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          标准的对象元数据。如果 `spec.signerName` 为空，则信任包的名字中不能包含 `':'` 字符。
          如果 `spec.signerName` 不是空字符串，则信任包对象的名称必须将 `spec.signerName`
          作为前缀，并将其中的 `'/'` 字符替换成 `':'` 字符。
          信任包的名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec'
        description: This contains the signer (if any) and trust anchors.
        x-kab-description-zh: 此字段包含签名者信息（可选）以及信任锚点数据。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ClusterTrustBundle 是一个集群作用域的容器，用来存放 X.509 信任锚点（Trust Anchor），
      也就是根证书。因为 ClusterTrustBundle 中的数据可以通过 `clusterTrustBundle` 投射挂载到
      Pod 中。可以认为集群中所有通过了身份认证的用户都可以读取 ClusterTrustBundle 对象。
      默认情况下，所有的服务账号都可以读取 ClusterTrustBundle 中的内容。
      对于只有某集群中名字空间级别访问权限的用户而言，可以通过伪装成他们可访问的 ServiceAccount
      之一来读取 ClusterTrustBundle 的内容。

      每个 ClusterTrustBundle 对象可以选择与特定的签名者关联起来，为该签名者保存合法信任锚点的集合。
      每个签名者则可以关联到多个 ClusterTrustBundle 对象，每个对象是该签名者的一个独立的信任锚点集合。
      系统内置的准入控制机制能够确保只有有权访问某签名者的用户才能创建或修改其所对应的信任包。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
  io.k8s.api.certificates.v1alpha1.ClusterTrustBundleList:
    description: ClusterTrustBundleList is a collection of ClusterTrustBundle objects
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - certificates.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ClusterTrustBundle objects.
        items:
          $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
        type: array
        x-kab-description-zh: 包含 ClusterTrustBundle 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterTrustBundleList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ClusterTrustBundleList 是一个包含 ClusterTrustBundle 对象的列表。
    x-kubernetes-group-version-kind:
      - group: certificates.k8s.io
        kind: ClusterTrustBundleList
        version: v1alpha1
  io.k8s.api.certificates.v1alpha1.ClusterTrustBundleSpec:
    description: ClusterTrustBundleSpec contains the signer and trust anchors.
    properties:
      signerName:
        description: |-
          `signerName` indicates the associated signer, if any.
          In order to create or update a ClusterTrustBundle that sets `signerName`, you must have
          the following cluster-scoped permission:

          ```
          group=certificates.k8s.io
          resource=signers
          resourceName=<the signer name>
          verb=attest
          ```

          If `signerName` is not empty, then the ClusterTrustBundle object must be named with
          the signer name as a prefix (translating slashes to colons).

          The `signerName` has a format of `<fqdn>/<namespace>.<name>`, where:
          - `<fqdn>` is the FQDN domain name. Its max length is 253 characters
            (DNS1123 subdomain limit).
          - `<namesapce>` is the namespace name for the resource.
            Its max length is 63 characters (as per limited by DNS1123 labels).
          - `<name>` is the resource name, which has a limit of 253 characters
            (DNS1123 subdomain limit).

          Additional two characters are added to account for the one `'.'` and the one `'/'`.

          For example, for the signer name `example.com/foo`, valid ClusterTrustBundle object names
          include `example.com:foo:abc` and `example.com:foo:v1`.

          If `signerName` is empty, then the ClusterTrustBundle object's name must not have
          such a prefix.

          List/watch requests for ClusterTrustBundles can filter on this field using
          a `spec.signerName=NAME` field selector.
        maxLength: 571
        minLength: 0
        type: string
        x-kab-description-zh: |-
          `signerName` 表明此信任包所关联的签名者，如果有的话。
          要创建或者更新一个设置了 `signerName` 的 ClusterTrustBundle 对象，
          你需要具有以下集群范围的访问权限：

          ```
          group=certificates.k8s.io
          resource=signers
          resourceName=<签名者的名字>
          verb=attest
          ```

          如果 `signerName` 不为空，则此 ClusterTrustBundle 对象必须以签名者的名字作为前缀来命名，
          （如果有斜线，要替换成分号）。

          `signerName` 字段的格式为 `<fqdn>/<namespace>.<name>`，其中：

          - `<fqdn>` 是域名的 FQDN 表示。最大长度 253 字符（DNS1123 子域名限制）；
          - `<namesapce>` 是资源的名字空间名称。最大长度 63 字符（DNS1123 标签限制）；
          - `<name>` 是资源名称，最多 253 字符（DNS1123 子域名限制）。

          名字中额外还可以有两个字符，即用来分隔的 `'.'` 和 `'/'`。

          例如，对于签名者名称为 `"example.com/foo"` 的情况，合法的 ClusterTrustBundle 对象名称包括
          `"example.com:foo:abc"` 和 `"example.com:foo:v1"`。

          如果 `signerName` 字段为空，ClusterTrustBundle 对象的名称一定不能带有这样的前缀。
          针对 ClusterTrustBundle 资源的 `list`/`watch` 请求可以基于此字段来进行过滤：
          `spec.signerName=NAME`。
      trustBundle:
        description: |-
          `trustBundle` contains the individual X.509 trust anchors for this bundle,
          as PEM bundle of PEM-wrapped, DER-formatted X.509 certificates.

          The data must consist only of PEM certificate blocks that parse as valid X.509 certificates.
          Each certificate must include a basic constraints extension with the CA bit set.
          The API server will reject objects that contain duplicate certificates,
          or that use PEM block headers.

          Users of ClusterTrustBundles, including Kubelet, are free to reorder and deduplicate
          certificate blocks in this file according to their own logic, as well as to
          drop PEM block headers and inter-block data.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          `trustBundle` 包含此信任包中的各个 X.509 信任锚点。
          每个锚点都是一个 PEM 证书包，包含用 PEM 封装的 DER 格式的 X.509 证书。

          数据中只能包含可被解析为合法的 X.509 证书的 PEM 证书块。
          每个证书必须包含基本的、设置了 CA 位的约束扩展。
          API 服务器会拒绝包含重复证书或者使用了 PEM 块头部的对象。

          ClusterTrustBundles 的用户（包括 kubelet）可以根据自身逻辑来对文件中的证书块进行重排序、
          去重等操作，也可以去掉 PEM 块的头部信息以及块之间的数据。
    required:
      - trustBundle
    type: object
    x-kab-description-zh: ClusterTrustBundleSpec 包含签名者信息（可选）以及信任锚点数据。
  io.k8s.api.coordination.v1.Lease.CREATE:
    description: Lease defines a lease concept.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - coordination.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource..
        enum:
          - Lease
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。其中的 `name` 字段值必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.coordination.v1.LeaseSpec'
        description: Specification of the Lease.
        x-kab-description-zh: Lease 的规约部分。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Lease 定义的是一个租约（Lease）的概念。
    x-kubernetes-group-version-kind:
      - group: coordination.k8s.io
        kind: Lease
        version: v1
  io.k8s.api.coordination.v1.Lease.GET:
    description: Lease defines a lease concept.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - coordination.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Lease
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.coordination.v1.LeaseSpec'
        description: Specification of the Lease.
        x-kab-description-zh: Lease 的规约部分。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: Lease 定义的是一个租约（Lease）的概念。
    x-kubernetes-group-version-kind:
      - group: coordination.k8s.io
        kind: Lease
        version: v1
  io.k8s.api.coordination.v1.Lease.UPDATE:
    description: Lease defines a lease concept.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - coordination.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Lease
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。其中的 `name` 字段值必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.coordination.v1.LeaseSpec'
        description: Specification of the Lease.
        x-kab-description-zh: Lease 的规约部分。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Lease 定义的是一个租约（Lease）的概念。
    x-kubernetes-group-version-kind:
      - group: coordination.k8s.io
        kind: Lease
        version: v1
  io.k8s.api.coordination.v1.LeaseList:
    description: A list of Lease objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - coordination.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Lease objects.
        items:
          $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
        type: array
        x-kab-description-zh: 包含 Lease 对象的一个列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - LeaseList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Lease 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: coordination.k8s.io
        kind: LeaseList
        version: v1
  io.k8s.api.coordination.v1.LeaseSpec:
    description: The specification of a Lease.
    properties:
      acquireTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: The time when the current Lease was acquired.
        x-kab-description-zh: 当前 Lease 的获得时间。
      holderIdentity:
        description: The identity of the current holder of the Lease.
        type: string
        x-kab-description-zh: 当前 Lease 的持有者的标识。
      leaseDurationSeconds:
        description: |-
          A duration that candidates for a Lease need to wait before it can acquire the Lease
          by force. This is measured against the last observed `renewTime`.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          字段值是一个时长值。Lease 的候选持有者只有过了指定时长之后才可以强制获得 Lease。
          时长的度量起点是上次观测到的 `renewTime`。
      leaseTransitions:
        description: The number of transitions of a Lease between holders.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: Lease 在不同的持有者之间流转的次数。
      renewTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: The time when the current holder last updated the Lease.
        x-kab-description-zh: 当前持有者上次更新 Lease 时间。
    type: object
    x-kab-description-zh: Lease 的规约。
  io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource:
    description: |-
      A persistent disk resource in AWS. An AWS EBS disk must exist before being mounted to
      a container. The disk must also be in the same AWS zone as the node.
      An AWS EBS disk can only be mounted as `"ReadWriteOnce"`.
      AWS EBS volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        default: ext4
        description: |-
          Filesystem type of the volume that you want to mount.
          Ensure that the filesystem type is supported by the host operating system.
          Examples: `"ext4"`, `"xfs"`, `"ntfs"`.
        type: string
        x-kab-description-zh: |-
          你希望挂载的卷的文件系统类型。
          需要确保所指定的文件系统类型是宿主操作系统所支持的文件系统。
          示例：`"ext4"`, `"xfs"`, `"ntfs"`.
      partition:
        description: |-
          The partition in the volume that you want to mount.
          If omitted, the default is to mount by volume name.
          Examples: For volume `"/dev/sda1"`, you specify the partition as `"1"`.
          Similarly, the volume partition for `"/dev/sda"` is `"0"`
          (or you can leave the property empty).
        format: int32
        maximum: 255
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          卷中你所希望挂载的分区。如果不指定此字段，则默认会根据卷名称来挂载。
          例如：对于卷 `"/dev/sda1"`，你可以将 `partition` 设置为 `"1"`。
          类似的，`"/dev/sda"` 的卷分区为 `"0"`（或者你可以将此属性留空）。
      readOnly:
        default: false
        description: Value `true` will force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: 字段值设置为 `true` 会强制要求在 `volumeMounts` 中使用 `readOnly` 的配置来挂载。
      volumeID:
        description: Unique ID of the persistent disk resource in the AWS EBS volume.
        minLength: 1
        type: string
        x-kab-description-zh: AWS EBS 卷中持久性磁盘资源的唯一性 ID。
    required:
      - volumeID
    type: object
    x-kab-description-zh: |-
      AWS 上面的一种持久性磁盘资源。一个 AWS EBS 磁盘在被挂载到某个容器中之前必须已经存在。
      磁盘必须与节点处于相同是的 AWS 区中。AWS EBS 磁盘只能以 `"ReadWriteOnce"` 模式挂载。
      AWS EBS 卷支持属主管理，也支持 SELinux 的重新打标签。
  io.k8s.api.core.v1.Affinity:
    description: A group of affinity scheduling rules.
    properties:
      nodeAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeAffinity'
        description: Node affinity scheduling rules for the Pod.
        x-kab-description-zh: Pod 的节点亲和性调度规则。
      podAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAffinity'
        description: |-
          Pod affinity scheduling rules
          (e.g. co-locate this Pod in the same node, zone, etc. as some other Pod(s)).
        x-kab-description-zh: Pod 亲和性调度规则（例如，将此 Pod 调度到其他 Pod 所在节点、可用区等）。
      podAntiAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAntiAffinity'
        description: |-
          Pod anti-affinity scheduling rules (e.g. avoid putting this Pod in
          the same node, zone, etc. as some other Pod(s)).
        x-kab-description-zh: Pod 反亲和性调度规则（例如，避免将此 Pod 调度到其他 Pod 所在节点、可用区等）。
    type: object
    x-kab-description-zh: 一组亲和性调度规则。
  io.k8s.api.core.v1.AppArmorProfile:
    description: AppArmorProfile defines a pod or container's AppArmor settings.
    properties:
      localhostProfile:
        description: |-
          `localhostProfile` indicates a profile loaded on the node that should be used.
          The profile must be preconfigured on the node to work. Must match the loaded name of the profile.
          Must be set if and only if `type` is `"Localhost"`.
        type: string
        x-kab-description-zh: |-
          `localhostProfile` 用来指定已经被加载到节点上并且要被使用的配置。
          此配置必须已经在节点上预先完成设置才能被使用。此字段值必须与所加载的配置的名称完全相同。
          只有当 `type` 被设置为 `"Localhost"` 时才可以设置此字段。
      type:
        description: |-
          `type` indicates which kind of AppArmor profile will be applied.
          Valid options are:

          - Localhost - a profile pre-loaded on the node.
          - RuntimeDefault the container runtime's default profile.
          - Unconfined - no AppArmor enforcement.
        enum:
          - Localhost
          - RuntimeDefault
          - Unconfined
        type: string
        x-kab-defines-zh: |-
          `type` 表明要应用的 AppArmor 配置类型。合法的选项包括：

          - Localhost - 预先加载到节点上的一种配置；
          - RuntimeDefault - 使用容器运行时的默认配置；
          - Unconfined - 不实施 AppArmor 策略。
    required:
      - type
    type: object
    x-kab-description-zh: AppArmorProfile 为一个 Pod 或 Container 定义 AppArmor 设置。
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          localhostProfile: LocalhostProfile
  io.k8s.api.core.v1.AttachedVolume:
    description: A volume attached to the node.
    properties:
      devicePath:
        description: The device path where the volume is available.
        minLength: 1
        type: string
        x-kab-description-zh: 访问数据卷所使用的设备路径。
      name:
        description: Name of the attached volume.
        minLength: 1
        type: string
        x-kab-descriiption-zh: 所挂接的数据卷的名称。
    required:
      - devicePath
      - name
    type: object
    x-kab-description-zh: 挂接到节点上的一个卷。
  io.k8s.api.core.v1.AvoidPods:
    description: |-
      AvoidPods describes Pods that should avoid the node.
      This is the value for a Node annotation with key
      `"scheduler.alpha.kubernetes.io/preferAvoidPods"` and will eventually become a field
      of NodeStatus. This is Alpha feature.
    items:
      $ref: '#/definitions/io.k8s.api.core.v1.PreferAvoidPodsEntry'
      description: |-
        Bounded-sized list of signatures of Pods that should avoid this node,
        sorted in timestamp order from oldest to newest.
        Size of the slice is unspecified.
      x-kab-description-zh: |-
        由 Pod 签名构成的、空间有限的一个列表。
        列表是的 Pod 都是要避免在此节点上运行的。
        列表中的 Pod 是按时间戳排序的，从最老的 Pod 到最新的 Pod。
        列表的大小是未做限制的。
    type: array
    x-kab-description-zh: |-
      AvoidPods 描述需要避免运行在此节点上的 Pod。
      此结构是 Node 上注解 `"scheduler.alpha.kubernetes.io/preferAvoidPods"` 的值，
      最终会成为 NodeStatus 上的一个字段。
      此结构目前是一个 Alpha 特性。
  io.k8s.api.core.v1.AzureDiskVolumeSource:
    description: An Azure data disk mounted on the node and bind mount to the Pod.
    properties:
      cachingMode:
        description: Host caching mode.
        enum:
          - None
          - ReadOnly
          - ReadWrite
        type: string
        x-kab-description-zh: 主机侧高速缓存模式。
      diskName:
        description: The name of the data disk in the blob storage.
        minLength: 1
        type: string
        x-kab-description-zh: 数据盘在 BLOB 存储中的名字。
      diskURI:
        description: The URI of the data disk in the blob storage.
        minLength: 1
        type: string
        x-kab-description-zh: 数据盘在 BLOB 存储中的 URI。
      fsType:
        default: ext4
        description: |-
          Filesystem type to mount. Must be a filesystem type supported by the host operating system.
          For example, `"ext4"`, `"xfs"`, `"ntfs"`.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。必须是一个宿主操作系统所支持的文件系统类型。
          例如： `"ext4"`、`"xfs"`、`"ntfs"`。
      kind:
        default: Shared
        description: |-
          Expected values are:
          - `"Shared"`: multiple blob disks per storage account
          - `"Dedicated"`: single blob disk per storage account
          - `"Managed"`: Azure managed data disk (only in managed availability set).
          The `diskURI` is of format
          `"/subscriptions/<ID>/resourcegroups/<NAME>/providers/microsoft.compute/disks/<DISK-ID>"`
          for managed disk. For other kinds, the `diskURI` should look like
          `"https://<ACCOUNT>.blob.core.windows.net/<CONTAINER>/<DISK>.vhd"`.
        enum:
          - Dedicated
          - Managed
          - Shared
        type: string
        x-kab-description-zh: |-
          可选的参数值包括：

          - `"Shared"`：每个存储账户对应多个 BLOB 磁盘；
          - `"Dedicated"`：每个存储账户对应一个 BLOB 磁盘；
          - `"Managed"`：Azure 托管的数据盘（只在托管的可用性集合中存在）。

          对于托管磁盘，其 `diskURI` 的格式为
          `"/subscriptions/<ID>/resourcegroups/<NAME>/providers/microsoft.compute/disks/<DISK-ID>"`；
          对于其他类型的磁盘，`diskURI` 的格式为
          `"https://<ACCOUNT>.blob.core.windows.net/<CONTAINER>/<DISK>.vhd"`.
      readOnly:
        default: false
        description: Force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: 强制在 `volumeMounts` 中设置 `readOnly` 配置。
    required:
      - diskName
      - diskURI
    type: object
    x-kab-description-zh: 一个被挂接到节点上并绑定挂载到 Pod 中的 Azure 数据盘。
  io.k8s.api.core.v1.AzureFilePersistentVolumeSource:
    description: An Azure File service mounted on the node and bind mount to the Pod.
    properties:
      readOnly:
        default: false
        description: Force the volume to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制使用只读模式挂载此卷。
      secretName:
        description: Name of Secret that contains Azure storage account name and key.
        minLength: 1
        type: string
        x-kab-description-zh: 包含 Azure 存储账号名称和秘钥的 Secret 的名字。
      secretNamespace:
        description: |-
          Namespace of the Secret that contains the Azure storage account name and key.
          Default is the same as the Pod. Empty string is not allowed.
        type: string
        x-kab-description-zh: |-
          包含 Azure 存储账号名称和秘钥的 Secret 所在的名字空间。
          默认为 Pod 所在的名字空间。空的字符串是不允许的。
      shareName:
        description: Share name.
        minLength: 1
        type: string
        x-kab-description-zh: Share 的名称。
    required:
      - secretName
      - shareName
    type: object
    x-kab-description-zh: 挂接到节点上并被绑定挂载到 Pod 中的 Azure File 服务。
  io.k8s.api.core.v1.AzureFileVolumeSource:
    description: An Azure File Service mount on the host and bind mount to the Pod.
    properties:
      readOnly:
        default: false
        description: |-
          Defaults to `false` (read/write).
          `readOnly` here will force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: |-
          默认值为 `false`（以可读可写模式挂载）。
          这里设置的 `readOnly` 形成对 `volumeMounts` 中 `readOnly` 设置的强制要求。
      secretName:
        description: The name of Secret that contains Azure storage account name and
          key.
        minLength: 1
        type: string
        x-kab-description-zh: 包含 Azure 存储账号名称和秘钥的 Secret 的名称。
      shareName:
        description: Share name.
        minLength: 1
        type: string
        x-kab-description-zh: Share 的名称。
    required:
      - secretName
      - shareName
    type: object
    x-kab-description-zh: 一个挂载到宿主系统并被绑定挂载到 Pod 中的 Azure File Service。
  io.k8s.api.core.v1.Binding.CREATE:
    description: Binding ties a Pod to a node.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Binding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` field in metadata must be
          the name of an existing Pod.
        x-kab-description-zh: 标准的对象元数据。其中的 `name` 字段值必须是某已有 Pod 的名称。
      target:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The target node that you want to bind to the Pod.
          The `kind` if provided must be `"Node"` and the `name` must be provided.
        x-kab-description-zh: |-
          你所希望 Pod 绑定到的目标节点。
          如果指定了 `kind`，其取值必须是 `"Node"`。`name` 字段是必须设置的。
    required:
      - apiVersion
      - kind
      - metadata
      - target
    type: object
    x-kab-description-zh: Binding 建立 Pod 与节点之间的关联关系。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Binding
        version: v1
  io.k8s.api.core.v1.Binding.GET:
    description: Binding ties a Pod to a node.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Binding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      target:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The target node that you want to bind to the Pod.
          The `kind` if provided must be `"Node"` and the `name` must be provided.
        x-kab-description-zh: |-
          你所希望 Pod 绑定到的目标节点。
          如果指定了 `kind`，其取值必须是 `"Node"`。`name` 字段是必须设置的。
    required:
      - apiVersion
      - kind
      - metadata
      - target
    type: object
    x-kab-description-zh: Binding 建立 Pod 与节点之间的关联关系。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Binding
        version: v1
  io.k8s.api.core.v1.CSIPersistentVolumeSource:
    description: A storage that is managed by an external CSI volume driver.
    properties:
      controllerExpandSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          A reference to the Secret object containing sensitive information to pass to
          the CSI driver to complete the CSI `ControllerExpandVolume()` call.
          This field may be empty if no Secret is required.
          If the Secret object contains more than one Secret, all Secrets are passed.
          When specified, both `name` and `namespace` field should be specified as
          valid DNS_LABEL strings.
        x-kab-description-zh: |-
          此字段为一个对 Secret 对象的引用，该对象中包含一些敏感信息，需要传递给 CSI
          驱动才能完成 `ControllerExpandVolume()` 调用。
          如果不需要 Secret，此字段可以为空。
          如果 Secret 对象中包含多条信息，则所有信息都会传递给 CSI 驱动。
          设置此字段时，`name` 和 `namespace` 字段都必须是合法的 DNS_LABEL 字符串。
      controllerPublishSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          A reference to the Secret object containing sensitive information to pass to
          the CSI driver to complete the CSI `ControllerPublishVolume()` and
          `ControllerUnpublishVolume()` calls.
          This field may be empty if no Secret is required.
          If the Secret object contains more than one secret, all secrets are passed.
          When specified, both `name` and `namespace` field should be specified
          as valid DNS_LABEL strings. The field can be updated if current value is nil.
        x-kab-description-zh: |-
          此字段为一个对 Secret 对象的引用，该对象中包含一些敏感信息，需要传递给 CSI
          驱动以完成 `ControllerPublishVolume()` 调用和 `ControllerUnpublishVolume()` 调用。
          如果不需要 Secret，此字段可以为空。
          如果 Secret 对象中包含多条信息，则所有信息都会传递给 CSI 驱动。
          设置此字段时，`name` 和 `namespace` 字段都必须是合法的 DNS_LABEL 字符串。
          如果当前取值为空，此字段可以被更新。
      driver:
        description: |-
          The name of the driver to use for this volume.
          The name can be at most 63 characters and it must be a valid DNS subdomain name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此卷要使用的驱动的名称。
          名称字符串的值至多为 63 字符，并且其取值必须是合法的 DNS 子域名。
      fsType:
        description: |-
          Filesystem type to mount. Must be a filesystem type supported by the host operating system.
          For example: `"ext4"`, `"xfs"`, `"ntfs"`.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型之一。
          例如：`"ext4"`, `"xfs"`, `"ntfs"`。
      nodeExpandSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          `nodeExpandSecretRef` is a reference to the Secret object containing sensitive information
          to pass to the CSI driver to complete the CSI `NodeExpandVolume` call.
          This field is optional, may be omitted if no Secret is required.
          If the Secret object contains more than one Secret, all Secrets are passed.
        x-kab-description-zh: |-
          `nodeExpandSecretRef` 是一个对 Secret 对象的引用，该对象中包含一些敏感信息，
          需要传递给 CSI 驱动以完成 `NodeExpandVolume()` 调用。
          此字段是可选的，如果不需要 Secret 可以忽略。
          如果 Secret 对象中包含多条信息，则所有信息都会传递给 CSI 驱动。
      nodePublishSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: A reference to the Secret object containing sensitive information
          to pass to the CSI driver to complete the CSI `NodePublishVolume()` and
          `NodeUnpublishVolume()` calls. This field may be empty if no Secret is required.
          If the Secret object contains more than one secret, all secrets are passed.
          When specified, both `name` and `namespace` fields should be specified as
          valid DNS_LABEL strings.
        x-kab-description-zh: |-
          此字段为一个对 Secret 对象的引用，该对象中包含一些敏感信息，需要传递给 CSI
          驱动以完成 `NodePublishVolume()` 调用和 `NodeUnpublishVolume()` 调用。
          如果不需要 Secret，此字段可以为空。
          如果 Secret 对象中包含多条信息，则所有信息都会传递给 CSI 驱动。
          设置此字段时，`name` 和 `namespace` 字段都必须是合法的 DNS_LABEL 字符串。
      nodeStageSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: A reference to the Secret object containing sensitive information
          to pass to the CSI driver to complete the CSI `NodeStageVolume()` and `NodeUnstageVolume()`
          calls. This field may be empty if no Secret is required. If the Secret object
          contains more than one secret, all secrets are passed. When specified, both
          `name` and `namespace` fields have to be specified as valid DNS_LABEL strings.
        x-kab-description-zh: |-
          此字段为一个对 Secret 对象的引用，该对象中包含一些敏感信息，需要传递给 CSI
          驱动以完成 `NodeStageVolume()` 调用和 `NodeUnstateVolume()` 调用。
          如果不需要 Secret，此字段可以为空。
          如果 Secret 对象中包含多条信息，则所有信息都会传递给 CSI 驱动。
          设置此字段时，`name` 和 `namespace` 字段都必须是合法的 DNS_LABEL 字符串。
      readOnly:
        default: false
        description: |-
          The value to pass to `ControllerPublishVolumeRequest()`, for deciding whether
          to pubsh volume as read-only.
        type: boolean
        x-kab-description-zh: 要传递给 `ControllerPublishVolumeRequest()` 的值，决定是否以只读模式公布卷。
      volumeAttributes:
        additionalProperties:
          type: string
        description: Attributes of the volume to publish.
        type: object
        x-kab-description-zh: 要公布的卷的一些属性。
      volumeHandle:
        description: |-
          The unique volume name returned by the CSI volume plugin's `CreateVolume()`.
          Used as reference to the volume on all subsequent calls.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          CSI 卷插件的 `CreateVolume()` 调用所返回的唯一的卷名。
          在后续调用中，都使用这个字段值来引用该卷。
    required:
      - driver
      - volumeHandle
    type: object
    x-kab-description-zh: 由外部 CSI 卷驱动所管理的一个存储。
  io.k8s.api.core.v1.CSIVolumeSource:
    description: The source location of a volume to mount, managed by an external
      CSI driver.
    properties:
      driver:
        description: |-
          The name of the CSI driver that handles this volume.
          Consult with your admin for the correct name as registered in the cluster.
          The name must be a valid DNS subdomain name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          负责处理此卷的 CSI 驱动的名称。
          你需要咨询管理员以了解集群中注册的 CSI 驱动的正确名称。
          此字符串必须是合法的 DNS 子域名。
      fsType:
        description: |-
          Filesystem type to mount. Ex. `"ext4"`, `"xfs"`, `"ntfs"`.
          If not provided, the empty value is passed to the associated CSI driver which will
          determine the default filesystem to apply.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。例如：`"ext4"`、`"xfs"`、`"ntfs"` 等。
          如果未设置此字段，则系统会将空字符串传递给相关的 CSI 驱动，
          由 CSI 驱动来决定默认使用的文件系统。
      nodePublishSecretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: |-
          A reference to the Secret containing sensitive information to be passed to the CSI
          driver to complete the CSI `NodePublishVolume()` and `NodeUnpublishVolume()` calls.
          If the Secret object contains more than one Secret, all Secret references are passed.
          When specified, the `name` field must be specified as a valid DNS subdomain name.
        x-kab-description-zh: |-
          此字段为一个对 Secret 对象的引用，该对象中包含一些敏感信息，需要传递给 CSI
          驱动以完成 `NodePublishVolume()` 调用和 `NodeUnpublishVolume()` 调用。
          如果 Secret 对象中包含多条信息，则所有信息都会传递给 CSI 驱动。
          设置此字段时，`name` 字段都必须是合法的 DNS 子域名。
      readOnly:
        default: false
        description: This indicates a read-only configuration for the volume.
        type: boolean
        x-kab-description-zh: 此字段表明需要将卷配置为只读访问。
      volumeAttributes:
        additionalProperties:
          type: string
        description: |-
          Driver-specific properties that are passed to the CSI driver.
          Consult your driver's documentation for supported values.
        type: object
        x-kab-description-zh: |-
          特定于驱动的属性设置，将被传递给 CSI 驱动。
          你需要查阅你的驱动的文档来了解支持哪些值。
    required:
      - driver
    type: object
    x-kab-description-zh: 要挂载的卷的来源位置，由外部 CSI 驱动来管理。
  io.k8s.api.core.v1.Capabilities:
    description: Adds and removes POSIX capabilities from running containers.
    properties:
      add:
        description: Capabilities to add.
        items:
          description: A capability to add.
          minLength: 1
          type: string
          x-kab-description-zh: 要添加的权能。
        type: array
        x-kab-description-zh: 要添加的权能集合。
        x-kubernetes-list-type: atomic
      drop:
        description: Capabilities to remove.
        items:
          description: A capability to remove.
          minLength: 1
          type: string
          x-kab-description-zh: 要移除的权能。
        type: array
        x-kab-description-zh: 要移除的权能集合。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 为运行中的容器添加 POSIX 权能（Capabilities）或者从中去除权能。
  io.k8s.api.core.v1.CephFSPersistentVolumeSource:
    description: |-
      A Ceph filesystem mount that lasts the lifetime of a Pod.
      `cephfs` volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: A collection of Ceph monitors.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: 一组 Ceph 监视器（Monitors）。
        x-kubernetes-list-type: atomic
      path:
        default: /
        description: Path to use as the mounted root, rather than the full Ceph tree.
        type: string
        x-kab-description-zh: 作为挂载根使用的路径，不打算挂载整个 Ceph 树的时候使用。
      readOnly:
        default: false
        description: Force the filesystem to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载文件系统。
      secretFile:
        default: /etc/ceph/user.secret
        description: The path to key ring for User.
        type: string
        x-kab-description-zh: 用户秘钥环的路径。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: The reference to the authentication Secret for user, default
          is empty.
        x-kab-description-zh: 为用户提供身份认证的 Secret。默认为空。
      user:
        default: admin
        description: The rados user name.
        type: string
        x-kab-description-zh: RADOS 用户名。
    required:
      - monitors
    type: object
    x-kab-description-zh: |-
      在整个 Pod 生命周期内都有效的某个 Ceph 文件系统。
      `cephfs` 卷不支持属主管理，也不支持 SELinux 重新打标签。
  io.k8s.api.core.v1.CephFSVolumeSource:
    description: |-
      Represents a Ceph filesystem mount that lasts the lifetime of a Pod.
      `cephfs` volumes do not support ownership management or SELinux relabeling.
    properties:
      monitors:
        description: A collection of Ceph monitors.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: 一组 Ceph 监视器（Monitors）。
        x-kubernetes-list-type: atomic
      path:
        default: /
        description: The mounted root, rather than the full Ceph tree.
        type: string
        x-kab-description-zh: 作为挂载根使用的路径，不打算挂载整个 Ceph 树的时候使用。
      readOnly:
        default: false
        description: Force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载文件系统。
      secretFile:
        default: /etc/ceph/user.secret
        description: The path to key ring for the `user`.
        type: string
        x-kab-description-zh: '`user` 对应的密钥环的路径。'
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: A reference to the authentication Secret for `user`, default
          is empty.
        x-kab-description-zh: 对 `user` 所使用的身份认证 Secret 的引用，默认为空。
      user:
        default: admin
        description: The rados user name.
        type: string
        x-kab-description-zh: RADOS 用户名。
    required:
      - monitors
    type: object
    x-kab-description-zh: |-
      在整个 Pod 生命周期内都有效的某个 Ceph 文件系统。
      `cephfs` 卷不支持属主管理，也不支持 SELinux 重新打标签。
  io.k8s.api.core.v1.CinderPersistentVolumeSource:
    description: |-
      An existing Cinder volume resource in Openstack.
      The volume must also be in the same region as the node.
      Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        default: ext4
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型。
      readOnly:
        default: false
        description: Force the volume to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载卷。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          Reference to a Secret object containing parameters used to connect to OpenStack.
          Both `namespace` and `name` must be specified as valid DNS_LABEL strings.
        x-kab-description-zh: |-
          对一个 Secret 对象的引用。该对象中包含用来连接到 OpenStack 的参数。
          所给的 `namespace` 和 `name` 都必须是合法的 DNS_LABEL 字符串。
      volumeID:
        description: The identifier for the Cinder volume.
        minLength: 1
        type: string
        x-kab-description-zh: Cinder 卷的标识符。
    required:
      - volumeID
    type: object
    x-kab-description-zh: |-
      OpenStack 中已有的一个 Cinder 卷资源。此卷必须与节点处于相同的地理区域。
      Cinder 卷支持属主管理和 SELinux 重打标签。
  io.k8s.api.core.v1.CinderVolumeSource:
    description: |-
      Represents a Cinder volume resource in Openstack.
      A Cinder volume must exist before mounting to a container.
      The volume must also be in the same region as the kubelet.
      Cinder volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        default: ext4
        description: |-
          Filesystem type to mount.
          Must be a filesystem type supported by the host operating system,
          e.g. `"ext4"`, `"xfs"`, `"ntfs"`.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。
          必须是宿主操作系统所支持的文件系统类型。例如：`"ext4"`、`"xfs"`、`"ntfs"`。
      readOnly:
        default: false
        description: Defaults to `false` (read/write). `readOnly` here will force
          the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: |-
          默认为 `false`（用可读可写模式挂载）。
          这里的 `readOnly` 设置会对 `volumeMounts` 中的 `readOnly` 设置起到强制作用。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: Reference to a Secret object containing parameters used to connect
          to OpenStack.
        x-kab-description-zh: 对某 Secret 对象的引用。该对象中包含用来连接到 OpenStack 所用的参数。
      volumeID:
        description: Volume ID used to identify the volume in Cinder.
        minLength: 1
        type: string
        x-kab-description-zh: 用来标识 Cinder 中数据卷的卷 ID。
    required:
      - volumeID
    type: object
    x-kab-description-zh: |-
      代表 OpenStack 中的一个 Cinder 卷资源。
      在被挂载到某个容器中之前，Cinder 卷必须已经存在。
      卷必须与 kubelet 位于同一个地理区域。
      Cinder 卷支持属主管理和 SELinux 重打标签。
  io.k8s.api.core.v1.ClaimSource:
    description: |-
      ClaimSource describes a reference to a ResourceClaim.
      Exactly one of `resourceClaimName` and `resourceClaimTemplateName` should be set.
      Consumers of this type must treat an empty object as if it has an unknown value.
    properties:
      resourceClaimName:
        description: |-
          This is the name of a ResourceClaim object in the same namespace as this Pod.
          This name must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          Pod 所在名字空间的某 ResourceClaim 对象的名字。
          此字段值必须是合法的 DNS 子域名。
      resourceClaimTemplateName:
        description: |-
          This is the name of a ResourceClaimTemplate object in the same namespace as this Pod.
          The template will be used to create a new ResourceClaim, which will be bound to this Pod. When this Pod is deleted, the ResourceClaim will also be deleted. The Pod name and resource name, along with a generated component, will be used to form a unique name for the ResourceClaim, which will be recorded in `pod.status.resourceClaimStatuses`.
          This field is immutable and no changes will be made to the corresponding ResourceClaim by the control plane after creating the ResourceClaim.
          The name must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          此字段为 Pod 所在名字空间中某 ResourceClaimTemplate 对象的名字。

          此模板会被用来创建一个新的 ResourceClaim，而新的 ResourceClaim 会绑定到此 Pod。
          当 Pod 被删除时，该 ResourceClaim 对象也会被删除。
          Pod 名称和资源名称以及一个生成的部分一起，用来为 ResourceClaim 生成一个唯一的名称，
          该名称会被记录到 `pod.status.resourceClaimStatuses` 中。

          此字段是不可变更的。ResourceClaim 被创建之后，管理面不会更改 ResourceClaim 对象。

          字段值必须是合法的 DNS 子域名。
    type: object
    x-kab-description-zh: |-
      ClaimSource 描述对 ResourceClaim 的引用。
      `resourceClaimName` 和 `resourceClaimTemplateName` 之间必须且只能设置其一。
      此类型对象的用户必须将空对象视为包含未知取值。
  io.k8s.api.core.v1.ClientIPConfig:
    description: The configuration for client IP based session affinity.
    properties:
      timeoutSeconds:
        default: 10800
        description: The session sticky time in seconds.
        format: int32
        maximum: 86400
        minimum: 1
        type: integer
        x-kab-description-zh: 会话粘合性时间长度，以秒计。
    required:
      - timeoutSeconds
    type: object
    x-kab-description-zh: 基于客户端 IP 地址的会话亲和性的配置。
  io.k8s.api.core.v1.ClusterTrustBundleProjection:
    description: |-
      ClusterTrustBundleProjection describes how to select a set of ClusterTrustBundle
      objects and project their contents into the pod filesystem.
    properties:
      labelSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Select all ClusterTrustBundles that match this label selector. Only has effect if `signerName` is set.
          Mutually-exclusive with `name`. If unset, interpreted as **match nothing**.
          If set but empty, interpreted as **match everything**.
        x-kab-description-zh: |-
          选择所有与此标签选择算符相匹配的 ClusterTrustBundle 对象。只有设置了 `signerName` 时才有效。
          此字段与 `name` 属性互斥。如果未设置，意为不匹配任何对象，如果设置为空算符，则意味着匹配所有对象。
      name:
        description: |-
          Select a single ClusterTrustBundle by object name. Mutually-exclusive with `signerName` and `labelSelector`.
          The name can be prefixed using signer name, up to the last `':'` in the `name` field.
          The other `':'` characters are replaced with `'/'` to form the signer name.
          The signer name must be a valid DNS subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          根据对象名称选择唯一的 ClusterTrustBundle 对象。此字段与  `signerName` 和 `labelSelector` 的组合互斥。
          字段值可以包含签名者的名称作为前缀，解析方式是取 `name` 字段中最后一个 `':'` 字符之前的所有字符，
          并将其中其余的 `':'` 替换为 `'/'` 字符。
          签名者的名称必须是一个合法的 DNS 子域名。
      optional:
        description: |-
          If true, don't block Pod startup if the referenced ClusterTrustBundle(s) aren't available.
          If using `name`, then the named ClusterTrustBundle is allowed not to exist.
          If using `signerName`, then the combination of `signerName` and `labelSelector` is allowed to match zero ClusterTrustBundles.
        type: boolean
        x-kab-description-zh: |-
          如果此字段为 `true`，如果所引用的 ClusterTrustBundle 对象不存在，也不要阻止 Pod 启动。
          如果使用 `name` 来选择 ClusterTrustBundle，则所指的 ClusterTrustBundle 可以不存在。
          如果使用 `signerName` 来选择 ClusterTrustBundle，则允许 `signerName` 和 `labelSelector` 的组合所匹配到的对象集合为空。
      path:
        description: Relative path from the volume root to write the bundle.
        type: string
        x-kab-description-zh: 写入 ClusterTrustBundle 内容时使用的路径，相对于投射卷的根目录而言。
      signerName:
        description: |-
          Select all ClusterTrustBundles that match this signer name. Mutually-exclusive with `name`.
          The contents of all selected ClusterTrustBundles will be unified and deduplicated.
          The field value must b a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          选择与此签名者名称匹配的所有 ClusterTrustBundle 对象。此字段与 `name` 互斥。
          被选中的所有 ClusterTrustBundle 的内容都会被组合起来，去重之后写入到 `path` 所给的路径下。
          签名者的名称必须是一个合法的 DNS 子域名。
    required:
      - path
    type: object
    x-kab-description-zh: ClusterTrustBundleProjection 用来描述如何选择一组 ClusterTrustBundle
      对象并将其内容投射到 Pod 的文件系统中。
  io.k8s.api.core.v1.ComponentCondition:
    description: Information about the condition of a component.
    k-kab-description-zh: 关于某个组件的状况的信息。
    properties:
      error:
        description: Condition error code for a component. For example, a health check
          error code.
        type: string
        x-kab-description-zh: 某个组件的错误码状况。例如，健康检查错误码。
      message:
        description: Message about the condition for a component. For example, information
          about a health check.
        type: string
        x-kab-description-zh: 某个组件的状况的消息。例如，关于某健康检查的信息。
      status:
        description: Status of the condition for a component.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 组件的状况的状态。
      type:
        default: Healthy
        description: Type of condition for a component.
        enum:
          - Healthy
        minLength: 1
        type: string
        x-kab-description-zh: 组件的状况的类型。
    required:
      - status
      - type
    type: object
  io.k8s.api.core.v1.ComponentStatus:
    description: 'The cluster validation information. **DEPRECATED**: This API is
      deprecated in v1.19+.'
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      conditions:
        description: List of component conditions observed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ComponentCondition'
        type: array
        x-kab-description-zh: 观测到的组件状况列表。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      kind:
        description: A string value representing the REST resource.
        enum:
          - ComponentStatus
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
    required:
      - apiVersion
      - conditions
      - kind
      - metadata
    type: object
    x-kab-description-zh: 集群验证信息。**已弃用**：此 API 在 v1.19 版本起被弃用。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ComponentStatus
        version: v1
  io.k8s.api.core.v1.ComponentStatusList:
    description: |-
      Status of all conditions for system components.
      **DEPRECATED**: This API is deprecated in v1.19+.'
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of ComponentStatus objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ComponentStatus'
        type: array
        x-kab-description-zh: 包含 ComponentStatus 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ComponentStatusList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 系统组件所有状况的状态。**已弃用**：此 API 在 v1.19 版本起被弃用。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ComponentStatusList
        version: v1
  io.k8s.api.core.v1.ConfigMap.CREATE:
    description: |-
      ConfigMap holds configuration data for Pods to consume.
      The total size of `data` and `binaryData` must be less than 1 MB.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      binaryData:
        additionalProperties:
          format: byte
          type: string
        description: |-
          The `binaryData` field contains the binary data.
          Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          Each key can have at most 253 characters and it cannot be `"."`, `".."` and
          it cannot start with `".."`.
          This field can contain byte sequences that are not in the UTF-8 range.
          The keys stored in `binaryData` must not overlap with the ones in the `data` field.
        type: object
        x-kab-description-zh: |-
          `binaryData` 保存二进制数据。
          每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，最大长度为 253 字符，
          并且主键本身不可以是 `"."`、`".."`，也不可以以 `".."` 开头。
          此字段可以包含不在 UTF-8 范围的字节序列。
          `binaryData` 中包含的主键不可以与 `data` 字段中包含的主键重叠。
      data:
        additionalProperties:
          type: string
        description: |-
          The `data` field contains the configuration data.
          Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          Each key can have at most 253 characters and it cannot be `"."`, `".."` and
          it cannot start with `".."`.
          Values with non-UTF-8 byte sequences must use the `binaryData` field.
          The keys stored in `data` must not overlap with the keys in the `binaryData` field.
        type: object
        x-kab-description-zh: |-
          `data` 保存配置数据。每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，
          最大长度为 253 字符，并且主键本身不可以是 `"."`、`".."`，也不可以以 `".."` 开头。
          不在 UTF-8 范围的字节序列必须使用 `binaryData` 来保存。
          `data` 中包含的主键不可以与 `binaryData` 字段中包含的主键重叠。
      immutable:
        description: |-
          If set to `true`, ensures that data stored in the ConfigMap cannot be updated
          (only the object metadata can be modified).
          If not set to `true`, the field can be modified at any time. Defaulted to `null`.
        type: boolean
        x-kab-description-zh: |-
          如果设置为 `true`，则可以确保 ConfigMap 中保存的数据无法被更新（只有元数据可被修改）。
          如果不设置为 `true`，则 ConfigMap 的字段可以在任何时候被修改。默认值为 `null`。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ConfigMap
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name of a ConfigMap must be a valid
          DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。ConfigMap 的名字必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      ConfigMap 包含可供 Pod 使用的配置数据。
      `data` 和 `binaryData` 的总大小不能超过 1 MB。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ConfigMap
        version: v1
  io.k8s.api.core.v1.ConfigMap.GET:
    description: |-
      ConfigMap holds configuration data for Pods to consume.
      The total size of `data` and `binaryData` must be less than 1 MB.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      binaryData:
        additionalProperties:
          format: byte
          type: string
        description: |-
          The `binaryData` field contains the binary data.
          Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          Each key can have at most 253 characters and it cannot be `"."`, `".."` and
          it cannot start with `".."`.
          This field can contain byte sequences that are not in the UTF-8 range.
          The keys stored in `binaryData` must not overlap with the ones in the `data` field.
        type: object
        x-kab-description-zh: |-
          `binaryData` 保存二进制数据。
          每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，最大长度为 253 字符，
          并且主键本身不可以是 `"."`、`".."`，也不可以以 `".."` 开头。
          此字段可以包含不在 UTF-8 范围的字节序列。
          `binaryData` 中包含的主键不可以与 `data` 字段中包含的主键重叠。
      data:
        additionalProperties:
          type: string
        description: |-
          The `data` field contains the configuration data.
          Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          Each key can have at most 253 characters and it cannot be `"."`, `".."` and
          it cannot start with `".."`.
          Values with non-UTF-8 byte sequences must use the `binaryData` field.
          The keys stored in `data` must not overlap with the keys in the `binaryData` field.
        type: object
        x-kab-description-zh: |-
          `data` 保存配置数据。每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，
          最大长度为 253 字符，并且主键本身不可以是 `"."`、`".."`，也不可以以 `".."` 开头。
          不在 UTF-8 范围的字节序列必须使用 `binaryData` 来保存。
          `data` 中包含的主键不可以与 `binaryData` 字段中包含的主键重叠。
      immutable:
        description: |-
          If set to `true`, ensures that data stored in the ConfigMap cannot be updated
          (only the object metadata can be modified).
          If not set to `true`, the field can be modified at any time. Defaulted to `null`.
        type: boolean
        x-kab-description-zh: |-
          如果设置为 `true`，则可以确保 ConfigMap 中保存的数据无法被更新（只有元数据可被修改）。
          如果不设置为 `true`，则 ConfigMap 的字段可以在任何时候被修改。默认值为 `null`。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ConfigMap
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name of a ConfigMap must be a valid
          DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。ConfigMap 的名字必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      ConfigMap 包含可供 Pod 使用的配置数据。
      `data` 和 `binaryData` 的总大小不能超过 1 MB。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ConfigMap
        version: v1
  io.k8s.api.core.v1.ConfigMap.UPDATE:
    description: |-
      ConfigMap holds configuration data for Pods to consume.
      The total size of `data` and `binaryData` must be less than 1 MB.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      binaryData:
        additionalProperties:
          format: byte
          type: string
        description: |-
          The `binaryData` field contains the binary data.
          Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          Each key can have at most 253 characters and it cannot be `"."`, `".."` and
          it cannot start with `".."`.
          This field can contain byte sequences that are not in the UTF-8 range.
          The keys stored in `binaryData` must not overlap with the ones in the `data` field.
        type: object
        x-kab-description-zh: |-
          `binaryData` 保存二进制数据。
          每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，最大长度为 253 字符，
          并且主键本身不可以是 `"."`、`".."`，也不可以以 `".."` 开头。
          此字段可以包含不在 UTF-8 范围的字节序列。
          `binaryData` 中包含的主键不可以与 `data` 字段中包含的主键重叠。
      data:
        additionalProperties:
          type: string
        description: |-
          The `data` field contains the configuration data.
          Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          Each key can have at most 253 characters and it cannot be `"."`, `".."` and
          it cannot start with `".."`.
          Values with non-UTF-8 byte sequences must use the `binaryData` field.
          The keys stored in `data` must not overlap with the keys in the `binaryData` field.
        type: object
        x-kab-description-zh: |-
          `data` 保存配置数据。每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，
          最大长度为 253 字符，并且主键本身不可以是 `"."`、`".."`，也不可以以 `".."` 开头。
          不在 UTF-8 范围的字节序列必须使用 `binaryData` 来保存。
          `data` 中包含的主键不可以与 `binaryData` 字段中包含的主键重叠。
      immutable:
        description: |-
          If set to `true`, ensures that data stored in the ConfigMap cannot be updated
          (only the object metadata can be modified).
          If not set to `true`, the field can be modified at any time. Defaulted to `null`.
        type: boolean
        x-kab-description-zh: |-
          如果设置为 `true`，则可以确保 ConfigMap 中保存的数据无法被更新（只有元数据可被修改）。
          如果不设置为 `true`，则 ConfigMap 的字段可以在任何时候被修改。默认值为 `null`。
      kind:
        description: A string value representing the REST resource
        enum:
          - ConfigMap
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name of a ConfigMap must be a valid
          DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。ConfigMap 的名字必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      ConfigMap 包含可供 Pod 使用的配置数据。
      `data` 和 `binaryData` 的总大小不能超过 1 MB。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ConfigMap
        version: v1
  io.k8s.api.core.v1.ConfigMapEnvSource:
    description: |-
      ConfigMapEnvSource populates the environment variables of a container with data from
      a ConfigMap in the same namespace. The key-value pairs in the ConfigMap's
      `data` field will be represented as environment variables.
    properties:
      name:
        description: Name of the referenced ConfigMap. The name must be a valid DNS
          subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 ConfigMap 的名字。名字必须是一个合法的 DNS 子域名。
      optional:
        description: Specify whether the ConfigMap must be defined.
        type: boolean
        x-kab-description-zh: 设置 ConfigMap 必须已经被定义。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      ConfigMapEnvSource 使用容器所在的名字空间的某个 ConfigMap 中的数据为容器设置环境变量。
      ConfigMap 的 `data` 字段中的键值对会被转换成环境变量。
  io.k8s.api.core.v1.ConfigMapKeySelector:
    description: Selects a key from a ConfigMap.
    properties:
      key:
        description: |-
          The key to select. The string must be a valid DNS subdomain name no more than
          253 characters. It must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          It cannot be `"."` or `".."` or prefixed with `".."`.
        maxLength: 253
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要选择的主键。此字符串值必须是合法的 DNS 子域名，不超过 253 个字符。
          字符串要由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，但不可以是 `"."` 或 `".."`，
          也不可以以 `".."` 开头。
      name:
        description: Name of the referenced ConfigMap. The name must be a valid DNS
          subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 ConfigMap 的名字。此名字必须是合法的 DNS 子域名。
      optional:
        description: Specify whether the ConfigMap and its key must be defined
        type: boolean
        x-kab-description-zh: 设置是否 ConfigMap 及所引用的主键必须已经定义。
    required:
      - key
      - name
    type: object
    x-kab-description-zh: 从 ConfigMap 中选择一个主键。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.ConfigMapList:
    description: A list of ConfigMap objects
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ConfigMap objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
        type: array
        x-kab-description-zh: 包含 ConfigMap 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ConfigMapList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 由 ConfigMap 对象组成的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ConfigMapList
        version: v1
  io.k8s.api.core.v1.ConfigMapNodeConfigSource:
    description: |-
      The information to reference a ConfigMap as the config source for a Node.
      This API is DEPRECATED since v1.22.
    properties:
      kubeletConfigKey:
        description: |-
          The key of the referenced ConfigMap that corresponds to the `KubeletConfiguration` structure.
          The string must consists of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          The string cannot be `"."` or `".."` and it cannot start with `".."`.
        maxLength: 253
        minLength: 1
        type: string
        x-kab-description-zh: |-
          所引用的 ConfigMap 中的主键，对应的内容是 `KubeletConfiguration` 结构。
          此字符串必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成。
          字符串本身不可以是 `"."` 或者 `".."`，也不可以以 `".."` 开头。
      name:
        description: Name of the referenced ConfigMap. The string must be a valid
          DNS subdomain.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 ConfigMap 的名称。此字符串值必须是合法的 DNS 子域名。
      namespace:
        description: Namespace of the referenced ConfigMap. The string must be a valid
          DNS_LABEL.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 ConfigMap 的名字空间。此字符串值必须是合法的 DNS_LABEL。
      resourceVersion:
        description: |-
          Resource version of the referenced ConfigMap.
          This field is forbidden in `node.spec`, and required in `node.status`.
        type: string
        x-kab-description-zh: |-
          被引用的 ConfigMap 的资源版本。
          此字段在 `node.spec` 中是禁止的，但在 `node.status` 是必需的。
      uid:
        description: |-
          UID of the referenced ConfigMap.
          This field is forbidden in `node.spec`, and required in `node.status`.
        type: string
        x-kab-description-zh: |-
          被引用的 ConfigMap 的 UID。
          此字段在 `node.spec` 中是禁止的，但在 `node.status` 是必需的。
    required:
      - kubeletConfigKey
      - name
      - namespace
    type: object
    x-kab-description-zh: |-
      用来引用某个 ConfigMap 的信息，所引用的 ConfigMap 会作为 Node 的配置信息源。
      此 API 从 v1.22 开始被弃用。
  io.k8s.api.core.v1.ConfigMapProjection:
    description: |-
      Adapts a ConfigMap into a projected volume. The contents of the target ConfigMap's
      `data` field will be presented in a projected volume as files using the keys
      in the `data` field as the file names, unless the `items` element is populated
      with specific mappings of keys to paths.
      Note that this is identical to a ConfigMap volume source without the default mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the `data` field of the referenced ConfigMap will
          be projected into the volume as a file whose name is the key and content is the value.
          If specified, the listed `key`s will be projected into the specified `path`s, and
          unlisted keys will not be present. If a `key` specified is not present in the ConfigMap,
          the volume setup will error unless it is marked `optional`.
          Paths must be relative and may not contain the `".."` string or start with `".."`.
          Each path must be unique in the map.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
        x-kab-description-zh: |-
          如果未设置，则所引用的 ConfigMap 的 `data` 字段中的每一个键值对都会以文件的形式投射到卷中，
          文件名即是键名，文件内容则是键值。
          如果设置了此字段，则所列举的 `key` 会被投射到所指定的 `path` 上，而未列举的主键不会出现。
          如果所指定的某个 `key` 在 ConfigMap 中不存在，则除非卷被标记为 `optional`，
          否则卷的配置会出错。
          所给的路径必须是相对路径，其中不可以包含 `".."`，也不可以以 `".."` 开头。
          映射中的每个 `path` 都必须是唯一的。
        x-kubernetes-list-type: atomic
      name:
        description: Name of the referenced ConfigMap. The string must be a valid
          DNS subdomain.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 ConfigMap 的名字。字符串的值必须是一个合法的 DNS 子域名。
      optional:
        description: Specify whether the ConfigMap or its keys must be defined.
        type: boolean
        x-kab-description-zh: 设置是否 ConfigMap 或者其中的主键必须已经被定义。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      将 ConfigMap 改造为一个投射卷（Projected Volume）。目标 ConfigMap 的 `data`
      字段的内容会呈现为投射卷中的文件。`data` 字段中的主键被用作文件名，除非 `items`
      元素中包含了从键名到路径的特殊映射关系。
      注意，这一结构与 ConfigMapVolumeSource 几乎完全相同，只是没有默认的模式设置。
  io.k8s.api.core.v1.ConfigMapVolumeSource:
    description: |-
      Adapts a ConfigMap into a volume. The contents of the target ConfigMap's `data` field will
      be presented in the volume as files using the keys in the `data` field as the file names,
      unless the `items` element is populated with specific mappings of `key`s to `path`s.
      ConfigMap volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        default: '0644'
        description: |-
          Optional mode bits used to set permissions on created files by default.
          Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`.
          YAML accepts both octal and decimal values, JSON requires decimal values.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file mode, like `fsGroup`,
          and the result can be other mode bits set.
        format: int32
        type: integer
        x-kab-description-zh: |-
          可选的模式位信息，用来设置所创建的文件的默认访问模式。
          所给的数值必须介于八进制的 `0` 和 `0777` 之间，也就是十进制的 `0` 和 `511` 之间。
          YAML 既能接受八进制值，也能接受十进制值；JSON 只能使用十进制值。
          路径中的目录不会受到此设置的影响。
          这里的设置可能与影响文件访问模式的其他选项之间存在冲突，例如 `fsGroup`。
          最终的结果可能导致某些其他模式位被设置。
      items:
        description: |-
          If unspecified, each key-value pair in the `data` field of the referenced ConfigMap will
          be projected into the volume as a file whose name is the key and content is the value.
          If specified, the listed `key`s will be projected into the specified `path`s, and
          unlisted keys will not be present. If a `key` is specified which is not present in the
          ConfigMap, the volume setup will error unless it is marked `optional`.
          Paths must be relative and may not contain the `".."` string or start with `".."`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
        x-kab-description-zh: |-
          如果未设置，则所引用的 ConfigMap 的 `data` 字段中的每一个键值对都会以文件的形式投射到卷中，
          文件名即是键名，文件内容则是键值。
          如果设置了此字段，则所列举的 `key` 会被投射到所指定的 `path` 上，而未列举的主键不会出现。
          如果所指定的某个 `key` 在 ConfigMap 中不存在，则除非卷被标记为 `optional`，
          否则卷的配置会出错。
          所给的路径必须是相对路径，其中不可以包含 `".."`，也不可以以 `".."` 开头。
        x-kubernets-list-type: atomic
      name:
        description: Name of the referenced ConfigMap. The string must be a valid
          DNS subdomain.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 ConfigMap 的名字。字符串的值必须是一个合法的 DNS 子域名。
      optional:
        description: Specify whether the ConfigMap or its keys must be defined.
        type: boolean
        x-kab-description-zh: 设置是否 ConfigMap 或者其中的主键必须已经被定义。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      将 ConfigMap 改造为一个数据卷。目标 ConfigMap 的 `data` 字段的内容会呈现为投射卷中的文件。
      `data` 字段中的主键被用作文件名，除非 `items` 元素中包含了从键名到路径的特殊映射关系。
      ConfigMap 卷支持属主管理和 SELinux 重打标签操作。
  io.k8s.api.core.v1.Container:
    description: A container to run within a Pod.
    properties:
      args:
        description: |-
          Arguments to the `command`.
          The container image's `CMD` is used if this is not provided.
          Variable references `$(VAR_NAME)` are expanded using the container's environment.
          If a variable cannot be resolved, the reference in the input string will be unchanged.
          Double dollar (`$$`) are reduced to a single dollar (`$`),
          which allows for escabing the `$(VAR_NAME)` syntax: i.e.
          `"$$(VAR_NAME)"` will produce the string literal `"$(VAR_NAME)"`.
          Escaped references will never be expanded, regardless of whether the variable exists or not.
          Cannot be updated.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          为 `command` 命令提供的参数列表。如果没有设置此字段，则使用容器镜像中的 `CMD` 值。
          `args` 中可以通过语法 `"$(VAR_NAME)"` 引用环境变量，但只能使用容器内部的环境变量。
          如果所给的环境变量无法解析，变量引用不会被处理。可以使用 `"$$"` 来对 `"$"` 进行转义，
          从而可以对 `"$(VAR_NAME)"` 这种语法进行转义。例如，`"$$(VAR_NAME)"` 会被转义为
          `"$(VAR_NAME)"`。被转义后的引用不会再被展开，无论对应的环境变量是否存在。
          此字段只能在创建时设置，不能更新。
        x-kubernetes-list-type: atomic
      command:
        description: |-
          Entrypoint array. The container image's `ENTRYPOINT` is used if this is not provided.
          The command is **NOT** executed within a shell.
          Variable references `"$(VAR_NAME)"` are expanded using the container's environment.
          If a variable cannot be resolved, the reference in the input string will be unchanged.
          Double dollars (`"$$"`) are reduced to a single dollar (`"$"`), which allows for
          escaping the `"$(VAR_NAME)"` syntax: i.e. the `"$(VAR_NAME)"` will produce the string literal
          `"$(VAR_NAME)"`.
          Escaped references will never be expanded, regardless of whether the variable exists or not.
          Cannot be updated.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          描述容器入口点的数组。如果没有提供 `command`，则使用镜像中的 `ENTRYPOINT` 设置。
          这里所给的命令不会在一个 Shell 中执行。类似 `$(VAR_NAME)` 这类环境变量会使用容器的环境变量值展开。
          如果所引用的变量无法被解析，则对应的引用字符串不会被处理。可以使用 `$$` 来对 `$` 进行转义，
          从而可以对 `$(VAR_NAME)` 这种语法进行转义。例如，`$$(VAR_NAME)` 会被转义为
          `$(VAR_NAME)`。被转义后的引用不会再被展开，无论对应的环境变量是否存在。
          此字段只能在创建时设置，不能更新。
        x-kubernetes-list-type: atomic
      env:
        description: List of environment variables to set in the container. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvVar'
        type: array
        x-kab-description-zh: 需要为容器设置的环境变量。只能创建时设置，不能更新。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a valid DNS subdomain name.
          They must consist of alphanumeric characters, `'.'`, `'-'`, or `'_'`.
          They cannot start with `".."` or a digit. They cannot be `"."` or `".."`.
          All invalid keys will be reported as an event when the container is starting.
          When a key exists in multiple sources, the value associated with the last source
          will take precedence.
          Values defined by an `env` with a duplicate key will take precedence.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvFromSource'
        type: array
        x-kab-description-zh: |-
          此字段为一个列表，给出一组来源，用来为容器设置环境变量。
          每个来源定义所使用的键名必须是合法的 DNS 子域名，其中只能包含字母、数字以及
          `'.'`、`'-'` 或者 `'_'`。键名不能以 `".."` 或者数字开头，也不可以是 `"."` 或者 `".."`。
          对于所有的非法键名，在容器启动时都会以事件形式形成报告。如果某个键名在多个来源中同时存在，
          优先选择最后一个来源中的键值。如果 `env` 中存在重名的键名，以 `env` 中的定义为准。
          此字段不可更新。
        x-kubernetes-list-type: map
      image:
        description: |-
          Container image name. The special value `""` is reserved to allow higher level
          config management to default or override container images in workload
          controllers like Deployments and StatefulSets.
        type: string
        x-kab-description-zh: |-
          容器镜像名称。允许使用空字符串（`""`）。空字符串用来预留给上层的配置管理工具设置默认值，
          或者在类似 Deployment、StatefulSet 这类工作负载控制器中重载容器镜像名称。
      imagePullPolicy:
        description: |-
          Image pull policy. Defaults to `"Always"` if the `":latest"` tag is specified,
          or `"IfNotPresent"` otherwise. Possible enum values:

          - `"Always"` means that kubelet always attempts to pull the latest image.
            Container will fail if the pull fails.
          - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk.
            Container will fail if the image isn't present and the pull fails.
          - `"Never"` means that kubelet never pulls an image, but only uses a local image.
            Container will fail if the image isn't present.

          Cannot be updated.
        enum:
          - Always
          - IfNotPresent
          - Never
        type: string
        x-kab-description-zh: |-
          镜像拉取策略设置。如果使用了标签为 `":latest"` 的镜像，则默认值为 `"Always"`，
          否则默认值为 `"IfNotPresent"`。合法的取值包括：

          - `"Always"`：意味着 kubelet 总会尝试去拉取最新的镜像。如果镜像拉取不成功，则容器也会失败。
          - `"IfNotPresent"`：kubelet 会在磁盘上不存在镜像时才拉取镜像。当镜像不存在并且拉取操作失败时，容器也失败。
          - `"Never"`：kubelet 不会发起镜像拉取操作，只使用本地已存在的镜像。如果镜像不存在则容器会失败。

          此字段不可更新。
      lifecycle:
        $ref: '#/definitions/io.k8s.api.core.v1.Lifecycle'
        description: |-
          Actions that the management system should take in response to container lifecycle events.
          This cannot be specified on an init container. Cannot be updated.
        x-kab-description-zh: |-
          设置发生容器生命周期事件时管理系统需要采取的动作。这一字段不能用于 Init 容器。
          此字段不支持更新。
      livenessProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: |-
          Periodic probe of container liveness. Container will be restarted if the probe fails.
          Can be null. It cannot be used on an init container. Cannot be updated.
        x-kab-description-zh: |-
          周期性探测容器存活态的探针。如果此探针失败，容器会被重启。此字段不适用于 Init 容器。
          此字段可以不设置。此字段不支持更新。
      name:
        description: |-
          Name of the container. Each container in a Pod must have a unique name (DNS_LABEL).
          Cannot be updated.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          容器的名称。Pod 中的每个容器都应该设置一个与众不同的名称，且名称要符合 DNS 标签格式要求。
          此字段不可更新。
      ports:
        description: |-
          List of ports to expose from the container.
          Not specifying a port here DOES NOT prevent that port from being exposed.
          Any port which is listening on the default "0.0.0.0" address inside a container
          will be accessible from the network.
          Modifying this array with strategic merge patch may corrupt the data.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerPort'
        type: array
        x-kab-description-zh: 容器要向外公开的端口列表。需要注意，即使这里不包含某个端口，并不意味着对应的端口不能被公开。 容器内所有在
          `"0.0.0.0"` 上监听的端口都可以在网络上被访问到。 通过策略性合并的补丁策略来更改此字段时，可能会导致配置数据被破坏。 此字段不支持更新。
        x-kubernetes-list-map-keys:
          - containerPort
          - protocol
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: containerPort
        x-kubernetes-patch-strategy: merge
      readinessProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: |-
          Periodic probe of container service readiness.
          Container will be removed from Service endpoints if the probe fails.
          This cannot be used against an init container.
          Cannot be updated.
        x-kab-description-zh: |-
          用来检查容器就绪态的周期性探针。如果探针失败，则容器会被从对应的 Service 端点列表中去除。
          此字段不适用于 Init 容器。此字段不可更新。
      resizePolicy:
        description: Resources resize policy for the container. The `resourceName`
          must be unique across the array.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerResizePolicy'
        type: array
        x-kab-description-zh: 容器的资源大小重设策略。列表中的各个条目的 `resourceName` 不可重复。
        x-kubernetes-list-type: atomic
      resources:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceRequirements'
        description: Resources required by this container. Cannot be updated.
        x-kab-description-zh: 此容器的资源请求与限制设置。不可更新。
      restartPolicy:
        description: |-
          This defines the restart behavior of individual containers in a Pod.
          This field may only be set for init containers, and the only allowed value is `"Always"`.
          For non-init containers or when this field is not specified, the restart behavior is defined
          by the Pod's restart policy and the container type.
          Setting the `restartPolicy` to `"Always"` for an init container will have the following effect:
          the init container will be continually restarted on exit until all regular containers have
          terminated. Once all regular containers have completed, all init containers with restartPolicy
          `"Always"` will be shut down.
          This lifecycle differs from normal init containers and is often referred to as a \"sidecar\"
          container. Although this init container still starts in the init container sequence,
          it does not wait for the container to complete before proceeding to the next init container.
          Instead, the next init container starts immediately after this init container is started,
          or after any `startupProbe` has successfully completed.
        enum:
          - Always
        type: string
        x-kab-description-zh: |-
          此字段用来设置 Pod 中各个容器的重启策略。这个字段只能应用在初始化容器（Init Container）之上，
          并且合法的取值只能是 `"Always"`。
          对于非初始化容器以及未设置 `restartPolicy` 的初始化容器，其重启策略是由 Pod 和容器类型来决定的。
          将初始化容器的 `restartPolicy` 设置为 `"Always"` 会有以下效果：
          这些初始化容器在退出之后会被持续重启，知道所有常规容器都已经结束为止。
          当所有常规容器都已经结束退出时，`restartPolicy` 设置为 `"Always"` 的初始容器也会被停止。
          这一生命周期行为与普通的初始化容器不同，通常被称作**边车（Sidecar）容器**。
          尽管这类边车容器也是在初始化容器序列中被启动，但它们不会等待前面的容器结束才启动。
          各个边车容器是相继启动的。边车容器可以等待前序容器的 `startupProbe` 成功再启动。
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.SecurityContext'
        description: |-
          The security options the container should be run with.
          If set, the fields of `securityContext` override the equivalent fields of Pod `securityContext`.
        x-kab-description-zh: 容器运行的安全选项。如果设置了这个字段，则其中的设置值会重载 Pod 层面的 `securityContext`
          设置。
      startupProbe:
        $ref: '#/definitions/io.k8s.api.core.v1.Probe'
        description: This probe indicates that the Pod has been successfully initialized.
          If specified, no other probes are executed until this probe completes successfully.
          If this probe fails, the Pod will be restarted, just as if the `livenessProbe`
          failed. This can be used to provide different probe parameters at the beginning
          of a Pod's lifecycle, when it might take a long time to load data or warm
          a cache, than during steady-state operation. This cannot be set on an init
          container. This cannot be updated. The `successThreshold`, if specified,
          must be 1.
        x-kab-description-zh: |-
          此探针表明容器已经被成功地初始化了。如果设置了此字段，则只有等此探针成功结束之后，才会运行其他探针。
          如果此探针执行失败，则 Pod 会被重启，就像 `livenessProbe` 探针失败一样。
          此字段可用来在 Pod 的生命周期开始时，执行一些不同的探测逻辑。
          例如 Pod 可能需要较长的时间来加载数据或者初始化数据缓存。
          此字段不适用于初始化容器。
          一旦设置之后，不能更新。
          其中的 `successThreshold`，如果设置了，只能是 1。
      stdin:
        default: false
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime.
          If this is not set, reads from stdin in the container will always result in EOF.
          This is a variable for interactive containers.
          It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.
        type: boolean
        x-kab-description-zh: |-
          用来指示容器是否要从容器运行时那里分配用于标准输入的缓冲区。
          若未设置此字段，则容器内读取标准输入时总会读到 EOF。
          此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
      stdinOnce:
        default: false
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by a single
          `attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions.
          If `stdinOnce` is set to `true`, stdin is opened on container start,
          is empty until the first client attaches to stdin, and then remains open and accepts data
          until the client disconnects, at which time stdin is closed and remains closed until
          the container is restarted.
          If this flag is false, a container processes that reads from stdin will never receive an EOF.

          This is a variable for interactive containers.
          It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.
        type: boolean
        x-kab-description-zh: |-
          指示容器运行时是否应该在为某个 `attach` 操作打开标准输入通道之后将其关闭。
          当 `stdin` 设置为 `true` 时，标准输入的数据流会一直被打开，可用于多个 `attach` 会话。
          若 `stdinOnce` 被设置为 `true`, 容器启动时标准输入是打开状态的，在第一个客户端挂接到标准输入之前保持为空。
          接下来一直保持打开状态，接收客户端的数据，直到客户端断开链接。
          此后，标准输入通道一直处于关闭状态，直到容器被再次重启为止。
          当 `stdinOnce` 为 `false` 时，从标准输入读数据的容器进程不会收到 EOF。
          此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
      terminationMessagePath:
        default: /dev/termination-log
        description: |-
          The mount path in the container's filesystem for a termination log file.
          The container's termination message will be written into this file.
          Message written is intended to be brief final status, such as an assertion failure message.
          Will be truncated by the node if greater than 4096 bytes.
          The total message length across all containers will be limited to 12kb.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          给出容器文件系统中的一个挂载路径，用于存放终止日志（Termination Log）文件。
          容器的终止消息会被写到这个文件中。
          写入到这里的消息通常是比较简单的状态描述，例如某种断言失败消息。
          如果消息文字大于 4096 字节，则节点会将其截断。所有容器的终止消息的长度不能超过 12 KB。
          此字段不支持更新。
      terminationMessagePolicy:
        default: File
        description: |-
          This attribute indicates how the termination message should be populated.
          Possible enum values:
          - `"FallbackToLogsOnError"` will read the most recent contents of the container logs for
            the container status message when the container exits with an error and the
            `terminationMessagePath` has no contents.
            The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          - `"File"` is the default behavior and will use the contents of `terminationMessagePath` file
            to populate the container status message on both success and failure.
            Cannot be updated.
        enum:
          - FallbackToLogsOnError
          - File
        type: string
        x-kab-description-zh: |-
          此属性用来标明如何填充终止消息。可选的枚举值包括：

          - `"FallbackToLogsOnError"`：当容器以出错状态结束且 `terminationMessagePath`
            中没有内容时，读取容器日志的最新内容，作为容器的状态消息。日志输出限制为 2048
            字节或者 80 行，取其中较小者。
          - `"File"\`：默认行为，使用 `terminationMessagePath` 所设置文件的内容来填充容器状态消息，
            无论容器是否以成功状态结束。

          此字段不能更新。
      tty:
        default: false
        description: |-
          Whether this container should allocate a TTY for itself.
          When this is set to `true`, the `stdin` attribute has to be `true` as well.
          This is a variable for interactive containers.
          It has specialized use-cases (e.g. debugging) and should not be used for general purpose containers.
        type: boolean
        x-kab-description-zh: |-
          设置此容器是否需要为自己分配一个 TTY 终端。字段设置为 `true` 时，`stdin` 属性也必须为 `true`。
          此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
      volumeDevices:
        description: The list of block devices to be used by the container.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeDevice'
        type: array
        x-kab-description-zh: 容器所使用的块设备列表。
        x-kubernetes-list-map-keys:
          - devicePath
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: devicePath
        x-kubernetes-patch-strategy: merge
      volumeMounts:
        description: Pod volumes to mount into the container's filesystem. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeMount'
        type: array
        x-kab-description-zh: 要挂载到容器内文件系统中的 Pod 层定义的卷。不支持更新。
        x-kubernetes-list-map-keys:
          - mountPath
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: mountPath
        x-kubernetes-patch-strategy: merge
      workingDir:
        description: |-
          Container's working directory. If not specified, the container runtime's default will be used,
          which might be configured in the container image. Cannot be updated.
        type: string
        x-kab-description-zh: |-
          容器的工作目录。如果未设置，将使用容器运行时所给的默认值。
          这一默认值可能会根据容器镜像的配置来设定。
          不支持更新。
    required:
      - image
      - name
    type: object
    x-kab-description-zh: Pod 中运行的一个容器。
  io.k8s.api.core.v1.ContainerImage:
    description: Describe a container image.
    properties:
      names:
        description: Names by which this image is known.
        items:
          type: string
        type: array
        x-kab-description-zh: 引用此镜像时所使用的名称。
        x-kubernetes-list-type: atomic
      sizeBytes:
        description: The size of the image in bytes.
        format: int64
        type: integer
        x-kab-description-zh: 镜像大小（按字节计）。
    required:
      - names
      - sizeBytes
    type: object
    x-kab-description-zh: 此结构描述一个容器镜像。
  io.k8s.api.core.v1.ContainerPort:
    description: A network port in a container.
    properties:
      containerPort:
        description: Port to expose on the Pod's IP address. This must be a valid
          port number between 1 and 65535.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 在容器的 IP 地址上公开的一个端口。此值必须是介于 1 和 65535 之间的合法端口号。
      hostIP:
        description: What host IP to bind the external port to.
        type: string
        x-kab-description-zh: 此外部端口要绑定的主机 IP 地址。
      hostPort:
        description: |-
          Port to expose on the host. If specified, this must be a valid port number between 1 and 65535.
          If the Pod has `hostNetwork` specified, the `hostPort` must match the `containerPort`.
          Most containers do not need this.
          The (`protocol`, `hostIP`, `hostPort`) tunple for all containers must be unique in a Pod.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 在主机上要公开的端口号。如果设置了此字段，取值必须是介于 1 和 65535 之间的合法端口号。 如果
          Pod 设置了 `hostNetwork`，则 `hostPort` 字段的设置必须与 `containerPort` 设置值相同。 大多数容器不存在这类要求。在同一个
          Pod 内，(`protocol`, `hostIP`, `hostPort`) 这一组合是用来唯一识别端口的，因此必须唯一。
      name:
        description: |-
          Name for the port that can be referred to by services.
          If specified, the name must be unique within the Pod.
          The port name can be no more than 15 characters long and it can only contain only `[-a-z0-9]`
          and must contain at least one letter `[a-z]`.
          It must not start or end with a hyphen (`'-'`), nor contain adjacent hyphens.
        maxLength: 15
        type: string
        x-kab-description-zh: |-
          可供 Service 引用的端口名称。如果设置了这个字段，字段值必须在 Pod 范围内唯一。
          端口名称不能超过 15 个字符，且其中只能包含 `[-a-z0-9]` 这些字符。同时，
          端口名中必须包含 `[a-z]` 字符之一。端口名不能以横线（`'-'`）开头或结尾，也不能包含连续的横线。
      protocol:
        default: TCP
        description: Protocol for port.
        enum:
          - SCTP
          - TCP
          - UDP
        type: string
        x-kab-description-zh: 端口对应的协议。
    required:
      - containerPort
      - protocol
    type: object
    x-kab-description-zh: 容器的一个网络端口。
  io.k8s.api.core.v1.ContainerResizePolicy:
    description: ContainerResizePolicy represents resource resize policy for the container.
    properties:
      resourceName:
        description: Name of the resource to which this resource resize policy applies.
        enum:
          - cpu
          - memory
        type: string
        x-kab-description-zh: 此资源变更策略所适用的资源名称。
      restartPolicy:
        default: NotRequired
        description: |-
          Restart policy to apply when specified resource is resized. Valid values include:
          - `"NotRequired"`: Kubernetes will try to resize the container without restarting it, if possible.
            Kubernetes may however choose to restart the container if it is unable to actuate resize
            without a restart. For example, the runtime doesn't support restart-free resizing.
          - `"RestartContainer"`: Kubernetes will resize the container in-place by stopping and
            starting the container when new resources are applied. This is needed for legacy applications.
            For example. Java apps using the `-xmxN` flag which are unable to use resized memory
            without restarting.
        enum:
          - NotRequired
          - RestartContainer
        type: string
        x-kab-description-zh: |-
          当所给的资源发生大小变化时要应用的重启策略。合法的取值可以是：

          - `"NotRequired"`：Kubernetes 会尝试重新设置容器大小且尽可能地避免重启容器。
            如果 Kubernetes 无法完成重设大小操作时，可能会选择重启容器。一种可能的情况是，
            容器运行时不支持就地更改容器规格。
          - `"RestartContainer"`：Kubernetes 会在重新设置资源参数时停止并重启容器来完成容器规格变更操作。
            对于某些遗留的应用系统，可能需要选择这一策略。例如，Java 应用可能会通过
            `-xmxN` 这类参数来设置堆大小，如果不重新启动，新设置的内存资源规划就不会起作用。
    required:
      - resourceName
      - restartPolicy
    type: object
    x-kab-description-zh: ContainerResizePolicy 代表容器的资源变更策略。
  io.k8s.api.core.v1.ContainerState:
    description: |-
      A possible state of the Container. Only one of its members may be specified.
      If none of them is specified, the default one is `\"waiting\"`.
    properties:
      running:
        $ref: '#/definitions/io.k8s.api.core.v1.ContainerStateRunning'
        description: Details about a running Container.
        x-kab-description-zh: 关于一个运行状态中的容器的详细信息。
      terminated:
        $ref: '#/definitions/io.k8s.api.core.v1.ContainerStateTerminated'
        description: |-
          Details about a terminated Container. When updating, if the Pod's `restartPolicy` is not
          `\"Always\"` and the container has terminated, the server checks if the container's exit code
          is non zero.
          If the the Pod's `restartPolicy` is `\"OnFailure\"` and the container's exit code is non zero,
          updating the container to a non-terminated state is allowed, or else the server rejects
          the update request.
        x-kab-description-zh: |-
          关于一个已经终止的容器的详细信息。更新容器状态时，如果 Pod 的 `restartPolicy`
          不是 `"Always"`，并且容器已经终止，服务器检查容器的退出代码是否为零。
          如果 Pod 的 `restartPolicy` 是 `"OnFailure"` 并且容器的退出代码不是零，
          允许将容器状态更新为某个非终止状态，否则服务器会拒绝更新请求。
      waiting:
        $ref: '#/definitions/io.k8s.api.core.v1.ContainerStateWaiting'
        description: Details about a waiting Container.
        x-kab-description-zh: 关于处于等待状态的容器的详细信息。
    type: object
    x-kab-description-zh: |-
      容器的可能状态之一。结构中只能有一个成员是被设置的。如果所有成员都未设置，
      可以认为容器处于 `"waiting"` 状态。
  io.k8s.api.core.v1.ContainerStateRunning:
    description: A running state of a Container.
    properties:
      startedAt:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time at which the Container was last (re-)started.
        x-kab-description-zh: 容器（重新）启动的时间。
    required:
      - startedAt
    type: object
    x-kab-description-zh: 容器的运行状态。
  io.k8s.api.core.v1.ContainerStateTerminated:
    description: A terminated state of a Container.
    properties:
      containerID:
        description: Container's ID in the format `<type>://<container_id>`.
        type: string
        x-kab-description-zh: 格式为 `<type>://<container_id>` 的容器 ID。
      exitCode:
        description: Exit status from the last termination of the Container.
        format: int32
        type: integer
        x-kab-description-zh: 容器上次终止时的退出状态。
      finishedAt:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time at which the Container last terminated.
        x-kab-description-zh: 容器上次终止时的时间戳。
      message:
        description: Message regarding the last termination of the Container.
        type: string
        x-kab-description-zh: 容器上次终止时生成的消息。
      reason:
        description: A (brief) reason from the last termination of the Container.
        type: string
        x-kab-description-zh: 容器上次终止时的简短原因。
      signal:
        description: Signal from the last termination of the Container.
        format: int32
        type: integer
        x-kab-description-zh: 来自上次容器终止时的信号。
      startedAt:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time at which previous execution of the Container started.
        x-kab-description-zh: 容器上次运行时的启动时间。
    required:
      - containerID
      - exitCode
      - finishedAt
      - message
      - reason
      - startedAt
    type: object
    x-kab-description-zh: 容器的终止状态。
  io.k8s.api.core.v1.ContainerStateWaiting:
    description: A waiting state of a Container.
    properties:
      message:
        description: Message regarding why the Container is not yet running.
        type: string
        x-kab-description-zh: 解释为什么容器尚未进入运行状态的消息文字。
      reason:
        description: A (brief) reason the Container is not yet running.
        type: string
        x-kab-description-zh: 关于容器尚未进入运行状态的简短原因描述。
    required:
      - message
      - reason
    type: object
    x-kab-description-zh: 容器的等待状态。
  io.k8s.api.core.v1.ContainerStatus:
    description: The detailed status of a Container.
    properties:
      allocatedResources:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: This is the compute resources allocated for this container by
          the node. Kubelet sets this value to `container[*].resources.requests` upon
          successful Pod admission and after successfully admitting desired Pod resize.
        type: object
        x-kab-description-zh: |-
          节点上分配给次容器的计算资源。kubelet 在成功接收 Pod 或者成功地执行 Pod 变更大小操作之后，
          将此值设置为 `container[*].resources.requests` 的值。
      containerID:
        description: Container's ID in the format `"<type>://<container_id>"`, where
          `<type>` is the container runtime identifier, returned from `Version` call
          of CRI API (for example, `"containerd"`).
        type: string
        x-kab-description-zh: |-
          容器的 ID 字符串。格式为 `"<type>://<container_id>"`，其中 `<type>` 是容器运行时的标识符，
          例如 `"containerd"`）。
      image:
        description: The name of the image the container is running. The container
          image may not match the `image` used in the Pod `spec`, as it may have been
          resolved by the runtime.
        type: string
        x-kab-description-zh: |-
          容器运行所使用的镜像。容器镜像可能与 Pod 的 `spec` 中设置的 `image` 有所不同，
          因为容器运行时可能将其解析为不同的镜像。
      imageID:
        description: ID of the container's image. The image ID may not match the image
          ID of the `image` used in the Pod `spec`, as it may have been resolved by
          the runtime.
        type: string
        x-kab-description-zh: |-
          容器镜像的 ID 字符串。镜像 ID 可能与 Pod 的 `spec` 中所设置的 `image` 的 ID 不同，
          因为容器运行时可能将其解析为不同的镜像。
      lastState:
        $ref: '#/definitions/io.k8s.api.core.v1.ContainerState'
        description: The last termination state of the container to help debug container
          crashes and restarts. This field is not populated if the container is still
          running and `restartCount` is 0.
        x-kab-description-zh: |-
          容器最近一次终止状态，用来调试容器崩溃和重启问题。当容器仍处于运行状态且
          `restartCount` 为 0 时，此字段不会被填充。
      name:
        description: |-
          A DNS_LABEL representing the unique name of the container.
          Each container in a Pod must have a unique name across all container types.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          用来标识容器的唯一性名称，符合 DNS_LABEL 格式。Pod 中每个容器都必须有一个在整个 Pod
          范围内唯一的名称。此字段不能被更新。
      ready:
        description: |-
          This specifies whether the container is currently passing its readiness check.
          The value will change as readiness probes keep executing.If no readiness probes are specified,
          this field defaults to true once the container is fully started (see `started` field).

          The value is typically used to determine whether a container is ready to accept traffic.
        type: boolean
        x-kab-description-zh: |-
          此字段标明容器当前是否通过了其就绪态（Readiness）检查。因为就绪探针会持续运行，
          此字段会被动态更新。如果未设置就绪态探针，则在容器完全启动（参见 `started` 字段）之后，
          此字段会被自动设置为 `true`。

          此字段通常用来判断容器是否已经为接收请求做好准备。
      resources:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceRequirements'
        description: |-
          This represents the compute resource requests and limits that have been successfully enacted
          on the running container after it has been started or has been successfully resized.
        x-kab-description-zh: 此字段标明容器被启动或者成功变更规格之后，当前生效的计算资源请求与限制值。
      restartCount:
        description: This holds the number of times the container has been restarted.
          Kubelet makes an effort to always increment the value, but there are cases
          when the state may be lost due to node restarts and then the value may be
          reset to 0. The value is never negative.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段为容器被重启的次数。kubelet 尽可能在重启重启时增加这一计数值，
          但由于节点被重启等一些原因可能导致此计数无法做到百分百准确。
          遇到不可控的原因时，kubelet 会将此值复位为 0。此值不会变成负数。
      started:
        description: |-
          This indicates whether the container has finished its `postStart` lifecycle hook and
          passed its startup probe. Initialized as `false`, becomes `true` after `startupProbe`
          is considered successful. Resets to `false` when the container is restarted, or
          if kubelet loses state temporarily. In both cases, startup probes will run again.
          Is always true when no `startupProbe` is defined and container is running and has passed
          the `postStart` lifecycle hook. The null value must be treated the same as false.
        type: boolean
        x-kab-description-zh: |-
          此字段用来标明容器是否已经完成其 `postStart` 生命周期回调并且通过了启动探针检查。
          初始值为 `false`，当 `startupProbe` 成功完成检查时变为 `true`。
          容器被重启时或者 kubelet 临时无法跟踪其状态时再次变为 `false`。
          无论哪种情形，启动探针都会再次运行。
          容器上没有定义启动探针时，如果容器通过了 `postStart` 生命周期回调并处于运行状态，此字段值始终为 `true`。
          如果此值未设置（null），应被视为等价于 `false`。
      state:
        $ref: '#/definitions/io.k8s.api.core.v1.ContainerState'
        description: Details about the container's current condition.
        x-kab-description-zh: 容器当前状况的详细信息。
      volumeMounts:
        description: Status of volume mounts.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeMountStatus'
        type: array
        x-kab-description-zh: 卷挂载状态。
        x-kubernetes-list-map-keys:
          - mountPath
        x-kubernetes-list-type: map,
        x-kubernetes-patch-merge-key: mountPath
        x-kubernetes-patch-strategy: merge
    required:
      - containerID
      - image
      - imageID
      - lastState
      - name
      - ready
      - restartCount
      - started
      - state
    type: object
    x-kab-description-zh: 容器的详细状态。
  io.k8s.api.core.v1.DaemonEndpoint:
    description: Information about a single daemon endpoint.
    properties:
      Port:
        description: Port number of the given endpoint.
        format: int32
        type: integer
        x-kab-description-zh: 给定端点的端口号。
    required:
      - Port
    type: object
    x-kab-description-zh: 关于某个 Daemon 端点的信息。
  io.k8s.api.core.v1.DownwardAPIProjection:
    description: |-
      The downward API information to project into a projected volume.
      Note that this is identical to a `downwardAPI` volume source without the default mode.
    properties:
      items:
        description: A list of DownwardAPIVolumeFile objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile'
        minItems: 1
        type: array
        x-kab-description-zh: 由 DownwardAPIVolumeFile 对象构成的一个列表。
        x-kubernetes-list-type: atomic
    required:
      - items
    type: object
    x-kab-description-zh: |-
      要投射到一个投射卷中的 Downward API 信息。
      注意这个结构与 DownwardAPIVolumeSource 几乎完全相同，只是没有默认的模式设置。
  io.k8s.api.core.v1.DownwardAPIVolumeFile:
    description: |-
      Information to create the file containing the Pod field.
      One and only one of `fieldRef` and `resourceFieldRef` must be specified.
    properties:
      fieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectFieldSelector'
        description: |-
          Selects a field of the Pod. Only `"metadata.annotations"`, `"metadata.labels"`,
          `"name"`, `"namespace"` and `"uid"` are supported.
        x-kab-description-zh: |-
          选择 Pod 的字段。目前仅支持 `"metadata.annotations"`、`"metadata.labels"`、
          `"name"`、`"namespace"` 和 `"uid"`。
      mode:
        description: |-
          Mode bits used to set permissions on created files, must be an octal value between
          `0` and `0777` or a decimal value between `0` and `511`.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          If not specified, the volume `defaultMode` will be used.
          This might be in conflict with other options that affect the file mode, like `fsGroup`,
          and the result can be other mode bits set.
        format: int32
        maximum: 511
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          要设置在所创建的文件上的访问权限模式位，必须是介于 `0` 和 `0777` 之间的八进制数，
          或者介于 `0` 和 `511` 之间的十进制数。
          YAML 既能接受八进制数，也能接受十进制数，JSON 要求模式位要用十进制数来表达。
          如果没有设置此字段，则使用卷的 `defaultMode` 设置。
          这里的设置可能与其他影响文件模式的选项（如 `fsGroup`）有冲突，
          所以最终结果可能出现其他模式位被设置的情况。
      path:
        description: |-
          The relative path name of the file to be created.
          Must not be absolute or contain the `".."` path.
          Must be UTF-8 encoded. The first item of the relative path must not start with `".."`.
        type: string
        x-kab-description-zh: |-
          要创建的文件的相对路径名。
          字段值不可以是绝对路径，也不可以包含 `".."`。
          路径字符串必须采用 UTF-8 编码。相对路径中的第一段不可以以 `".."` 开头。
      resourceFieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container. Only resources `limits` and `requests`
          (`limits.cpu`, `limits.memory`, `requests.cpu` and `requests.memory`)
          are currently supported.'
        x-kab-description-zh: |-
          选择容器的某种资源。当前仅支持资源的 `limits` 和 `requests`
          （`limits.cpu`、`limits.memory`、`requests.cpu` 和 `requests.memory`）。
    required:
      - path
    type: object
    x-kab-description-zh: |-
      关于创建包含 Pod 字段的文件的信息。
      `fieldRef` 和 `resourceFieldRef` 必须且只能指定其一。
  io.k8s.api.core.v1.DownwardAPIVolumeSource:
    description: |-
      A volume containing Downward API information.
      Downward API volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        default: '0644'
        description: |-
          Mode bits used to set permissions on created files by default.
          Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file mode, like `fsGroup`,
          and the result can be other mode bits set.
        format: int32
        maximum: 511
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          要设置在所创建的文件上的默认访问权限模式位，必须是介于 `0` 和 `0777` 之间的八进制数，
          或者介于 `0` 和 `511` 之间的十进制数。
          YAML 既能接受八进制数，也能接受十进制数，JSON 要求模式位要用十进制数来表达。
          路径中的目录不受此设置影响。
          这里的设置可能与其他影响文件模式的选项（如 `fsGroup`）有冲突，
          所以最终结果可能出现其他模式位被设置的情况。
      items:
        description: A list of downward API volume file (DownwardAPIVolumeFile) objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeFile'
        type: array
        x-kab-description-zh: 由 Downward API 卷文件（DownwardAPIVolumeFile）对象组成的列表。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      包含 Downward API 信息的一个数据卷。
      Downward API 卷支持属主管理和 SELinux 重打标签操作。
  io.k8s.api.core.v1.EmptyDirVolumeSource:
    description: |-
      Represents an empty directory for a Pod.
      Empty directory volumes support ownership management and SELinux relabeling.
    properties:
      medium:
        default: ''
        description: |-
          Type of storage medium backing this directory.
          The default is `""` which means using the node's default medium.
        enum:
          - ''
          - Memory
        type: string
        x-kab-description-zh: |-
          用来为此目录提供存储介质的后端。
          默认值 `""` 意味着使用节点上的默认介质。
      sizeLimit:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          Total amount of local storage required for this EmptyDir volume.
          The size limit is also applicable for `"Memory"` medium.
          The maximum usage on `"Memory"` medium EmptyDir would be the minimum value between
          the `sizeLimit` specified here and the sum of memory limits of all containers in a Pod.
          The default is nil which means that the limit is undefined.
        x-kab-description-zh: |-
          此 EmptyDir 卷所需要的本地存储大小。
          这里的尺寸限制也适用于 `"Memory"` 介质的情况。
          当 EmptyDir 卷的介质为 `"Memory"` 时，所能够使用的内存量为这里设置的 `sizeLimit`
          和 Pod 中所有容器的内存限制值之和之间的较小者。
          默认值为 nil，即未设置限制。
    type: object
    x-kab-description-zh: |-
      此结构代表 Pod 中的一个空目录。
      空目录卷支持属主管理和 SELinux 重打标签。
  io.k8s.api.core.v1.EndpointAddress:
    description: An object that describes a single IP address.
    properties:
      hostname:
        description: The hostname of this endpoint. Must be valid DNS-1123 label if
          specified.
        type: string
        x-kab-description-zh: 此端点的主机名。字段值如果设置了，必须是合法的 DNS-1123 标签。
      ip:
        description: |-
          The IP of this endpoint. May not be unspecified (`"0.0.0.0"`), loopback (`"127.0.0.0/8"`
          or `"::1"`), link-local (`"169.254.0.0/16"` or `"fe80::/10"`), or link-local multicast
          (`"224.0.0.0/24"` or `"ff02::/16"`).
        type: string
        x-kab-description-zh: |-
          端点的 IP 地址。不可以是未设定地址（`"0.0.0.0"`）、本地回路（`"127.0.0.0/8"` 或 `"::1"`）、
          链路本地（`"169.254.0.0/16"` 或 `"fe80::/10"`）或者链路本地多播（`"224.0.0.0/24"`
          或 `"ff02::/16"`）地址。
      nodeName:
        description: |-
          Node hosting this endpoint. This can be used to determine endpoints local to a node.
          The value must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          托管此端点的节点。此字段可用来确定哪些端点是节点本地的端点。
          字段值必须是合法的 DNS 子域名。
      targetRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: Reference to object providing the endpoint.
        x-kab-description-zh: 对提供端点的对象的引用。
    required:
      - ip
    type: object
    x-kab-description-zh: 用来描述一个 IP 地址的对象。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.EndpointPort:
    description: An object that describes a single port.
    properties:
      appProtocol:
        description: |-
          The application protocol for this port. This is used as a hint for implementations
          to offer richer behavior for protocols that they understand.
          This field follows standard Kubernetes label syntax. Valid values are either:

          - Un-prefixed protocol names: reserved for IANA standard service names
            (as per RFC-6335 and https://www.iana.org/assignments/service-names).
          - Kubernetes-defined prefixed names.
          - Other protocols should use implementation-defined prefixed names such as
            `"mycompany.com/my-custom-protocol"`.

          The Kubernetes-defined prefixed names can be one of:

          - `"kubernetes.io/h2c"` - HTTP/2 prior knowledge over cleartext as described in
            [RFC9113](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-)
          - `"kubernetes.io/ws"` - WebSocket over cleartext as described in
            [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)
          - `"kubernetes.io/wss"` - WebSocket over TLS as described in
            [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)
        type: string
        x-kab-description-zh: |-
          端口对应的应用协议。端点的视线可以将此字段值视为一种提示信息，
          从而提供它们所能够理解的协议的更丰富的行为。
          此字段遵从标准的 Kubernetes 标签语法。合法的取值如下：

          - 无前缀的协议名：保留给 IANA 标准服务名称
            （参见 RFC-6335 和 https://www.iana.org/assignments/service-names）。
          - Kubernetes 定义的、带前缀的名称。
          - 其他协议则需要使用由实现所定义的、带前缀的名称，例如 `"mycompany.com/my-custom-protocol"`。

          其中 Kubernetes 所定义的、带前缀的名称包括：

          - `"kubernetes.io/h2c"` - 采用明文传输的 HTTP/2 先验知识版本，
            如 [RFC9113](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-) 所述。
          - `"kubernetes.io/ws"` - 采用明文传输的 WebSocket，
            如 [RFC6455](https://www.rfc-editor.org/rfc/rfc6455) 所述。
          - `"kubernetes.io/wss"` - 采用 TLS 传输的WebSocket,
            如 [RFC6455](https://www.rfc-editor.org/rfc/rfc6455) 所述。
      name:
        description: |-
          The name of this port. This must match the `name` field in the corresponding Service port.
          Must be a valid DNS-1123 label.
          Optional only if one `port` is defined, otherwise it is required.
        type: string
        x-kab-description-zh: |-
          端口的名称。此字段值必须与对应的 Service 端口的 `name` 字段匹配。
          字段值必须是合法的 DNS-1123 标签。
          如果定义的 `port` 只有一个，则此字段可选，否则必须设置。
      port:
        description: The port number of the endpoint.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 端点的端口号。
      protocol:
        default: TCP
        description: The IP protocol for this port.
        enum:
          - SCTP
          - TCP
          - UDP
        type: string
        x-kab-description-zh: 端口的 IP 协议。
    required:
      - port
      - protocol
    type: object
    x-kab-description-zh: 一个用来描述某个端口的对象。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.EndpointSubset:
    description: |-
      A group of addresses with a common set of ports. The expanded set of endpoints is
      the cartesian product of `addresses` and `ports`. For example, given:

      ```
      {
        "Addresses": [{
          "ip": "10.10.1.1"
        }, {
          "ip": "10.10.2.2"
        }],
        "Ports": [{
          "name": "a",
          "port": 8675
        }, {
          "name": "b",
          "port": 309
        }]
      }
      ```

      The resulting set of endpoints can be viewed as:

      ```
      a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
      b: [ 10.10.1.1:309, 10.10.2.2:309 ]
      ```

      Either `addresses` or `notReadyAddresses` should be specified.
    properties:
      addresses:
        description: |-
          IP addresses which offer the related ports that are marked as ready.
          These endpoints should be considered safe for load balancers and clients to utilize.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EndpointAddress'
        type: array
        x-kab-description-zh: |-
          能够在相关端口上提供服务的，并且已经被标记为就绪的 IP 地址。
          负载均衡器和客户端可以认为使用这些端点是安全的。
        x-kubernetes-list-type: atomic
      notReadyAddresses:
        description: |-
          IP addresses which offer the related ports but are not currently marked as ready because
          they have not yet finished starting, have recently failed a readiness check, or
          have recently failed a liveness check.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EndpointAddress'
        type: array
        x-kab-description-zh: |-
          能够在相关端口上提供服务的，但目前未被标记为就绪的 IP 地址。
          这些地址未能就绪的原因可能是尚未完成启动、最近一次就绪态检查失败或者最近一次活跃态检查失败。
        x-kubernetes-list-type: atomic
      ports:
        description: Port numbers available on the related IP addresses.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EndpointPort'
        type: array
        x-kab-description-zh: 在相关的 IP 地址上可以访问的端口号。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      使用相同端口集合的一组地址。展开后的端点集合是 `addresses` 和 `ports` 集合的笛卡尔积。
      例如，给定：

      ```
      {
        "Addresses": [{
          "ip": "10.10.1.1"
        }, {
          "ip": "10.10.2.2"
        }],
        "Ports": [{
          "name": "a",
          "port": 8675
        }, {
          "name": "b",
          "port": 309
        }]
      }
      ```

      得到的端点集合会是：

      ```
      a: [ 10.10.1.1:8675, 10.10.2.2:8675 ],
      b: [ 10.10.1.1:309, 10.10.2.2:309 ]
      ```

      此结构中必须设置 `addresses` 或者 `notReadyAddresses` 之一。
  io.k8s.api.core.v1.Endpoints.CREATE:
    description: |-
      Endpoints is a collection of endpoints that implement the actual service.
      Example:

      ```json
      "Name": "mysvc",
      "Subsets": [
        {
          "Addresses": [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
          "Ports": [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
        },
        {
          "Addresses": [{"ip": "10.10.3.3"}],
          "Ports": [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
        },
      ]
      ```
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Endpoints
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          if specified.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
      subsets:
        description: |-
          The set of all endpoints is the union of all `subsets` items.
          Addresses are placed into `subsets` according to the IPs they share.
          A single address with multiple ports, some of which are ready and some of which are not
          (because they come from different containers) will result in the address being displayed
          in different subsets for the different ports.
          No address will appear in both `addresses` and `notReadyAddresses` in the same subset.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EndpointSubset'
        type: array
        x-kab-description-zh: |-
          通过对所有 `subnets` 条目取并集所得到的所有端点。
          不同的地址会根据它们所共用的 IP 放置到不同的 `subnets` 中。
          如果某个地址对应多个端口，其中一部分已经就绪，另一部分尚未就绪（因为它们来自别的容器），
          那么这个地址就会因为端口的差别而被显示在不同的子网中。
          不会有同一个地址同时出现在同一个子网的 `addresses` 和 `notReadyAddresses` 中的情况。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      Endpoints 是实际实现某服务的一组端点。例如：

      ```json
      "Name": "mysvc",
      "Subsets": [
        {
          "Addresses": [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
          "Ports": [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
        },
        {
          "Addresses": [{"ip": "10.10.3.3"}],
          "Ports": [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
        },
      ]
      ```
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Endpoints
        version: v1
  io.k8s.api.core.v1.Endpoints.GET:
    description: |-
      Endpoints is a collection of endpoints that implement the actual service.
      Example:

      ```json
      "Name": "mysvc",
      "Subsets": [
        {
          "Addresses": [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
          "Ports": [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
        },
        {
          "Addresses": [{"ip": "10.10.3.3"}],
          "Ports": [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
        },
      ]
      ```
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Endpoints
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      subsets:
        description: |-
          The set of all endpoints is the union of all `subsets` items.
          Addresses are placed into `subsets` according to the IPs they share.
          A single address with multiple ports, some of which are ready and some of which are not
          (because they come from different containers) will result in the address being displayed
          in different subsets for the different ports.
          No address will appear in both `addresses` and `notReadyAddresses` in the same subset.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EndpointSubset'
        type: array
        x-kab-description-zh: |-
          通过对所有 `subnets` 条目取并集所得到的所有端点。
          不同的地址会根据它们所共用的 IP 放置到不同的 `subnets` 中。
          如果某个地址对应多个端口，其中一部分已经就绪，另一部分尚未就绪（因为它们来自别的容器），
          那么这个地址就会因为端口的差别而被显示在不同的子网中。
          不会有同一个地址同时出现在同一个子网的 `addresses` 和 `notReadyAddresses` 中的情况。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - subsets
    type: object
    x-kab-description-zh: |-
      Endpoints 是实际实现某服务的一组端点。例如：

      ```json
      "Name": "mysvc",
      "Subsets": [
        {
          "Addresses": [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
          "Ports": [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
        },
        {
          "Addresses": [{"ip": "10.10.3.3"}],
          "Ports": [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
        },
      ]
      ```
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Endpoints
        version: v1
  io.k8s.api.core.v1.Endpoints.UPDATE:
    description: |-
      Endpoints is a collection of endpoints that implement the actual service.
      Example:

      ```json
      "Name": "mysvc",
      "Subsets": [
        {
          "Addresses": [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
          "Ports": [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
        },
        {
          "Addresses": [{"ip": "10.10.3.3"}],
          "Ports": [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
        },
      ]
      ```
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Endpoints
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          if specified.
        x-kab-description-zh: 标准的对象元数据。对象的名字必须是合法的 DNS 子域名。
      subsets:
        description: |-
          The set of all endpoints is the union of all `subsets` items.
          Addresses are placed into `subsets` according to the IPs they share.
          A single address with multiple ports, some of which are ready and some of which are not
          (because they come from different containers) will result in the address being displayed
          in different subsets for the different ports.
          No address will appear in both `addresses` and `notReadyAddresses` in the same subset.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EndpointSubset'
        type: array
        x-kab-description-zh: |-
          通过对所有 `subnets` 条目取并集所得到的所有端点。
          不同的地址会根据它们所共用的 IP 放置到不同的 `subnets` 中。
          如果某个地址对应多个端口，其中一部分已经就绪，另一部分尚未就绪（因为它们来自别的容器），
          那么这个地址就会因为端口的差别而被显示在不同的子网中。
          不会有同一个地址同时出现在同一个子网的 `addresses` 和 `notReadyAddresses` 中的情况。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      Endpoints 是实际实现某服务的一组端点。例如：

      ```json
      "Name": "mysvc",
      "Subsets": [
        {
          "Addresses": [{"ip": "10.10.1.1"}, {"ip": "10.10.2.2"}],
          "Ports": [{"name": "a", "port": 8675}, {"name": "b", "port": 309}]
        },
        {
          "Addresses": [{"ip": "10.10.3.3"}],
          "Ports": [{"name": "a", "port": 93}, {"name": "b", "port": 76}]
        },
      ]
      ```


      Example:\n\n```\n  \"Name\": \"mysvc\",\n  \"Subsets\": [\n    {\n      \"Addresses\"\
      : [{\"ip\": \"10.10.1.1\"}, {\"ip\": \"10.10.2.2\"}],\n      \"Ports\": [{\"name\"\
      : \"a\", \"port\": 8675}, {\"name\": \"b\", \"port\": 309}]\n    },\n    {\n   \
      \   \"Addresses\": [{\"ip\": \"10.10.3.3\"}],\n      \"Ports\": [{\"name\": \"a\"\
      , \"port\": 93}, {\"name\": \"b\", \"port\": 76}]\n    },\n ]\n```\n"
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Endpoints
        version: v1
  io.k8s.api.core.v1.EndpointsList:
    description: A list of Endpoints objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: List of endpoints.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
        type: array
        x-kab-description-zh: 包含 Endpoints 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - EndpointsList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Endpoints 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: EndpointsList
        version: v1
  io.k8s.api.core.v1.EnvFromSource:
    description: |-
      EnvFromSource represents the sources of environment variables for a container.
      One and only one of `configMapRef` and `secretRef` must be specified.
    properties:
      configMapRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapEnvSource'
        description: The ConfigMap to source environment variable from.
        x-kab-description-zh: 要从中获得环境变量的 ConfigMap。
      prefix:
        description: |-
          An optional identifier to prepend to each key in the ConfigMap or the Secret.
          The string must consist of alphabetic characters, digits, `'_'`, `'-'`, or `'.'`,
          and it must not start with a digit.
          The string cannot be `"."`, `".."` and it cannot start with `".."`.
        type: string
        x-kab-description-zh: |-
          一个可选的标识符，将被添加到来自 ConfigMap 或 Secret 的各个键名上作为其前缀。
          此字符串只能包含字母、数字、`'_'`、`'-'` 或 `'.'`，且不能以数字开头。
          字符串不可以是 `"."` 或者 `".."`，也不能以 `".."` 开头。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretEnvSource'
        description: The Secret to source environment variable from.
        x-kab-description-zh: 要从中获得环境变量的 Secret。
    type: object
    x-kab-description-zh: |-
      EnvFromSource 给出的是某个容器的环境变量来源。
      `configMapRef` 和 `secretRef` 二者必须且仅能设置其一。
  io.k8s.api.core.v1.EnvVar:
    description: An environment variable present in a Container.
    properties:
      name:
        description: |-
          Name of the environment variable.
          The string must consists of alphanumeric characters, `'_'`, `'-'` or `'.'`.
          It cannot be `"."`, `".."`, and it cannot start with `".."` or a digit.
        minLength: 1
        pattern: '[-._a-zA-Z][-._a-zA-Z0-9]*'
        type: string
        x-kab-description-zh: |-
          环境变量的名称。
          此字符串只能包含字母、数字、`'_'`、`'-'` 或 `'.'`。
          字符串不可以是 `"."` 或者 `".."`，也不能以 `".."` 开头。
      value:
        default: ''
        description: |-
          Variable references `$(VAR_NAME)` are expanded using the already defined environment variables
          in the container and any service environment variables.
          If a variable cannot be resolved, the reference in the input string will be unchanged.
          Double dollars (`$$`) are reduced to a single dollar (`$`), which allows for escaping the
          `$(VAR_NAME)` syntax: i.e. "`$$(VAR_NAME)`" will produce the string literal "`$(VAR_NAME)`".
          Escaped references will never be expanded, regardless of whether the variable exists or not.
        type: string
        x-kab-description-zh: |-
          类似 `$(VAR_NAME)` 这种变量引用会使用容器中已经定义的环境变量及服务环境变量来展开。
          如果某个环境变量无法被解析，则输入字符串中的引用会被原样保留下来。
          字符串 `"$$"` 会被处理成 `"$"，从而允许对 `$(VAR_NAME)` 语法进行转义。
          换言之，`"$$(VAR_NAME)"` 会被处理成 `"$(VAR_NAME)"`。
          已转义的引用不会被展开，无论所引用的变量是否存在。
      valueFrom:
        $ref: '#/definitions/io.k8s.api.core.v1.EnvVarSource'
        description: Source for the environment variable's value. Cannot be used if
          `value` is not empty.
        x-kab-description-zh: 环境变量取值的来源。如果 `value` 不为空，不可以设置此字段。
    required:
      - name
    type: object
    x-kab-description-zh: 在容器中存在的一个环境变量。
  io.k8s.api.core.v1.EnvVarSource:
    description: A source for the value of an EnvVar. One and only one of the sources
      can be specified.
    properties:
      configMapKeyRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapKeySelector'
        description: Selects a key of a ConfigMap.
        x-kab-description-zh: 选择某个 ConfigMap 的一个主键。
      fieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectFieldSelector'
        description: |-
          Selects a field of the Pod. Supports `"metadata.name"`, `"metadata.namespace"`,
            `"metadata.labels['<KEY>']"`, `"metadata.annotations['<KEY>']"`,
            `"spec.nodeName"`, `"spec.serviceAccountName"`, `"status.hostIP"`, `"status.podIP"`,
            `"status.podIPs"`.
        x-kab-description-zh: |-
          选择 Pod 的某个字段。支持的字段包括 `"metadata.name"`、`"metadata.namespace"`、
          `"metadata.labels['<KEY>']"`、`"metadata.annotations['<KEY>']"`、`"spec.nodeName"`、
          `"spec.serviceAccountName"`、`"status.hostIP"`、`"status.podIP"` 和 `"status.podIPs"`。
      resourceFieldRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceFieldSelector'
        description: |-
          Selects a resource of the container. Only resources `limits` and `requests` are suppored.
          `"limits.cpu"`, `"limits.memory"`, `"limits.ephemeral-storage"`, `"requests.cpu"`,
          `"requests.memory"` and `"requests.ephemeral-storage"`.
        x-kab-description-zh: |-
          选择容器的的一个资源。仅支持资源的 `limits` 和 `requests`。
          `"limits.cpu"`、`"limits.memory"`、`"limits.ephemeral-storage"`、`"requests.cpu"`、
          `"requests.memory"` 和 `"requests.ephemeral-storage"`。
      secretKeyRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretKeySelector'
        description: Selects a key of a Secret in the Pod's namespace.
        x-kab-description-zh: 选择 Pod 所在名字空间中某个 Secret 的一个主键。
    type: object
    x-kab-description-zh: EnvVar 中变量值的来源。各个来源之中必须且只能设置其一。
  io.k8s.api.core.v1.EphemeralContainer:
    description: |-
      A temporary container that you may add to an existing Pod for user-initiated activities
      such as debugging. Ephemeral containers have no resource or scheduling guarantees,
      and they will not be restarted when they exit or when a Pod is removed or restarted.
      The kubelet may evict a Pod if an ephemeral container causes a Pod to exceed its resource allocation.

      To add an ephemeral containeer, use the `ephemeralcontainers` subresource of an existing Pod.
      Ephemeral containers may not be removed or restarted.
    properties:
      args:
        description: |-
          Arguments to the `command`.
          The container image's `CMD` is used if this is not provided.
          Variable references `$(VAR_NAME)` are expanded using the container's environment.
          If a variable cannot be resolved, the reference in the input string will be unchanged.
          Double dollar (`$$`) are reduced to a single dollar (`$`),
          which allows for escabing the `$(VAR_NAME)` syntax. i.e.
          `"$$(VAR_NAME)"` will produce the string literal `"$(VAR_NAME)"`.
          Escaped references will never be expanded, regardless of whether the variable exists or not.
          Cannot be updated.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          为 `command` 命令提供的参数列表。如果没有设置此字段，则使用容器镜像中的 `CMD` 值。
          `args` 中可以通过语法 `"$(VAR_NAME)"` 引用环境变量，但只能使用容器内部的环境变量。
          如果所给的环境变量无法解析，变量引用不会被处理。可以使用 `"$$"` 来对 `"$"` 进行转义，
          从而可以对 `"$(VAR_NAME)"` 这种语法进行转义。例如，`"$$(VAR_NAME)"` 会被转义为
          `"$(VAR_NAME)"`。被转义后的引用不会再被展开，无论对应的环境变量是否存在。
          此字段不能更新。
        x-kubernetes-list-type: atomic
      command:
        description: |-
          Entrypoint array. The container image's `ENTRYPOINT` is used if this is not provided.
          The command is **NOT** executed within a shell.
          Variable references `"$(VAR_NAME)"` are expanded using the container's environment.
          If a variable cannot be resolved, the reference in the input string will be unchanged.
          Double dollars (`"$$"`) are reduced to a single dollar (`"$"`), which allows for
          escaping the `"$(VAR_NAME)"` syntax: i.e. the `"$(VAR_NAME)"` will produce the string literal
          `"$(VAR_NAME)"`.
          Escaped references will never be expanded, regardless of whether the variable exists or not.
          Cannot be updated.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          描述容器入口点的数组。如果没有提供 `command`，则使用镜像中的 `ENTRYPOINT` 设置。
          这里所给的命令不会在一个 Shell 中执行。类似 `$(VAR_NAME)` 这类环境变量会使用容器的环境变量值展开。
          如果所引用的变量无法被解析，则对应的引用字符串不会被处理。可以使用 `$$` 来对 `$` 进行转义，
          从而可以对 `$(VAR_NAME)` 这种语法进行转义。例如，`$$(VAR_NAME)` 会被转义为
          `$(VAR_NAME)`。被转义后的引用不会再被展开，无论对应的环境变量是否存在。
          此字段只能在创建时设置，不能更新。
        x-kubernetes-list-type: atomic
      env:
        description: List of environment variables to set in the container. Cannot
          be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvVar'
        type: array
        x-kab-description-zh: 需要为容器设置的环境变量。只能创建时设置，不能更新。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      envFrom:
        description: |-
          List of sources to populate environment variables in the container.
          The keys defined within a source must be a valid DNS subdomain name.
          They must consist of alphanumeric characters, `'.'`, `'-'`, or `'_'`.
          They cannot start with `".."` or a digit. They cannot be `"."` or `".."`.
          All invalid keys will be reported as an event when the container is starting.
          When a key exists in multiple sources, the value associated with the last source
          will take precedence.
          Values defined by an `env` with a duplicate key will take precedence.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EnvFromSource'
        type: array
        x-kab-description-zh: |-
          此字段为一个列表，给出一组来源，用来为容器设置环境变量。
          每个来源定义所使用的键名必须是合法的 DNS 子域名，其中只能包含字母、数字以及
          `'.'`、`'-'` 或者 `'_'`。键名不能以 `".."` 或者数字开头，也不可以是 `"."` 或者 `".."`。
          对于所有的非法键名，在容器启动时都会以事件形式形成报告。如果某个键名在多个来源中同时存在，
          优先选择最后一个来源中的键值。如果 `env` 中存在重名的键名，以 `env` 中的定义为准。
          此字段不可更新。
        x-kubernetes-list-type: atomic
      image:
        description: Container image name. The image string cannot contain leading
          or tracing whitespaces.
        type: string
        x-kab-description-zh: 容器镜像名称。`image` 字符串不能以空白符号开头或结尾。
      imagePullPolicy:
        description: |-
          Image pull policy. Defaults to `"Always"` if the `":latest"` tag is specified,
          or `"IfNotPresent"` otherwise. Possible enum values:
          - `"Always"` means that kubelet always attempts to pull the latest image.
            Container will fail if the pull fails.
          - `"IfNotPresent"` means that kubelet pulls if the image isn't present on disk.
            Container will fail if the image isn't present and the pull fails.
          - `"Never"` means that kubelet never pulls an image, but only uses a local image.
            Container will fail if the image isn't present.
          Cannot be updated.
        enum:
          - Always
          - Never
          - IfNotPresent
        minLength: 1
        type: string
        x-kab-description-zh: |-
          镜像拉取策略设置。如果使用了标签为 `":latest"` 的镜像，则默认值为 `"Always"`，
          否则默认值为 `"IfNotPresent"`。合法的取值包括：

          - `"Always"`：意味着 kubelet 总会尝试去拉取最新的镜像。如果镜像拉取不成功，则容器也会失败。
          - `"IfNotPresent"`：kubelet 会在磁盘上不存在镜像时才拉取镜像。当镜像不存在并且拉取操作失败时，容器也失败。
          - `"Never"`：kubelet 不会发起镜像拉取操作，只使用本地已存在的镜像。如果镜像不存在则容器会失败。

          此字段不可更新。
      name:
        description: |-
          Name of the ephemeral container specified as a DNS label.
          This name must be unique among all containers, init containers and ephemeral containers.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          临时容器的名称，名称要符合 DNS 标签格式要求。
          此名称要在所有容器、初始化容器和临时容器中唯一。
      resizePolicy:
        description: Resources resize policy for the container.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerResizePolicy'
        type: array
        x-kab-description-zh: 容器的资源大小重设策略。
        x-kubernetes-list-type: atomic
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.SecurityContext'
        description: |-
          The security options the ephemeral container should be run with.
          If set, the fields of `securityContext` override the equivalent fields of Pod `securityContext`.
        x-kab-description-zh: 容器运行的安全选项。如果设置了这个字段，则其中的设置值会重载 Pod 层面的 `securityContext`
          设置。
      stdin:
        default: false
        description: |-
          Whether this container should allocate a buffer for stdin in the container runtime.
          If this is not set, reads from stdin in the container will always result in EOF.
        type: boolean
        x-kab-description-zh: |-
          用来指示容器是否要从容器运行时那里分配用于标准输入的缓冲区。
          若未设置此字段，则容器内读取标准输入时总会读到 EOF。
      stdinOnce:
        default: false
        description: |-
          Whether the container runtime should close the stdin channel after it has been opened by a single
          attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions.
          If `stdinOnce` is set to `true`, stdin is opened on container start,
          is empty until the first client attaches to stdin, and then remains open and accepts data
          until the client disconnects, at which time stdin is closed and remains closed until
          the container is restarted.
          If this flag is false, a container processes that reads from stdin will never receive an EOF.
        type: boolean
        x-kab-description-zh: |-
          指示容器运行时是否应该在为某个 `attach` 操作打开标准输入通道之后将其关闭。
          当 `stdin` 设置为 `true` 时，标准输入的数据流会一直被打开，可用于多个 `attach` 会话。
          若 `stdinOnce` 被设置为 `true`, 容器启动时标准输入是打开状态的，在第一个客户端挂接到标准输入之前保持为空。
          接下来一直保持打开状态，接收客户端的数据，直到客户端断开链接。
          此后，标准输入通道一直处于关闭状态，直到容器被再次重启为止。
          当 `stdinOnce` 为 `false` 时，从标准输入读数据的容器进程不会收到 EOF。
          此字段是提供给交互式容器使用的，设计所针对的场景主要是调试，不应该用于一般目的的容器。
      targetContainerName:
        description: |-
          If set, the name of the Container from the containing Pod that this ephemeral container targets.
          The ephemeral container will be run in the namespaces (IPC, PID, etc) of the target Container.
          If not set then the ephemeral container uses the namespaces configured in the Pod spec.

          The container runtime must implement support for this feature.
          If the runtime does not support namespace targeting then the result of setting this field
          is undefined.
        type: string
        x-kab-description-zh: |-
          如果设置了此字段，则其所表示的是所在 Pod 中某个容器的名称，该容器是此临时容器的目标。
          临时容器会在目标容器的名字空间（IPC、PID 等）中运行。
          如果不设置此字段，则临时容器会使用 Pod 规约中配置的名字空间。

          容器运行时必须实现对此特性的支持。
          如果容器运行时不支持设置目标名字空间，则设置此字段的后果是不确定的。
      terminationMessagePath:
        default: /dev/termination-log
        description: File path to which the container's termination message will be
          written. Message written is intended to be brief final status, such as an
          assertion failure message. Will be truncated by the node if greater than
          4096 bytes. The total message length across all containers will be limited
          to 12kb. Cannot be updated.
        type: string
        x-kab-description-zh: |-
          容器的终止消息要写入的文件路径。
          写入到这里的消息通常是比较简单的状态描述，例如某种断言失败消息。
          如果消息文字大于 4096 字节，则节点会将其截断。所有容器的终止消息的长度不能超过 12 KB。
          此字段不支持更新。
      terminationMessagePolicy:
        default: File
        description: |-
          This attribute indicates how the termination message should be populated.
          - `"File"`: use the contents of `terminationMessagePath` file to populate the container status
            message on both success and failure.
          - `"FallbackToLogsOnError"`: use the last chunk of container log output if the termination
            message file is empty and the container exited with an error.
          The log output is limited to 2048 bytes or 80 lines, whichever is smaller.
          Cannot be updated.
        enum:
          - FallbackToLogsOnError
          - File
        type: string
        x-kab-description-zh: |-
          此属性用来标明如何填充终止消息。

          - `"File"\`：默认行为，使用 `terminationMessagePath` 所设置文件的内容来填充容器状态消息，
            无论容器是否以成功状态结束。

          - `"FallbackToLogsOnError"`：当容器以出错状态结束且终止消息文件为空时，
            读取容器日志的最新数据块，作为容器的状态消息。
            日志输出限制为 2048 字节或者 80 行，取其中较小者。

          此字段不能更新。
      tty:
        default: false
        description: Whether this container should allocate a TTY for itself, also
          requires `stdin` to be true.
        type: boolean
        x-kab-description-zh: 设置此容器是否需要为自己分配一个 TTY 终端，设置此字段时要求 `stdin` 属性也必须为 `true`。
      volumeDevices:
        description: The list of block devices to be used by the container.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeDevice'
        type: array
        x-kab-description-zh: 容器所使用的块设备列表。
        x-kubernetes-list-map-keys:
          - devicePath
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: devicePath
        x-kubernetes-patch-strategy: merge
      volumeMounts:
        description: |-
          Pod volumes to mount into the container's filesystem.
          Subpath mounts are not allowed for ephemeral containers.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeMount'
        type: array
        x-kab-description-zh: |-
          要挂载到容器内文件系统中的 Pod 层定义的卷。对于临时容器而言，不支持子路径挂载。
          不支持更新。
        x-kubernetes-list-map-keys:
          - mountPath
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: mountPath
        x-kubernetes-patch-strategy: merge
      workingDir:
        description: |-
          Container's working directory. If not specified, the container runtime's default will be used,
          which might be configured in the container image.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          容器的工作目录。如果未设置，将使用容器运行时所给的默认值。
          这一默认值可能会根据容器镜像的配置来设定。
          不支持更新。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      一个你可以添加到现有 Pod 的临时容器，可用于用户发起的活动，例如调试。
      临时容器没有资源保障或者调度保障，这些容器在自身退出或者 Pod 被删除或重启时不会被重启。
      kubelet 可以在临时容器导致 Pod 超出其资源分配量时驱逐该 Pod。

      要添加临时容器，需要使用现有 Pod 的 `ephemeralcontainers` 子资源。
      临时容器不可以被删除或者重启。
  io.k8s.api.core.v1.EphemeralVolumeSource:
    description: An ephemeral volume that is handled by a normal storage driver.
    properties:
      volumeClaimTemplate:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimTemplate'
        description: |-
          This template is used to create a stand-alone PVC to provision the volume.
          The Pod in which this EphemeralVolumeSource is embedded will be the owner of the PVC,
          i.e. the PVC will be deleted together with the Pod.
          The name of the PVC will be `"<pod name>-<volume name>"`,
          where `"<volume name>"` is the name from the `spec.volumes` array entry.
          Pod validation will reject the Pod if the concatenated name is not valid for a PVC
          (for example, too long).

          An existing PVC with that name that is not owned by the Pod will **not** be used for the Pod
          to avoid using an unrelated volume by mistake.
          Starting the Pod is then blocked until the unrelated PVC is removed.
          If such a pre-created PVC is meant to be used by the Pod, the PVC has to be updated with
          an owner reference to the Pod once the Pod exists.
          Normally this should not be necessary, but it may be useful when manually reconstructing
          a broken cluster.

          This field is read-only and no changes will be made by Kubernetes to the PVC after
          it has been created.
        x-kab-description-zh: |-
          此模板用来创建一个独立的 PVC 来制备所需的存储卷。
          EphemeralVolumeSource 所在的 Pod 会成为 PVC 的属主，因此 PVC 会随着 Pod 一起删除。
          PVC 的名称为 `"<Pod 名称>-<卷名称>"`，其中 `"<卷名称>"` 来自于 `spec.volumes` 数组表项。
          如果串接形成的名字对于 PVC 而言是非法的（例如，名字过长），则 Pod 的合法性检查逻辑会拒绝此 Pod。
          如果有其他 PVC 的名字与此 PVC 名字相同，但其属主又不是当前 Pod，这类 PVC 不会被当前
          Pod 使用，从而避免错误地使用一个不相干的数据卷。
          出现重名情况时，当前的 Pod 启动过程会被阻塞，直到重名的 PVC 被移除为止。
          如果希望 Pod 使用这样一个预先创建的 PVC，则该 PVC 必须被更新，将其属主引用更新为此 Pod。
          通常没有必要这样做，不过当手动重建一个已经出问题的集群时可能是有用的。

          此字段是只读的，PVC 被创建之后，Kubernetes 不会对其执行变更操作。
    required:
      - volumeClaimTemplate
    type: object
    x-kab-description-zh: 由普通存储驱动负责处理的临时数据卷。
  io.k8s.api.core.v1.Event.CREATE:
    description: |-
      Event is a report of an event somewhere in the cluster.
      Events have a limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given `reason` reflecting
      a consistent underlying trigger, or the continued existence of events with that `reason`.
      Events should be treated as informative, best-effort, supplemental data.
    properties:
      action:
        description: What action was taken/failed regarding to the involved object.
        type: string
        x-kab-description-zh: 就所牵涉的对象而言，采取了的（或者失败了的）操作是什么。
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      count:
        description: The number of times this event has occurred.
        format: int32
        type: integer
        x-kab-description-zh: 事件的发生次数。
      eventTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: Time when this Event was first observed.
        x-kab-description-zh: 第一次观测到此事件的时间。
      firstTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the event was first recorded. (Time of server
          receipt is in `metadata`.)
        x-kab-description-zh: 事件第一次记录的时间。(服务器收到事件的时间记录在 `metadata` 中）。
      involvedObject:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: The object that this event is about. The namespace must match
          that of the Event.
        x-kab-description-zh: 此事件所关联的对象。名字空间必须与 Event 的名字空间对应。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Event
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      lastTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the most recent occurrence of this Event was
          recorded.
        x-kab-description-zh: 事件最近一次出现并被记录的时间。
      message:
        description: A human-readable description of the status of this operation.
        type: string
        x-kab-description-zh: 关于此操作的状态的一种人类可读的描述。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      reason:
        description: |-
          This should be a short, machine understandable string that gives
          the reason for the transition into the object's current status.
        type: string
        x-kab-description-zh: 此字段为较短的、机器可理解的字符串，给出对象进入当前状态的原因。
      related:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: Optional secondary object for more complex actions.
        x-kab-description-zh: 可选字段，关联另一个对象，用于较复杂的动作。
      reportingComponent:
        description: Name of the controller that emitted this Event, e.g. `"kubernetes.io/kubelet"`.
        type: string
        x-kab-description-zh: 生成此 Event 的控制器的名称，例如：`"kubernetes.io/kubelet"`。
      reportingInstance:
        description: ID of the controller instance, e.g. `"kubelet-xyzf"`.
        type: string
        x-kab-description-zh: 控制器实例的 ID。例如，`"kubelet-xyzf"`。
      series:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSeries'
        description: Data about the Event series this Event represents or nil if it's
          a singleton Event.
        x-kab-description-zh: 关于此 Event 所代表的 Event 序列的数据。对于单实例 Event 而言，此字段为 nil。
      source:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSource'
        description: The component reporting this Event. Should be a short machine
          understandable string.
        x-kab-description-zh: 报告此 Event 的组件。取值是一个机器可理解的较短字符串。
      type:
        description: Type of this event. New types could be added in the future.
        enum:
          - Normal
          - Warning
        type: string
        x-kab-description-zh: 此事件的类型。未来可能会添加新的类型。
    required:
      - apiVersion
      - kind
      - involvedObject
      - metadata
    type: object
    x-kab-description-zh: |-
      Event 是集群中某处发生的事件的报告。Event 数据的保存时长有限，其触发源和消息也会随着时间变化。
      Event 的用户不应基于给定 `reason` 的事件的时间推测是下层触发源是否一致，以及相同 `reason`
      的事件是否会一直存在。Event 应该被视作一种通知性质的、尽力而为的、补充说明类型的数据。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Event
        version: v1
  io.k8s.api.core.v1.Event.GET:
    description: |-
      Event is a report of an event somewhere in the cluster.
      Events have a limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given `reason` reflecting
      a consistent underlying trigger, or the continued existence of events with that `reason`.
      Events should be treated as informative, best-effort, supplemental data.
    properties:
      action:
        description: What action was taken/failed regarding to the involved object.
        type: string
        x-kab-description-zh: 就所牵涉的对象而言，采取了的（或者失败了的）操作是什么。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      count:
        description: The number of times this event has occurred.
        format: int32
        type: integer
        x-kab-description-zh: 事件的发生次数。
      eventTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: Time when this Event was first observed.
        x-kab-description-zh: 第一次观测到此事件的时间。
      firstTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the event was first recorded. (Time of server
          receipt is in `metadata`.)
        x-kab-description-zh: 事件第一次记录的时间。(服务器收到事件的时间记录在 `metadata` 中）。
      involvedObject:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: The object that this event is about. The namespace must match
          that of the Event.
        x-kab-description-zh: 此事件所关联的对象。名字空间必须与 Event 的名字空间对应。
      kind:
        description: A string value representing the REST resource
        enum:
          - Event
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      lastTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the most recent occurrence of this Event was
          recorded.
        x-kab-description-zh: 事件最近一次出现并被记录的时间。
      message:
        description: A human-readable description of the status of this operation.
        type: string
        x-kab-description-zh: 关于此操作的状态的一种人类可读的描述。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      reason:
        description: |-
          This should be a short, machine understandable string that gives
          the reason for the transition into the object's current status.
        type: string
        x-kab-description-zh: 此字段为较短的、机器可理解的字符串，给出对象进入当前状态的原因。
      related:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: Optional secondary object for more complex actions.
        x-kab-description-zh: 可选字段，关联另一个对象，用于较复杂的动作。
      reportingComponent:
        description: Name of the controller that emitted this Event, e.g. `"kubernetes.io/kubelet"`.
        type: string
        x-kab-description-zh: 生成此 Event 的控制器的名称，例如：`"kubernetes.io/kubelet"`。
      reportingInstance:
        description: ID of the controller instance, e.g. `"kubelet-xyzf"`.
        type: string
        x-kab-description-zh: 控制器实例的 ID。例如，`"kubelet-xyzf"`。
      series:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSeries'
        description: Data about the Event series this Event represents or nil if it's
          a singleton Event.
        x-kab-description-zh: 关于此 Event 所代表的 Event 序列的数据。对于单实例 Event 而言，此字段为 nil。
      source:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSource'
        description: The component reporting this Event. Should be a short machine
          understandable string.
        x-kab-description-zh: 报告此 Event 的组件。取值是一个机器可理解的较短字符串。
      type:
        description: Type of this event. New types could be added in the future.
        enum:
          - Normal
          - Warning
        type: string
        x-kab-description-zh: 此事件的类型。未来可能会添加新的类型。
    required:
      - action
      - apiVersion
      - count
      - eventTime
      - firstTimestamp
      - involvedObject
      - kind
      - lastTimestamp
      - message
      - metadata
      - reason
      - related
      - reportingComponent
      - reportingInstance
      - series
      - source
      - type
    type: object
    x-kab-description-zh: |-
      Event 是集群中某处发生的事件的报告。Event 数据的保存时长有限，其触发源和消息也会随着时间变化。
      Event 的用户不应基于给定 `reason` 的事件的时间推测是下层触发源是否一致，以及相同 `reason`
      的事件是否会一直存在。Event 应该被视作一种通知性质的、尽力而为的、补充说明类型的数据。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Event
        version: v1
  io.k8s.api.core.v1.Event.UPDATE:
    description: |-
      Event is a report of an event somewhere in the cluster.
      Events have a limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given `reason` reflecting
      a consistent underlying trigger, or the continued existence of events with that `reason`.
      Events should be treated as informative, best-effort, supplemental data.
    properties:
      action:
        description: What action was taken/failed regarding to the involved object.
        type: string
        x-kab-description-zh: 就所牵涉的对象而言，采取了的（或者失败了的）操作是什么。
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      count:
        description: The number of times this event has occurred.
        format: int32
        type: integer
        x-kab-description-zh: 事件的发生次数。
      eventTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: Time when this Event was first observed.
        x-kab-description-zh: 第一次观测到此事件的时间。
      firstTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the event was first recorded. (Time of server
          receipt is in `metadata`.)
        x-kab-description-zh: 事件第一次记录的时间。(服务器收到事件的时间记录在 `metadata` 中）。
      involvedObject:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: The object that this event is about. The namespace must match
          that of the Event.
        x-kab-description-zh: 此事件所关联的对象。名字空间必须与 Event 的名字空间对应。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Event
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      lastTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the most recent occurrence of this Event was
          recorded.
        x-kab-description-zh: 事件最近一次出现并被记录的时间。
      message:
        description: A human-readable description of the status of this operation.
        type: string
        x-kab-description-zh: 关于此操作的状态的一种人类可读的描述。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      reason:
        description: |-
          This should be a short, machine understandable string that gives
          the reason for the transition into the object's current status.
        type: string
        x-kab-description-zh: 此字段为较短的、机器可理解的字符串，给出对象进入当前状态的原因。
      related:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: Optional secondary object for more complex actions.
        x-kab-description-zh: 可选字段，关联另一个对象，用于较复杂的动作。
      reportingComponent:
        description: Name of the controller that emitted this Event, e.g. `"kubernetes.io/kubelet"`.
        type: string
        x-kab-description-zh: 生成此 Event 的控制器的名称，例如：`"kubernetes.io/kubelet"`。
      reportingInstance:
        description: ID of the controller instance, e.g. `"kubelet-xyzf"`.
        type: string
        x-kab-description-zh: 控制器实例的 ID。例如，`"kubelet-xyzf"`。
      series:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSeries'
        description: Data about the Event series this Event represents or nil if it's
          a singleton Event.
        x-kab-description-zh: 关于此 Event 所代表的 Event 序列的数据。对于单实例 Event 而言，此字段为 nil。
      source:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSource'
        description: The component reporting this Event. Should be a short machine
          understandable string.
        x-kab-description-zh: 报告此 Event 的组件。取值是一个机器可理解的较短字符串。
      type:
        description: Type of this event. New types could be added in the future.
        enum:
          - Normal
          - Warning
        type: string
        x-kab-description-zh: 此事件的类型。未来可能会添加新的类型。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      Event 是集群中某处发生的事件的报告。Event 数据的保存时长有限，其触发源和消息也会随着时间变化。
      Event 的用户不应基于给定 `reason` 的事件的时间推测是下层触发源是否一致，以及相同 `reason`
      的事件是否会一直存在。Event 应该被视作一种通知性质的、尽力而为的、补充说明类型的数据。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Event
        version: v1
  io.k8s.api.core.v1.EventList:
    description: A list of Event objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Event objects
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
        type: array
        x-kab-description-zh: 包含 Event 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - EventList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Event 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: EventList
        version: v1
  io.k8s.api.core.v1.EventSeries:
    description: |-
      EventSeries contain information on series of Events, i.e. thing that
      was/is happening continuously for some time.
    properties:
      count:
        description: Number of occurrences in this series up to the last heartbeat
          time
        format: int32
        type: integer
        x-kab-description-zh: 到最近一次心跳时间为止序列中的事件个数。
      lastObservedTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: Time of the last occurrence observed.
        x-kab-description-zh: 最近一次发生的时间。
    required:
      - count
      - lastObservedTime
    type: object
    x-kab-description-zh: EventSeries 包含 Event 序列的信息，Event 序列是在一段时间内持续发生的事情。
  io.k8s.api.core.v1.EventSource:
    description: EventSource contains information for an Event.
    properties:
      component:
        description: Component from which the Event is generated.
        type: string
        x-kab-description-zh: 生成 Event 的组件。
      host:
        description: Node name on which the Event is generated.
        type: string
        x-kab-description-zh: 生成 Event 的节点名称。
    required:
      - component
      - host
    type: object
    x-kab-description-zh: EventSource 包含某个 Event 的信息。
  io.k8s.api.core.v1.ExecAction:
    description: This describes a _run in container_ action.
    properties:
      command:
        description: |-
          The command line to execute inside the container.
          The working directory for the command is root (`"/"`) in the container.
          The command is simply `exec`'ed, it is not run inside a shell, so
          traditional shell instructions (`'|'`, etc) won't work.
          To use a shell, you need to explicitly call out to that shell.
          Exit status of 0 is treated as live/healthy and non-zero is unhealthy.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          要在容器内执行的命令行。命令的工作目录是容器内的根目录（`"/"`）。
          所给的命令是通过调用 `exec()` 来直接执行的，命令没有独立的 Shell，因此传统的 Shell
          命令（如 `"|"` 等等）都无法工作。
          如果希望使用 Shell，你需要显式地调用该 Shell。
          退出状态为 0 被视为活跃、健康，而非零值意味着不健康。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 此结构描述一个需要在容器内执行的动作。
  io.k8s.api.core.v1.FCVolumeSource:
    description: |-
      A Fibre Channel volume to mount. Fibre Channel volumes can only be mounted as `"ReadWriteOnce"`.
      Fibre Channel volumes support ownership management and SELinux relabeling.
      Either `wwids` or combination of `targetWWNs` and `lun` must be set, but not both.
    properties:
      fsType:
        default: ext4
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统类型。所选文件系统类型必须被宿主操作系统支持。
      lun:
        description: FC target LUN number.
        format: int32
        maximum: 255
        minimum: 0
        type: integer
        x-kab-description-zh: FC 目标 LUN 号。
      readOnly:
        default: false
        description: Force the volume to be mouned in read-only mode.
        type: boolean
        x-kab-description-zh: 强制卷以只读模式挂载。
      targetWWNs:
        description: FC target worldwide names (WWNs).
        items:
          type: string
        type: array
        x-kab-description-zh: FC 目标的全球名称（Worldwide Name，WWN）列表。
        x-kubernetes-list-type: atomic
      wwids:
        description: FC volume world wide identifiers (WWIDs).
        items:
          type: string
        type: array
        x-kab-description-zh: FC 卷的全球标识符（Worldwide ID，WWID）列表。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      要挂载的一个光纤通道（Fibre Channel）卷。光线通道卷的挂载模式只能是 `"ReadWriteOnce"`。
      光纤通道卷支持属主管理和 SELinux 重打标签操作。
      `wwids` 和 `targetWWNs` 与 `lun` 的组合必须且只能设置其一。
  io.k8s.api.core.v1.FlexPersistentVolumeSource:
    description: A generic persistent volume resource that is provisioned/attached
      using an exec-based plugin.
    properties:
      driver:
        description: The name of the driver to use.
        minLength: 1
        type: string
        x-kab-description-zh: 要使用的驱动名称。
      fsType:
        description: |-
          Filesystem type to mount. Must be a filesystem type supported by the host operating system.
          The default filesystem depends on the FlexVolume script.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。必须是宿主操作系数所支持的文件系统类型之一。
          默认的文件系统取决于 FlexVolume 脚本。
      options:
        additionalProperties:
          type: string
        description: |-
          Extra command options if any.
          If the key contains `'/'`, the subsring before `'/'` is treated as the namespace.
          The namespace must not have suffix like `"k8s.io"` or `"kubernetes.io"` which are reserved.
        type: object
        x-kab-description-zh: |-
          额外的命令选项（如果有的话）。
          如果键名中包含了 `'/'`，则 `'/'` 之前的字符串被当做名字空间来处理。
          名字空间不可以使用保留的后缀字符串，如 `"k8s.io"` 或者 `"kubernetes.io"`。
      readOnly:
        default: false
        description: Force the volume to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载数据卷。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          A reference to the Secret object containing sensitive information to pass to the plugin scripts.
          This may be empty if no Secret object is specified.
          If the Secret object contains more than one secret, all secrets are passed to the plugin scripts.
        x-kab-description-zh: |-
          对某个 Secret 对象的引用，其中包含要传递给插件脚本的敏感信息。
          如果不需要 Secret 对象时，此字段可以为空。
          如果 Secret 中包含的数据条目不止一条，则所有的数据条目都会被传递给插件脚本。
    required:
      - driver
    type: object
    x-kab-description-zh: 一种使用基于 exec 插件来制备和挂接的、通用的持久卷资源。
  io.k8s.api.core.v1.FlexVolumeSource:
    description: A generic volume resource that is provisioned/attached using an exec
      based plugin.
    properties:
      driver:
        description: The name of the driver to use for this volume.
        type: string
        x-kab-description-zh: 此卷要使用的驱动名称。
      fsType:
        description: |-
          Filesystem type to mount. Must be a filesystem type supported by the host operating system.
          For example: `"ext4"`, `"xfs"`, `"ntfs"`. The default filesystem depends on the FlexVolume script.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。必须是宿主操作系数所支持的文件系统类型之一。如：`"ext4"`, `"xfs"`, `"ntfs"`。
          默认的文件系统取决于 FlexVolume 脚本。
      options:
        additionalProperties:
          type: string
        description: |-
          Extra command options if any.
          The option name can be namespaced but the namespace cannot use `"kubernetes.io"` or `".k8s.io"`
          as its suffix. The option name cannot use these suffix either.
        type: object
        x-kab-description-zh: |-
          额外的命令选项（如果有的话）。
          选项名字是可以带有名字空间的，但是名字空间不可以使用保留的后缀字符串，
          如 `"k8s.io"` 或者 `"kubernetes.io"`。选项名称也不可以使用这些后缀。
      readOnly:
        default: false
        description: |-
          Defaults to `false` (read/write).
          `readOnly` here will force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: |-
          默认值为 `false`（可读可写模式）。
          这里设置的 `readOnly` 会对 `volumeMounts` 的 `readOnly` 设置起到限制作用。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: |-
          A reference to the Secret object containing sensitive information to pass to the plugin scripts.
          This may be empty if no Secret object is specified.
          If the Secret object contains more than one secret, all secrets are passed to the plugin scripts.
        x-kab-description-zh: |-
          对某个 Secret 对象的引用，其中包含要传递给插件脚本的敏感信息。
          如果不需要 Secret 对象时，此字段可以为空。
          如果 Secret 中包含的数据条目不止一条，则所有的数据条目都会被传递给插件脚本。
    required:
      - driver
    type: object
    x-kab-description-zh: 一种使用基于 exec 插件来制备和挂接的、通用的卷资源。
  io.k8s.api.core.v1.FlockerVolumeSource:
    description: |-
      A Flocker volume mounted by the Flocker agent.
      One and only one of `datasetName` and `datasetUUID` should be set.
      Flocker volumes do not support ownership management or SELinux relabeling.
    properties:
      datasetName:
        description: |-
          Name of the dataset stored as metadata.
          This is the name on the dataset for Flocker, should be considered as deprecated.
          The name cannot contain `'/'` if specified.
        type: string
        x-kab-description-zh: |-
          以元数据形式存储的、数据集的名称。
          此字段名为 Flocker 数据集的名称，应该被视为已经过时。
          如果设置此字段，则字段值中不能包含 `'/'`。
      datasetUUID:
        description: The unique identifier of a Flocker dataset.
        type: string
        x-kab-description-zh: Flocker 数据集的唯一标识。
    type: object
    x-kab-description-zh: |-
      由 Flocker 代理所挂载的一个 Flocker 卷。`datasetName` 和 `datasetUUID` 二者必须且只能设置其一。
      Flocker 卷不支持属主管理或者 SELinux 重打标签操作。
  io.k8s.api.core.v1.GCEPersistentDiskVolumeSource:
    description: |-
      A Persistent Disk resource in Google Compute Engine (GCE).
      A GCE PD must exist before being mounted to a container.
      The disk must also be in the same GCE project and zone as the kubelet.
      A GCE PD can only be mounted as `"ReadWriteOnce"` or `"ReadOnlyMany"`.
      GCE PDs support ownership management and SELinux relabeling.
    properties:
      fsType:
        default: ext4
        description: |-
          Filesystem type of the volume.
          The filesystem type must be supported by the host operating system.
          For example, `"ext4"`, `"xfs"`, `"ntfs"`.
        type: string
        x-kab-description-zh: 卷的文件系统类型。这一文件系统类型必须被宿主操作系统所支持。例如，`"ext4"`, `"xfs"`,
          `"ntfs"`。
      partition:
        description: |-
          The partition to mount in the volume. If omitted, the default is to mount by volume name.
          For example, for volume `"/dev/sda1"`, you specify the partition as `1`.
          Similarly, the volume partition for `"/dev/sda"` is `0` (or you can leave the property empty).
        format: int32
        maximum: 255
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          卷中要挂载的分区。如果忽略此字段，则默认会按卷名挂载。
          例如，对于卷 `"/dev/sda1"` 而言，你会将 `partition` 设置为 `1`；
          类似的，对于 `"/dev/sda"` 的卷分区，则应该设置为 `0`（或者也可以选择将字段留空）。
      pdName:
        description: Unique name of the PD resource in GCE.
        minLength: 1
        type: string
        x-kab-description-zh: PD 资源在 GCE 中的唯一性名称。
      readOnly:
        default: false
        description: Force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: 强制在 `volumeMounts` 中如何设置 `readOnly` 选项。
    required:
      - pdName
    type: object
    x-kab-description-zh: |-
      Google Compute Engine（GCE）上的 Persistent Disk 资源。在被挂载到容器中之前，GCE PD 必须已经存在。
      磁盘必须位于同一 GCE 项目中，并与 kubelet 位于同一可用区内。
      GCP PD 只能以 `"ReadWriteOnce"` 或`"ReadOnlyMany"` 模式挂载。
      GCE PD 支持属主管理和 SELinux 重打标签操作。
  io.k8s.api.core.v1.GRPCAction:
    description: A probe for GRPC action.
    properties:
      port:
        description: Port number for the gRPC service. Number must be in the range
          1 to 65535.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: gRPC 服务要使用的端口号。数字必须介于 1 到 65535 之间。
      service:
        description: |-
          The name of the service to place in the gRPC HealthCheckRequest.
          If this is not specified, the default behavior is defined by gRPC.
        type: string
        x-kab-description-zh: |-
          在 gRPC HealthCheckRequest 中要设置的服务名称。
          如果未设置此字段，则默认行为由 gRPC 定义。
    required:
      - port
    type: object
    x-kab-description-zh: 一个用于 GRPC 动作的探针。
  io.k8s.api.core.v1.GitRepoVolumeSource:
    description: |-
      A volume populated with the contents of a git repository.
      Git repo volumes do not support ownership management.
      Git repo volumes support SELinux relabeling.
      **DEPRECATED**: To provision a container with a git repo, mount an `emptyDir` into an `initContainer`
      that clones the repo using git, then mount the `emptyDir` into the Pod's container."
    properties:
      directory:
        description: |-
          Target directory name. Must not contain or start with `".."`.
          If `"."` is supplied, the volume directory will be the git repository. Otherwise, if specified,
          the volume will contain the git repository in the subdirectory with the given name.
        type: string
        x-kab-description-zh: |-
          目标目录的名称。不可以包含 `".."`，也不可以用 `".."` 开头。
          如果设置为 `"."`，则卷目录即是 GIT 仓库；否则，如果设置了此字段，
          则 GIT 仓库会被克隆到卷中给定名称的子目录下。
      repository:
        description: Repository URL.
        minLength: 1
        type: string
        x-kab-description-zh: 仓库的 URL 地址。
      revision:
        description: Commit hash for the specified revision.
        type: string
        x-kab-description-zh: 指定修订版本的提交哈希代码。
    required:
      - repository
    type: object
    x-kab-description-zh: |-
      使用 GIT 仓库内容填充的一个数据卷。GIT 仓库卷不支持属主管理，但支持 SELinux 重新打标签操作。
      **已弃用**：要为一个容器提供 GIT 仓库，可以在一个 `initContainer` 中挂载一个 `emptyDir` 卷，
      在该容器中使用 GIT 命令克隆仓库，之后将 `emptyDir` 卷挂载到 Pod 中的应用容器内。
  io.k8s.api.core.v1.GlusterfsPersistentVolumeSource:
    description: |-
      A Glusterfs mount that lasts the lifetime of a Pod.
      Glusterfs volumes do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        description: The endpoint name that details the Glusterfs topology.
        minLength: 1
        type: string
        x-kab-description-zh: 包含 Glusterfs 拓扑细节的端点名称。
      endpointsNamespace:
        description: |-
          The namespace that contains the Glusterfs endpoint.
          This field defaults to the same namespace as the bound PVC.
          It must be a valid namespace name if specified.
        type: string
        x-kab-description-zh: |-
          包含 Glusterfs 端点的名字空间。此字段默认为绑定 PVC 所在的名字空间。
          如果设置了此字段，其取值必须是一个合法的名字空间名称。
      path:
        description: The Glusterfs volume path.
        minLength: 1
        type: string
        x-kab-description-zh: Glusterfs 卷路径。
      readOnly:
        default: false
        description: Force the Glusterfs volume to be mounted with read-only permissions.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载 Glusterfs 卷。
    required:
      - endpoints
      - path
    type: object
    x-kab-description-zh: 在 Pod 的生命周期内一直存在且可用的 Glusterfs 卷挂载。 Glusterfs 卷不支持属主管理或者
      SELinux 重新打标签操作。
  io.k8s.api.core.v1.GlusterfsVolumeSource:
    description: |-
      A Glusterfs mount that lasts the lifetime of a Pod.
      Glusterfs volumes do not support ownership management or SELinux relabeling.
    properties:
      endpoints:
        description: The endpoint name that details the Glusterfs topology.
        minLength: 1
        type: string
        x-kab-description-zh: 包含 Glusterfs 拓扑细节的端点名称。
      path:
        description: The Glusterfs volume path.
        minLength: 1
        type: string
        x-kab-description-zh: Glusterfs 卷路径。
      readOnly:
        default: false
        description: Force the Glusterfs volume to be mounted with read-only permissions.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载 Glusterfs 卷。
    required:
      - endpoints
      - path
    type: object
    x-kab-description-zh: 在 Pod 的生命周期内一直存在且可用的 Glusterfs 卷挂载。 Glusterfs 卷不支持属主管理或者
      SELinux 重新打标签操作。
  io.k8s.api.core.v1.HTTPGetAction:
    description: This describes an action based on HTTP GET requests.
    properties:
      host:
        description: |-
          Host name to connect to, defaults to the Pod IP.
          You probably want to set `"Host"` in `httpHeaders` instead.
        type: string
        x-kab-description-zh: 要连接的主机名，默认为 Pod 的 IP 地址。另一种方式是在 `httpHeaders` 中设置 `"Host"`。
      httpHeaders:
        description: Custom headers to set in the request. HTTP allows repeated headers.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.HTTPHeader'
        type: array
        x-kab-description-zh: 要在请求中设置的定制头部。HTTP 允许头部字段重复。
      path:
        description: Path to access on the HTTP server.
        minLength: 1
        type: string
        x-kab-description-zh: 要访问的 HTTP 服务器上的路径。
        x-kubernetes-list-type: atomic
      port:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          Name or number of the port to access on the container.
          Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        x-kab-description-zh: 要访问的容器上的端口名称或数字。数字必须介于 1 和 65535 之间。名称则必须是 IANA_SVC_NAME。
      scheme:
        default: HTTP
        description: Scheme to use for connecting to the host.
        enum:
          - HTTP
          - HTTPS
        type: string
        x-kab-description-zh: 连接到主机时所使用的 HTTP 模式。
    required:
      - path
      - port
    type: object
    x-kab-description-zh: 此结构描述一个基于 HTTP GET 请求的动作。
  io.k8s.api.core.v1.HTTPHeader:
    description: A custom header to use in HTTP probes.
    properties:
      name:
        description: |-
          The header field name. A valid name consists of alphanumeric characters or `'-'`.
          This will be canonicalized upon output, so case-variant names will be understood as the same header.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          头部字段名称。合法的名称可以包含字母、数字或 `'-'`。
          在输出时会被归一化，仅在大小写上有区别的名字会被当做同一个头部字段。
      value:
        description: The header field value.
        minLength: 1
        type: string
        x-kab-description-zh: 头部字段值。
    required:
      - name
      - value
    type: object
    x-kab-description-zh: 要在 HTTP 探针中使用的定制头部。
  io.k8s.api.core.v1.HostAlias:
    description: The mapping between an IP and some hostnames.
    properties:
      hostnames:
        description: Hostnames for the IP address. Each value must be a valid DNS
          subdomain.
        items:
          minLength: 1
          type: string
        type: array
        x-kab-description-zh: IP 地址对应的主机名。每个字符串值都必须是一个合法的 DNS 子域名。
        x-kubernetes-list-type: atomic
      ip:
        description: IP address of the host file entry. This value must be a valid
          IP address.
        type: string
        x-kab-description-zh: host 文件中某一条目对应的 IP 地址。此值必须是一个合法的 IP 地址。
    required:
      - hostnames
      - ip
    type: object
    x-kab-description-zh: IP 地址与主机名（可能不止一个）之间的映射。
  io.k8s.api.core.v1.HostIP:
    description: HostIP represents a single IP address allocated to the host.
    properties:
      ip:
        description: The IP address assigned to the host.
        format: ip
        type: string
        x-kab-description-zh: 分配给主机的 IP 地址。
    required:
      - ip
    type: object
    x-kab-description-zh: HostIP 代表大是分配给主机的一个 IP 地址。
  io.k8s.api.core.v1.HostPathVolumeSource:
    description: |-
      A hostPath volume mapped into a Pod.
      HostPath volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: |-
          Path of the directory on the host.
          If the `path` is a symlink, it will follow the link to the real path.
          It cannot contain any backsteps (`".."`).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          目录在主机上的路径。如果 `path` 是一个符号链接，系统会追随链接找到实际路径。
          字段值不能包含后退步骤（`".."`）。
      type:
        default: ''
        description: |-
          Type for HostPath Volume.
          - `""`: for backward compatibility, leave it empty if unset.
          - `"DirectoryOrCreate"`: If nothing exists at the given `path`, an empty directory
            will be created there as needed with file mode `0755`, having the same group and
            ownership with kubelet.
          - `"Directory"`: A directory must exist at the given `path`.
          - `"FileOrCreate"`: If nothing exists at the given `path`, an empty file will be created
            there as needed with file mode `0644`, having the same group and ownership with kubelet.
          - `"File"`: A file must exist at the given `path`.
          - `"Socket"`: A UNIX socket must exist at the given `path`.
          - `"CharDevice"`: A character device must exist at the given `path`.
          - `"BlockDevice"`: A block device must exist at the given `path`.
        enum:
          - ''
          - BlockDevice
          - CharDevice
          - Directory
          - DirectoryOrCreate
          - File
          - FileOrCreate
          - Socket
        type: string
        x-kab-description-zh: |-
          HostPath 卷的类型。
          - `""`：用于向后兼容。如果未设置，则相当于空字符串。
          - `"DirectoryOrCreate"`：如果在 `path` 所给的位置没有文件或者目录存在，则会在 `path`
            处创建一个空的目录，访问模式为 `0755`，具有与 kubelet 相同的组和用户属主设置。
          - `"Directory"`：在给定的 `path` 位置必须存在一个目录。
          - `"FileOrCreate"`：如果在 `path` 所给的位置没有文件或者目录存在，则会在 `path`
            位置创建一个空文件，访问模式为 `0644`，具有与 kubelet 相同的组和用户属主设置。
          - `"File"`：在 `path` 所给的位置必须存在一个文件。
          - `"Socket"`：在 `path` 所给的位置必须存在一个 UNIX 域套接字。
          - `"CharDevice"`：在 `path` 所给的位置必须存在一个字符设备。
          - `"BlockDevice"`：在 `path` 所给的位置必须存在一个块设备。
    required:
      - path
    type: object
    x-kab-description-zh: |-
      映射到 Pod 中的一个 HostPath 卷。
      HostPath 卷不支持属主管理或者 SELinux 重新打标签操作。
  io.k8s.api.core.v1.ISCSIPersistentVolumeSource:
    description: |-
      An ISCSI disk. ISCSI volumes can only be mounted as `"ReadWriteOnce"`.
      ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: This indicates whether the volume supports iSCSI Discovery CHAP
          authentication.
        type: boolean
        x-kab-description-zh: 此字段表明卷是否支持 iSCSI Discovery CHAP 身份认证。
      chapAuthSession:
        description: This indicates whether the volume supports iSCSI Session CHAP
          authentication.
        type: boolean
        x-kab-description-zh: 此字段表明卷是否支持 iSCSI Session CHAP 身份认证。
      fsType:
        default: ext4
        description: |-
          Filesystem type of the volume that you want to mount.
          The filesystem type must be supported by the host operating system.
        type: string
        x-kab-description-zh: 希望挂载的的文件系统类型。此文件系统类型必须是宿主操作系统所支持的。
      initiatorName:
        description: |-
          Custom iSCSI Initiator Name.
          If `initiatorName` is specified with `iscsiInterface` simultaneously, new iSCSI interface
          `"<volume name>:<target portal>"` will be created for the connection.
          The length of the interface string cannot exceed 64 characters.
        type: string
        x-kab-description-zh: |-
          定制的 iSCSI 发起者名称。
          如果 `initiatorName` 设置的同时，`iscsiInterface` 也被设置，创建链接时会生成一个新的
          iSCSI 接口 `"<卷名>:<目标门户>"`。接口字符串的长度不能超过 64 个字符。
      iqn:
        description: Target iSCSI Qualified Name (IQN). The name must have prefix
          `"iqn"` or `"eui"` or `"naa"`.
        minLength: 1
        type: string
        x-kab-description-zh: 目标 iSCSI 的限定名（IQN）。此名字必须以 `"iqn"`、`"eui"` 或 `"naa"`
          之一为前缀。
      iscsiInterface:
        default: default
        description: The iSCSI Interface that uses an iSCSI transport. Default value
          `"default"` means TCP.
        type: string
        x-kab-description-zh: 使用 iSCSI 传输的 iSCSI 接口。默认值 `"default"` 意味着采用 TCP。
      lun:
        description: The target LUN number.
        format: int32
        maximum: 255
        minimum: 0
        type: integer
        x-kab-description-zh: 目标的 LUN 号。
      portals:
        description: |-
          The target portal list.
          The portal is either an IP or `"<ip_addr>:<port>"` if the port is other than default
          (typically TCP ports 860 and 3260).
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          目标的门户列表。
          门户地址可以是一个 IP 地址，当端口不是默认值（通常是 TCP 端口 860 和 3260）的情况下，
          也可以是 `"<IP 地址>:<端口>"` 形式。
        x-kubernetes-list-type: atomic
      readOnly:
        default: false
        description: Force the the volume to be mounted in ready-only mode.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载此卷。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          CHAP Secret for iSCSI target and initiator authentication.
          If `chapAuthSession` or `chapAuthDiscovery` is specified, this field cannot be empty.
        x-kab-description-zh: |-
          用于 iSCSI 目标和发起者的身份认证的 CHAP Secret。
          如果设置了 `chapAuthSession` 或 `chapAuthDiscovery`，此字段不可以为空。
      targetPortal:
        description: |-
          iSCSI target portal. The portal is either an IP or `"<ip_addr>:<port>"`
          if the port is other than default (typically TCP ports 860 and 3260).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          iSCSI 的目标门户。门户地址可以是一个 IP 地址。
          当端口不是默认值（通常是 TCP 端口 860 和 3260）的情况下，也可以是 `"<IP 地址>:<端口>"` 形式。
    required:
      - iqn
      - lun
      - targetPortal
    type: object
    x-kab-description-zh: |-
      此结构描述一个 iSCSI 磁盘。iSCSI 卷只能以 `"ReadWriteOnce"` 模式挂载。
      iSCSI 卷支持属主管理和 SELinux 重新打标签操作。
  io.k8s.api.core.v1.ISCSIVolumeSource:
    description: |-
      An ISCSI disk. ISCSI volumes can only be mounted as `"ReadWriteOnce"`.
      ISCSI volumes support ownership management and SELinux relabeling.
    properties:
      chapAuthDiscovery:
        description: This indicates whether the volume supports iSCSI Discovery CHAP
          authentication.
        type: boolean
        x-kab-description-zh: 此字段表明卷是否支持 iSCSI Discovery CHAP 身份认证。
      chapAuthSession:
        description: This indicates whether the volume supports iSCSI Session CHAP
          authentication.
        type: boolean
        x-kab-description-zh: 此字段表明卷是否支持 iSCSI Session CHAP 身份认证。
      fsType:
        default: ext4
        description: |-
          Filesystem type of the volume that you want to mount.
          The filesystem type must be supported by the host operating system.
          For example, `"ext4"`, `"xfs"`, `"ntfs"`.
          Implicitly inferred to be `"ext4"` if unspecified.
        type: string
        x-kab-description-zh: |-
          希望挂载的的文件系统类型。此文件系统类型必须是宿主操作系统所支持的。
          例如，`"ext4"`, `"xfs"`, `"ntfs"`。
          如果未设置，则隐式推断为 `"ext4"`。
      initiatorName:
        description: Custom iSCSI Initiator Name. If `initiatorName` is specified
          with `iscsiInterface` simultaneously, new iSCSI interface `"<volume name>:<target
          portal>"` will be created for the connection. The length of the interface
          string cannot exceed 64 characters.
        type: string
        x-kab-description-zh: |-
          定制的 iSCSI 发起者名称。
          如果 `initiatorName` 设置的同时，`iscsiInterface` 也被设置，创建链接时会生成一个新的
          iSCSI 接口 `"<卷名>:<目标门户>"`。接口字符串的长度不能超过 64 个字符。
      iqn:
        description: Target iSCSI Qualified Name (IQN). The name must have prefix
          `"iqn"` or `"eui"` or `"naa"`.
        minLength: 1
        type: string
        x-kab-description-zh: 目标 iSCSI 的限定名（IQN）。此名字必须以 `"iqn"`、`"eui"` 或 `"naa"`
          之一为前缀。
      iscsiInterface:
        default: default
        description: The iSCSI Interface that uses an iSCSI transport. Default value
          `"default"` means TCP.
        type: string
        x-kab-description-zh: 使用 iSCSI 传输的 iSCSI 接口。默认值 `"default"` 意味着采用 TCP。
      lun:
        description: The target LUN number.
        format: int32
        type: integer
        x-kab-description-zh: 目标的 LUN 号。
      portals:
        description: |-
          The target portal List.
          The portal is either an IP or `"<ip_addr>:<port>"` if the port is other than default
          (typically TCP ports 860 and 3260).
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          目标的门户列表。
          门户地址可以是一个 IP 地址，当端口不是默认值（通常是 TCP 端口 860 和 3260）的情况下，
          也可以是 `"<IP 地址>:<端口>"` 形式。
        x-kubernetes-list-type: atomic
      readOnly:
        default: false
        description: Force the `readOnly` setting in the `volumeMounts`.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载此卷。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: |-
          CHAP Secret for iSCSI target and initiator authentication.
          If `chapAuthSession` or `chapAuthDiscovery` is specified, this field cannot be empty.
        x-kab-description-zh: |-
          用于 iSCSI 目标和发起者的身份认证的 CHAP Secret。
          如果设置了 `chapAuthSession` 或 `chapAuthDiscovery`，此字段不可以为空。
      targetPortal:
        description: |-
          iSCSI target portal. The portal is either an IP or `"<ip_addr>:<port>"`
          if the port is other than default (typically TCP ports 860 and 3260).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          iSCSI 的目标门户。门户地址可以是一个 IP 地址。
          当端口不是默认值（通常是 TCP 端口 860 和 3260）的情况下，也可以是 `"<IP 地址>:<端口>"` 形式。
    required:
      - iqn
      - lun
      - targetPortal
    type: object
    x-kab-description-zh: |-
      此结构描述一个 iSCSI 磁盘。iSCSI 卷只能以 `"ReadWriteOnce"` 模式挂载。
      iSCSI 卷支持属主管理和 SELinux 重新打标签操作。
  io.k8s.api.core.v1.KeyToPath:
    description: Maps a key string to a path within a volume.
    properties:
      key:
        description: The key to project.
        minLength: 1
        type: string
        x-kab-description-zh: 要投射的主键。
      mode:
        description: |-
          Mode bits used to set permissions on this file.
          Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`.
          YAML accepts both octal and decimal values, JSON requires decimal values for `mode` bits.
          If not specified, the volume `defaultMode` will be used.
          This might be in conflict with other options that affect the file mode, like `fsGroup`,
          and the result can be other mode bits set.
        format: int32
        maximum: 511
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          要设置在文件上的访问权限模式位，必须是介于 `0` 和 `0777` 之间的八进制数，
          或者介于 `0` 和 `511` 之间的十进制数。
          YAML 既能接受八进制数，也能接受十进制数，JSON 要求模式位要用十进制数来表达。
          如果没有设置此字段，则使用卷的 `defaultMode` 设置。
          这里的设置可能与其他影响文件模式的选项（如 `fsGroup`）有冲突，
          所以最终结果可能出现其他模式位被设置的情况。
      path:
        description: |-
          The relative path of the file to map the key to. May not be an absolute path.
          May not contain the path element `".."`.  May not start with the string `".."`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要将主键映射到的文件的相对路径。字段值不可以是绝对路径。
          字段值不可以包含 `".."`，也不可以以 `".."` 开头。
    required:
      - key
      - path
    type: object
    x-kab-description-zh: 将主键字符串映射到卷中的路径。
  io.k8s.api.core.v1.Lifecycle:
    description: |-
      Lifecycle describes actions that the management system should take in response to container
      lifecycle events. For `postStart` and `preStop`, management of the container blocks until
      the action is complete, unless the container process fails, in which case the handler is aborted.
    properties:
      postStart:
        $ref: '#/definitions/io.k8s.api.core.v1.LifecycleHandler'
        description: |-
          The `postStart` handler is called immediately after a container is created.
          If the handler fails, the container is terminated and restarted according to its restart policy.
          Other management of the container blocks until the hook completes.
        x-kab-description-zh: |-
          `postStart` 处理逻辑会在容器被创建之后立即被调用。
          如果处理逻辑失败，则容器会被中止并根据其重启策略实施重启。
          容器的其他管理机制都会被阻塞，直到此回调完成。
      preStop:
        $ref: '#/definitions/io.k8s.api.core.v1.LifecycleHandler'
        description: |-
          The `preStop` handler is called immediately before a container is terminated due to an API request
          or management event such as liveness/startup probe failure, preemption, resource contention, etc.
          The handler is not called if the container crashes or exits.
          The Pod's termination grace period countdown begins before the `preStop` handler is executed.
          Regardless of the outcome of the handler, the container will eventually terminate within
          the Pod's termination grace period (unless delayed by finalizers).
          Other management of the container blocks until the hook completes or until the termination grace
          period is reached.
        x-kab-description-zh: |-
          容器会因为 API 请求或者诸如活跃态探针、启动探针失败、Pod 抢占、资源竞争等原因而被终止，
          在容器被终止之前，`preStop` 的处理逻辑会被调用。
          如果容器崩溃或者退出，则 `preStop` 处理逻辑不会被调用。
          在 `preStop` 处理程序开始执行之前，Pod 的终止宽限期倒计时开始。
          无论处理程序的最终结果如何，容器最终都会在 Pod 的终止宽限期之内终止（除非被 finalizers 延误）。
          容器的其他管理组件会被阻塞，直到回调完成或者直到达到终止宽限期。
    type: object
    x-kab-description-zh: |-
      Lifecycle 描述的是管理系统为应对容器生命周期事件所要采取的动作。
      对于 `postStart` 和 `preStop`，容器的管理操作会被阻塞，直到对应的动作执行完毕，除非容器进程失败。
      若容器进程失败，则这里给出的处理逻辑也会被中止。
  io.k8s.api.core.v1.LifecycleHandler:
    description: |-
      LifecycleHandler defines a specific action that should be taken in a lifecycle hook.
      One and only one of the fields, except `tcpSocket` must be specified.
    properties:
      exec:
        $ref: '#/definitions/io.k8s.api.core.v1.ExecAction'
        description: This specifies the action to take.
        x-kab-description-zh: 此字段设置要采取的动作。
      httpGet:
        $ref: '#/definitions/io.k8s.api.core.v1.HTTPGetAction'
        description: This specifies the HTTP request to perform.
        x-kab-description-zh: 此字段设置要执行的 HTTP 请求。
      sleep:
        $ref: '#/definitions/io.k8s.api.core.v1.SleepAction'
        description: Sleep represents the duration that the container should sleep
          before being terminated.
        x-kab-description-zh: 此字段设置容器在被终止之前需要睡眠的时长。
      tcpSocket:
        $ref: '#/definitions/io.k8s.api.core.v1.TCPSocketAction'
        description: |-
          **DEPRECATED** `tcpSocket` is NOT supported as a LifecycleHandler and
          kept for the backward compatibility. There are no validation of this field and
          lifecycle hooks will fail in runtime when TCP handler is specified.
        x-kab-description-zh: |-
          **已弃用** `tcpSocket` 作为 LifecycleHandler 是不被支持的，保留下来是为了向后兼容性。
          对此字段没有合法性检查，如果设置了 TCP 处理程序，则生命周期回调会在运行时失败。
    type: object
    x-kab-description-zh: |-
      LifecycleHandler 定义在某生命周期回调中需要采取的动作。
      `exec` 和 `httpGet` 二者必须且只能设置其一。
  io.k8s.api.core.v1.LimitRange.CREATE:
    description: LimitRange sets resource usage limits for each kind of resource in
      a namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - LimitRange
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The name must be a valid DNS subdomain name if specified.
          If `name` is not provided, an UUID will be generated and used as its name.
        x-kab-description-zh: |-
          标准的对象元数据。如果提供了 `name`，则其取值必须是合法的 DNS 子域名。
          如果未提供 `name`，则系统会生成一个 UUID 来作为其资源名称。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.LimitRangeSpec'
        description: Spec defines the limits to enforce.
        x-kab-description-zh: 此字段定义要强制实施的限制。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: LimitRange 设置给定名字空间中每种类型资源的用量上限。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: LimitRange
        version: v1
  io.k8s.api.core.v1.LimitRange.GET:
    description: LimitRange sets resource usage limits for each kind of resource in
      a namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - LimitRange
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.LimitRangeSpec'
        description: Spec defines the limits to enforce.
        x-kab-description-zh: 此字段定义要强制实施的限制。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: LimitRange 设置给定名字空间中每种类型资源的用量上限。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: LimitRange
        version: v1
  io.k8s.api.core.v1.LimitRange.UPDATE:
    description: LimitRange sets resource usage limits for each kind of resource in
      a namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - LimitRange
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.LimitRangeSpec'
        description: Spec defines the limits to enforce.
        x-kab-description-zh: 此字段定义要强制实施的限制。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: LimitRange 设置给定名字空间中每种类型资源的用量上限。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: LimitRange
        version: v1
  io.k8s.api.core.v1.LimitRangeItem:
    description: |-
      An item that specifies a min/max usage limit for any resource that matches a kind.

      For each item, the resource name has to follow some rules. For each resource type:

      - the `max` value must be no smaller than the `min` value, if both are specified;
      - the `defaultRequest` value must be greater than the `min` value, if both are specified;
      - the `defaultRequest` value must be smaller than the `max` value, if both are specified.
      - the `defaultRequest` must be smaller than the `default` value, if both are specified.
      - the `default` value must be must be greater than the `min` value, if both are specified.
      - the `default` value must be smaller than the `max` value, if both are specified.

      For GPU, hugepages and other resources that are not allowed to overcommit, the `default` value
      and the `defaultRequest` value must match, if both are specified.
    properties:
      default:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          Default resource requirement limit value by resource name if resource limits is omitted.
          This field cannot be specified when `type` is `"Pod"`.
        type: object
        x-kab-description-zh: |-
          按资源名称来设置的默认资源限制值，在未给出资源限制时使用。
          当 `type` 为 `"Pod"` 时，此字段不可以设置。
      defaultRequest:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The default resource requirement request value by resource name if resource requests is omitted.
          This field cannot be specified when `type` is `"Pod"`.
        type: object
        x-kab-description-zh: |-
          按资源名称来设置的默认资源请求值，在未给出资源请求时使用。
          当 `type` 为 `"Pod"` 时，此字段不可以设置。
      max:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: Max usage constraints on this kind by resource name.
        type: object
        x-kab-description-zh: 按资源名称给出的某类别最大用量约束。
      maxLimitRequestRatio:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          If specified, the named resource must have requests and limits that are both non-zero where
          `limits` divided by `requests` is less than or equal to the enumerated value;
          this represents the max burst for the named resource.
          The value must be no less than 1.
        type: object
        x-kab-description-zh: |-
          如果设置了此字段，所指定的资源必须既设置请求也设置限制，并且 `limits` 值除以 `requests`
          值的结果要小于等于这里列举的值。
          此字段表达的是指定资源的最大突发速率。所设置的值的并不可以小于 1。
      min:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: Min usage constraints on this kind by resource name.
        type: object
        x-kab-description-zh: 按资源名称给出的某类别最小用量约束。
      type:
        description: |-
          Type of resource that this limit applies to.
          This has to be a qualified resource name (containing at least one `'/'`) or a standard limit type,
          i.e. one of `"Pod"`, `"Container"` and `"PersistentVolumeClaim"`.
          The `type` value must be unique in the `limits` list.

          Possible enum values:
          - `"Container"` limit that applies to all containers in a namespace.
          - `"PersistentVolumeClaim"` limit that applies to all persistent volume claims in a namespace
          - `"Pod"` limit that applies to all Pods in a namespace.
        type: string
        x-kab-description-zh: |-
          此 LimitRange 所适用的资源类别。
          这里给出的类别必须是限定名（Qualified Name），即至少包含一个 `'/'`，
          或者可以是一个标准的限制类型，也就是 `"Pod"`、`"Container"` 和 `"PersistentVolumeClaim"` 之一。
          ·`type` 值必须在 `limits` 列表中是唯一的。

          可以使用的标准限制类型有：
          - `"Container"`：限制适用于名字空间中的所有容器；
          - `"PersistentVolumeClaim"`：限制适用于名字空间中的所有 PVC 对象；
          - `"Pod"`：限制适用于名字空间中的所有 Pod。
    required:
      - type
    type: object
    x-kab-description-zh: |-
      LimitRange 的一个条目，用来为匹配某类别的所有资源设置最小、最大用量限制。

      针对每个条目，资源名称必须遵从一些规则。对于每种资源类别：

      - 如果 `max` 和 `min` 都设置了，`max` 值必须大于等于 `min` 值；
      - 如果 `defaultRequest` 和 `min` 值都设置了，则 `defaultRequest` 值必须大于 `min` 值；
      - 如果 `defaultRequest` 和 `max` 值都设置了，则 `defaultRequest` 值必须小于 `max` 值；
      - 如果 `defaultRequest` 和 `default` 值都设置了，则 `defaultRequest` 值必须小于 `default` 值；
      - 如果 `default` 和 `min` 值都设置了，则 `default` 值必须大于 `min` 值；
      - 如果 `default` 和 `max` 值都设置了，则 `default` 值必须小于 `max` 值。

      对于 GPU、大页面以及其他不可过量分配的资源而言，`default` 值和 `defaultRequest` 值如果都设置了，
      则二者必须匹配。
  io.k8s.api.core.v1.LimitRangeList:
    description: A list of LimitRange objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of LimitRange objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
        type: array
        x-kab-description-zh: 由 LimitRange 对象构成的一个列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - LimitRangeList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 由 LimitRange 对象构成的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: LimitRangeList
        version: v1
  io.k8s.api.core.v1.LimitRangeSpec:
    description: The spec defines a min/max usage limit for resources that match a
      kind.
    properties:
      limits:
        description: The list of LimitRangeItem that are enforced.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LimitRangeItem'
        minItems: 1
        type: array
        x-kab-description-zh: 要实施的 LimitRangeItem 列表。
        x-kubernetes-list-type: atomic
    required:
      - limits
    type: object
    x-kab-description-zh: 此规约定义与某类别匹配的所有资源的最小、最大用量限制。
  io.k8s.api.core.v1.LoadBalancerIngress:
    description: |-
      The status of a load-balancer ingress point.
      Traffic intended for the Service should be sent to an ingress point.
    properties:
      hostname:
        description: |-
          The `hostname` is set for load-balancer ingress points that are DNS based
          (typically AWS load-balancers)
        type: string
        x-kab-description-zh: 基于 DNS 的负载均衡器 Ingress 点会设置 `hostname` 字段（通常是 AWS 上的负载均衡器）。
      ip:
        description: |-
          The `ip` is set for load-balancer ingress points that are IP based
          (typically GCE or OpenStack load-balancers).
        type: string
        x-kab-description-zh: 基于 IP 的负载均衡器 Ingress 点会设置 `ip` 字段（通常是 GCE 或 OpenStack
          上的负载均衡器）。
      ipMode:
        description: |-
          This specifies how the load-balancer IP behaves.
          Setting this to `"VIP"` indicates that traffic is delivered to the node with the destination set to
          the load-balancer's IP and port.
          Setting this to `"Proxy"` indicates that traffic is delivered to the node or pod with the destination set to
          the node's IP and node port or the pod's IP and port.
          Service implementations may use this information to adjust traffic routing.
          This field is required when the `LoadBalancerIPMode` feature gate is enabled and the `ip` field is set.
          It may be specified only when the `ip` field is specified.
        enum:
          - Proxy
          - VIP
        type: string
        x-kab-description-zh: |-
          此字段设定负载均衡器的 IP 地址作用。
          设置此字段为 `"VIP"` 意味着流量被转发到节点时，目标地址会设置为负载均衡器的 IP 地址和端口。
          设置此字段为 `"Proxy"` 时意味着流量被转发到节点或者 Pod 时，目测地址设置为节点的 IP 和端口，或者 Pod 的 IP 和端口。
          Service 的实现可以使用这一设置来决定如何对流量进行路由。
          当启用了 `LoadBalancerIPMode` 特性门控时，如果设置了 `ip` 字段，则必须设置此字段。
          只有设置了 `ip` 字段的时候，才可以设置此字段。
      ports:
        description: |-
          A list of records of service ports.
          If used, every port defined in the Service should have an entry in it.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PortStatus'
        type: array
        x-kab-description-zh: |-
          服务端口记录的列表。
          如果使用了此字段，则在 Service 上定义的每个端口都会在此列表中有对应表项存在。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      此结构包含某负载均衡 Ingress 点的状态。
      指向某 Service 的请求流量应该被发送到某 Ingress 点。
  io.k8s.api.core.v1.LoadBalancerStatus:
    description: The status of a load-balancer.
    properties:
      ingress:
        description: |-
          A list containing ingress points for the load-balancer.
          Traffic intended for the Service should be sent to these ingress points.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LoadBalancerIngress'
        type: array
        x-kab-description-zh: |-
          包含负载均衡器的 Ingress 点的列表。
          指向 Service 的请求流量应该被发送到这些 Ingress 点上。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 负载均衡器的状态。
  io.k8s.api.core.v1.LocalObjectReference:
    description: Information for locating an object in the same namespace.
    properties:
      name:
        description: Name of the referent.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用者的名称。
    required:
      - name
    type: object
    x-kab-description-zh: 关于在同一名字空间中定位某个对象的信息。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.LocalVolumeSource:
    description: A directly-attached storage with node affinity.
    properties:
      fsType:
        description: |-
          Filesystem type to mount. It applies only when the `path` is a block device.
          Must be a filesystem type supported by the host operating system.
          The default value is to auto-select a filesystem if unspecified.
        type: string
        x-kab-description-zh: |-
          要挂载的文件系统类型。只有当 `path` 指向一个块设备时才有意义。
          字段值必须是宿主操作系统所支持的文件系统类型之一。
          如果未设置此字段，默认的行为是自动选择一个文件系统。
      path:
        description: |-
          The full path to the volume on the node.
          It can be either a directory or block device (disk, partition, ...).
          There can be no `".."` in the path.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          指向节点上数据卷的完整路径。所指向的可以是一个目录，也可以是一个块设备（磁盘、分区等）。
          路径字符串值中不可以包含 `".."`。
    required:
      - path
    type: object
    x-kab-description-zh: 带有节点亲和性的某种直连存储（DAS）。
  io.k8s.api.core.v1.ModifyVolumeStatus:
    description: ModifyVolumeStatus represents the status object of ControllerModifyVolume
      operation.
    properties:
      status:
        description: |-
          `status` is the status of the ControllerModifyVolume operation. It can be in any of following states:

          - `"Pending"`: The PersistentVolumeClaim cannot be modified due to unmet requirements, such as
            the specified VolumeAttributesClass not existing.
          - `"InProgress"`: The volume is being modified.
          - `"Infeasible"`: The request has been rejected as invalid by the CSI driver. To resolve the error,
            a valid VolumeAttributesClass needs to be specified.

          **Note**: New statuses can be added in the future. Consumers should check for unknown statuses and fail appropriately.
        enum:
          - Infeasible
          - InProgress
          - Pending
        type: string
        x-kab-description-zh: |-
          `status` 是 ControllerModifyVolume 操作的状态。其取值可以是以下值之一：

          - `"Pending"`：PersistentVolumeClaim 对象因为需求未被满足而无法并修改，需求未满足的例子之一是所指定的
            VolumeAttributesClass 对象尚不存在。
          - `"InProgress"`：卷变更正在进行中。
          - `"Infeasible"`：请求因为非法已经被 CSI 驱动拒绝。要解决这一问题，需要指定一个合法的 VolumeAttributesClass。

          **注意**：将来可能会添加新的状态值。用户应该检查状态字段值无法识别的情况，并作出合适的响应。
      targetVolumeAttributesClassName:
        description: targetVolumeAttributesClassName is the name of the VolumeAttributesClass
          the PVC currently being reconciled
        type: string
    required:
      - status
    type: object
    x-kab-description-zh: ModifyVolumeStatus 代表的是 ControllerModifyVolume 操作的状态对象。
  io.k8s.api.core.v1.NFSVolumeSource:
    description: |-
      An NFS mount that lasts the lifetime of a Pod.
      NFS volumes do not support ownership management or SELinux relabeling.
    properties:
      path:
        description: The path as exported by the NFS server. This must be an absolute
          path.
        minLength: 1
        type: string
        x-kab-description-zh: NFS 导出时设置的路径。字段值必须是绝对路径。
      readOnly:
        default: false
        description: Force the NFS export to be mounted with read-only permissions.
        type: boolean
        x-kab-description-zh: 强制采用只读模式挂载 NFS 导出点。
      server:
        description: The hostname or IP address of the NFS server.
        minLength: 1
        type: string
        x-kab-description-zh: NFS 服务器的主机名或者 IP 地址。
    required:
      - path
      - server
    type: object
    x-kab-description-zh: |-
      在 Pod 的整个生命周期都存在的 NFS 挂载卷。
      NFS 卷不支持属主管理或者 SELinux 重新打标签操作。
  io.k8s.api.core.v1.Namespace.CREATE:
    description: Namespace provides a scope for names. Use of multiple namespaces
      is optional.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Namespace
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata.
          The name must be a valid DNS label no matter it is generated for explicitly provided.
        x-kab-description-zh: |-
          标准的对象元数据。
          无论名字是自动生成的还是显式提供的，字符串必须是合法的 DNS 标签。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.NamespaceSpec'
        description: Spec defines the behavior of the Namespace.
        x-kab-description-zh: Namespace 的行为规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Namespace 为名字提供作用域。使用多个名字空间不是必须的。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Namespace
        version: v1
  io.k8s.api.core.v1.Namespace.GET:
    description: Namespace provides a scope for names. Use of multiple namespaces
      is optional.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Namespace
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.NamespaceSpec'
        description: Spec defines the behavior of the Namespace.
        x-kab-description-zh: Namespace 的行为规约。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.NamespaceStatus'
        description: Status describes the current status of a Namespace.
        x-kab-description-zh: Namespace 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: Namespace 为名字提供作用域。使用多个名字空间不是必须的。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Namespace
        version: v1
  io.k8s.api.core.v1.Namespace.UPDATE:
    description: Namespace provides a scope for names. Use of multiple namespaces
      is optional.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Namespace
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.NamespaceSpec'
        description: Spec defines the behavior of the Namespace.
        x-kab-description-zh: Namespace 的行为规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Namespace 为名字提供作用域。使用多个名字空间不是必须的。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Namespace
        version: v1
  io.k8s.api.core.v1.NamespaceCondition:
    description: Details about the state of the Namespace.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          Type of Namespace controller condition.
          - `"NamespaceDeletionDiscoveryFailure"` contains information about Namespace deleter errors
            during resource discovery.
          - `"NamespaceDeletionContentFailure"` contains information about Namespace deleter errors
            during deletion of resources.
          - `"NamespaceDeletionGroupVersionParsingFailure"` containrs information about Namespace
            deleter errors parsing group-version for legacy types.
          - `"NamespaceContentRemaining"` contains information about resources remaining in a Namespace.
          - `"NamespaceFinalizersRemaining"` contains information about which finalizers are on
            resources remaining in a Namespace.
        enum:
          - NamespaceContentRemaning
          - NamespaceDeletionContentFailure
          - NamespaceDeletionDiscoveryFailure
          - NamespaceDeletionGroupVersionParsingFailure
          - NamespaceFinalizersRemaining
        type: string
        x-kab-description-zh: |-
          Namespace 控制器状况的类型：
          - `"NamespaceDeletionDiscoveryFailure"`：包含关于名字空间删除过程中资源发现操作出错的信息；
          - `"NamespaceDeletionContentFailure"`：包含关于名字空间删除过程中删除资源操作出错的信息；
          - `"NamespaceDeletionGroupVersionParsingFailure"`：包含名字空间删除过程中，
            为较老的类别解析组-版本信息时出错的详细信息；
          - `"NamespaceContentRemaining"`：包含名字空间中剩余资源的信息；
          - `"NamespaceFinalizersRemaining"` 包含名字空间中资源上仍有终止器（Finalizer）的信息。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: Namespace 的状态细节。
  io.k8s.api.core.v1.NamespaceList:
    description: A list of Namespace objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Namespace objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
        type: array
        x-kab-description-zh: 由 Namespace 对象构成的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - NamespaceList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 由 Namespace 对象构成的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: NamespaceList
        version: v1
  io.k8s.api.core.v1.NamespaceSpec:
    description: NamespaceSpec describes the attributes of a Namespace.
    properties:
      finalizers:
        description: An opaque list of values that must be empty to permanently remove
          object from storage.
        items:
          type: string
        type: array
        x-kab-description-zh: 在从存储中永久移除 Namespace 对象之前必须清空的一个列表，其中包含不透明的字符串值。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: NamespaceSpec 描述 Namespace 的属性。
  io.k8s.api.core.v1.NamespaceStatus:
    description: The current status of a Namespace.
    properties:
      conditions:
        description: The latest available observations of a Namespace's current state.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NamespaceCondition'
        type: array
        x-kab-description-zh: 关于 Namespace 当前状态的最新观测结果。
        x-kubernetes-list-type: atomic
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      phase:
        description: |-
          The current lifecycle phase of the Namespace. Possible enum values:
          - `"Active"` means the namespace is available for use in the system
          - `"Terminating"` means the namespace is undergoing graceful termination.
        enum:
          - Active
          - Terminating
        type: string
        x-kab-description-zh: |-
          Namespace 对象的当前生命周期阶段。可能的取值包括：

          - `"Active"`：名字空间在系统中处于可用状态；
          - `"Terminating"`：名字空间正在被体面终止过程中。
    type: object
    x-kab-description-zh: Namespace 的当前状态。
  io.k8s.api.core.v1.Node.CREATE:
    description: |-
      Node is a worker node in Kubernetes.
      Each Node will have a unique identifier in the cache (i.e. in etcd).
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Node
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The name of a Node must be a valid DNS subdomain name.
          A Node can have taints specified using the `"scheduler.alpha.kubernetes.io/taints"` annotation key,
          where the value is a serialized JSON of a valid Taint object.
          The server validates the deserialized Taint object as if it is specified on the Node's `spec.taints`.
          A Node can also have the `"scheduler.alpha.kubernetes.io/preferAvoidPods"` annotation key
          specified as a serialized JSON list of `PreferAvoidPods` struct.
        x-kab-description-zh: |-
          标准的对象元数据。Node 的名称必须是合法的 DNS 子域名。
          Node 对象可以使用 `"scheduler.alpha.kubernetes.io/taints"` 注解主键来设置污点，
          污点取值是一个合法的 Taint 对象的 JSON 序列化字符串。
          服务器会检查反序列化的 Taint 对象，就好像 Taint 是通过 `spec.taints` 设置的一样。
          Node 对象也可以通过 `"scheduler.alpha.kubernetes.io/preferAvoidPods"`  注解主键来设置排斥的 Pod，
          注解的取值是一个 `PerferAvoidPods 结构的 JSON 序列化字符串。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSpec'
        description: Spec defines the behavior of a Node.
        x-kab-description-zh: Node 行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Node 是 Kubernetes 中的一个工作节点。每个 Node 都在缓存（即 etcd）中有一个唯一的标识符。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Node
        version: v1
  io.k8s.api.core.v1.Node.GET:
    description: |-
      Node is a worker node in Kubernetes.
      Each Node will have a unique identifier in the cache (i.e. in etcd).
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Node
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSpec'
        description: Spec defines the behavior of a Node.
        x-kab-description-zh: Node 行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeStatus'
        description: Most recently observed status of the Node.
        x-kab-description-zh: Node 的最新观测状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: Node 是 Kubernetes 中的一个工作节点。每个 Node 都在缓存（即 etcd）中有一个唯一的标识符。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Node
        version: v1
  io.k8s.api.core.v1.Node.UPDATE:
    description: |-
      Node is a worker node in Kubernetes.
      Each Node will have a unique identifier in the cache (i.e. in etcd).
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Node
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The name of a Node must be a valid DNS subdomain name.
          A Node can have taints specified using the `"scheduler.alpha.kubernetes.io/taints"` annotation key,
          where the value is a serialized JSON of a valid Taint object.
          The server validates the deserialized Taint object as if it is specified on the Node's `spec.taints`.
          A Node can also have the `"scheduler.alpha.kubernetes.io/preferAvoidPods"` annotation key
          specified as a serialized JSON list of `PreferAvoidPods` struct.
        x-kab-description-zh: |-
          标准的对象元数据。Node 的名称必须是合法的 DNS 子域名。
          Node 对象可以使用 `"scheduler.alpha.kubernetes.io/taints"` 注解主键来设置污点，
          污点取值是一个合法的 Taint 对象的 JSON 序列化字符串。
          服务器会检查反序列化的 Taint 对象，就好像 Taint 是通过 `spec.taints` 设置的一样。
          Node 对象也可以通过 `"scheduler.alpha.kubernetes.io/preferAvoidPods"`  注解主键来设置排斥的 Pod，
          注解的取值是一个 `PerferAvoidPods 结构的 JSON 序列化字符串。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSpec'
        description: Spec defines the behavior of a Node.
        x-kab-description-zh: Node 行为的规约。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: Node 是 Kubernetes 中的一个工作节点。每个 Node 都在缓存（即 etcd）中有一个唯一的标识符。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Node
        version: v1
  io.k8s.api.core.v1.NodeAddress:
    description: Information for the node's address.
    properties:
      address:
        description: The node address.
        minLength: 1
        type: string
        x-kab-description-zh: 节点地址。
      type:
        description: |-
          Node address type. Possible enum values:
          - `"ExternalDNS" ` identifies a DNS name which resolves to an IP address which has the
            characteristics of a `"ExternalIP"`.
            The IP it resolves to may or may not be a listed `"ExternalIP"` address.
          - `"ExternalIP"` identifies an IP address which is, in some way, intended to be more usable
            from outside the cluster than an internal IP, though no specific semantics are defined.
            It may be a globally routable IP, though it is not required to be.
            External IPs may be assigned directly to an interface on the node, like a `"InternalIP"`,
            or alternatively, packets sent to the external IP may be NAT'ed to an internal node IP
            rather than being delivered directly
            (making the IP less efficient for node-to-node traffic than a `"InternalIP"`).
          - `"Hostname"` identifies a name of the node. Although every node can be assumed to have a
            NodeAddress of this type, its exact syntax and semantics are not defined, and are not
            consistent between different clusters.
          - `"InternalDNS"` identifies a DNS name which resolves to an IP address which has the
            characteristics of a `"InternalIP"`. The IP it resolves to may or may not be a listed
            `"InternalIP"` address.
          - `"InternalIP"` identifies an IP address which is assigned to one of the node's network interfaces.
            Every node should have at least one address of this type.
            An internal IP is normally expected to be reachable from every other node, but may not be
            visible to hosts outside the cluster. By default it is assumed that the API servers can
            reach node internal IPs, though it is possible to configure clusters where this is not
            the case. `"InternalIP"` is the default type of node IP, and does not necessarily imply that
            the IP is ONLY reachable internally. If a node has multiple internal IPs, no specific
            semantics are assigned to the additional IPs.
        enum:
          - ExternalDNS
          - ExternalIP
          - Hostname
          - InternalDNS
          - InternalIP
        type: string
        x-kab-description-zh: |-
          节点地址类型。可能的取值包括：
          - `"ExternalDNS" `：给出一个能够被解析为具有 `"ExternalIP"` 特质的 IP 地址的 DNS 名称。
            实际解析得到的 IP 地址可能在 `"ExternalIP"` 地址中列出，也可能未在其中列出。
          - `"ExternalIP"`：给出一个在集群外部的可用性比内部 IP 地址更好的 IP 地址，
            尽管在可用性上没有确切的语义定义。实际取值可能是一个可以全局路由的 IP，尽管并不要求一定如此。
            外部 IP 可以像 `"InternalIP"` 一样直接设置到节点的某个接口之上，也可以通过将发往外部 IP
            的数据包 NAT 转发到内部节点 IP 上来工作。与 `"InternalIP"` 相比较，节点间传输的效率会略低。
          - `"Hostname"`：给出的是节点的名字。尽管可以认为每个节点都会具有一个此类型的 NodeAddress 与之关联，
            其确切语法和语义都是没有严格定义的，并且在不同的集群之间也存在相当的不一致性。
          - `"InternalDNS"`：给出的是一个 DNS 名称，可以解析为一个具有 `"InternalIP"` 特质的 IP 地址。
            解析得到的 IP 可能位于 `"InternalIP"` 地址中列出，也可能未在其中列出。
          - `"InternalIP"`：给出一个 IP 地址，该 IP 地址被赋予节点上的某个网络接口。
            每个节点都至少应该具有一个这种类型的地址。
            内部 IP 地址通常都应该是从其他节点可达，但对与集群外的主机不可见。
            默认情况下，我们假定 API 服务器是可以访问节点的内部 IP 的，尽管也可以配置集群使这点不成立。
            `"InternalIP"` 是节点 IP 地址的默认类型，但并不一定意味着该 IP 只能从内部访问。
            如果节点具有多个内部 IP 地址，Kubernetes 没有对额外的 IP 地址做语义上的限制或约定。
    required:
      - address
      - type
    type: object
    x-kab-description-zh: 关于节点地址的信息。
  io.k8s.api.core.v1.NodeAffinity:
    description: A group of node affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule Pods to nodes that satisfy the affinity expressions
          specified by this field, but it may choose a node that violates one or more of the expressions.
          The node that is most preferred is the one with the greatest sum of `weight`s, i.e.
          for each node that meets all of the scheduling requirements (resource request,
          `requiredDuringScheduling` affinity expressions, etc.), compute a sum by iterating through
          the elements of this field and adding `weight` to the sum if the node matches the corresponding
          `matchExpressions`; the node(s) with the highest sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PreferredSchedulingTerm'
        type: array
        x-kab-description-zh: |-
          调度器会优先考虑将 Pod 调度到满足此字段所设定的亲和性表达式的节点上，
          不过也可能会选择一个违反一条或者多条表达式约束的节点上。
          最被青睐的节点是 `weight` 加和值最大的节点。换言之，对于能够满足所有其他调度需求
          （资源请求、`requiredDuringScheduling` 亲和性表达式等等）的每个节点，
          调度器会遍历此列表字段中的每一项，在节点满足对应的 `matchExpressions` 时将其 `weight`
          值加起来。求和结果最高的节点是最受青睐的节点。
        x-kubernetes-list-type: atomic
      requiredDuringSchedulingIgnoredDuringExecution:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: |-
          The value is a NodeSelector type. If the affinity requirements specified by this field are
          not met at scheduling time, the Pod will not be scheduled onto the node.
          If the affinity requirements specified by this field cease to be met at some point during
          Pod execution (e.g. due to an update), the system may or may not try to eventually evict the Pod
          from its node.
        x-kab-description-zh: |-
          此字段的取值是一个 NodeSelector 类型。如果此字段所设定的亲和性需求在调度时得不到满足，
          则 Pod 不会被调度到对应节点。如果此字段所设置的亲和性需求在 Pod 执行期间不再成立
          （例如因为资源变更原因），系统可能会、也可能不会将 Pod 从当前节点上逐出。
    type: object
    x-kab-description-zh: 关于节点亲和性调度的一组规则。
  io.k8s.api.core.v1.NodeCondition:
    description: Condition information for a Node.
    properties:
      lastHeartbeatTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time we got an update on a given condition.
        x-kab-description-zh: 上次获得某状况更新的时间戳。
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transit from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间戳。
      message:
        description: Human readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: A (brief) reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的（简要）原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          Type of node condition. Possible enum values:
          - `"DiskPressure"` means the kubelet is under pressure due to insufficient available disk.
          - `"MemoryPressure"` means the kubelet is under pressure due to insufficient available memory.
          - `"NetworkUnavailable"` means that network for the node is not correctly configured.
          - `"PIDPressure"` means the kubelet is under pressure due to insufficient available PID.
          - `"Ready"` means kubelet is healthy and ready to accept pods.
        enum:
          - DiskPressure
          - MemoryPressure
          - NetworkUnavailable
          - PIDPressure
          - Ready
        minLength: 1
        type: string
        x-kab-description-zh: |-
          节点状况的类型。可能的取值包括：

          - `"DiskPressure"`：kubelet 因为磁盘空间不足而面临压力；
          - `"MemoryPressure"`：kubelet 因为可用内存不足而面临压力；
          - `"NetworkUnavailable"`：节点的网络没有正确配置；
          - `"PIDPressure"`：kubelet 因为可用的 PID 不足而面临压力；
          - `"Ready"`：kubelet 状态健康并已为接收 Pod 准备就绪。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: 关于 Node 的状况的信息。
  io.k8s.api.core.v1.NodeConfigSource:
    description: |-
      A source of Node configuration. Exactly one subfield (excluding metadata) must be non-nil.
      This API is DEPRECATED since 1.22.
    properties:
      configMap:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapNodeConfigSource'
        description: A description about the reference to a Node's ConfigMap.
        x-kab-description-zh: 关于对节点的 ConfigMap 的引用的描述。
    required:
      - configMap
    type: object
    x-kab-description-zh: |-
      节点配置信息的来源。至少指定其中一个来源。
      **已弃用**：此 API 从 v1.22 版本开始弃用。
  io.k8s.api.core.v1.NodeConfigStatus:
    description: The status of the config assigned by `node.spec.configSource`.
    properties:
      active:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeConfigSource'
        description: |-
          The checkpointed config the node is actively using.
          This represents either the current version of the `assigned` config, or the current
          `lastKnownGood` config, depending on whether attempting to use the `assigned` config
          results in an `error`.
        x-kab-description-zh: |-
          节点正在使用的、已经通过检查点机制保存起来的配置。
          此配置所表示的可以是 `assigned` 配置的当前版本，或者当前的 `lastKnownGood` 配置，
          取决于是否尝试在 `error` 中使用 `assigned` 配置结果。
      assigned:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeConfigSource'
        description: |-
          This reports the checkpointed config the node will try to use.
          When `node.spec.configSource` is updated, the node checkpoints the associated config
          payload to local disk, along with a record indicating intended config.
          The node refers to this record to choose its config checkpoint, and reports this record
          in `assigned`. The `assigned` only updates in the `status` after the record
          has been checkpointed to disk. When the kubelet is restarted, it tries to make
          the `assigned` config the `active` config by loading and validating the checkpointed
          payload identified by `assigned`.
        x-kab-description-zh: |-
          此字段报告的是节点尝试使用的、已经通过检查点机制保存起来的配置。
          当 `node.spec.configSource` 被更新时，节点会把相关的配置数据通过检查点机制保存到本地磁盘，
          随之保存的的还有关于尝试使用的配置的记录。
          节点会引用此记录，已选择其配置检查点，并在 `assigned` 中报告此记录。在记录被写入磁盘之后，
          `assigned` 智慧更新 `status` 字段。在 kubelet 重启时，它会尝试将 `assigned` 配置作为新的
          `active` 配置，方法是加载并检查 `assigned` 所引用的已保存数据。
      error:
        description: |-
          This describes any problems in reconciling the `spec.configSource` to the `active` config.
          Errors may occur, for example, attempting to checkpoint `spec.configSource` to the local
          `assigned` record, attempting to checkpoint the payload associated with `spec.configSource`,
          attempting to load or validate the `assigned` config, etc.
          Errors may occur at different points while syncing config.
          Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to
          `lastKnownGood`, and may resolve across kubelet retries.
          Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to
          `lastKnownGood`. In the latter case, it is usually possible to resolve the error by fixing
          the config assigned in `spec.configSource`.
          You can find additional information for debugging by searching the error message in the
          kubelet log.

          `error` is a human-readable description of the error state; machines can check whether or not
          `error` is empty, but should not rely on the stability of the `error` text across kubelet versions.
        type: string
        x-kab-description-zh: |-
          此字段描述在 `spec.configSource` 与 `active` 配置之间做调谐时遇到的问题。
          如果尝试使用检查点机制把 `spec.configSource` 保存到本地的 `assigned` 记录中，或者尝试将
          `spec.configSource` 所关联的数据通过检查点机制保存起来，或者尝试加载 `assigned` 配置数据，
          都有可能会发生错误。在对配置进行同步的任何时刻也都有可能发生错误。
          发生时间较早的错误（例如，下载或者通过检查点机制保存时发生的错误）不会导致向 `lastKnownGood`
          的回滚，并且有可能通过 kubelet 的重试机制得到解决。
          发生时间较晚的错误（例如，加载或者检查一个之前保存的配置）可能会导致回滚到 `lastKnownGood`。
          如果是后面这种情况，通常有可能通过修复 `spec.configSource` 中的配置错误来解决。
          你可以在 kubelet 日志中搜索出错消息，并基于其中的额外信息来展开调试工作。

          `error` 的内容是人类可读的信息，其中包含错误的状态描述。机器可以检查 `error` 是否为空，
          但不能假定跨不同 kubelet 版本时 `error` 中的文本是保持稳定一致的。
      lastKnownGood:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeConfigSource'
        description: |-
          This reports the checkpointed config the node will fall back to when it encounters an error
          attempting to use the `assigned` config. The `assigned` config becomes the `lastKnownGood`
          config when the node determines that the `assigned` config is stable and correct.

          This is currently implemented as a 10-minute soak period starting when the local record of
          `assigned` config is updated. If the `assigned` config is `active` at the end of this period,
          it becomes the `lastKnownGood`. Note that if `spec.configSource` is reset to nil
          (use local defaults), the `lastKnownGood` is also immediately reset to nil, because the local
          default config is always assumed good.

          You should not make assumptions about the node's method of determining config stability and
          correctness, as this may change or become configurable in the future.
        x-kab-description-zh: |-
          此字段给出的是节点之前通过检查点机制保存的配置，当节点在尝试使用 `assigned` 版本的配置出错时，
          可以回退到此字段给出的配置。当节点确定 `assigned` 配置是稳定的、正确的时，`assigned` 配置会变成
          `lastKnownGood` 配置。

          目前的实现中，当 `assigned` 配置的本地记录被更新时，会存在 10 分钟的缓冲期。
          如果 `assigned` 配置在此周期结束时是 `active` 的，就会成为新的 `lastKnownGood` 配置。
          要注意的是，如果 `spec.configSource` 被复位为 nil（使用本地的默认值重新填充），则 `lastKnownGood`
          也会立即被重置为 nil，因为我们可以假定本地的默认配置总是可以使用的。

          你不能对节点如何判定配置的稳定性和正确性的方法作任何假定，因为这些判断依据可能会在将来发生变化，
          甚至会变得可配置。
    type: object
    x-kab-description-zh: 通过 `node.spec.configSource` 获得的节点配置状态。
  io.k8s.api.core.v1.NodeDaemonEndpoints:
    description: Ports opened by daemons running on the Node.
    properties:
      kubeletEndpoint:
        $ref: '#/definitions/io.k8s.api.core.v1.DaemonEndpoint'
        description: Endpoint on which kubelet is listening.
        x-kab-description-zh: kubelet 监听所使用的端点。
    required:
      - kubeletEndpoint
    type: object
    x-kab-description-zh: 节点上后台服务所打开的端口。
  io.k8s.api.core.v1.NodeList:
    description: A list of Node objects
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Node objects
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
        type: array
        x-kab-description-zh: 包含 Node 对象的一个列表。
      kind:
        description: A string value representing the REST resource
        enum:
          - NodeList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Node 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: NodeList
        version: v1
  io.k8s.api.core.v1.NodeRuntimeHandler:
    description: NodeRuntimeHandler is a set of runtime handler information.
    properties:
      features:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeRuntimeHandlerFeatures'
        description: Supported features.
        x-kab-description-zh: 运行时所支持的特性。
      name:
        description: Runtime handler name. Empty for the default runtime handler.
        type: string
        x-kab-description-zh: 运行时处理程序的名称。空字符串表示默认的运行时处理程序。
    type: object
    x-kab-description-zh: NodeRuntimeHandler 是关于运行时处理程序的一些信息。
  io.k8s.api.core.v1.NodeRuntimeHandlerFeatures:
    description: NodeRuntimeHandlerFeatures is a set of runtime features.
    properties:
      recursiveReadOnlyMounts:
        description: This field is set to true if the runtime handler supports RecursiveReadOnlyMounts.
        type: boolean
        x-kab-description-zh: 如果运行时处理程序支持 RecursiveReadOnlyMounts，则此字段为 True。
    type: object
    x-kab-description-zh: NodeRuntimeHandlerFeatures 包含运行时的一组特性设置。
  io.k8s.api.core.v1.NodeSelector:
    description: |-
      The union of the results of one or more label queries over a set of Nodes.
      It represents the OR of the selectors represented by the node selector terms.
    properties:
      nodeSelectorTerms:
        description: A list of NodeSelectorTerms.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorTerm'
        minItems: 1
        type: array
        x-kab-description-zh: 包含 NodeSelectorTerm 对象的一个列表。
        x-kubernetes-list-type: atomic
    required:
      - nodeSelectorTerms
    type: object
    x-kab-description-zh: |-
      此字段为对一组 Node 执行一个或者多个标签查询后的组合结果。
      结果中是各个节点选择条件所完成的选择算符结果的逻辑或操作结果。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.NodeSelectorRequirement:
    description: A selector that contains `values`, a `key`, and an `operator` that
      relates the `key` and `values`.
    properties:
      key:
        description: |-
          The label key or the field that the selector applies to.
          This string must be a qualified name, i.e. consist of alphanumeric characters, `'-'`, `'_'`,
          or `'.'`, and must start and end with an alphanumeric character.
          It can have domain name prefix like `"<domain>/"`, where `<domain>` must be a valid DNS
          subdomain name. The name part can be no more than 63 characters.
          When this struct is used to select nodes based on their fields, the currently supported key is
          `"metadata.name"`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此选择算符所适用的标签主键或者字段。此字符串必须是一个限定名称，即，由字母、数字、`'-'`、`'_'`、
          或 `'.'` 组成，并且必须以字母或数字开头，以字母或数字结尾。
          字符串可以带有 `"<domain>/"` 这类域名前缀，其中 `<domain>` 必须是一个合法的 DNS 子域名。
          名字部分不可以超过 63 字符。
          使用此结构来根据节点字段选择节点时，目前支持的主键是 `"metadata.name"`。
      operator:
        description: |-
          Represents a key's relationship to a set of values.
          When this struct is used to select nodes based on their labels, valid operators are
          `"In"`, `"NotIn"`, `"Exists"`, `"DoesNotExist"`. `"Gt"`, and `"Lt"`.
          When this struct is used to select nodes based on fields, valid operators are `"In"` and `"NotIn"`.
        enum:
          - DoesNotExist
          - Exists
          - Gt
          - In
          - Lt
          - NotIn
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段代表的是 `key` 与 `values` 之间的关系。当使用此结构来基于节点标签选择节点时，合法的
          `operator` 包括：`"In"`、`"NotIn"`、`"Exists"`、`"DoesNotExist"`、`"Gt"` 和 `"Lt"`。
          当此结构用来基于字段选择节点时，合法的 `operator` 为 `"In"` 和 `"NotIn"`。
      values:
        description: |-
          An array of string values.
          - If the `operator` is `"In"` or `"NotIn"`, the `values` array must be non-empty.
          - If the `operator` is `"Exists"` or `"DoesNotExist"`, the `values` array must be empty.
          - If the operator is `"Gt"` or `"Lt"`, the `values` array must have a single element,
            which will be interpreted as an integer.
          This array is replaced during a strategic merge patch.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          由字符串值组成的一个数组。

          - 如果 `operator` 是 `"In"` 或 `"NotIn"`，`values` 数组不可以为空；
          - 如果 `operator` 是 `"Exists"` 或者 `"DoesNotExist"`，则 `values` 数组必须为空；
          - 如果 `operator` 是 `"Gt"` 或者 `"Lt"`，则 `values` 数组只能包含一个元素，
            并且该元素会被当做整数值。

          在执行策略性合并补丁（Strategic Merge Patch）操作时，此数组会被替换掉。
        x-kubernetes-list-type: atomic
    required:
      - key
      - operator
    type: object
    x-kab-description-zh: 此结果描述一个选择算符，其中包含 `values` 和 `key`，以及一个将 `key` 和 `values`
      关联起来的 `operator`。
  io.k8s.api.core.v1.NodeSelectorTerm:
    description: A Node selection term. A null or empty term matches no Node. The
      requirements in the term are AND'ed.
    properties:
      matchExpressions:
        description: A list of Node selector based on Node's labels.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement'
        type: array
        x-kab-description-zh: 基于 Node 标签的一组 Node 选择算符。
        x-kubernetes-list-type: atomic
      matchFields:
        description: A list of Node selector based on Node's fields.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorRequirement'
        type: array
        x-kab-description-zh: 基于 Node 字段的一组 Node 选择算符。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      此结构为一个节点选择条件（Term）。如果条件为 null 或者为空，则不会匹配任何节点。
      每个条件中的各项需求是按逻辑与（AND）操作组合的。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.NodeSpec:
    description: The attributes a Node is created with.
    properties:
      configSource:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeConfigSource'
        description: |-
          **DEPRECATED** since v1.22.
          If specified, the source to get Node configuration for the `DynamicKubeletConfig` feature.
          The feature is removed.
        x-kab-description-zh: |-
          从 v1.22 版本开始**已弃用**。
          如果设置了此字段，则所给出的是启用 `DynamicKubeletConfig` 特性之后节点的配置信息源。
          此特性已被移除。
      podCIDR:
        description: The Pod IP range assigned to the Node.
        type: string
        x-kab-description-zh: 分配给节点的 Pod IP 范围。
      podCIDRs:
        description: |-
          The IP ranges assigned to the Node for usage by Pods on that Node.
          If this field is specified, the 0th entry must match the `podCIDR` field.
          It may contain at most 1 value for each of IPv4 and IPv6.
        items:
          description: An IP range (IPv4 or IPv6).
          type: string
          x-kab-description-zh: 一个 IP 范围（可以是 IPv4 或者 IPv6）。
        maxItems: 2
        type: array
        x-kab-description-zh: |-
          分配给节点的、供节点上 Pod 使用的 IP 地址范围。
          如果设置了此字段，则其中第一个条目必须与 `podCIDR` 字段匹配。
          对于 IPv4 和 IPv6 而言，只能最多各包含一个条目。
        x-kubernetes-list-type: set
        x-kubernetes-patch-strategy: merge
      providerID:
        description: |-
          ID of the Node assigned by the cloud provider in the format
          `"<ProviderName>://<ProviderSpecificNodeID>"`.
        type: string
        x-kab-description-zh: 云平台为节点分配的 ID，格式为 `"<平台名称>://<特定于平台的节点 ID>"`。
      taints:
        description: |-
          If specified, the Node's taints. The taints in the list must have `effect` specified.
          The tuple of (`key`, `effect`) in the list must be unique.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Taint'
          description: A taint for the node.
          x-kab-description-zh: 节点的一个污点设置。
        type: array
        x-kab-description-zh: |-
          如果设置了，则包含节点的污点。列表中的污点必须设置 `effect` 字段。
          由 (`key`, `effect`) 构成的元组在整个列表中必须唯一。
        x-kubernetes-list-type: atomic
      unschedulable:
        default: false
        description: Unschedulable controls Node schedulability of new pods. By default,
          Node is schedulable.
        type: boolean
        x-kab-description-zh: 此字段控制节点调度新 Pod 的能力。默认情况下，节点都是可调度的。
    type: object
    x-kab-description-zh: Node 创建时具有的属性。
  io.k8s.api.core.v1.NodeStatus:
    description: Information about the current status of the Node.
    properties:
      addresses:
        description: |-
          List of addresses reachable to the node. Queried from cloud provider, if available.
          Callers should instead use a full-replacement patch.
          Consumers should assume that addresses can change during the lifetime of a Node.
          However, there are some exceptions where this may not be possible, such as Pods that inherit a
          Node's address in its own status or consumers of the downward API (`status.hostIP`).

          **Note**: This field is declared as mergeable, but the merge key is not sufficiently unique,
          which can cause data corruption when it is merged.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeAddress'
        type: array
        x-kab-description-zh: |-
          此列表包含访问节点时可用的地址。如果云平台提供此信息，系统会咨询云平台来获得此信息。

          用户应该假定 Node 的整个生命周期内这里的地址可能会发生变化。
          不过，在有些场景中，变更节点的地址是不太可能的。例如，有可能存在 Pod 在其自身的状态中继承
          Node 的地址，或者使用 Downward API 来访问 Node 的地址（`status.hostIP`）。

          **注意**：此字段被声明为可合并，但是用来执行合并操作的主键并不总能保证唯一性，
          因此可能导致执行合并操作时出现数据损坏的情况。调用者应该使用全替换形式的补丁操作。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      allocatable:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The node resources that are available for scheduling.
          All quantity values must be non-negative. Defaults to value in `capacity'.
        type: object
        x-kab-description-zh: 可供调度的节点资源。所有量纲值都不能是负数。默认值为 `capacity` 中的取值。
      capacity:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: The total resources on the node. All quantity values must be
          non-negative.
        type: object
        x-kab-description-zh: 节点上的资源总和。所有量纲值都必须是非负数。
      conditions:
        description: An array of current observed node conditions.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeCondition'
        type: array
        x-kab-description-zh: 关于节点状况的最新观测结果集合。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      config:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeConfigStatus'
        description: '**DEPRECATED**: Status of the config assigned to the node via
          the `DynamicKubeletConfig` feature.'
        x-kab-description-zh: '**已弃用**: 通过 `DynamicKubeletConfig` 特性赋予给节点的配置状态。'
      daemonEndpoints:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeDaemonEndpoints'
        description: Endpoints of daemons running on the Node.
        x-kab-description-zh: 运行在节点上的后台服务的端点。
      images:
        description: |-
          List of container images on this node.
          The number of images that are reported here can be set via the `--node-status-max-images`
          flag for the kubelet.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerImage'
        type: array
        x-kab-description-zh: |-
          节点上存在的容器镜像列表。这里报告的镜像数量可以通过 kubelet 的 `--node-status-max-images`
          参数来设置。
        x-kubernetes-list-type: atomic
      nodeInfo:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSystemInfo'
        description: Set of IDs/UUIDs to uniquely identify the node.
        x-kab-description-zh: 一组能够唯一性地标识节点的 ID 或者 UUID。
      phase:
        description: |-
          **DEPRECATED**: The recently observed lifecycle phase of the Node. The field is never populated.

          Possible enum values:
          - `"Pending"` means the node has been created/added by the system, but not configured.
          - `"Running"` means the node has been configured and has Kubernetes components running.
          - `"Terminated"` means the node has been removed from the cluster.
        enum:
          - Pending
          - Running
          - Terminated
        type: string
        x-kab-description-zh: |-
          **已弃用**: 最近观测到的 Node 生命周期阶段。此字段几乎从未被填充。

          可能存在的取值有：

          - `"Pending"`：节点已经被系统创建或者添加，但尚未被配置；
          - `"Running"`：节点已经被配置好，并且已经在运行 Kubernetes 组件。
          - `"Terminated"`：节点已经被从集群中移除。
      runtimeHandlers:
        description: The available runtime handlers.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.NodeRuntimeHandler'
        type: array
        x-kab-description-zh: 可用的运行时处理程序列表。
        x-kubernetes-list-type: atomic
      volumesAttached:
        description: List of volumes that are attached to the node.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.AttachedVolume'
        type: array
        x-kab-description-zh: 挂接到节点上的卷的列表。
        x-kubernetes-list-type: atomic
      volumesInUse:
        description: List of attachable volumes in use (mounted) by the node.
        items:
          type: string
        type: array
        x-kab-description-zh: 节点上可挂接的、正在被使用（已被挂载）的卷的列表。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 关于节点当前状态的信息。
  io.k8s.api.core.v1.NodeSystemInfo:
    description: A set of IDs/UUIDs to uniquely identify the node.
    properties:
      architecture:
        description: The architecture reported by the node.
        minLength: 1
        type: string
        x-kab-description-zh: 节点报告的硬件体系结构。
      bootID:
        description: Boot ID reported by the node.
        minLength: 1
        type: string
        x-kab-description-zh: 节点报告的 Boot ID 字符串。
      containerRuntimeVersion:
        description: Container runtime version as reported by the node through runtime
          remote API (e.g. `"containerd://1.4.2"`).
        minLength: 1
        type: string
        x-kab-description-zh: 节点通过运行时远程 API 所报告的容器运行时版本（例如，`"containerd://1.4.2"`）。
      kernelVersion:
        description: Kernel version as reported by the node from `uname -r` (e.g.
          `"3.16.0-0.bpo.4-amd64"`).
        minLength: 1
        type: string
        x-kab-description-zh: 节点通过 `uname -r` 报告的内核版本（如 `"3.16.0-0.bpo.4-amd64"`）。
      kubeProxyVersion:
        description: kube-proxy version reported by the node.
        minLength: 1
        type: string
        x-kab-description-zh: 节点报告的 kube-proxy 版本。
      kubeletVersion:
        description: kubelet version reported by the node.
        minLength: 1
        type: string
        x-kab-description-zh: 节点报告的 kubelet 版本。
      machineID:
        description: |-
          Machine ID reported by the node.
          For unique machine identification in the cluster this field is preferred.
          Learn more from [man(5) machine-id](http://man7.org/linux/man-pages/man5/machine-id.5.html).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          节点报告的 Machine ID。推荐使用此字段作为集群中唯一的机器标识符。
          参阅 [man(5) machine-id](http://man7.org/linux/man-pages/man5/machine-id.5.html)。
      operatingSystem:
        description: The operating system reported by the node.
        minLength: 1
        type: string
        x-kab-description-zh: 节点所报告的操作系统版本。
      osImage:
        description: OS image reported by the node from /etc/os-release (e.g. `"Debian
          GNU/Linux 7 (wheezy)"`).
        minLength: 1
        type: string
        x-kab-description-zh: 节点根据 `/etc/os-release` 所报告的 OS 信息（例如：`"Debian GNU/Linux
          7 (wheezy)"`）。
      systemUUID:
        description: |-
          System UUID reported by the node. For unique machine identification, `machineID` is preferred.
          This field is specific to Red Hat hosts.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          节点所报告的系统 UUID 信息。如果需要节点的唯一性标识，建议使用 `machineID`。
          此字段仅在 Red Hat 节点上可用。
    required:
      - architecture
      - bootID
      - containerRuntimeVersion
      - kernelVersion
      - kubeletVersion
      - kubeProxyVersion
      - machineID
      - operatingSystem
      - osImage
      - systemUUID
    type: object
    x-kab-description-zh: 一组能够唯一标识节点的 ID 和 UUID。
  io.k8s.api.core.v1.ObjectFieldSelector:
    description: This selects an API versioned field of an object.
    properties:
      apiVersion:
        default: v1
        description: Version of the schema the `fieldPath` is written in terms of.
          Currently, this must be `"v1"`.
        type: string
        x-kab-description-zh: '`fieldPath` 字段所用的模式版本。目前，此字段只能是 `"v1"`。'
      fieldPath:
        description: |-
          Path of the field to select in the specified API version. The supported fields can be
          `"metadata.name"`, `"metadata.namespace"`, `"metadata.uid"`, `"spec.nodeName`",
          `"spec.serviceAccountName"`, `"status.hostIP"`, `"status.podIP"`, `"status.podIPs"`
          and `"spec.host"`.
          The `"spec.host"` is for backword compatibility, and treated as `"spec.nodeName"`.
          For `"metadata.annotations"` and `"metadata.labels"`, subscripts `"[<key>]"` are supported
          where the `<key>` must be a qualified name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          在指定 API 版本中要选择的字段的路径。支持的字段可以是
          `"metadata.name"`、`"metadata.namespace"`、`"metadata.uid"`、`"spec.nodeName`"、
          `"spec.serviceAccountName"`、`"status.hostIP"`、`"status.podIP"`、`"status.podIPs"` 和
          `"spec.host"`。
          其中的 `"spec.host"` 用来向后兼容，并当做 `"spec.nodeName"` 来处理。
          对于 `"metadata.annotations"` 和 `"metadata.labels"`，支持用 `"[<key>]"` 的形式来指定下标，
          其中 `<key>` 必须是限定名称。
    required:
      - apiVersion
      - fieldPath
    type: object
    x-kab-description-zh: 此结构用来选择某对象上的带 API 版本的字段。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.ObjectReference:
    description: |-
      ObjectReference contains enough information to let you inspect or modify the referred object.

      New uses of this type are discouraged because of difficulty describing its usage when embedded in APIs.

      1. **Ignored fields**. It includes many fields which are not generally honored.
         For instance, `resourceVersion` and `fieldPath` are both very rarely valid in actual usage.
      1. **Invalid usage help**.  It is impossible to add specific help for individual usage.
         In most embedded usages, there are particular restrictions like,
         **must refer only to types A and B** or **UID not honored** or **name must be restricted**.
         Those cannot be well described when embedded.
      1. **Inconsistent validation**. Because the usages are different, the validation rules are different
         by usage, which makes it hard for users to predict what will happen.
      1. **The fields are both imprecise and overly precise**. Kind is not a precise mapping to a URL.
         This can produce ambiguity during interpretation and require a REST mapping.  In most cases,
         the dependency is on the group,resource tuple and the version of the actual struct is irrelevant.
      1. **We cannot easily change it**. Because this type is embedded in many locations, updates to
         this type will affect numerous schemas. Don't make new APIs embed an underspecified API type
         they do not control.

      Instead of using this type, create a locally provided and used type that is well-focused on
      your reference. For example, `ServiceReferences` for admission registration.
    properties:
      apiVersion:
        description: API version of the referenced object.
        type: string
        x-kab-description-zh: 被引用对象的 API 版本。
      fieldPath:
        description: |-
          If referring to a piece of an object instead of an entire object, this string should contain
          a valid JSON/Go field access statement, such as `"desiredState.manifest.containers[2]"`.
          For example, if this references a container within a Pod, it would take on a value like
          `"spec.containers{name}"` (where `"name"` refers to the name of the container that triggered
          the event) or if no container name is specified `"spec.containers[2]"`
          (container with index 2 in this Pod).
          This syntax is chosen only to have some well-defined way of referencing a part of an object.
        type: string
        x-kab-description-zh: |-
          如果引用的是某个对象的一部分而不是整个对象，可以用这个字段设置一个合法的 JSON/Go 字段访问语句，
          例如，`"desiredState.manifest.containers[2]"`。
          如果此字段引用某个 Pod 中的某个容器，其取值应该类似于 `"spec.containers{name}"` 这种形式
          （其中 `"name"` 因为触发此时间的容器的名称），或者当没有容器名称的时候也可以使用
          `"spec.containers[2]"`（Pod 中索引为 2 的容器）。
          此语法的选择视为了提供一种良定的形式来引用对象的一部分。
      kind:
        description: Kind of the referenced object.
        type: string
        x-kab-description-zh: 被引用对象的类别。
      name:
        description: Name of the referenced object.
        type: string
        x-kab-description-zh: 被引用对象的名称。
      namespace:
        description: Namespace of the referenced object.
        type: string
        x-kab-description-zh: 被引用对象的名字空间。
      resourceVersion:
        description: Specific `resourceVersion` to which this reference is made, if
          any.
        type: string
        x-kab-description-zh: 此引用所针对的特定 `resourceVersion`，如果有的话。
      uid:
        description: UID of the referenced object.
        type: string
        x-kab-description-zh: 被引用对象的 UID。
    type: object
    x-kab-description-zh: |-
      ObjectReference 包含足够的信息以让你检视或者修改所引用的对象。

      Kubernetes 不建议继续使用这个类别，因为当此结构嵌套到 API 中的时候很难描述其用法。

      1. **被忽略的字段**：其中包含很多通常不会被重视的字段。例如：`resourceVersion` 和 `fieldPath`
         都是在实际场景中很少具有合法取值的字段。
      1. **用法的帮助信息不合理**：为某种用法来添加特定的帮助信息很困难。在大多数被嵌入使用的场景中，
         存在一些额外的限制，例如，A）只能引用类别 A 和 B；B）UID 不会被重视；C）名字必须有限制。
         这些额外的限制都很难在此结构被嵌入时很好地描述出来。
      1. **检验操作不一致**：由于用法伤的区别，合法性检查的规则也会因用法而有区别。
         这就使得用户更难判断可能会发生什么事情。
      1. **字段可能不精确也可能过于精确**：类别（kind）信息无法精确映射到某 URL。
         这可能会导致在解释的时候会出现二义性问题，进而需要构造 REST 映射。
         在大多数场合，依赖关系是基于 `(<group>,<resource>)` 元组来确定的，实际结构的版本并不重要。
      1. **我们很难轻易执行变更**：因为此类别被嵌入到多个不同位置，更改此类别会影响很多的数据模式。
         一般性的建议是，在创建新的 API 时，不要嵌入自己无法控制的、规约不明确的 API 类别。

      如果不使用此类别，替代方式是创建一个本地来制备并使用的、聚焦在你的偏好上的类别。
      例如，对于准入控制场景，可以构造 `ServiceReferences`。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.PersistentVolume.CREATE:
    description: A storage resource provisioned by an administrator.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolume
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec'
        description: The specification of a persistent volume owned by the cluster.
        x-kab-description-zh: 集群所拥有的某个持久卷的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 管理员制备的一个存储资源。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolume
        version: v1
  io.k8s.api.core.v1.PersistentVolume.GET:
    description: A storage resource provisioned by an administrator.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolume
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec'
        description: The specification of a persistent volume owned by the cluster.
        x-kab-description-zh: 集群所拥有的某个持久卷的规约。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeStatus'
        description: The current information/status for the persistent volume.
        x-kab-description-zh: 此持久卷的当前信息、状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: 管理员制备的一个存储资源。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolume
        version: v1
  io.k8s.api.core.v1.PersistentVolume.UPDATE:
    description: A storage resource provisioned by an administrator.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolume
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec'
        description: The specification of a persistent volume owned by the cluster.
        x-kab-description-zh: 集群所拥有的某个持久卷的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: 管理员制备的一个存储资源。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolume
        version: v1
  io.k8s.api.core.v1.PersistentVolumeClaim.CREATE:
    description: A user's request for and claim to a PersistentVolume (PV).
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolumeClaim
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name of must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec'
        description: The desired characteristics of a PersistentVolumeClaim.
        x-kab-description-zh: PersistentVolumeClaim 的期望特点。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 用于对某个 PersistentVolume（PV）资源的请求与申领。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeClaim
        version: v1
  io.k8s.api.core.v1.PersistentVolumeClaim.GET:
    description: A user's request for and claim to a PersistentVolume (PV).
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolumeClaim
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec'
        description: The desired characteristics of a PersistentVolumeClaim.
        x-kab-description-zh: PersistentVolumeClaim 的期望特点。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimStatus'
        description: The current information/status of a persistent volume claim.
        x-kab-description-zh: PersistentVolumeClaim 的当前信息、状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: 用于对某个 PersistentVolume（PV）资源的请求与申领。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeClaim
        version: v1
  io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE:
    description: A user's request for and claim to a PersistentVolume (PV).
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolumeClaim
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec'
        description: The desired characteristics of a PersistentVolumeClaim.
        x-kab-description-zh: PersistentVolumeClaim 的期望特点。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: 用于对某个 PersistentVolume（PV）资源的请求与申领。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeClaim
        version: v1
  io.k8s.api.core.v1.PersistentVolumeClaimCondition:
    description: Detailed state of a PVC.
    properties:
      lastProbeTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time we probed the condition.
        x-kab-description-zh: 上次探测状况的时间戳。
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间戳。
      message:
        description: Human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: |-
          Unique, this should be a short, machine understandable string that gives the reason
          for condition's last transition. If it reports `"Resizing"` that means
          the underlying persistent volume is being resized.
        type: string
        x-kab-description-zh: |-
          上次状况转换的原因，通常是唯一性的、简短的、机器可理解的字符串。
          如果所报告的 `reason` 是 `"Resizing"`，则意味着下层的持久卷正给被重设大小。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknownn
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          The type of the condition.

          - `"Resizing"`: A user triggered resize of PVC has been started.
          - `"FileSystemResizePending"`: The controller resize has completed and a file system
            resize is pending on node.
        enum:
          - Resizing
          - FileSystemResizePending
        minLength: 1
        type: string
        x-kab-description-zh: |-
          状况的类型：

          - `"Resizing"`：用户触发的 PVC 改变大写操作已经开始。
          - `"FileSystemResizePending"`：控制器的卷大小变更操作已经完成，
            文件系统的重设大小操作尚未开始。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: 某个 PersistentVolumeClaim 的详细状态。
  io.k8s.api.core.v1.PersistentVolumeClaimList:
    description: A list of PersistentVolumeClaim objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PersistentVolumeClaim objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
        type: array
        x-kab-description-zh: 包含 PersistentVolumeClaim 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolumeClaimList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 PersistentVolumeClaim 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeClaimList
        version: v1
  io.k8s.api.core.v1.PersistentVolumeClaimSpec:
    description: The common attributes and the provider-specific attributes of storage
      devices.
    properties:
      accessModes:
        description: |-
          The desired access modes of the volume.

          - `"ReadOnlyMany"`: can be mounted in read-only mode to many hosts;
          - `"ReadWriteMany"`: can be mounted in read/write mode to many hosts;
          - `"ReadWriteOnce"`: can be mounted in read/write mode to exactly 1 host;
          - `"ReadWriteOncePod"`: can be mounted in read/write mode to exactly 1 pod,
            cannot be used in combination with other access modes.
        items:
          enum:
            - ReadOnlyMany
            - ReadWriteMany
            - ReadWriteOnce
            - ReadWriteOncePod
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          数据卷预期的访问模型。

          - `"ReadOnlyMany"`：可以被多个主机以只读模式挂载；
          - `"ReadWriteMany"`：可以被多个主机以读写模式挂载；
          - `"ReadWriteOnce"`：只能被一个主机以读写模式挂载；
          - `"ReadWriteOncePod"`：只能被一个 Pod 以读写模式挂载，不能与其他模式组合使用。
        x-kubernetes-list-type: atomic
      dataSource:
        $ref: '#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference'
        description: |-
          This field can be used to specify either:

          - An existing `VolumeSnapshot` object (`"snapshot.storage.k8s.io/VolumeSnapshot"`- beta)
          - An existing PVC (`PersistentVolumeClaim`).

          If the provisioner or an external controller can support the specified data source,
          it will create a new volume based on the contents of the specified data source.
          When the `AnyVolumeDataSource` feature gate is enabled, the `dataSource` contents
          will be copied to `dataSourceRef`, and `dataSourceRef` contents will be copied to
          `dataSource` when `dataSourceRef.namespace` is not specified.
          If the namespace is specified, then `dataSourceRef` will not be copied to `dataSource`.
        x-kab-description-zh: |-
          此字段可以用来设置：
          - 一个现有的 `VolumeSnapshot` 对象
            （`"snapshot.storage.k8s.io/VolumeSnapshot"`- Beta 阶段)；
          - 一个现有的 PVC（`PersistentVolumeClaim`）。

          如果制备者或者某个外部控制器可以支持所设定的数据源，
          则会根据所设置的数据源中的内容创建新的数据卷。

          当启用了`AnyVolumeDataSource` 特性门控时，`dataSource` 的内容会被复制到 `dataSourceRef`
          中，而当 `dataSourceRef.namespace` 未设置时，`dataSourceRef` 的内容会被复制到
          `dataSource` 中。
          如果 `dataSourceRef.namespace` 被设置了，则 `dataSourceRef` 的内容不会被复制到
          `dataSource` 中。
      dataSourceRef:
        $ref: '#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference'
        description: |-
          Specifies the object from which to populate the volume with data, if a non-empty volume
          is desired. This may be any object from a non-empty API group (non core object) or
          a PersistentVolumeClaim object.
          When this field is specified, volume binding will only succeed if the type of the
          specified object matches some installed volume populator or dynamic provisioner.
          This field will replace the functionality of the `dataSource` field and as such
          if both fields are non-empty, they must have the same value.
          For backwards compatibility, when namespace isn't specified in `dataSourceRef`,
          both fields (`dataSource` and `dataSourceRef`) will be set to the same value
          automatically if one of them is empty and the other is non-empty.
          When namespace is specified in `dataSourceRef`, `dataSource` isn't set to the same value
          and must be empty.
          There are three important differences between `dataSource` and `dataSourceRef`:

          - While `dataSource` only allows two specific types of objects, `dataSourceRef`
            allows any non-core object, as well as PersistentVolumeClaim objects.
          - While `dataSource` ignores disallowed values (dropping them), `dataSourceRef`
            preserves all values, and generates an error if a disallowed value is specified.
          - While `dataSource` only allows local objects, `dataSourceRef` allows objects
            in any namespaces.

          (Beta) Using this field requires the `AnyVolumeDataSource` feature gate to
          be enabled.
          (Alpha) Using the namespace field of `dataSourceRef` requires the
          `CrossNamespaceVolumeDataSource` feature gate to be enabled.
        x-kab-description-zh: |-
          如果希望使用一个非空数据卷时，可使用此字段指定一个对象作为数据源，为数据卷填充数据。
          此字段可以是非空 API 组（即非核心 API 组）的任意对象，也可以是一个 PersistentVolumeClaim
          对象。
          设置了此字段时，只有所指定的对象的类别与已安装的某种卷填充组件或动态制备组件匹配时，
          卷绑定才会成功。此字段会替代 `dataSource` 字段的功能，因此，当此字段和 `dataSource`
          都不为空时，二者的取值必须相同。出于向后兼容的目的，如果在 `dataSourceRef`
          中未指定名字空间，那么如果 `dataSource` 和 `dataSourceRef` 这两个字段中一个设置了，
          另一个为空，则系统会自动将二者设置为相同的值。
          如果在 `dataSourceRef` 中设置了名字空间，则 `dataSource` 不会被设置为相同的值，必须为空。
          `dataSource` 和 `dataSourceRef` 之间存在三点重要区别：

          - `dataSource` 只能指定两种类别的对象，`dataSourceRef` 允许使用非核心组的对象，
            也可以使用 PersistentVolumeClaim 对象；
          - `dataSource` 会忽略非法的属性值（将其丢弃）`dataSourceRef` 则会保留所有值，
            并在设置了非法属性值时报错；
          - `dataSource` 只能使用当前名字空间中的对象，`dataSourceRef` 允许使用任何名字空间中的对象。

          **Beta 特性**：使用此字段需要启用 `AnyVolumeDataSource` 特性门控。

          **Alpha 特性**：使用 `dataSourceRef` 中的 `namespace` 字段要求启用特性门控
          `CrossNamespaceVolumeDataSource`。
      resources:
        $ref: '#/definitions/io.k8s.api.core.v1.VolumeResourceRequirements'
        description: |-
          The minimum resources the volume should have.
          The `requests.storage` must be specified as a positive quantity value.
          If the `RecoverVolumeExpansionFailure` feature is enabled users are allowed to
          specify resource requirements that are lower than previous value but must still
          be higher than capacity recorded in the status field of the claim.
        x-kab-description-zh: |-
          卷所应具备的最低资源配置。`requests.storage` 必须设置为一个正数数量值。
          如果启用了 `RecoverVolumeExpansionFailure` 特性门控，用户可以设置低于之前设置值的新值，
          但所设置的值仍然必须高于 PVC 的 `status` 字段中记录的容量。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: A label query over volumes to be considered for binding.
        x-kab-description-zh: 在确定绑定关系时用来查询存储卷的一个选择算符。
      storageClassName:
        description: |-
          Name of the StorageClass required by the claim.
          The name must be a valid DNS subdomain, if specified.
        type: string
        x-kab-description-zh: 此 PVC 所要求的 StorageClass 名称。如果设置了，字段值必须是一个合法的 DNS 子域名。
      volumeAttributesClassName:
        description: |-
          This may be used to set the VolumeAttributesClass used by this claim.
          This has a different purpose than `storageClassName`, it can be changed after the claim is created.
          If unspecified and the PersistentVolumeClaim is unbound, the default VolumeAttributesClass will be set
          by the persistentvolume controller if it exists.

          If specified, the CSI driver will create or update the volume with the attributes defined in
          the corresponding VolumeAttributesClass.
          An empty string value means that no VolumeAttributesClass will be applied to the claim.
          If the resource referred to by `volumeAttributesClassName` does not exist, this PersistentVolumeClaim will
          be set to a Pending state, as reflected by the `modifyVolumeStatus` field, until such as a resource exists.

          This field is at Alpha stage. Using this field requires the `VolumeAttributesClass` feature gate to be enabled.
          If the `VolumeAttributesClass` gate is not enabled, this field cannot be updated.
          When updating this field, it's not allowed to update this field from a non-empty string to an empty string.
          The field value must be a valid DNS subdomain name.

          More info can be found at [official docs](https://kubernetes.io/docs/concepts/storage/volume-attributes-class/).
        type: string
        x-kab-description-zh: |-
          此字段用来设置对应 PVC 所使用的 VolumeAttributesClass。
          字段的用途与 `storageClassName` 不同；此字段可以在 PVC 已经被创建之后变更。
          如果未指定此字段，并且 PersistentVolumeClaim 处于未绑定状态，则 PV 控制器会尝试设置默认的 VolumeAttributesClass（如果有的话）。

          如果设置了此字段，则 CSI 驱动会根据对应的 VolumeAttributesClass 中定义的属性来创建或更新存储卷。
          字段为空字符串意味着没有 VolumeAttributesClass 适用于当前的 PVC。
          如果 `volumeAttributesClassName` 所引用的资源尚不存在，则 PVC 会被设置为 Pending 状态，反映在 `modifyVolumeStatus` 中，
          直到对应的资源存在为止。

          此字段处于 Alpha 阶段。使用此字段需要启用 `VolumeAttributesClass` 特性门控。
          如果未启用 `VolumeAttributesClass` 特性门控，则此字段不可被更新。
          更新此字段时，不允许将字段值从非空字符串改为空字符串。
          字段值必须是合法的 DNS 子域名。

          参阅[官方文档](https://kubernetes.io/zh-cn/docs/concepts/storage/volume-attributes-class/)，
          可以了解进一步的信息。
      volumeMode:
        default: Filesystem
        description: Type of volume required by the claim.
        enum:
          - Block
          - Filesystem
        type: string
        x-kab-description-zh: 此 PVC 所要求的卷的类型。
      volumeName:
        description: The binding reference to the PersistentVolume backing this claim.
        type: string
        x-kab-description-zh: 对为此 PVC 提供存储的 PV 的绑定引用。
    required:
      - accessModes
      - resources
    type: object
    x-kab-description-zh: 存储设备的公共属性及其特定于供应者的属性。
  io.k8s.api.core.v1.PersistentVolumeClaimStatus:
    description: The current status of a PersistentVolumeClaim.
    properties:
      accessModes:
        description: |-
          The actual access modes of the volume backing the PVC.

          - `"ReadOnlyMany"`: can be mounted in read-only mode to many hosts;
          - `"ReadWriteMany"`: can be mounted in read/write mode to many hosts;
          - `"ReadWriteOnce"`: can be mounted in read/write mode to exactly 1 host;
          - `"ReadWriteOncePod"`: can be mounted in read/write mode to exactly 1 pod,
            cannot be used in combination with other access modes.
        items:
          enum:
            - ReadOnlyMany
            - ReadWriteMany
            - ReadWriteOnce
            - ReadWriteOncePod
          type: string
        type: array
        x-kab-description-zh: |-
          为 PVC 提供存储的卷的实际访问模式。

          - `"ReadOnlyMany"`：可以被多个主机以只读模式挂载；
          - `"ReadWriteMany"`：可以被多个主机以读写模式挂载；
          - `"ReadWriteOnce"`：只能被一个主机以读写模式挂载；
          - `"ReadWriteOncePod"`：只能被一个 Pod 以读写模式挂载，不能与其他模式组合使用。
        x-kubernetes-list-type: atomic
      allocatedResourceStatuses:
        additionalProperties:
          type: string
        description: |-
          This stores status of resource being resized for the given PVC.
          Key names follow standard Kubernetes label syntax. Valid values are:

          - Un-prefixed keys:
            - `storage` - the capacity of the volume.
          - Custom resources must use implementation-defined prefixed names such as
            `"example.com/my-custom-resource"`

          Apart from above values - keys that are unprefixed or have `"kubernetes.io"` prefix
          are considered reserved and hence may not be used.

          The status of a claim resource can be in any of following states:
          - `"ControllerResizeInProgress"`: State set when the resize controller starts resizing
            the volume in control-plane.
          - `"ControllerResizeFailed"`: State set when a resize has failed in the resize
            controller with a terminal error.
          - `"NodeResizePending"`: State set when the resize controller has finished resizing
            the volume but further resizing of the volume is needed on the node.
          - `"NodeResizeInProgress"`: State set when kubelet starts resizing the volume.
          - `"NodeResizeFailed"`: State set when resizing has failed in kubelet with a terminal
            error. Transient errors don't set `NodeResizeFailed`.

          When this field is not set, no resize operation is in progress for the given PVC.

          A controller that receives PVC update with previously unknown `resourceName` or claim
          resource status should ignore the update for the purpose it was designed.
          For example, a controller that only is responsible for resizing capacity of the volume,
          should ignore PVC updates that change other valid resources associated with PVC.

          This is an Alpha field and requires enabling `RecoverVolumeExpansionFailure` feature.
        type: object
        x-kab-description-zh: |-
          此字段保存的是针对给定 PVC 的资源大小调整状态。
          主键名称遵从 Kubernetes 标准的标签语法。合法的值包括：

          - 没有前缀的主键。目前仅支持 `"storage"`，意为卷的容量。
          - 自定义的资源必须使用特定于具体实现的、带前缀的名字，例如：
            `"example.com/my-custom-resource"`。

          除了以上的取值之外，没有前缀的或者前缀为 `"kubernetes.io"` 的名字都应被视为保留的，
          因而不可使用的。

          PVC 资源的状态可以是以下取值之一：

          - `"ControllerResizeInProgress"`：当控制面中的重设大小控制器开始调整大小时设置此状态。
          - `"ControllerResizeFailed"`：当重设大小控制器以终结性错误终止时，
            设置此状态表明调整大小失败。
          - `"NodeResizePending"`：当重设大小控制器已经完成了卷的大小变更，
            但需要在节点上执行对卷进行大小变更的进一步操作时，设置此状态。
          - `"NodeResizeInProgress"`：当 kubelet 开始调整卷的大小时设置此状态。
          - `"NodeResizeFailed"`：当 kubelet 遇到终结性错误，进而无法完成调整大小的操作时，
            设置为此状态。临时性的错误不会设置这个状态。

          如果这个字段没有被设置时，意味着对于给定的 PVC 没有正在被处理的大小调整操作。

          如果一个控制器收到了 PVC 更新事件，其中给出的 `resourceName` 是之前未知的，或者 PVC
          的状态是不可识别的，应该忽略这类更新，专注于控制器原本用来设计执行的操作。
          例如，如果一个控制器仅负责对卷的容量进行调整，那么它就应该忽略与 PVC
          相关的其他合法资源的变更。

          此字段处于 Alpha 阶段，需要启用 `RecoverVolumeExpansionFailure` 特性门控。
        x-kubernetes-map-type: granular
      allocatedResources:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          This tracks the resources allocated to a PVC including its capacity.
          Key names follow standard Kubernetes label syntax. Valid values are either:

          - Un-prefixed keys:
            - `storage`: the capacity of the volume.
          - Custom resources must use implementation-defined prefixed names such as
            `"example.com/my-custom-resource"`.

          Apart from above values, keys that are unprefixed or have `"kubernetes.io"` prefix are
          considered reserved and hence may not be used.

          Capacity reported here may be larger than the actual capacity when a volume expansion
          operation is requested.
          For storage quota, the larger value from `allocatedResources` and `PVC.spec.resources`
          is used. If `allocatedResources` is not set, `PVC.spec.resources` alone is used for
          quota calculation.

          If a volume expansion capacity request is lowered, `allocatedResources` is only lowered
          if there are no expansion operations in progress and if the actual volume capacity is
          equal or lower than the requested capacity.

          A controller that receives PVC update with previously unknown `resourceName` should
          ignore the update for the purpose it was designed.
          For example, a controller that only is responsible for resizing capacity of the volume
          should ignore PVC updates that change other valid resources associated with PVC.

          This is an Alpha field and requires enabling the `RecoverVolumeExpansionFailure` feature.
        type: object
        x-kab-description-zh: |-
          此字段跟踪分配给 PVC 的资源，包括其存储容量变化。
          主键名称遵从 Kubernetes 标准的标签语法。合法的值包括：

          - 没有前缀的主键。目前仅支持 `"storage"`，意为卷的容量。
          - 自定义的资源必须使用特定于具体实现的、带前缀的名字，例如：
            `"example.com/my-custom-resource"`。

          除了以上的取值之外，没有前缀的或者前缀为 `"kubernetes.io"` 的名字都应被视为保留的，
          因而不可使用的。

          这里所报告的容量信息可能比申请对卷进行扩容操作时的实际容量大。
          就存储配额管理而言，会选用 `allocatedResources` 和 `PVC.spec.resources` 二者中较大者。
          如果未设置 `allocatedResources`，则 `PVC.spec.resources` 自身被用来计算配额用量。

          如果卷扩展容量请求被降低，则 `allocatedResources` 只有在没有扩展操作在进行中，
          并且实际卷容量等于或者低于所请求容量时，才会被减少。

          如果一个控制器收到了 PVC 更新事件，其中给出的 `resourceName` 是之前未知的，
          它应该忽略这类更新，专注于控制器原本用来设计执行的操作。
          例如，如果一个控制器仅负责对卷的容量进行调整，那么它就应该忽略与 PVC
          相关的其他合法资源的变更。

          此字段处于 Alpha 阶段，需要启用 `RecoverVolumeExpansionFailure` 特性门控。
      capacity:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: The actual resource capacity of the underlying volume.
        type: object
        x-kab-description-zh: 下层存储卷的实际资源容量。
      conditions:
        description: |-
          Current condition of the PVC.
          If the underlying PV is being resized then the `condition` will be set to
          `"Resizing"`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition'
        type: array
        x-kab-description-zh: |-
          PVC 的当前状况。如果下层的 PV 卷正在被调整大小，则 `condition` 会被设置为
          `"Resizing"`。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      currentVolumeAttributesClassName:
        description: |-
          `currentVolumeAttributesClassName` is the current name of the VolumeAttributesClass the PVC is using.
          When unset, there is no VolumeAttributeClass applied to this PersistentVolumeClaim.
          This is an Alpha field and requires enabling VolumeAttributesClass feature.
        type: string
        x-kab-description-zh: |-
          `currentVolumeAttributesClassName` 是此 PVC 所使用的 VolumeAttributesClass 的名称。
          未设置时表明没有 VolumeAttributeClass 被应用到此 PersistentVolumeClaim。
          此字段处于 Alpha 阶段，需要启用 VolumeAttributesClass 特性门控。
      modifyVolumeStatus:
        $ref: '#/definitions/io.k8s.api.core.v1.ModifyVolumeStatus'
        description: |-
          此字段用来表示 ControllerModifyVolume 操作的状态对象。
          未设置此字段时，意味着未尝试 ModifyVolume 操作。
          此字段处于 Alpha 阶段，需要启用 VolumeAttributesClass 特性门控。
      phase:
        description: |-
          The current phase of PersistentVolumeClaim.

          - `"Bound"`: The PVC is already bound;
          - `"Pending"`: The PVC is not yet bound;
          - `"Lost"`: The PVC has lost its underlying PersistentVolume. The claim was bound to
            a PersistentVolume and the volume does not exist any longer and all data on it was lost.
        enum:
          - Bound
          - Lost
          - Pending
        type: string
        x-kab-description-zh: |-
          PersistentVolumeClaim 当前所处的阶段：

          - `"Bound"`：PVC 已经被绑定；
          - `"Pending"`：PVC 尚未被绑定；
          - `"Lost"`：PVC 已经失去下层 PV 存储卷。PVC 原来绑定到某个 PersistentVolume，
            但是该卷不再存在，卷上所有数据都已丢失。
    type: object
    x-kab-description-zh: PersistentVolumeClaim 对象的当前状态。
  io.k8s.api.core.v1.PersistentVolumeClaimTemplate:
    description: A template used to produce PersistentVolumeClaim objects as part
      of an EphemeralVolumeSource.
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          May contain labels and annotations that will be copied into the PVC when creating it.
          No other fields are allowed during validation.
        x-kab-description-zh: |-
          此字段可以包含标签和注解等信息，这些信息在创建 PVC 时会被复制到其中。
          在合法性检查期间，不允许设置其他字段。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimSpec'
        description: |-
          The specification for the PersistentVolumeClaim.
          The entire content is copied unchanged into the PVC that gets created from this template.
          The same fields as in a PersistentVolumeClaim are also valid here.
        x-kab-description-zh: |-
          PersistentVolumeClaim 对象的规约。
          这里的内容会被全盘复制到基于此模板创建的 PVC 当中。
          PersistentVolumeClaim 资源所使用的所有字段在这里都是合法的。
    required:
      - spec
    type: object
    x-kab-description-zh: 一个用来生成作为 EphemeralVolumeSource 一部分的 PersistentVolumeClaim
      对象的模板。
  io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource:
    description: |-
      PersistentVolumeClaimVolumeSource references the user's PVC in the same namespace.
      This volume finds the bound PV and mounts that volume for the Pod.
      A PersistentVolumeClaimVolumeSource is, essentially, a wrapper around another type
      of volume that is owned by someone else (the system).
    properties:
      claimName:
        description: The name of a PersistentVolumeClaim in the same namespace as
          the Pod.
        minLength: 1
        type: string
        x-kab-description-zh: Pod 所在名字空间中某个 PersistentVolumeClaim 的名字。
      readOnly:
        default: false
        description: 是否强制在 `volumeMounts` 中强制设置 `readOnly` 选项。
        type: boolean
    required:
      - claimName
    type: object
    x-kab-description-zh: |-
      PersistentVolumeClaimVolumeSource 引用在同一个名字空间中用户的 PVC 对象。
      此卷会找到所绑定的 PV 卷，并将该卷挂载到 Pod 中。
      PersistentVolumeClaimVolumeSource 本质上是对另一种卷类型的一种封装，
      被封装的卷可能是属于其他人（或者整个系统）的。
  io.k8s.api.core.v1.PersistentVolumeList:
    description: A list of PersistentVolume objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PersistentVolume objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
        type: array
        x-kab-description-zh: 包含 PersistentVolume 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PersistentVolumeList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadat
    type: object
    x-kab-description-zh: 包含 PersistentVolume 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PersistentVolumeList
        version: v1
  io.k8s.api.core.v1.PersistentVolumeSpec:
    description: |-
      The specification of a PersistentVolume. One and only one volume type must be specified.
      The volume source cannot be updated once created.
    properties:
      accessModes:
        description: The ways the volume can be mounted.
        items:
          enum:
            - ReadOnlyMany
            - ReadWriteMany
            - ReadWriteOnce
            - ReadWriteOncePod
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: 卷可以被挂载的方式。
        x-kubernetes-list-type: aotmic
      awsElasticBlockStore:
        $ref: '#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource'
        description: |-
          An AWS disk resource that is attached to a kubelet's host machine
          and then exposed to the Pod.
        x-kab-description-zh: 一个挂接到 kubelet 所在主机上进而可以被 Pod 访问的 AWS 磁盘资源。
      azureDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource'
        description: An Azure data disk mounted on the node and bind mounted to the
          Pod.
        x-kab-description-zh: 一个挂载到节点上进而可以被绑定挂载到 Pod 中的 Azure 数据盘。
      azureFile:
        $ref: '#/definitions/io.k8s.api.core.v1.AzureFilePersistentVolumeSource'
        description: An Azure file service mounted on the node and bind mounted to
          the Pod.
        x-kab-description-zh: 一个挂载到节点上进而可以被绑定挂载到 Pod 中的 Azure 文件服务。
      capacity:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          A description of the persistent volume's resources and capacity.
          The capacity can only contain `"storage"` and the value must be a positive quantity.
          This must be specified for regular volumes, but CANNOT be specified for inline volumes.
        type: object
        x-kab-description-zh: |-
          关于此 PV 卷的资源与容量的描述。
          容量部分只能包含 `"storage"`，并且其取值为正数量纲值。
          对于普通存储卷而言，此字段必须设置；对于内联存储卷而言，此字段不可设置。
      cephfs:
        $ref: '#/definitions/io.k8s.api.core.v1.CephFSPersistentVolumeSource'
        description: A Ceph FS mounted on the node that shares a Pod's lifetime.
        x-kab-description-zh: 一个被挂载到节点上、与某 Pod 生命期相同的 Ceph FS。
      cinder:
        $ref: '#/definitions/io.k8s.api.core.v1.CinderPersistentVolumeSource'
        description: A Cinder volume attached and mounted on node.
        x-kab-description-zh: 一个被挂接并挂载到节点上的 Cinder 存储卷。
      claimRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          Part of a bi-directional binding between a `PersistentVolume` and a
          `PersistentVolumeClaim`. Expected to be non-nil when bound.
          `claim.volumeName` is the authoritative binding between a PV and a PVC.
          This cannot be specified for inline volumes.
        x-kab-description-zh: |-
          一个 `PersistentVolume` 和一个 `PersistentVolumeClaim` 之间双向绑定的一部分。
          当绑定关系建立之后，预期是非空值。
          `claim.volumeName` 是 PV 与 PVC 之间存在绑定关系的权威判定标准。
          对于内联存储卷而言，不可设置此字段。
        x-kubernetes-map-type: granular
      csi:
        $ref: '#/definitions/io.k8s.api.core.v1.CSIPersistentVolumeSource'
        description: |-
          Storage that is handled by an external CSI driver.
          For inline volumes, this has to be specified.
        x-kab-description-zh: 由某个外部 CSI 驱动来管理的存储。对于内联存储卷而言，此字段必须设置。
      fc:
        $ref: '#/definitions/io.k8s.api.core.v1.FCVolumeSource'
        description: A FC (fibre channel) resource that is attached to a node and
          then exposed to the Pod.
        x-kab-description-zh: 一个被挂接到节点上并提供给 Pod 使用的 FC（光纤通道）资源。
      flexVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.FlexPersistentVolumeSource'
        description: A generic volume resource that is provisioned/attached using
          an exec-based plugin.
        x-kab-description-zh: 使用基于 exec 的插件来制备和挂接的通用存储卷资源。
      flocker:
        $ref: '#/definitions/io.k8s.api.core.v1.FlockerVolumeSource'
        description: A flocker volume attached to a node and exposed to the Pod.
        x-kab-description-zh: 挂接到节点并提供给 Pod 使用的一个 Flocker 存储卷。
      gcePersistentDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource'
        description: A GCE disk resource that is attached to a node and exposed to
          the Pod.
        x-kab-description-zh: 一个被挂接到节点上提供给 Pod 使用的 GCE 磁盘资源。
      glusterfs:
        $ref: '#/definitions/io.k8s.api.core.v1.GlusterfsPersistentVolumeSource'
        description: A Glusterfs volume that is attached to a node and exposed to
          the Pod.
        x-kab-description-zh: 一个被挂接到节点上提供给 Pod 使用的 Glusterfs 卷。
      hostPath:
        $ref: '#/definitions/io.k8s.api.core.v1.HostPathVolumeSource'
        description: |-
          A directory on the node. Provisioned by a developer or tester.
          This is useful for single-node development and testing only!
          On-host storage is not supported in any way and WILL NOT WORK in a multi-node cluster.
        x-kab-description-zh: |-
          节点上的一个目录。由开发人员或者测试人员负责制备。
          此卷类型对于单节点的开发与测试场景有用。
          主机本地存储是不受支持的，在多节点的集群中很可能不工作。
      iscsi:
        $ref: '#/definitions/io.k8s.api.core.v1.ISCSIPersistentVolumeSource'
        description: An iSCSI disk that is attached to a node and then exposed to
          the Pod.
        x-kab-description-zh: 一个被挂接到节点上提供给 Pod 使用的 iSCSI 磁盘。
      local:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalVolumeSource'
        description: Directly-attached storage with node affinity.
        x-kab-description-zh: 带有节点亲和性的直连存储。
      mountOptions:
        description: A list of mount options. Not validated - mount will simply fail
          if one is invalid.
        items:
          type: string
        type: array
        x-kab-description-zh: 一个包含挂载选项的列表。系统不会检查选项的合法性；如果选项非法，挂载操作会失败。
        x-kubernetes-list-type: atomic
      nfs:
        $ref: '#/definitions/io.k8s.api.core.v1.NFSVolumeSource'
        description: An NFS mount on the node.
        x-kab-description-zh: 节点上的一份 NFS 挂载。
      nodeAffinity:
        $ref: '#/definitions/io.k8s.api.core.v1.VolumeNodeAffinity'
        description: |-
          Constraints that limit what nodes this volume can be accessed from.
          This field influences the scheduling of Pods that use this volume.
          This cannot be used on an inline volume. This cannot be used on a `local` volume.
          This can be updated if not set yet.
        x-kab-description-zh: |-
          限制从哪些节点可以访问此存储卷的约束。此字段的值会影响对使用此卷的 Pod 的调度。
          此字段不可用于内联存储卷，也不可用于 `local` 存储卷。
          如果 PV 卷上尚未设置此字段，可以通过更新操作设置。
      persistentVolumeReclaimPolicy:
        default: Retain
        description: |-
          What happens to a persistent volume when released from its claim. Valid options are:

          - `"Retain"`: default for manually created `PersistentVolume`s.
            For inline volumes, this is the **only** choice. The volume is left in its curret
            phase (`Released`) for manual reclamation by the administrator.
          - `"Delete"`: default for dynamically provisioned `PersistentVolume`s.
          - `"Recycle"`: an option that is abandoned.
            `"Recycle"` must be supported by the volume plugin backing this `PersistentVolume`.
            `hostPath` volume mounts of `"/"` cannot be used with the `"Recycle"` policy.
        enum:
          - Delete
          - Recycle
          - Retain
        type: string
        x-kab-description-zh: |-
          当此 PV 卷从对应的 PVC 释放之后，要如何处理。合法的选项有：

          - `"Retain"`：对于手动创建的 PersistentVolume 而言，此选项是默认设置。
            对于内联存储卷而言，**只能** 选择此选项。存储卷会一直留在其当前的阶段（`Released`）
            直到被管理员手动回收。
          - `"Delete"`：此设置是动态制备的 PersistentVolume 的默认设置。
          - `"Recycle"`：此选项已被放弃。`"Recycle"` 必须被提供存储的卷插件所支持。
            采用 `hostPath` 来挂载 `"/"` 时，不可以使用 `"Recycle"` 策略。
      photonPersistentDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource'
        description: A PhotonController persistent disk attached and mounted on the
          node.
        x-kab-description-zh: 一个被挂接并挂载到节点上的 PhotonController 持久盘。
      portworxVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.PortworxVolumeSource'
        description: A portworx volume attached and mounted on the node.
        x-kab-description-zh: 一个被挂接并挂载到节点上的 portworx 持久盘。
      quobyte:
        $ref: '#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource'
        description: A quobyte mount on the node that shares a Pod's lifetime.
        x-kab-description-zh: 一个挂载到节点上并与某 Pod 生命周期相同的 quobyte 挂载卷。
      rbd:
        $ref: '#/definitions/io.k8s.api.core.v1.RBDPersistentVolumeSource'
        description: A Rados Block Device mounted on the node that shares a Pod's
          lifetime.
        x-kab-description-zh: 一个挂载到节点上并与某 Pod 生命周期相同的 Rados Block Device。
      scaleIO:
        $ref: '#/definitions/io.k8s.api.core.v1.ScaleIOPersistentVolumeSource'
        description: A ScaleIO persistent volume attached and mounted on the nodes.
        x-kab-description-zh: 一个被挂接并挂载到节点上的 ScaleIO 持久卷。
      storageClassName:
        description: |-
          Name of a StorageClass to which this persistent volume belongs.
          Empty value means that this volume does not belong to any StorageClass.
          The string must be a valid DNS subdomain name.
          This CANNOT be specified on an inline volume.
        type: string
        x-kab-description-zh: |-
          此 PersistentVolume 所属的 StorageClass 的名称。
          如果此字段值为空，则意味着此 PersistentVolume 不属于任何 StorageClass。
          此字符串必须是合法的 DNS 子域名。
          此字段不适用于内联卷。
      storageos:
        $ref: '#/definitions/io.k8s.api.core.v1.StorageOSPersistentVolumeSource'
        description: A StorageOS volume that is attached to the node and mounted into
          the Pod.
        x-kab-description-zh: 一个被挂接到节点上并被挂载到 Pod 中的 StorageOS 卷。
      volumeAttributesClassName:
        description: |-
          Name of VolumeAttributesClass to which this persistent volume belongs. Empty value is not allowed.
          When this field is not set, it indicates that this volume does not belong to any VolumeAttributesClass.
          This field is mutable and can be changed by the CSI driver after a volume has been updated successfully to a new class.
          For an unbound PersistentVolume, the `volumeAttributesClassName` will be matched with unbound PersistentVolumeClaims
          during the binding process.
          This is an Alpha field and requires enabling VolumeAttributesClass feature.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此 PV 所属的 VolumeAttributesClass 的名称。字段值不能为空字符串，必须是合法的 DNS 子域名。
          未设置此字段意味着此 PV 卷不属于任何 VolumeAttributesClass。
          此字段是可变更的，当数据卷被成功地更新为使用新的 VolumeAttributesClass 时，可以由 CSI 驱动完成变更。
          对于未被绑定的 PersistentVolume 卷，执行绑定的过程中，`volumeAttributesClassName` 值要与未绑定的 PersistentVolumeClaim
          中的值匹配。

          此字段为 Alpha 阶段，需要启用 `VolumeAttributesClass` 特性门控。
      volumeMode:
        default: Filesystem
        description: |-
          This defines if a volume is intended to be used with a formatted filesystem or
          to remain in raw block state. This must be `"Filesystem"` for inline volumes.
          This cannot be updated.
        enum:
          - Block
          - Filesystem
        type: string
        x-kab-description-zh: |-
          此字段定义是否 PV 卷是意图被用做一个已经格式化的文件系统，还是原生的块设备状态。
          对于内联存储卷而言，此字段只能设置为 `"Filesystem"`。
          此字段不可被变更。
      vsphereVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource'
        description: A vSphere volume attached and mounted on the node.
        x-kab-description-zh: 一个被挂接并被挂载到节点上的 vSphere 存储卷。
    required:
      - accessModes
      - capacity
    type: object
    x-kab-description-zh: |-
      PersistentVolumes 的规约。必须且只能指定一种卷类型。
      卷源一旦创建即不可更改。
  io.k8s.api.core.v1.PersistentVolumeStatus:
    description: The current status of a persistent volume.
    properties:
      lastPhaseTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          `lastPhaseTransitionTime` is the time the phase transitioned from one to another and
          automatically resets to current time everytime a volume phase transitions.
          This is an Beta field and requires enabling `PersistentVolumeLastPhaseTransitionTime` feature.
        x-kab-description-zh: |-
          `lastPhaseTransitionTime` 是 PV 从一个阶段进入另一个阶段的时间点，每次阶段转换完成之后，
          此时间戳会被重置为当前时间。
          此字段为 Beta 字段，需要启用 `PersistentVolumeLastPhaseTransitionTime` 特性门控。
      message:
        description: A human-readable message indicating details about why the volume
          is in this state.
        type: string
        x-kab-description-zh: 一个人类可读消息，说明为什么卷会处于当前状态的细节。
      phase:
        description: |-
          This indicates if a volume is available, bound to a claim, or released by a claim.
          Possible enum values:
          - `"Available"` used for PersistentVolumes that are not yet bound.
            Available volumes are held by the binder and matched to PersistentVolumeClaims
          - `"Bound"` used for PersistentVolumes that are bound
          - `"Failed"` used for PersistentVolumes that failed to be correctly recycled or deleted
            after being released from a claim
          - `"Pending"` used for PersistentVolumes that are not available
          - `"Released"` used for PersistentVolumes where the bound PersistentVolumeClaim was deleted.
            Released volumes must be recycled before becoming available again.
            This phase is used by the persistent volume claim binder to signal to another process
            to reclaim the resource.
        enum:
          - Available
          - Bound
          - Failed
          - Pending
          - Released
        type: string
        x-kab-description-zh: |-
          此字段表明是否卷处于可用状态、被绑定到某 PVC，或者被某 PVC 释放。可能的取值包括：

          - `"Available"`：用于尚未被绑定的 PersistentVolume。可用的卷由绑定装置（Binder）管理，
            跟据需要与 PersistentVolumeClaim 匹配。
          - `"Bound"`：用于已经被绑定的 PersistentVolume 对象。
          - `"Failed"`：用于在被 PVC 释放之后未能正确回收或删除的 PersistentVolume。
          - `"Pending"`：用于当前不可用的 PersistentVolume。
          - `"Released"`：用于所绑定的 PersistentVolumeClaim 已经被删除的 PersistentVolume。
            已被释放的卷在再次变为可用之前，需要被回收。PVC 绑定组件使用此阶段来告诉另一进程回收资源。
      reason:
        description: |-
          A brief CamelCase string that describes any failure and is meant for machine parsing and
          tidy display in the CLI.
        type: string
        x-kab-description-zh: 此字段值为一个驼峰编码的字符串，描述可供机器解析的某种失败情况，方便在命令行上简洁输出。
    required:
      - message
      - phase
      - reason
    type: object
    x-kab-description-zh: PersistentVolume 的当前状态。
  io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource:
    description: A Photon controller persistent disk resource.
    properties:
      fsType:
        default: ext4
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统。必须是宿主操作系统所支持的一种文件系统类型。
      pdID:
        description: ID that identifies Photon controller persistent disk.
        minLength: 1
        type: string
        x-kab-description-zh: 一个用来唯一标识当前 Photon 控制器持久盘的 ID。
    required:
      - pdID
    type: object
    x-kab-description-zh: 一个 Photon 控制器持久盘资源。
  io.k8s.api.core.v1.Pod.CREATE:
    description: Pod is a collection of Containers that can run on a host.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - Pod
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The name of must be a valid DNS subdomain name.
          There are some special requirements for the `annotations` for a Pod:

          - The kubelet sets the annotation key `"kubernetes.io/config.mirror"` when creating mirror Pods.
            For mirror Pods, the `spec.nodeName` cannot be empty.
          - The Pod can have `"scheduler.alpha.kubernetes.io/tolerations"` annotation set to a serialized
            JSON data to represent its tolerations. The API server validates if the unmarshaled JSON is
            a valid `Toleration` object.
          - The Pod can have `"seccomp.security.alpha.kubernetes.io/pod"` annotation set to the seccomp
            profile that is applied to all containers in the Pod. This annotation is deprecated
            by the `securityContext.seccompProfile` field. This annotation, when specified,
            is cross verified against the `securityContext.seccompProfile` of the Pod and the
            `securityContext.seccompProfile` of all containers.
          - The Pod can have annotation keys prefixed with
            `"container.seccomp.security.alpha.kubernetes.io/"`.
            These annoations are deprecated by the `seccompProfile` field on the container's
            `securityContext`.
          - The Pod can have annotation keys prefixed with
            `"container.apparmor.security.beta.kubernetes.io/"` for specifying per-container
            AppArmor profile.
        x-kab-description-zh: |-
          标准的对象元数据。对象名称必须是合法的 DNS 子域名。
          对于 Pod 的 `annotations` 字段，有一些额外的要求：

          - 在创建镜像 Pod 时，kubelet 会为 Pod 设置注解键 `"kubernetes.io/config.mirror"`；
            对于镜像 Pod，`.spec.nodeName` 不可以为空。
          - Pod 上可以带有注解 `"scheduler.alpha.kubernetes.io/tolerations"`，其取值为一个序列化的
            JSON 字符串，给出 Pod 对节点污点的容忍度设置。API 服务器会检查解析后的 JSON
            内容是否是一个合法的 `Toleration` 对象。
          - Pod 上可以带有 `"seccomp.security.alpha.kubernetes.io/pod"` 注解，
            该注解值为适用于 Pod 中所有容器的一个 seccomp 配置。这一注解已经被启用，用户应该使用
            `securityContext.seccompProfile` 字段。如果设置了这一注解，API 服务器会将注解值与
            Pod 的 `securityContext.seccompProfile` 字段以及所有容器的 `securityContext.seccompProfile`
            字段设置放在一起作交叉检查。
          - Pod 上可以设置前缀为 `"container.seccomp.security.alpha.kubernetes.io/"` 的注解。
            这些注解目前已经被容器的 `securityContext` 字段的 `seccompProfile` 替代。
          - Pod 上可以设置前缀为 `"container.apparmor.security.beta.kubernetes.io/"` 的注解，
            为每个容器指定 AppArmor 配置。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec.CREATE'
        description: Specification of the desired behavior of the Pod.
        x-kab-description-zh: 关于 Pod 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: Pod 是一组可以运行在某个宿主系统上的容器。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Pod
        version: v1
  io.k8s.api.core.v1.Pod.GET:
    description: Pod is a collection of Containers that can run on a host.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Pod
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec.GET'
        description: Specification of the desired behavior of the pod.
        x-kab-description-zh: 关于 Pod 预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.PodStatus'
        description: |-
          Most recently observed status of the pod. This data may not be up to date.
          Populated by the system. Read-only.
        x-kab-description-zh: 最近观测到的 Pod 状态。此数据可能不是最新的。数据由系统填充。字段一般情况下是只读的。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: Pod 是一组可以运行在某个宿主系统上的容器。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Pod
        version: v1
  io.k8s.api.core.v1.Pod.UPDATE:
    description: Pod is a collection of Containers that can run on a host.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Pod
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. When updating a Pod,
          - If the Pod has an annotation `"container.apparmor.security.beta.kubernetes.io/"`,
            the annotation cannot be removed or changed. If the Pod doesn't have this annotation,
            it cannot be added.
          - If the Pod alreay has an annotation `"kubernetes.io/config.mirror"`, the annotation
            cannot be changed or removed. If the Pod doesn't have this annotation, it cannot be added.
        x-kab-description-zh: |-
          标准的对象元数据。在更新 Pod 时，

          - 如果 Pod 上设置了注解 `"container.apparmor.security.beta.kubernetes.io/"`，
            则该注解在更新的时候不可以被删除或改变。如果 Pod 原来没有这一注解，变更时不可添加。
          - 如果 Pod 上已经设置了注解 `"kubernetes.io/config.mirror"`，此注解不可被变更或者删除。
            如果 Pod 上原来没有这个注解，变更时不可添加。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec.UPDATE'
        description: Specification of the desired behavior of the pod.
        x-kab-description-zh: 关于 Pod 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Pod 是一组可以运行在某个宿主系统上的容器。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Pod
        version: v1
  io.k8s.api.core.v1.PodAffinity:
    description: A group of inter-Pod affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule Pods to nodes that satisfy the affinity expressions
          specified by this field, but it may choose a node that violates one or more of the expressions.
          The node that is most preferred is the one with the greatest sum of `weight`s, i.e.
          for each node that meets all of the scheduling requirements (resource request,
          `requiredDuringScheduling` affinity expressions, etc.), compute a sum by iterating through
          the elements of this field and adding `weight` to the sum if the node has Pods which matches the
          corresponding `podAffinityTerm`; the node(s) with the highest sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        type: array
        x-kab-description-zh: |-
          调度器会优先考虑将 Pod 调度到满足此字段所设定的亲和性表达式的节点上，
          不过也可能会选择一个违反一条或者多条表达式约束的节点上。
          最被青睐的节点是 `weight` 加和值最大的节点。换言之，对于能够满足所有其他调度需求
          （资源请求、`requiredDuringScheduling` 亲和性表达式等等）的每个节点，
          调度器会遍历此列表字段中的每一项，在节点上 Pod 集合满足对应的 `podAffinityTerm` 时将其
          `weight` 值加起来。求和结果最高的节点是最受青睐的节点。
        x-kubernetes-list-type: atomic
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the affinity requirements specified by this field are not met at scheduling time,
          the Pod will not be scheduled onto the node. If the affinity requirements specified by this field
          cease to be met at some point during Pod execution (e.g. due to a Pod label update),
          the system may or may not try to eventually evict the Pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each `podAffinityTerm`
          are intersected, i.e.  all terms must be satisfied.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        type: array
        x-kab-description-zh: |-
          如果此字段所设定的亲和性需求在调度时得不到满足，则 Pod 不会被调度到对应节点。
          如果此字段所设置的亲和性需求在 Pod 执行期间不再成立（例如因为 Pod 标签更新的原因），
          系统可能会、也可能不会将 Pod 从当前节点上逐出。
          当列表中存在多个条目时，系统会对与每个 `podAffinityTerm` 对应的节点列表去交集。
          换言之，所得到的节点列表必须满足这里设置的所有条件。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 一组关于 Pod 间亲和性的调度规则。
  io.k8s.api.core.v1.PodAffinityTerm:
    description: |-
      A set of Pods (namely those matching the `labelSelector` relative to the given namespace(s))
      that this Pod should be co-located (affinity) or not co-located (anti-affinity) with,
      where co-located is defined as running on a node whose value of the label with key `topologyKey`
      matches that of any node on which a Pod of the set of Pods is running.
    properties:
      labelSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: A label query over a set of Pods. If this is not specified, the
          PodAffinityTerm matches no Pods.
        x-kab-description-zh: 对一组 Pod 的标签查询。若未设置此字段，则此 PodAffinityTerm 不会匹配任何 Pod。
      matchLabelKeys:
        description: |-
          `matchLabelKeys` is a set of Pod label keys to select which Pods will be taken into consideration.
          The keys are used to lookup values from the incoming Pod labels, those key-value labels are merged with
          `labelSelector` as `key in (value)` to select the group of existing Pods which pods will be taken into consideration
          for the incoming Pod's Pod (anti) affinity. Keys that don't exist in the incoming Pod labels will be ignored.

          The default value is empty. The same key is forbidden to exist in both `matchLabelKeys` and `labelSelector`.
          Also, `matchLabelKeys` cannot be set when `labelSelector` isn't set.

          This is an Alpha field and requires enabling `MatchLabelKeysInPodAffinity` feature gate.
        items:
          minLength: 1
          type: string
        type: array
        x-kab-description-zh: |-
          `matchLabelKeys` 是一组 Pod 标签主键名称，用来选择要被考察的 Pod 集合。
          这些主键被用来检视新建 Pod 的标签值，所得到的键值对与 `labelSelector` 合并，形成 `key in (value)` 算符，
          选择已存在的 Pod 集合。处理新建 Pod 的（反）亲和性时，只针对所选中的 Pod 集合。
          如果所给的主键名称在新建 Pod 的标签中不存在，则这些主键会被忽略。

          此字段的默认值是空表。同一个主键不可以同时出现在 `matchLabelKeys` 和 `labelSelector` 中。
          未设置 `labelSelector` 时，也不可以设置 `matchLabelKeys`。

          此字段处于 Alpha 阶段，需要启用 `MatchLabelKeysInPodAffinity` 特性门控。
        x-kubernetes-list-type: atomic
      mismatchLabelKeys:
        description: |-
          `mismatchLabelKeys` is a set of Pod label keys to select which Pods will be taken into consideration.
          The keys are used to lookup values from the incoming Pod labels, those key-value labels are merged with
          `labelSelector` as `key notin (value)` to select the group of existing Pods which pods will be taken into consideration
          for the incoming Pod's Pod (anti) affinity. Keys that don't exist in the incoming Pod labels will be ignored.
          The default value is empty. The same key is forbidden to exist in both `mismatchLabelKeys` and `labelSelector`.
          Also, `mismatchLabelKeys` cannot be set when `labelSelector` isn't set.

          This is an Alpha field and requires enabling the `MatchLabelKeysInPodAffinity` feature gate.
        items:
          minLength: 1
          type: string
        type: array
        x-kab-description-zh: |-
          `mismatchLabelKeys` 是一组 Pod 标签主键名称，用来选择要被考察的 Pod 集合。
          这些主键被用来检视新建 Pod 的标签值，所得到的键值对与 `labelSelector` 合并，形成 `key notin (value)` 算符，
          选择已存在的 Pod 集合。处理新建 Pod 的（反）亲和性时，只针对所选中的 Pod 集合。
          如果所给的主键名称在新建 Pod 的标签中不存在，则这些主键会被忽略。

          此字段的默认值是空表。同一个主键不可以同时出现在 `mismatchLabelKeys` 和 `labelSelector` 中。
          未设置 `labelSelector` 时，也不可以设置 `mismatchLabelKeys`。

          此字段处于 Alpha 阶段，需要启用 `MatchLabelKeysInPodAffinity` 特性门控。
        x-kubernetes-list-type: atomic
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          A label query over the set of namespaces that the term applies to. The term is applied to the
          union of the namespaces selected by this field and the ones listed in the `namespaces` field.
          null selector and null or empty `namespaces` list means _this Pod's namespace_.
          An empty selector (`{}`) matches all namespaces.
        x-kab-description-zh: |-
          对此条件所适用的名字空间的标签查询条件。此 PodAffinityTerm 会被应用到被此 `namespaceSelector`
          选中的所有名字空间上，也会被应用到 `namespaces` 字段所列举的所有名字空间上。
          如果此选择算符为空，并且 `namespaces` 列表为 null 值或空表，则意味着适用范围为当前 Pod 的名字空间。
          如果此选择算符为空（`{}`），则可以匹配所有名字空间。
      namespaces:
        description: |-
          A static list of namespace names that the term applies to.
          The term is applied to the union of the namespaces listed in this field and the ones selected by
          `namespaceSelector`.
          null or empty namespaces list and null `namespaceSelector` means _this Pod's namespace_.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          此 PodAffinityTerm 所适用的所有名字空间的一个静态列表。
          此 PodAffinityTerm 会被应用到 `namespaces` 字段所列举的所有名字空间上，也会被应用到被
          `namespaceSelector` 选中的所有名字空间上。
          如果 `namespaces` 列表为 null 值或空，并且 `namespaceSelector` 未设置，则意味着适用范围为当前
          Pod 的名字空间。
        x-kubernetes-list-type: atomic
      topologyKey:
        description: |-
          This Pod should be co-located (affinity) or not co-located (anti-affinity) with the Pods matching
          the `labelSelector` in the specified namespaces, where co-located is defined as running on a node
          whose value of the label with key `topologyKey` matches that of any node on which any of the
          selected Pods is running. Empty `topologyKey` is not allowed.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          对于亲和性设置，表示当前 Pod 应该与给定名字空间与 `labelSelector` 匹配的 Pod 并置（Co-located）。
          对于反亲和性设置，表示当前 Pod 不能与给定名字空间与 `labelSelector` 匹配的 Pod 并置（Co-located）。

          所谓“并置”是指这样一种情况：Pod 运行在具有 `topologyKey` 所指定的标签的节点上。
          如果 Pod 运行的节点上这一标签的取值与另一组 Pod 所在的任何一个节点的标签值相同，
          则认为这些 Pod 是“并置”的。

          `topologyKey` 不可为空。
    required:
      - topologyKey
    type: object
    x-kab-description-zh: |-
      应该与当前 Pod 并置（Co-located）的（亲和性），或者不应该与当前 Pod 并置的（反亲和性）一组 Pod。
      这组 Pod 应该处于所给的名字空间内，并且与所给的 `labelSelector` 匹配。
      所谓“并置”是指这样一种情况：Pod 运行在某个节点上，这个节点具有 `topologyKey` 所指定的标签。
      如果 Pod 运行的节点上指定标签的取值与另一组 Pod 中的任何一个节点的标签值相同，
      则认为这些 Pod 是“并置”的。
  io.k8s.api.core.v1.PodAntiAffinity:
    description: A group of inter-Pod anti-affinity scheduling rules.
    properties:
      preferredDuringSchedulingIgnoredDuringExecution:
        description: |-
          The scheduler will prefer to schedule Pods to nodes that satisfy the anti-affinity expressions
          specified by this field, but it may choose a node that violates one or more of the expressions.
          The node that is most preferred is the one with the greatest sum of `weight`s, i.e.
          for each node that meets all of the scheduling requirements (resource request,
          `requiredDuringScheduling` anti-affinity expressions, etc.), compute a sum by iterating through
          the elements of this field and adding `weight` to the sum if the node has Pods which matches the
          corresponding `podAffinityTerm`; the node(s) with the highest sum are the most preferred.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.WeightedPodAffinityTerm'
        type: array
        x-kab-description-zh: |-
          调度器会优先考虑将 Pod 调度到满足此字段所设定的反亲和性表达式的节点上，
          不过也可能会选择一个违反一条或者多条表达式约束的节点上。
          最被青睐的节点是 `weight` 加和值最大的节点。换言之，对于能够满足所有其他调度需求
          （资源请求、`requiredDuringScheduling` 反亲和性表达式等等）的每个节点，
          调度器会遍历此列表字段中的每一项，在节点上 Pod 集合满足对应的 `podAffinityTerm` 时将其
          `weight` 值加起来。求和结果最高的节点是最受青睐的节点。
        x-kubernetes-list-type: atomic
      requiredDuringSchedulingIgnoredDuringExecution:
        description: |-
          If the anti-affinity requirements specified by this field are not met at scheduling time,
          the Pod will not be scheduled onto the node. If the anti-affinity requirements specified by
          this field cease to be met at some point during Pod execution (e.g. due to a Pod label update),
          the system may or may not try to eventually evict the Pod from its node.
          When there are multiple elements, the lists of nodes corresponding to each `podAffinityTerm`
          are intersected, i.e. all terms must be satisfied.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        type: array
        x-kab-description-zh: |-
          如果此字段所设定的反亲和性需求在调度时得不到满足，则 Pod 不会被调度到对应节点。
          如果此字段所设置的反亲和性需求在 Pod 执行期间不再成立（例如因为 Pod 标签更新的原因），
          系统可能会、也可能不会将 Pod 从当前节点上逐出。
          当列表中存在多个条目时，系统会对与每个 `podAffinityTerm` 对应的节点列表去交集。
          换言之，所得到的节点列表必须满足这里设置的所有条件。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 一组关于 Pod 间反亲和性的调度规则。
  io.k8s.api.core.v1.PodCondition:
    description: The details for the current condition of this pod.
    properties:
      lastProbeTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time we probed the condition.
        x-kab-description-zh: 上次探测 Pod 状况的时间。
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间戳。
      message:
        description: Human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: |-
          Unique, one-word, CamelCase reason for the condition's last transition.
          For example, `"Unschedulable"`, `"SchedulingGated"`.
        type: string
        x-kab-description-zh: |-
          上次状况转换的原因，通常是唯一性的、一个词表达的、驼峰编码的字符串。
          例如：`"Unschedulable"`、`"SchedulingGated"`。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          The type of the condition. Possible enum values:
          - `"ContainersReady"` indicates whether all containers in the Pod are ready.
          - `"DisruptionTarget"` indicates that the Pod is about to be terminated due to a
            disruption (such as preemption, eviction API or garbage-collection).
          - `"Initialized"` means that all init containers in the Pod have started successfully.
          - `"PodReadyToStartContainers"` means that the Pod sandbox is successfully configured and
            the Pod is ready to launch containers.
          - `"PodScheduled"` represents status of the scheduling process for this Pod.
          - `"Ready"` means the Pod is able to service requests and should be added to the load balancing
            pools of all matching Services."
        enum:
          - ContainersReady
          - DisruptionTarget
          - Initialized
          - PodReadyToStartContainers
          - PodScheduled
          - Ready
        minLength: 1
        type: string
        x-kab-description-zh: |-
          状况的类型。可能取值包括：
          - `"ContainersReady"` 表明 Pod 中的容器是否已经就绪。
          - `"DisruptionTarget"` 表明因为干扰（例如抢占、驱逐 API 或垃圾收集）的原因，Pod 即将被终止。
          - `"Initialized"` 意味着 Pod 中的所有初始容器都已经成功启动。
          - `"PodReadyToStartContainers"` 意味着 Pod 沙箱被成功配置，Pod 已经为启动容器准备就绪。
          - `"PodScheduled"` 代表 Pod 的调度状态。
          - `"Ready"` 意味着 Pod 能够接收服务请求，进而应该被添加到匹配的 Service 的负载均衡池中。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: 关于 Pod 当前状况的细节。
  io.k8s.api.core.v1.PodDNSConfig:
    description: The DNS parameters of a pod in addition to those generated from dnsPolicy.
    properties:
      nameservers:
        description: |-
          A list of DNS name server IP addresses.
          This will be appended to the base `nameservers` generated from `dnsPolicy`.
          Duplicated `nameservers` will be removed.
          When `dnsPolicy` is set to `"None"`, there must be at least one name server specified here.
          Each item must be a valid IP address.
        items:
          minLength: 1
          type: string
        maxItems: 3
        type: array
        x-kab-description-zh: |-
          包含 DNS 名字服务器 IP 地址的一个列表。
          此列表内容会被追加到基于 `dnsPolicy` 所生成的 `nameservers` 之后。
          `nameservers` 中的重复项会被去除。
          如果 `dnsPolicy` 被设置为 `"None"`，则这里必须至少提供一个名字服务器。
          列表中的每个条目都必须是一个合法的 IP 地址。
        x-kubernetes-list-type: atomic
      options:
        description: |-
          A list of DNS resolver options.
          This will be merged with the base options generated from `dnsPolicy`.
          Duplicated entries will be removed.
          Resolution options given in `options` will override those that appear in the base `dnsPolicy`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodDNSConfigOption'
        type: array
        x-kab-description-zh: |-
          DNS 解析组件选项的列表。
          此列表中的元素会被合并到基于 `dnsPolicy` 所生成的基本选项列表中。
          合并时，重复的条目会被去除。
          `options` 中给出的解析选项会覆盖 `dnsPolicy` 生成的选项列表中的同名选项。
        x-kubernetes-list-type: atomic
      searches:
        description: |-
          A list of DNS search domains for hostname lookup.
          This will be appended to the base search paths generated from `dnsPolicy`.
          Duplicated search paths will be removed.
          The search list, when joined using `" "`, cannot exceed 256 characters.
          It is okay for an item to have a trailing `'.'`.
          Every item must be a valid DNS subdomain name, excluding the trailing `'.'`.
        items:
          type: string
        maxItems: 6
        type: array
        x-kab-description-zh: |-
          用于查询主机名的 DNS 搜索域的列表。
          此列表中的元素会被合并到基于 `dnsPolicy` 所生成的基本搜索路径中。
          合并时，重复的搜索路径会被去除。
          使用 `" "` 串接合并后的搜索列表不能超过 256 个字符。
          列表中的表项带有尾部 `'.'` 是可接受的。
          列表中的所有条目都必须是合法的 DNS 子域名（去掉可能存在的尾部 `'.'` 符号）。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: Pod 的 DNS 参数，作为基于 `dnsPolicy` 所生成的 DNS 参数的补充。
  io.k8s.api.core.v1.PodDNSConfigOption:
    description: This defines a DNS resolver option for a Pod.
    properties:
      name:
        description: Name of the resolve option.
        minLength: 1
        type: string
        x-kab-description-zh: 配置选项的名称。
      value:
        description: The value of the option.
        type: string
        x-kab-description-zh: 配置选项值。
    required:
      - name
    type: object
    x-kab-description-zh: This defines a DNS resolver option for a Pod.
  io.k8s.api.core.v1.PodIP:
    description: PodIP represents a single IP address allocated to the Pod.
    properties:
      ip:
        description: The IP address assigned to the Pod.
        format: ip
        type: string
        x-kab-description-zh: 分配给 Pod 的一个 IP 地址。
    required:
      - ip
    type: object
    x-kab-description-zh: PodIP 代表分配给 Pod 的一个 IP 地址。
  io.k8s.api.core.v1.PodList:
    description: A list of Pod objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Pod objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
        type: array
        x-kab-description-zh: 包含 Pod 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Pod 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PodList
        version: v1
  io.k8s.api.core.v1.PodOS:
    description: PodOS defines the OS parameters of a pod.
    properties:
      name:
        description: |-
          The name of the operating system. The currently supported values are `"linux"` and `"windows"`.
          Additional value may be defined in future and can be one of
          [supported OSes](https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration).
          Clients should expect to handle additional values and treat unrecognized values in this field as
          `os: null`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          操作系统的名称。目前支持的值为 `"linux"` 和 `"windows"`。
          将来可能会定义其他的值，新值可能是
          [支持的操作系统](https://github.com/opencontainers/runtime-spec/blob/master/config.md#platform-specific-configuration)之一。
          客户端要考虑处理其他取值，并将此字段设置的无法识别的值视为 `os: null`。
    required:
      - name
    type: object
    x-kab-description-zh: PodOS 定义 Pod 的 OS 参数。
  io.k8s.api.core.v1.PodReadinessGate:
    description: This contains the reference to a Pod condition.
    properties:
      conditionType:
        description: |-
          This refers to a condition in the Pod's condition list with matching type.
          Possible enum values:

          - `"ContainersReady"` indicates whether all containers in the Pod are ready.
          - `"DisruptionTarget"` indicates that the Pod is about to be terminated due to a
            disruption (such as preemption, eviction API or garbage-collection).
          - `"Initialized"` means that all init containers in the Pod have started successfully.
          - `"PodReadyToStartContainers"` means that the Pod sandbox is successfully configured and
            the Pod is ready to launch containers.
          - `"PodScheduled"` represents status of the scheduling process for this Pod.
          - `"Ready"` means the Pod is able to service requests and should be added to
            the load balancing pools of all matching services.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段引用 Pod 状况列表中对应类型的状况。可能的取值包括：

          - `"ContainersReady"` 表明 Pod 中是否所有容器都已就绪。
          - `"DisruptionTarget"` 表明因为干扰（例如抢占、驱逐 API 或垃圾收集）的原因，Pod 即将被终止。
          - `"Initialized"` 意味着 Pod 中的所有初始容器都已经成功启动。
          - `"PodReadyToStartContainers"` 意味着 Pod 沙箱被成功配置，Pod 已经为启动容器准备就绪。
          - `"PodScheduled"` 代表 Pod 的调度状态。
          - `"Ready"` 意味着 Pod 能够接收服务请求，进而应该被添加到匹配的 Service 的负载均衡池中。
    required:
      - conditionType
    type: object
    x-kab-description-zh: 此结构包含对 Pod 状况的引用。
  io.k8s.api.core.v1.PodResourceClaim:
    description: |-
      PodResourceClaim references exactly one ResourceClaim through a ClaimSource in `source`.
      It adds a name to it that uniquely identifies the ResourceClaim inside the Pod.
      Containers that need access to the ResourceClaim can reference it with this name.
    properties:
      name:
        description: Name uniquely identifies this resource claim inside the pod.
          This must be a DNS_LABEL.
        minLength: 1
        type: string
        x-kab-description-zh: 在 Pod 内能够唯一地标识 ResourceClaim 的名字。字段值必须是合法的 DNS_LABEL。
      source:
        $ref: '#/definitions/io.k8s.api.core.v1.ClaimSource'
        description: Source describes where to find the ResourceClaim.
        x-kab-description-zh: 此字段描述如何找到 ResourceClaim。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      PodResourceClaim 通过 `source` 所给的 ClaimSource 引用某个 ResourceClaim。
      在引用的同时还为其设置一个在 Pod 之内唯一的名字作为标识。
      需要访问 ResourceClaim 的容器可以使用这个名称来引用它。
  io.k8s.api.core.v1.PodResourceClaimStatus:
    description: |-
      PodResourceClaimStatus is stored in the PodStatus for each PodResourceClaim which references
      a ResourceClaimTemplate. It stores the generated name for the corresponding ResourceClaim.
    properties:
      name:
        description: |-
          The `name` uniquely identifies this ResourceClaim inside the Pod.
          This must match the name of an entry in `pod.spec.resourceClaims`, which implies
          that the string must be a DNS_LABEL.
        minLength: 1
        type: string
        x-kab-description-: |-
          字段 `name` 用于在 Pod 内唯一地标识此 ResourceClaim。
          字段值必须匹配 `pod.spec.resourceClaims` 中某个条目的名字，也就意味着字符串必须是一个 DNS_LABEL。
      resourceClaimName:
        description: |-
          `resourceClaimName` is the name of the ResourceClaim that was generated for the Pod in
          the namespace of the Pod. It this is unset, then generating a ResourceClaim was not necessary.
          The `pod.spec.resourceClaims` entry can be ignored in this case.
        type: string
        x-kab-description-zh: |-
          `resourceClaimName` 是在 Pod 所在名字空间内为此 Pod 所生成的 ResourceClaim 的名称。
          如果未设置此字段，则意味着没有必要生成 ResourceClaim。
          这时可以忽略 `pod.spec.resourceClaims` 条目设置。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      PodResourceClaimStatus 保存在 PodStatus 结构中，针对每个引用了 ResourceClaimTemplate 的
      PodResourceClaim 都有一个实例。此结构中包含为对应的 ResourceClaim 所生成的名字。
  io.k8s.api.core.v1.PodSchedulingGate:
    description: PodSchedulingGate is associated to a Pod to guard its scheduling.
    properties:
      name:
        description: Name of the scheduling gate. Each scheduling gate must have a
          unique name field.
        minLength: 1
        type: string
        x-kab-description-zh: 调度门控的名称。每个调度门控都必须有一个独特的 `name` 字段值。
    required:
      - name
    type: object
    x-kab-description-zh: PodSchedulingGate 与某 Pod 关联，进而控制其可调度性。
  io.k8s.api.core.v1.PodSecurityContext:
    description: |-
      Pod-level security attributes and settings common to all containers.
      Some fields are also present in the `securityContext` field of a container's `spec`.
      Container level settings take precedence over field values specified at Pod level.
    properties:
      appArmorProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.AppArmorProfile'
        description: This is the AppArmor options to use by the containers in this
          Pod. Note that this field cannot be set when `.spec.os.name` is `"windows"`.
        x-kab-description-zh: 字段值为此 Pod 中容器要使用的 AppArmor 选项。注意当 `.spec.os.name` 被设置为
          `"windows"` 时不可设置此字段。
      fsGroup:
        description: |-
          A special supplemental group that applies to all containers in a Pod.
          Some volume types allow the kubelet to change the ownership of that volume to be owned by the Pod:

          1. The owning GID will be the `fsGroup`;
          1. The `setgid` bit is set (new files created in the volume will be owned by `fsGroup`);
          1. The permission bits are OR'd with `"rw-rw----"`;

          If unset, the kubelet will not modify the ownership and permissions of any volume.
          The group ID must be between 0 and 1^32 - 1.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        format: int64
        type: integer
        x-kab-description-zh: |-
          适用于 Pod 中所有容器的一个特殊的、附加的用户组。
          某些存储卷类型允许 kubelet 改变卷的属主配置，将其属主设置为当前 Pod：

          1. 卷的属主 GID 将被设置为 `fsGroup`；
          1. 卷的 `setgid` 位会被置位，从而卷中新创建的文件也会属于 `fsGroup`；
          1. 访问权限位会与 `"rw-rw----"` 做“或”操作。

          如果没有设置此字段，则 kubelet 不会更改卷的属主设置或访问权限配置。
          这里给出的组 ID 必须介于 0 和 1^32 - 1 之间。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
      fsGroupChangePolicy:
        default: Always
        description: |-
          The behavior of changing ownership and permission of the volume before being exposed inside Pod.
          This field will only apply to volume types which support `fsGroup` based ownership
          (and permissions). It will have no effect on ephemeral volume types such as,
          `"secret"`, `"configmap"` and `"emptydir"`.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        enum:
          - Always
          - OnRootMismatch
        type: string
        x-kab-description-zh: |-
          在将卷提供给 Pod 内访问之前对卷的属主与访问权限配置的修改策略。
          此字段仅适用于支持基于 `fsGroup` 来设置属主信息（及访问权限）的卷类型。
          对于临时性的卷类型无效，如 `"secret"`、`"configmap"` 和 `"emptydir"`。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
      runAsGroup:
        description: |-
          The group ID (GID) to run the entry point of the container process.
          Uses runtime default if unset. May also be set in `securityContext` of a container.
          The group ID must be between 0 and 1^32 - 1.
          Note tha this field cannot be set when `spec.os.name` is `"windows"`.
        format: int64
        type: integer
        x-kab-description-zh: |-
          运行容器进程的入口点时要使用的组 ID（GID）。
          如果未设置此字段，则使用运行时内置的默认值。此配置也可以在容器的 `securityContext` 中设置。
          这里给出的组 ID 必须介于 0 和 1^32 - 1 之间。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
      runAsNonRoot:
        description: |-
          Indicates that the container must run as a non-root user.
          If `true`, the Kubelet will validate the image at runtime to ensure that it does not run
          as UID 0 (root) and fail to start the container if it does.
          If unset or `false`, no such validation will be performed.
          May also be set in `container.securityContext`.
        type: boolean
        x-kab-description-zh: |-
          表明必须以 root 之外的用户账号来运行容器。
          如果此字段设置为 `true`，kubelet 会在运行时检查镜像，确保它不是以 UID 0（root）启动。
          尝试以 root 账号启动的容器会失败。
          如果此字段未设置或者设置为 `false`，则 kubelet 不会执行这项检查。
          此配置也可以在容器的 `securityContext` 中设置。
      runAsUser:
        description: |-
          The user ID (UID) to run the entry point of the container process.
          Defaults to user specified in image metadata if unspecified. May also be set in
          `securityContext` of a container. The user ID must be between 0 and 1^32 - 1.
          Note that this field cannot be set when `spec.os.name` is "windows".
        format: int64
        type: integer
        x-kab-description-zh: |-
          运行容器进程的入口点时要使用的用户 ID（GID）。
          如果未设置此字段，则默认使用镜像元数据中指定的用户账号。
          此配置也可以在容器的 `securityContext` 中设置。
          这里给出的用户 ID 必须介于 0 和 1^32 - 1 之间。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
      seLinuxOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to all containers.
          If unspecified, the container runtime will allocate a random SELinux context for each container.
          May also be set in `container.securityContext`.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        x-kab-description-zh: |-
          此字段给出要应用到所有容器之上的 SELinux 上下文。
          未设置此字段时，容器运行时会为每个容器分配一个随机的 SELinux 上下文。
          此配置也可以在容器的 `securityContext` 中设置。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
      seccompProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.SeccompProfile'
        description: |-
          The seccomp options to use by the containers in this Pod.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        x-kab-description-zh: |-
          Pod 中容器要使用的 seccomp 选项。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
      supplementalGroups:
        description: |-
          A list of groups applied to the first process run in each container, in addition to
          the container's primary GID, the `fsGroup` (if specified), and group memberships defined
          in the container image for the UID of the container process.
          If unspecified, no additional groups are added to any container.
          Note that group memberships defined in the container image for the UID of the container
          process are still effective, even if they are not included in this list.
          Each group ID must be between 0 and 1^32 - 1.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        items:
          format: int64
          type: integer
        type: array
        x-kab-description-zh: |-
          针对每个容器中运行的第一个进程的用户组列表，此列表是在容器的主 GID、`fsGroup` （若有）
          及容器进程 UID 在容器镜像中的用户组成员之外的。
          如果没有设置此字段，则不会为任何容器设置额外的用户组。
          注意，与容器进程 UID 对应的、在容器镜像内定义的组成员仍然有效，即使没有出现在此列表中。
          所有的组 ID 都必须介于 0 和 1^32 - 1 之间。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
        x-kubernetes-list-type: atomic
      sysctls:
        description: |-
          A list of namespaced sysctls used for the Pod.
          Pods with unsupported sysctls (by the container runtime) might fail to launch.
          The `name` of each item must be unique in the array.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Sysctl'
        type: array
        x-kab-description-zh: |-
          用于此 Pod 的一组名字空间作用域的 sysctl 配置。
          设置了不被支持的 sysctl（可能来源是容器运行时）的 Pod 可能无法启动。
          列表中每个条目的 `name` 必须在列表中唯一。
          注意当 `spec.os.name` 是 `"windows"` 时不能设置此字段。
        x-kubernetes-list-type: atomic
      windowsOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings applied to all containers.
          If unspecified, the options within a container's `securityContext` will be used.
          Note that this field cannot be set when `spec.os.name` is `"linux"`.
        x-kab-description-zh: |-
          适用于所有容器的、特定于 Windows 的配置选项。如果未设置，则使用容器内部设置的 `securityContext`。
          注意当 `spec.os.name` 是 `"linux"` 时不能设置此字段。
    type: object
    x-kab-description-zh: |-
      Pod 层面的安全属性和设置，适用于 Pod 中所有容器。
      某些字段也会出现在容器 `spec` 的 `securityContext` 字段中。
      容器层面的设置的优先级高于 Pod 层面设置的字段值。
  io.k8s.api.core.v1.PodSignature:
    description: This describes the class of Pods that should avoid this node.
    properties:
      podController:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        description: |-
          Reference to controller whose Pods should avoid this node.
          The `controller` field must point to a controller.
        x-kab-description-zh: |-
          对某控制器的引用。该控制器的所有 Pod 都应该避开此节点。
          `controller` 字段必须指向一个控制器。
    type: object
    x-kab-description-zh: 此结构描述要避开此节点的 Pod 类别。
  io.k8s.api.core.v1.PodSpec.CREATE:
    description: The specification for a Pod.
    properties:
      activeDeadlineSeconds:
        description: |-
          Duration in seconds the Pod may be active on the node relative to `startTime` before
          the system will actively try to mark it failed and kill associated containers.
          Value must be a positive 32-bit integer. This is not supported in `ReplicationController`,
          `Deployment`, `ReplicaSet`, `DaemonSet` or `StatefulSet`.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          从 `startTime` 开始计时的时长（秒数值），Pod 如果在此时间窗口内没能进入存活状态，
          系统会反复尝试标记其已失败并杀死与其关联的容器。
          字段值必须是一个 32 位的正整数。
          `ReplicationController`、`Deployment`、`ReplicaSet`、`DaemonSet` 或 `StatefulSet`
          中都不支持此设置。
      affinity:
        $ref: '#/definitions/io.k8s.api.core.v1.Affinity'
        description: If specified, the Pod's scheduling constraints.
        x-kab-description-zh: 此可选字段用于配置 Pod 的调度亲和性约束。
      automountServiceAccountToken:
        description: Flag indicating whether a service account token should be automatically
          mounted.
        type: boolean
        x-kab-description-zh: 标明是否需要为 Pod 自动挂载服务账号令牌的标记。
      containers:
        description: |-
          List of containers in the Pod. Containers currently cannot be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated, but the `image` field and the `resources` field can be changed.
          When the Pod is resized in place, its QoS cannot be changed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          Pod 中容器的列表。目前不支持添加或者删除容器。每个 Pod 中至少包含一个容器。
          此字段不可变更，但是 `image` 和 `resources` 字段可以变更。
          当 Pod 被就地重设大小时，其 QoS 类不可发生变化。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      dnsConfig:
        $ref: '#/definitions/io.k8s.api.core.v1.PodDNSConfig'
        description: |-
          Specifies the DNS parameters of a Pod.
          Parameters specified here will be merged to the generated DNS configuration based on `dnsPolicy`.
          If `dnsPolicy` is set to `"None"`, this must be provided.
        x-kab-description-zh: |-
          此字段用于配置 Pod 的 DNS 参数。
          这里设置的参数会被合并到基于 `dnsPolicy` 所生成的 DNS 配置中。
          如果 `dnsPolicy` 被设置为 `"None"`，则必须设置此字段。
      dnsPolicy:
        default: ClusterFirst
        description: |-
          Set DNS policy for the Pod. DNS parameters given in `dnsConfig` will be merged with
          the policy selected with `dnsPolicy`. To have DNS options set along with `hostNetwork`,
          you have to specify DNS policy explicitly to `"ClusterFirstWithHostNet"`.

          Possible enum values:

          - `"ClusterFirst"` indicates that the Pod should use cluster DNS first unless
            `hostNetwork` is true, if it is available, then fall back on the default
            (as determined by kubelet) DNS settings.
          - `"ClusterFirstWithHostNet"` indicates that the Pod should use cluster DNS first, if it is
            available, then fall back on the default (as determined by kubelet) DNS settings.
          - `"Default"` indicates that the Pod should use the default (as determined by kubelet)
            DNS settings.
          - `"None"` indicates that the Pod should use empty DNS settings.
            DNS parameters such as nameservers and search paths should be defined via `dnsConfig`.
            If `dnsPolicy` is set to `"None" `, `dnsConfig` must be specified.
        enum:
          - ClusterFirst
          - ClusterFirstWithHostNet
          - Default
          - None
        type: string
        x-kab-description-zh: |-
          为 Pod 设置 DNS 策略。在 `dnsConfig` 中设置的 DNS 参数会与 `dnsPolicy` 中选定的策略合并。
          如果 Pod 设置了 `hostNetwork`，你只能将 DNS 策略显式地设置为 `"ClusterFirstWithHostNet"`。
          此字段的可能取值包括：

          - `"ClusterFirst"` 表明在可能的情况下， Pod 应该首先使用集群内的 DNS 服务器，除非
            `hostNetwork` 被设置为 `true`。如果集群 DNS 不可用，则回退为默认的 DNS 设置（由 kubelet 决定）。
          - `"ClusterFirstWithHostNet"` 表明在集群 DNS 可用的情况下，此采用主机网络的 Pod
            应该首先尝试使用集群 DNS 服务，并在集群 DNS 不可用时，回退到使用 kubelet 所提供的默认 DNS 设置。
          - `"Default"` 表明 Pod 要优先尝试 kubelet 所提供的默认 DNS 设置。
          - `"None"` 标明 Pod 中的 DNS 设置为空，需要通过 `dnsConfig` 字段来定义类似名字服务器、
            搜索路径这类 DNS 参数。若 `dnsPolicy` 设置为 `"None" `，必须设置 `dnsConfig`。
      enableServiceLinks:
        default: true
        description: |-
          This flag indicates whether information about Services should be injected into Pod's
          environment variables, matching the syntax of Docker links.
        type: boolean
        x-kab-description-zh: |-
          此标志用来表明关于 Service 的信息是否要以环境变量的形式注入到 Pod 中。
          注入的语法类似于 Docker 链接。
      hostAliases:
        description: A list of hosts and IPs that will be injected into the Pod's
          `hosts` file.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.HostAlias'
        type: array
        x-kab-description-zh: 要注入到 Pod 中的 `hosts` 文件内的一组主机和 IP 地址。
        x-kubernetes-list-map-keys:
          - ip
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: ip
        x-kubernetes-patch-strategy: merge
      hostIPC:
        default: false
        description: Use the host's IPC namespace.
        type: boolean
        x-kab-description-zh: 是否使用主机的 IPC 名字空间。
      hostNetwork:
        default: false
        description: |-
          Host networking requested for this Pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
        type: boolean
        x-kab-description-zh: |-
          此字段表明 Pod 要求访问主机网络，使用所在主机的 network 名字空间。
          若设置了此字段，则必须指定要使用的端口。
      hostPID:
        default: false
        description: Use the host's PID namespace.
        type: boolean
        x-kab-description-zh: 表明 Pod 要使用主机的 PID 名字空间。
      hostUsers:
        default: true
        description: |-
          Use the host's user namespace. If set to true or not present, the Pod will be run in
          the host user namespace, useful when the Pod needs a feature only available to the host
          user namespace, such as loading a kernel module with `CAP_SYS_MODULE`.
          When set to false, a new userns is created for the Pod.
          Setting false is useful for mitigating container breakout vulnerabilities even allowing users
          to run their containers as root without actually having root privileges on the host.
          This field is Alpha-level and is only honored by servers that enable the
          `UserNamespacesSupport` feature.
        type: boolean
        x-kab-description-zh: |-
          表明 Pod 要使用宿主系统上的 user 名字空间。当此字段设置为 `true` 或者未设置时，Pod
          会运行在宿主的 user 名字空间内，如果 Pod 需要访问只能在主机的 user 名字空间中才能使用的特性，
          这种设置是有用的，例如使用 `CAP_SYS_MODULE` 权能加载内核模块。
          此字段被设置为 `false` 时，系统会为 Pod 创建一个 user 名字空间。
          将次字段设置为 `false` 可以有助于缓解容器逃逸问题，甚至允许用户在实际未获得宿主系统上 root
          特权的情况下以 root 账号运行其容器。

          此字段为 Alpha 阶段，需要启用 `UserNamespacesSupport` 特性。
      hostname:
        description: |-
          The hostname of the Pod. When specified, the value must be a valid DNS label.
          If not specified, the Pod's hostname will be set to a system-defined value.
        type: string
        x-kab-description-zh: |-
          Pod 的主机名。如果设置了此字段，则字符串值必须是合法的 DNS 标签值。
          如果未设置此字段，则 Pod 的主机名会被设置为一个系统定义的值。
      imagePullSecrets:
        description: |-
          A list of references to Secrets in the same namespace for pulling images used by this Pod.
          If specified, these Secrets will be passed to individual puller implementations for them to use.
          For each entry in the list, only the `name` field may be set.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        type: array
        x-kab-description-zh: |-
          此字段为列表值，包含对 Pod 所在名字空间中的 Secret 的引用。Pod 拉取镜像时会使用这些 Secret。
          如果设置了此字段，则所引用的 Secret 会被传递给各镜像拉取组件，供后者使用。
          列表中的各个条目只能设置 `name` 字段。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      initContainers:
        description: |-
          List of initialization containers in the Pod.
          Init containers are executed in order prior to application containers being started.
          If any init container fails, the Pod is considered to have failed and is handled according
          to its `restartPolicy`.Init containers may not have `lifecycle` actions, `readinessProbe`,
          `livenessProbe` or `startupProbe`.
          The `resources.requests` of an init container are taken into account during scheduling by
          finding the highest `request`/`limit` for each resource type, and then using the max of
          that value or the sum of the application containers.
          `resources.limits` are applied to init containers in a similar fashion.
          The name of an init container cannot conflict with other init containers, ephemeral containers
          or application containers. Init containers currently cannot be added, removed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        type: array
        x-kab-description-zh: |-
          Pod 中的初始化容器列表。初始化容器在应用容器启动之前按序执行。
          如果任何一个初始化容器失败，则认为 Pod 失败，需要根据其 `restartPolicy` 设置作进一步处理。
          初始化容器不可以包含 `lifecycle` 动作、`readinessProbe`、`livenessProbe` 或 `startupProbe`。
          初始化容器的 `resources.requests` 在 Pod 被调度时会被检查，调度器会检查每种资源类型的最大
          `request`/`limit` 设置值，并将此最大值与应用容器资源量之和做比较，取其较大者作为决策依据。
          系统用类似的方式来对初始化容器实施 `resources.limits` 约束。
          初始化容器与其他初始化容器、临时容器或应用容器之间不可以存在名字冲突。
          目前，初始化容器不可添加或者删除。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      nodeName:
        description: |-
          If this is not empty, the scheduler simply schedules this Pod onto that node, assuming that
          it fits resource requirements. This field cannot be set until all `schedulingGates` have been
          cleared. The value must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          如果此字段不为空，则调度器会直接将 Pod 调度到所指定的节点，假定节点可以满足其资源需求。
          只有所有的 `schedulingGates` 都被清除之后，才可以设置此字段。
          此字段值必须是一个合法的 DNS 子域名。
      os:
        $ref: '#/definitions/io.k8s.api.core.v1.PodOS'
        description: |-
          Specifies the OS of the containers in the Pod.
          Some Pod and container fields are restricted if this is set.
          If the `os` field is set to `"linux"` , the following fields must be unset:

          - `securityContext.windowsOptions`

          If the `os` field is set to `"windows"`, the following fields must be unset:
          - `spec.hostPID`
          - `spec.hostIPC`
          - `spec.hostUser`
          - `spec.securityContext.appArmorProfile`
          - `spec.securityContext.seLinuxOptions`
          - `spec.securityContext.seccompProfile`
          - `spec.securityContext.fsGroup`
          - `spec.securityContext.fsGroupChangePolicy`
          - `spec.securityContext.sysctls`
          - `spec.shareProcessNamespace`
          - `spec.securityContext.runAsUser`
          - `spec.securityContext.runAsGroup`
          - `spec.securityContext.supplementalGroups`
          - `spec.containers[*].securityContext.appArmorProfile`
          - `spec.containers[*].securityContext.seLinuxOptions`
          - `spec.containers[*].securityContext.seccompProfile`
          - `spec.containers[*].securityContext.capabilities`
          - `spec.containers[*].securityContext.readOnlyRootFilesystem`
          - `spec.containers[*].securityContext.privileged`
          - `spec.containers[*].securityContext.allowPrivilegeEscalation`
          - `spec.containers[*].securityContext.procMount`
          - `spec.containers[*].securityContext.runAsUser`
          - `spec.containers[*].securityContext.runAsGroup`
        x-kab-description-zh: |-
          设置 Pod 中容器的操作系统。如果设置了这个字段，则某些 Pod 和容器字段会受到限制。
          如果 `os` 字段的取值为 `"linux"`，则不可以设置下面的字段：

          - `securityContext.windowsOptions`

          如果 `os` 字段的取值为 `"windows"`，则不可以设置以下字段：

          - `spec.hostPID`
          - `spec.hostIPC`
          - `spec.hostUser`
          - `spec.securityContext.seLinuxOptions`
          - `spec.securityContext.seccompProfile`
          - `spec.securityContext.fsGroup`
          - `spec.securityContext.fsGroupChangePolicy`
          - `spec.securityContext.sysctls`
          - `spec.shareProcessNamespace`
          - `spec.securityContext.runAsUser`
          - `spec.securityContext.runAsGroup`
          - `spec.securityContext.supplementalGroups`
          - `spec.containers[*].securityContext.seLinuxOptions`
          - `spec.containers[*].securityContext.seccompProfile`
          - `spec.containers[*].securityContext.capabilities`
          - `spec.containers[*].securityContext.readOnlyRootFilesystem`
          - `spec.containers[*].securityContext.privileged`
          - `spec.containers[*].securityContext.allowPrivilegeEscalation`
          - `spec.containers[*].securityContext.procMount`
          - `spec.containers[*].securityContext.runAsUser`
          - `spec.containers[*].securityContext.runAsGroup`
      overhead:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The resource overhead associated with running a Pod for a given RuntimeClass.
          This field will be auto-populated at admission time by the `RuntimeClass` admission controller.
          If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod
          create requests. The `RuntimeClass` admission controller will reject Pod create requests
          which have the `overhead` already set.
          If `RuntimeClass` is configured and selected in the Pod `spec`, `overhead` will be set to the
          value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated
          as zero.
        type: object
        x-kab-description-zh: |-
          使用某给定 RuntimeClass 运行 Pod 时会带来的额外资源开销。
          在 Pod 被准入时，此字段由 `RuntimeClass` 准入控制器来自动填写。
          如果启用了 `RuntimeClass` 准入控制器，则不可以在 Pod 创建请求中设置 `overhead`。
          `RuntimeClass` 准入控制器会拒绝设置了 `overhead` 的 Pod 创建请求。
          如果配置了 `RuntimeClass` 并且在 Pod 的 `spec` 中选择了运行时类，则 `overhead` 会被设置为对应的
          `RuntimeClass` 中定义的值，否则，`overhead` 会保持未设置状态且被视为 0。
      preemptionPolicy:
        default: PreemptLowerPriority
        description: |-
          The policy for preempting Pods with lower priority.

          - `"Never"`: the Pod never preempts other Pods with lower priority;
          - `"PreemptLowerPriority"`: the Pod can preempt other Pods with lower priority.
        enum:
          - Never
          - PreemptLowerPriority
        type: string
        x-kab-description-zh: |-
          设置 Pod 抢占优先级较低的其他 Pod 的策略。

          - `"Never"`：此 Pod 不会抢占其他优先级较低的 Pod。
          - `"PreemptLowerPriority"`：此 Pod 可以抢占其他优先级较低的 Pod。
      priority:
        description: |-
          The priority value. Various system components use this field to find the priority of the Pod.
          When the `Priority` Admission Controller is enabled, it prevents users from setting this field.
          The admission controller populates this field from PriorityClassName.
          The higher the value, the higher the priority.
        format: int32
        type: integer
        x-kab-description-zh: |-
          优先级数值。不同的系统组件会使用这个字段来查看 Pod 的优先级值。
          当启用了 `Priority` 准入控制器时，该控制器会禁止用户自行设置此字段。
          准入控制器会根据 Pod 的 `priorityClassName` 自动设置此字段。
          此字段的值越大，代表 Pod 的优先级越高。
      priorityClassName:
        description: |-
          The Pod's priority class. The value must be a valid DNS subdomain.
          The value `"system-node-critical"` and `"system-cluster-critical"` are two special keywords which
          indicate the highest priorities with the former being the highest priority.
          Any other values must match the name of a PriorityClass object.
          If not specified, the Pod priority will be default or zero if there is no default.
        type: string
        x-kab-description-zh: |-
          Pod 的优先级类。此字段值必须是一个合法的 DNS 子域名。
          字符串值 `"system-node-critical"` 和 `"system-cluster-critical"` 是两个特殊的关键词，
          用来表示系统中最高的两个优先级类，前者的优先级最高。
          字段设置为其他值时，字符串要与某 PriorityClass 对象同名。
          如果没有设置这个字段，则 Pod 的优先级会是默认优先级类对应的值，或者当没有默认优先级类时为 0。
      readinessGates:
        description: |-
          If specified, all readiness gates will be evaluated for Pod readiness.
          A Pod is ready when all its containers are ready AND all conditions specified in the readiness
          gates have status equal to `"True"`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodReadinessGate'
        type: array
        x-kab-description-zh: |-
          如果为 Pod 设置了这个字段，则判断 Pod 就绪态时需要评估其中其中的每个就绪态门控。
          Pod 当其中所有容器都已就绪且此列表中所有状况的状态都为 `"True"` 时才真正就绪。
        x-kubernetes-list-type: atomic
      resourceClaims:
        description: |-
          The `resourceClaims` defines which ResourceClaims must be allocated and reserved before
          the Pod is allowed to start.
          The resources will be made available to those containers which consume them by name.

          This is an Alpha field and requires enabling the `DynamicResourceAllocation` feature gate.

          This field is immutable.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodResourceClaim'
        type: array
        x-kab-description-zh: |-
          `resourceClaims` 字段定义允许 Pod 启动之前必须分配并预留的 ResourceClaim 列表。
          这里引用的资源会被提供给那些按名称来使用它们的容器。
          此字段是一个 Alpha 阶段字段，需要启用 `DynamicResourceAllocation` 特性门控。
          此字段不可变更。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge,retainKeys
      restartPolicy:
        default: Always
        description: |-
          Restart policy for all containers within the Pod. For ReplicationController, Deployment,
          DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be `"Always"`.
          For Job, the `restartPolicy` must be `"OnFailure"` or `"Never"`.
        enum:
          - Always
          - Never
          - OnFailure
        type: string
        x-kab-description-zh: |-
          Pod 内所有容器的重启策略。对于 ReplicationController、Deployment、DaemonSet、ReplicaSet 和
          StatefulSet，`restartPolicy` 必须设置为 `"Always"`。对于 Job， `restartPolicy` 必须是
          `"OnFailure"` 或者 `"Never"`。
      runtimeClassName:
        description: |-
          This refers to a RuntimeClass object in the `node.k8s.io` group, which should be used to
          run this Pod.
          If no RuntimeClass resource matches the name, the Pod will not run.
          If unset or empty, the `"legacy"` RuntimeClass will be used, which is an implicit class
          with an empty definition that uses the default runtime handler.
          The value must be a valid DNS subdomain.
        type: string
        x-kab-description-zh: |-
          此字段通过名字引用 `node.k8s.io` 组中的某个 RuntimeClass 对象，意为要使用该运行时类来运行此 Pod。
          如果找不到名字匹配的 RuntimeClass 资源，则 Pod 不会运行。
          如果此字段没有配置或者为空，则会使用 `"legacy"` RuntimeClass，也就是一个隐式的、定义为空的
          RuntimeClass。该 RuntimeClass 使用默认的容器运行时处理程序。
          所给的名字字符串必须是合法的 DNS 子域名。
      schedulerName:
        description: |-
          If specified, the Pod will be dispatched by specified scheduler.
          If not specified, the Pod will be dispatched by default scheduler.
        type: string
        x-kab-description-zh: |-
          如果设置了此字段，则 Pod 会使用所指定的调度器来调度。
          如果未设置此字段，则 Pod 会使用默认的调度器来调度。
      schedulingGates:
        description: |-
          `schedulingGates` is an opaque list of values that, if specified, will block scheduling the Pod.
          If `schedulingGates` is not empty, the Pod will stay in the `SchedulingGated` state and
          the scheduler will not attempt to schedule the pod.

          `schedulingGates` can only be set at Pod creation time, and be removed only afterwards.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodSchedulingGate'
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          `schedulingGates` 是一个列表，其中的元素会阻止 Pod 被调度。
          当 `schedulingGates` 不为空时，Pod 会一直处于 `"SchedulingGated"` 状态，调度器也不会尝试调度该 Pod。

          `schedulingGates` 只能在 Pod 创建时设置，Pod 创建之后只能从中移除表项。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSecurityContext'
        description: Pod-level security attributes and settings common to all containers.
          Defaults to empty.
        x-kab-description-zh: Pod 层面的安全属性与配置，对所有容器起作用。默认值为空。
      serviceAccountName:
        description: The name of the ServiceAccount to use to run this Pod. The value
          must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: 用来运行此 Pod 的 ServiceAccount 的名字。字符串值必须时合法的 DNS 子域名。
      setHostnameAsFQDN:
        default: false
        description: |-
          If `true` the Pod's hostname will be configured as the Pod's fully qualified domain name (FQDN),
          rather than the leaf name which is the default.
          For Linux containers, this means setting the FQDN in the `hostname` field of the kernel
          (the `nodename` field of struct `utsname`).
          In Windows containers, this means setting the registry value of hostname for the registry key
          `"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"` to FQDN.
          If a Pod does not have FQDN, this has no effect.
          This field is Beta, gated by the `SetHostnameAsFQDN` feature gate.
        type: boolean
        x-kab-description-zh: |-
          如果此字段为 `true`，则 Pod 的主机名会被配置为 Pod 的全限定域名（FQDN），
          而不是默认情况下的叶子域名（Leaf Name）。
          对于 Linux 容器而言，这意味着会将内核的 `hostname` 字段（`utsname` 结构中的 `nodename` 字段）
          设置为 FQDN 值。
          对于 Windows 容器，则意味着要将注册表中用来控制主机名的注册表项
          `"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"`
          设置为 FQDN 值。
          如果 Pod 没有对应的 FQDN，则此字段设置无效。
          此字段处于 Beta 阶段，需要启用 `SetHostnameAsFQDN` 特性门控。
      shareProcessNamespace:
        default: false
        description: |-
          Share a single process namespace between all of the containers in a Pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same Pod, and the first process in each container will not be assigned PID 1.
          `hostPID` and `shareProcessNamespace` cannot both be set.
        type: boolean
        x-kab-description-zh: |-
          在同一个 Pod 中所有容器之间共享进程名字空间。
          如果这个字段被设置为 `true`，则一个容器就能看到同一个 Pod 中其他容器内的进程并向其发送信号。
          此外，每个容器中的第一个进程的 PID 也不再是 1。
          不可以同时设置 `hostPID` 和 `shareProcessNamespace`。
      subdomain:
        description: |-
          If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be
          `"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>"`.
          If not specified, the Pod will not have a domain name at all.
        type: string
        x-kab-description-zh: |-
          如果设置了此字段，所设置的字符串值必须是合法的 DNS 标签值。
          Pod 的全限定主机名将是 `"<hostname>.<subdomain>.<Pod 名字空间>.svc.<集群域名>"`。
          如果没有设置此字段，则 Pod 不会获得域名。
      terminationGracePeriodSeconds:
        default: 30
        description: |-
          Optional duration in seconds the Pod needs to terminate gracefully.
          May be decreased in delete request. Value must be non-negative integer.
          The value zero indicates stop immediately via the kill signal (no opportunity to shut down).
          If this value is `nil`, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the Pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          可选的、按秒计的时长值。Pod 需要在所给的时间段内体面终止。在 DELETE 请求中可以减少此值。
          字段值必须是非负数。数值 0 意味着立即使用 KILL 信号终止容器（没有关闭的机会）。
          如果未设置，则会使用默认的宽限期限。宽限期以秒计，从 Pod 内的进程收到终止信号开始计时，
          到使用 KILL 信号强制终止进程为止。
          用户应该将此值设置为一个超出进程完成清理操作所需时间的时长。
      tolerations:
        description: The Pod's tolerations.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Toleration'
        type: array
        x-kab-description-zh: Pod 的容忍度。
        x-kubernetes-list-type: atomic
      topologySpreadConstraints:
        description: |-
          This describes how a group of Pods are to spread across topology domains.
          Scheduler will schedule Pods in a way which abides by the constraints.
          All items in the list are AND'ed. The tuple `(topologyKey, whenUnsatisfiable)` must be unique
          in the list.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint'
        type: array
        x-kab-description-zh: |-
          此字段描述如何在多个拓扑域（Topology Domain）之间分布一组 Pod。
          调度器会采取已经能够满足限制条件的方式来调度 Pod。此列表中的条目会以逻辑 AND 操作进行汇总。
          在整个列表中，`(topologyKey, whenUnsatisfiable)` 元组必须唯一。
        x-kubernetes-list-map-keys:
          - topologyKey
          - whenUnsatisfiable
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: topologyKey
        x-kubernetes-patch-strategy: merge
      volumes:
        description: List of volumes that can be mounted by containers in the Pod.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Volume'
        type: array
        x-kab-description-zh: 可被 Pod 中容器挂载的卷的列表。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge,retainKeys
    required:
      - containers
    type: object
    x-kab-description-zh: Pod 的规约。
  io.k8s.api.core.v1.PodSpec.GET:
    description: The specification for a Pod.
    properties:
      activeDeadlineSeconds:
        description: |-
          Duration in seconds the Pod may be active on the node relative to `startTime` before
          the system will actively try to mark it failed and kill associated containers.
          Value must be a positive 32-bit integer. This is not supported in `ReplicationController`,
          `Deployment`, `ReplicaSet`, `DaemonSet` or `StatefulSet`.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          从 `startTime` 开始计时的时长（秒数值），Pod 如果在此时间窗口内没能进入存活状态，
          系统会反复尝试标记其已失败并杀死与其关联的容器。
          字段值必须是一个 32 位的正整数。
          `ReplicationController`、`Deployment`、`ReplicaSet`、`DaemonSet` 或 `StatefulSet`
          中都不支持此设置。
      affinity:
        $ref: '#/definitions/io.k8s.api.core.v1.Affinity'
        description: If specified, the Pod's scheduling constraints.
        x-kab-description-zh: 此可选字段用于配置 Pod 的调度亲和性约束。
      automountServiceAccountToken:
        description: Flag indicating whether a service account token should be automatically
          mounted.
        type: boolean
        x-kab-description-zh: 标明是否需要为 Pod 自动挂载服务账号令牌的标记。
      containers:
        description: |-
          List of containers in the Pod. Containers currently cannot be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          Pod 中容器的列表。目前不支持添加或者删除容器。每个 Pod 中至少包含一个容器。
          此字段不可变更。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      dnsConfig:
        $ref: '#/definitions/io.k8s.api.core.v1.PodDNSConfig'
        description: |-
          Specifies the DNS parameters of a Pod.
          Parameters specified here will be merged to the generated DNS configuration based on `dnsPolicy`.
          If `dnsPolicy` is set to `"None"`, this must be provided.
        x-kab-description-zh: |-
          此字段用于配置 Pod 的 DNS 参数。
          这里设置的参数会被合并到基于 `dnsPolicy` 所生成的 DNS 配置中。
          如果 `dnsPolicy` 被设置为 `"None"`，则必须设置此字段。
      dnsPolicy:
        default: ClusterFirst
        description: |-
          Set DNS policy for the Pod. DNS parameters given in `dnsConfig` will be merged with
          the policy selected with `dnsPolicy`. To have DNS options set along with `hostNetwork`,
          you have to specify DNS policy explicitly to `"ClusterFirstWithHostNet"`.

          Possible enum values:

          - `"ClusterFirst"` indicates that the Pod should use cluster DNS first unless
            `hostNetwork` is true, if it is available, then fall back on the default
            (as determined by kubelet) DNS settings.
          - `"ClusterFirstWithHostNet"` indicates that the Pod should use cluster DNS first, if it is
            available, then fall back on the default (as determined by kubelet) DNS settings.
          - `"Default"` indicates that the Pod should use the default (as determined by kubelet)
            DNS settings.
          - `"None"` indicates that the Pod should use empty DNS settings.
            DNS parameters such as nameservers and search paths should be defined via `dnsConfig`.
            If `dnsPolicy` is set to `"None" `, `dnsConfig` must be specified.
        enum:
          - ClusterFirst
          - ClusterFirstWithHostNet
          - Default
          - None
        type: string
        x-kab-description-zh: |-
          为 Pod 设置 DNS 策略。在 `dnsConfig` 中设置的 DNS 参数会与 `dnsPolicy` 中选定的策略合并。
          如果 Pod 设置了 `hostNetwork`，你只能将 DNS 策略显式地设置为 `"ClusterFirstWithHostNet"`。
          此字段的可能取值包括：

          - `"ClusterFirst"` 表明在可能的情况下， Pod 应该首先使用集群内的 DNS 服务器，除非
            `hostNetwork` 被设置为 `true`。如果集群 DNS 不可用，则回退为默认的 DNS 设置（由 kubelet 决定）。
          - `"ClusterFirstWithHostNet"` 表明在集群 DNS 可用的情况下，此采用主机网络的 Pod
            应该首先尝试使用集群 DNS 服务，并在集群 DNS 不可用时，回退到使用 kubelet 所提供的默认 DNS 设置。
          - `"Default"` 表明 Pod 要优先尝试 kubelet 所提供的默认 DNS 设置。
          - `"None"` 标明 Pod 中的 DNS 设置为空，需要通过 `dnsConfig` 字段来定义类似名字服务器、
            搜索路径这类 DNS 参数。若 `dnsPolicy` 设置为 `"None" `，必须设置 `dnsConfig`。
      enableServiceLinks:
        default: true
        description: |-
          This flag indicates whether information about Services should be injected into Pod's
          environment variables, matching the syntax of Docker links.
        type: boolean
        x-kab-description-zh: |-
          此标志用来表明关于 Service 的信息是否要以环境变量的形式注入到 Pod 中。
          注入的语法类似于 Docker 链接。
      ephemeralContainers:
        description: |-
          List of ephemeral containers to run in this Pod.
          Ephemeral containers may be run in an existing Pod to perform user-initiated actions
          such as debugging. This list cannot be specified when creating a Pod, and it cannot be modified
          by updating the Pod spec.
          In order to add an ephemeral container to an existing Pod, use the Pod's `ephemeralcontainers`
          subresource.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.EphemeralContainer'
        type: array
        x-kab-description-zh: |-
          列举运行在 Pod 中的临时容器。
          临时容器可以运行在现有的 Pod 中，执行用户发起的动作，例如调试。
          在创建 Pod 时不可设置此列表字段，此字段也不可通过更新 Pod 规约来更改。
          要添加临时容器到现有 Pod 中，要使用 Pod 的 `ephemeralcontainers` 子资源。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      hostAliases:
        description: |-
          A list of hosts and IPs that will be injected into the Pod's `hosts` file.
          This is only valid for non-`hostNetwork` Pods.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.HostAlias'
        type: array
        x-kab-description-zh: |-
          要注入到 Pod 中的 `hosts` 文件内的一组主机和 IP 地址。
          此设置仅对于未 `hostNetwork` 为 `false` 的 Pod。
        x-kubernetes-list-map-keys:
          - ip
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: ip
        x-kubernetes-patch-strategy: merge
      hostIPC:
        default: false
        description: Use the host's IPC namespace.
        type: boolean
        x-kab-description-zh: 是否使用主机的 IPC 名字空间。
      hostNetwork:
        default: false
        description: |-
          Host networking requested for this Pod. Use the host's network namespace.
          If this option is set, the ports that will be used must be specified.
        type: boolean
        x-kab-description-zh: |-
          此字段表明 Pod 要求访问主机网络，使用所在主机的 network 名字空间。
          若设置了此字段，则必须指定要使用的端口。
      hostPID:
        default: false
        description: Use the host's PID namespace.
        type: boolean
        x-kab-description-zh: 表明 Pod 要使用主机的 PID 名字空间。
      hostUsers:
        default: true
        description: |-
          Use the host's user namespace. If set to true or not present, the Pod will be run in
          the host user namespace, useful when the Pod needs a feature only available to the host
          user namespace, such as loading a kernel module with `CAP_SYS_MODULE`.
          When set to false, a new userns is created for the Pod.
          Setting false is useful for mitigating container breakout vulnerabilities even allowing users
          to run their containers as root without actually having root privileges on the host.
          This field is Alpha-level and is only honored by servers that enable the
          `UserNamespacesSupport` feature.
        type: boolean
        x-kab-description-zh: |-
          表明 Pod 要使用宿主系统上的 user 名字空间。当此字段设置为 `true` 或者未设置时，Pod
          会运行在宿主的 user 名字空间内，如果 Pod 需要访问只能在主机的 user 名字空间中才能使用的特性，
          这种设置是有用的，例如使用 `CAP_SYS_MODULE` 权能加载内核模块。
          此字段被设置为 `false` 时，系统会为 Pod 创建一个 user 名字空间。
          将次字段设置为 `false` 可以有助于缓解容器逃逸问题，甚至允许用户在实际未获得宿主系统上 root
          特权的情况下以 root 账号运行其容器。

          此字段为 Alpha 阶段，需要启用 `UserNamespacesSupport` 特性。
      hostname:
        description: |-
          The hostname of the Pod. When specified, the value must be a valid DNS label.
          If not specified, the Pod's hostname will be set to a system-defined value.
        type: string
        x-kab-description-zh: |-
          Pod 的主机名。如果设置了此字段，则字符串值必须是合法的 DNS 标签值。
          如果未设置此字段，则 Pod 的主机名会被设置为一个系统定义的值。
      imagePullSecrets:
        description: |-
          A list of references to Secrets in the same namespace for pulling images used by this Pod.
          If specified, these Secrets will be passed to individual puller implementations for them to use.
          For each entry in the list, only the `name` field may be set.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        type: array
        x-kab-description-zh: |-
          此字段为列表值，包含对 Pod 所在名字空间中的 Secret 的引用。Pod 拉取镜像时会使用这些 Secret。
          如果设置了此字段，则所引用的 Secret 会被传递给各镜像拉取组件，供后者使用。
          列表中的各个条目只能设置 `name` 字段。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      initContainers:
        description: |-
          List of initialization containers in the Pod.
          Init containers are executed in order prior to application containers being started.
          If any init container fails, the Pod is considered to have failed and is handled according
          to its `restartPolicy`.Init containers may not have `lifecycle` actions, `readinessProbe`,
          `livenessProbe` or `startupProbe`.
          The `resources.requests` of an init container are taken into account during scheduling by
          finding the highest `request`/`limit` for each resource type, and then using the max of
          that value or the sum of the application containers.
          `resources.limits` are applied to init containers in a similar fashion.
          The name of an init container cannot conflict with other init containers, ephemeral containers
          or application containers. Init containers currently cannot be added, removed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        type: array
        x-kab-description-zh: |-
          Pod 中的初始化容器列表。初始化容器在应用容器启动之前按序执行。
          如果任何一个初始化容器失败，则认为 Pod 失败，需要根据其 `restartPolicy` 设置作进一步处理。
          初始化容器不可以包含 `lifecycle` 动作、`readinessProbe`、`livenessProbe` 或 `startupProbe`。
          初始化容器的 `resources.requests` 在 Pod 被调度时会被检查，调度器会检查每种资源类型的最大
          `request`/`limit` 设置值，并将此最大值与应用容器资源量之和做比较，取其较大者作为决策依据。
          系统用类似的方式来对初始化容器实施 `resources.limits` 约束。
          初始化容器与其他初始化容器、临时容器或应用容器之间不可以存在名字冲突。
          目前，初始化容器不可添加或者删除。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      nodeName:
        description: |-
          If this is not empty, the scheduler simply schedules this Pod onto that node, assuming that
          it fits resource requirements. This field cannot be set until all `schedulingGates` have been
          cleared. The value must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          如果此字段不为空，则调度器会直接将 Pod 调度到所指定的节点，假定节点可以满足其资源需求。
          只有所有的 `schedulingGates` 都被清除之后，才可以设置此字段。
          此字段值必须是一个合法的 DNS 子域名。
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          A selector which must match a node's labels for the Pod to be scheduled on that node.
          Each key in the map must be a qualified name.
          Each value in the map must be no more than 63 characters.
          It is either an empty string or consists of alphanumeric characters, `'-'`, `'_'`, or `'.'`,
          and must start and end with an alphanumeric character.
        type: object
        x-kab-description-zh: |-
          字段为选择算符，只有节点的标签与此算符匹配时，Pod 才会被调度到该节点。
          此映射中的每个主键都必须是一个限定名称；映射中的所有值都必须不超过 63 个字符。
          映射中的取值可以是空字符串，或者由字母、数字、`'-'`、`'_'` 或 `'.'` 字符组成，
          并且必须以字母或者数字字符开头并结尾。
        x-kubernetes-map-type: atomic
      os:
        $ref: '#/definitions/io.k8s.api.core.v1.PodOS'
        description: |-
          Specifies the OS of the containers in the Pod.
          Some Pod and container fields are restricted if this is set.
          If the `os` field is set to `"linux"` , the following fields must be unset:

          - `securityContext.windowsOptions`

          If the `os` field is set to `"windows"`, the following fields must be unset:
          - `spec.hostPID`
          - `spec.hostIPC`
          - `spec.hostUser`
          - `spec.securityContext.appArmorProfile`
          - `spec.securityContext.seLinuxOptions`
          - `spec.securityContext.seccompProfile`
          - `spec.securityContext.fsGroup`
          - `spec.securityContext.fsGroupChangePolicy`
          - `spec.securityContext.sysctls`
          - `spec.shareProcessNamespace`
          - `spec.securityContext.runAsUser`
          - `spec.securityContext.runAsGroup`
          - `spec.securityContext.supplementalGroups`
          - `spec.containers[*].securityContext.appArmorProfile`
          - `spec.containers[*].securityContext.seLinuxOptions`
          - `spec.containers[*].securityContext.seccompProfile`
          - `spec.containers[*].securityContext.capabilities`
          - `spec.containers[*].securityContext.readOnlyRootFilesystem`
          - `spec.containers[*].securityContext.privileged`
          - `spec.containers[*].securityContext.allowPrivilegeEscalation`
          - `spec.containers[*].securityContext.procMount`
          - `spec.containers[*].securityContext.runAsUser`
          - `spec.containers[*].securityContext.runAsGroup`
        x-kab-description-zh: |-
          设置 Pod 中容器的操作系统。如果设置了这个字段，则某些 Pod 和容器字段会受到限制。
          如果 `os` 字段的取值为 `"linux"`，则不可以设置下面的字段：

          - `securityContext.windowsOptions`

          如果 `os` 字段的取值为 `"windows"`，则不可以设置以下字段：

          - `spec.hostPID`
          - `spec.hostIPC`
          - `spec.hostUser`
          - `spec.securityContext.seLinuxOptions`
          - `spec.securityContext.seccompProfile`
          - `spec.securityContext.fsGroup`
          - `spec.securityContext.fsGroupChangePolicy`
          - `spec.securityContext.sysctls`
          - `spec.shareProcessNamespace`
          - `spec.securityContext.runAsUser`
          - `spec.securityContext.runAsGroup`
          - `spec.securityContext.supplementalGroups`
          - `spec.containers[*].securityContext.seLinuxOptions`
          - `spec.containers[*].securityContext.seccompProfile`
          - `spec.containers[*].securityContext.capabilities`
          - `spec.containers[*].securityContext.readOnlyRootFilesystem`
          - `spec.containers[*].securityContext.privileged`
          - `spec.containers[*].securityContext.allowPrivilegeEscalation`
          - `spec.containers[*].securityContext.procMount`
          - `spec.containers[*].securityContext.runAsUser`
          - `spec.containers[*].securityContext.runAsGroup`
      overhead:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The resource overhead associated with running a Pod for a given RuntimeClass.
          This field will be auto-populated at admission time by the `RuntimeClass` admission controller.
          If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod
          create requests. The `RuntimeClass` admission controller will reject Pod create requests
          which have the `overhead` already set.
          If `RuntimeClass` is configured and selected in the Pod `spec`, `overhead` will be set to the
          value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated
          as zero.
        type: object
        x-kab-description-zh: |-
          使用某给定 RuntimeClass 运行 Pod 时会带来的额外资源开销。
          在 Pod 被准入时，此字段由 `RuntimeClass` 准入控制器来自动填写。
          如果启用了 `RuntimeClass` 准入控制器，则不可以在 Pod 创建请求中设置 `overhead`。
          `RuntimeClass` 准入控制器会拒绝设置了 `overhead` 的 Pod 创建请求。
          如果配置了 `RuntimeClass` 并且在 Pod 的 `spec` 中选择了运行时类，则 `overhead` 会被设置为对应的
          `RuntimeClass` 中定义的值，否则，`overhead` 会保持未设置状态且被视为 0。
      preemptionPolicy:
        default: PreemptLowerPriority
        description: |-
          The policy for preempting Pods with lower priority.

          - `"Never"`: the Pod never preempts other Pods with lower priority;
          - `"PreemptLowerPriority"`: the Pod can preempt other Pods with lower priority.
        enum:
          - Never
          - PreemptLowerPriority
        type: string
        x-kab-description-zh: |-
          设置 Pod 抢占优先级较低的其他 Pod 的策略。

          - `"Never"`：此 Pod 不会抢占其他优先级较低的 Pod。
          - `"PreemptLowerPriority"`：此 Pod 可以抢占其他优先级较低的 Pod。
      priority:
        description: |-
          The priority value. Various system components use this field to find the priority of the Pod.
          When the `Priority` Admission Controller is enabled, it prevents users from setting this field.
          The admission controller populates this field from PriorityClassName.
          The higher the value, the higher the priority.
        format: int32
        type: integer
        x-kab-description-zh: |-
          优先级数值。不同的系统组件会使用这个字段来查看 Pod 的优先级值。
          当启用了 `Priority` 准入控制器时，该控制器会禁止用户自行设置此字段。
          准入控制器会根据 Pod 的 `priorityClassName` 自动设置此字段。
          此字段的值越大，代表 Pod 的优先级越高。
      priorityClassName:
        description: |-
          The Pod's priority class. The value must be a valid DNS subdomain.
          The value `"system-node-critical"` and `"system-cluster-critical"` are two special keywords which
          indicate the highest priorities with the former being the highest priority.
          Any other values must match the name of a PriorityClass object.
          If not specified, the Pod priority will be default or zero if there is no default.
        type: string
        x-kab-description-zh: |-
          Pod 的优先级类。此字段值必须是一个合法的 DNS 子域名。
          字符串值 `"system-node-critical"` 和 `"system-cluster-critical"` 是两个特殊的关键词，
          用来表示系统中最高的两个优先级类，前者的优先级最高。
          字段设置为其他值时，字符串要与某 PriorityClass 对象同名。
          如果没有设置这个字段，则 Pod 的优先级会是默认优先级类对应的值，或者当没有默认优先级类时为 0。
      readinessGates:
        description: |-
          If specified, all readiness gates will be evaluated for Pod readiness.
          A Pod is ready when all its containers are ready AND all conditions specified in the readiness
          gates have status equal to `"True"`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodReadinessGate'
        type: array
        x-kab-description-zh: |-
          如果为 Pod 设置了这个字段，则判断 Pod 就绪态时需要评估其中其中的每个就绪态门控。
          Pod 当其中所有容器都已就绪且此列表中所有状况的状态都为 `"True"` 时才真正就绪。
        x-kubernetes-list-type: atomic
      resourceClaims:
        description: |-
          The `resourceClaims` defines which ResourceClaims must be allocated and reserved before
          the Pod is allowed to start.
          The resources will be made available to those containers which consume them by name.

          This is an Alpha field and requires enabling the `DynamicResourceAllocation` feature gate.

          This field is immutable.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodResourceClaim'
        type: array
        x-kab-description-zh: |-
          `resourceClaims` 字段定义允许 Pod 启动之前必须分配并预留的 ResourceClaim 列表。
          这里引用的资源会被提供给那些按名称来使用它们的容器。
          此字段是一个 Alpha 阶段字段，需要启用 `DynamicResourceAllocation` 特性门控。
          此字段不可变更。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge,retainKeys
      restartPolicy:
        default: Always
        description: |-
          Restart policy for all containers within the Pod. For ReplicationController, Deployment,
          DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be `"Always"`.
          For Job, the `restartPolicy` must be `"OnFailure"` or `"Never"`.
        enum:
          - Always
          - Never
          - OnFailure
        type: string
        x-kab-description-zh: |-
          Pod 内所有容器的重启策略。对于 ReplicationController、Deployment、DaemonSet、ReplicaSet 和
          StatefulSet，`restartPolicy` 必须设置为 `"Always"`。对于 Job， `restartPolicy` 必须是
          `"OnFailure"` 或者 `"Never"`。
      runtimeClassName:
        description: |-
          This refers to a RuntimeClass object in the `node.k8s.io` group, which should be used to
          run this Pod.
          If no RuntimeClass resource matches the name, the Pod will not run.
          If unset or empty, the `"legacy"` RuntimeClass will be used, which is an implicit class
          with an empty definition that uses the default runtime handler.
          The value must be a valid DNS subdomain.
        type: string
        x-kab-description-zh: |-
          此字段通过名字引用 `node.k8s.io` 组中的某个 RuntimeClass 对象，意为要使用该运行时类来运行此 Pod。
          如果找不到名字匹配的 RuntimeClass 资源，则 Pod 不会运行。
          如果此字段没有配置或者为空，则会使用 `"legacy"` RuntimeClass，也就是一个隐式的、定义为空的
          RuntimeClass。该 RuntimeClass 使用默认的容器运行时处理程序。
          所给的名字字符串必须是合法的 DNS 子域名。
      schedulerName:
        description: |-
          If specified, the Pod will be dispatched by specified scheduler.
          If not specified, the Pod will be dispatched by default scheduler.
        type: string
        x-kab-description-zh: |-
          如果设置了此字段，则 Pod 会使用所指定的调度器来调度。
          如果未设置此字段，则 Pod 会使用默认的调度器来调度。
      schedulingGates:
        description: |-
          `schedulingGates` is an opaque list of values that, if specified, will block scheduling the Pod.
          If `schedulingGates` is not empty, the Pod will stay in the `SchedulingGated` state and
          the scheduler will not attempt to schedule the pod.

          `schedulingGates` can only be set at Pod creation time, and be removed only afterwards.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodSchedulingGate'
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          `schedulingGates` 是一个列表，其中的元素会阻止 Pod 被调度。
          当 `schedulingGates` 不为空时，Pod 会一直处于 `"SchedulingGated"` 状态，调度器也不会尝试调度该 Pod。

          `schedulingGates` 只能在 Pod 创建时设置，Pod 创建之后只能从中移除表项。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      securityContext:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSecurityContext'
        description: Pod-level security attributes and settings common to all containers.
          Defaults to empty.
        x-kab-description-zh: Pod 层面的安全属性与配置，对所有容器起作用。默认值为空。
      serviceAccountName:
        description: The name of the ServiceAccount to use to run this Pod. The value
          must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: 用来运行此 Pod 的 ServiceAccount 的名字。字符串值必须时合法的 DNS 子域名。
      setHostnameAsFQDN:
        default: false
        description: |-
          If `true` the Pod's hostname will be configured as the Pod's fully qualified domain name (FQDN),
          rather than the leaf name which is the default.
          For Linux containers, this means setting the FQDN in the `hostname` field of the kernel
          (the `nodename` field of struct `utsname`).
          In Windows containers, this means setting the registry value of hostname for the registry key
          `"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"` to FQDN.
          If a Pod does not have FQDN, this has no effect.
          This field is Beta, gated by the `SetHostnameAsFQDN` feature gate.
        type: boolean
        x-kab-description-zh: |-
          如果此字段为 `true`，则 Pod 的主机名会被配置为 Pod 的全限定域名（FQDN），
          而不是默认情况下的叶子域名（Leaf Name）。
          对于 Linux 容器而言，这意味着会将内核的 `hostname` 字段（`utsname` 结构中的 `nodename` 字段）
          设置为 FQDN 值。
          对于 Windows 容器，则意味着要将注册表中用来控制主机名的注册表项
          `"HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\Tcpip\Parameters"`
          设置为 FQDN 值。
          如果 Pod 没有对应的 FQDN，则此字段设置无效。
          此字段处于 Beta 阶段，需要启用 `SetHostnameAsFQDN` 特性门控。
      shareProcessNamespace:
        default: false
        description: |-
          Share a single process namespace between all of the containers in a Pod.
          When this is set containers will be able to view and signal processes from other containers
          in the same Pod, and the first process in each container will not be assigned PID 1.
          `hostPID` and `shareProcessNamespace` cannot both be set.
        type: boolean
        x-kab-description-zh: |-
          在同一个 Pod 中所有容器之间共享进程名字空间。
          如果这个字段被设置为 `true`，则一个容器就能看到同一个 Pod 中其他容器内的进程并向其发送信号。
          此外，每个容器中的第一个进程的 PID 也不再是 1。
          不可以同时设置 `hostPID` 和 `shareProcessNamespace`。
      subdomain:
        description: |-
          If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be
          `"<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>"`.
          If not specified, the Pod will not have a domain name at all.
        type: string
        x-kab-description-zh: |-
          如果设置了此字段，所设置的字符串值必须是合法的 DNS 标签值。
          Pod 的全限定主机名将是 `"<hostname>.<subdomain>.<Pod 名字空间>.svc.<集群域名>"`。
          如果没有设置此字段，则 Pod 不会获得域名。
      terminationGracePeriodSeconds:
        default: 30
        description: |-
          Optional duration in seconds the Pod needs to terminate gracefully.
          May be decreased in delete request. Value must be non-negative integer.
          The value zero indicates stop immediately via the kill signal (no opportunity to shut down).
          If this value is `nil`, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the Pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          可选的、按秒计的时长值。Pod 需要在所给的时间段内体面终止。在 DELETE 请求中可以减少此值。
          字段值必须是非负数。数值 0 意味着立即使用 KILL 信号终止容器（没有关闭的机会）。
          如果未设置，则会使用默认的宽限期限。宽限期以秒计，从 Pod 内的进程收到终止信号开始计时，
          到使用 KILL 信号强制终止进程为止。
          用户应该将此值设置为一个超出进程完成清理操作所需时间的时长。
      tolerations:
        description: The Pod's tolerations.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Toleration'
        type: array
        x-kab-description-zh: Pod 的容忍度。
        x-kubernetes-list-type: atomic
      topologySpreadConstraints:
        description: |-
          This describes how a group of Pods are to spread across topology domains.
          Scheduler will schedule Pods in a way which abides by the constraints.
          All items in the list are AND'ed. The tuple `(topologyKey, whenUnsatisfiable)` must be unique
          in the list.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint'
        type: array
        x-kab-description-zh: |-
          此字段描述如何在多个拓扑域（Topology Domain）之间分布一组 Pod。
          调度器会采取已经能够满足限制条件的方式来调度 Pod。此列表中的条目会以逻辑 AND 操作进行汇总。
          在整个列表中，`(topologyKey, whenUnsatisfiable)` 元组必须唯一。
        x-kubernetes-list-map-keys:
          - topologyKey
          - whenUnsatisfiable
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: topologyKey
        x-kubernetes-patch-strategy: merge
      volumes:
        description: List of volumes that can be mounted by containers in the Pod.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Volume'
        type: array
        x-kab-description-zh: 可被 Pod 中容器挂载的卷的列表。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge,retainKeys
    required:
      - containers
    type: object
    x-kab-description-zh: Pod 的规约。
  io.k8s.api.core.v1.PodSpec.UPDATE:
    description: The new specification of a Pod. When updating a Pod, only some fields
      can be changed.
    properties:
      activeDeadlineSeconds:
        description: |-
          Duration in seconds the Pod may be active on the node relative to `startTime` before
          the system will actively try to mark it failed and kill associated containers.
          Value must be a positive 32-bit integer. This is not supported in `ReplicationController`,
          `Deployment`, `ReplicaSet`, `DaemonSet` or `StatefulSet`.

          When updating, this field can be updated from nil to a positive value, or from
          a positive value to a smaller, non-negative value.
        format: int64
        type: integer
        x-kab-description-zh: |-
          从 `startTime` 开始计时的时长（秒数值），Pod 如果在此时间窗口内没能进入存活状态，
          系统会反复尝试标记其已失败并杀死与其关联的容器。
          字段值必须是一个 32 位的正整数。
          `ReplicationController`、`Deployment`、`ReplicaSet`、`DaemonSet` 或 `StatefulSet`
          中都不支持此设置。

          执行更新操作时，此字段可以从未设置改为一个正数值，或者从一个正数值改为一个更小的、
          非负的整数值。
      containers:
        description: |-
          List of containers in the Pod. Containers currently cannot be added or removed.
          There must be at least one container in a Pod.
          Cannot be updated, but the `image` field and the `resources` field can be changed.
          When the Pod is resized in place, its QoS cannot be changed.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          Pod 中容器的列表。目前不支持添加或者删除容器。每个 Pod 中至少包含一个容器。
          此字段不可变更，但是 `image` 和 `resources` 字段可以变更。
          当 Pod 被就地重设大小时，其 QoS 类不可发生变化。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      initContainers:
        description: |-
          List of initialization containers in the Pod.
          Init containers currently cannot be added, removed.
          Only the `image` field can be updated.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Container'
        type: array
        x-kab-description-zh: |-
          Pod 中的初始化容器列表。初始化容器在应用容器启动之前按序执行。
          目前，初始化容器不可添加或者删除。
          只有其 `image` 字段可被更新。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          A selector which must match a node's labels for the Pod to be scheduled on that node.
          Each key in the map must be a qualified name.
          Each value in the map must be no more than 63 characters.
          It is either an empty string or consists of alphanumeric characters, `'-'`, `'_'`, or `'.'`,
          and must start and end with an alphanumeric character.

          If the Pod is gated, addings to this field is allowed, but no deletions or mutations is allowed
        type: object
        x-kab-description-zh: |-
          字段为选择算符，只有节点的标签与此算符匹配时，Pod 才会被调度到该节点。
          此映射中的每个主键都必须是一个限定名称；映射中的所有值都必须不超过 63 个字符。
          映射中的取值可以是空字符串，或者由字母、数字、`'-'`、`'_'` 或 `'.'` 字符组成，
          并且必须以字母或者数字字符开头并结尾。

          如果 Pod 处于被调度门控阻塞的状态，可以向此字段添加新的条件，但不允许删除现有的条件或者变更现有条件。
        x-kubernetes-map-type: atomic
      schedulingGates:
        description: |-
          `schedulingGates` is an opaque list of values that, if specified, will block scheduling the Pod.
          If `schedulingGates` is not empty, the Pod will stay in the `SchedulingGated` state and
          the scheduler will not attempt to schedule the pod.

          `schedulingGates` can only be set at Pod creation time, and be removed only afterwards.

          Only deletions are allowed during a Pod update.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodSchedulingGate'
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          `schedulingGates` 是一个列表，其中的元素会阻止 Pod 被调度。
          当 `schedulingGates` 不为空时，Pod 会一直处于 `"SchedulingGated"` 状态，调度器也不会尝试调度该 Pod。

          `schedulingGates` 只能在 Pod 创建时设置，Pod 创建之后只能从中移除表项。

          Pod 变更时只能移除已有的元素，不可添加新的元素。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
      terminationGracePeriodSeconds:
        default: 30
        description: |-
          Optional duration in seconds the Pod needs to terminate gracefully.
          May be decreased in delete request. Value must be non-negative integer.
          The value zero indicates stop immediately via the kill signal (no opportunity to shut down).
          If this value is `nil`, the default grace period will be used instead.
          The grace period is the duration in seconds after the processes running in the Pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.

          When updating the Pod, this field can be set to 1 if its previous value is negative.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          可选的、按秒计的时长值。Pod 需要在所给的时间段内体面终止。在 DELETE 请求中可以减少此值。
          字段值必须是非负数。数值 0 意味着立即使用 KILL 信号终止容器（没有关闭的机会）。
          如果未设置，则会使用默认的宽限期限。宽限期以秒计，从 Pod 内的进程收到终止信号开始计时，
          到使用 KILL 信号强制终止进程为止。
          用户应该将此值设置为一个超出进程完成清理操作所需时间的时长。

          更新 Pod 时，如果此字段之前的取值是负数，可以重新设置为 1。
      tolerations:
        description: |-
          The Pod's tolerations. New tolerations can be added but existing tolerations
          cannot be removed during update.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Toleration'
        type: array
        x-kab-description-zh: Pod 的容忍度设置。更新时可以添加新的容忍度，但是不可以去除现有的容忍度。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: Pod 的新规约。在更新 Pod 时，只有部分字段可以被更新。
  io.k8s.api.core.v1.PodStatus:
    description: |-
      Information about the status of a Pod. Status may trail the actual state of a system,
      especially if the node that hosts the Pod cannot contact the control plane.
    properties:
      conditions:
        description: Current service state of Pod.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodCondition'
        type: array
        x-kab-description-zh: Pod 的当前服务状态。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      containerStatuses:
        description: The list has one entry per container in the manifest.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerStatus'
        type: array
        x-kab-description-zh: 此列表中包含清单中各个容器的状态。
        x-kubernetes-list-type: atomic
      ephemeralContainerStatuses:
        description: Status for any ephemeral containers that have run in this Pod.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerStatus'
        type: array
        x-kab-description-zh: 此列表中包含 Pod 中曾经运行的临时容器的状态。
        x-kubernetes-list-type: atomic
      hostIP:
        description: |-
          `hostIP` holds the IP address of the host to which the Pod is assigned.
          Empty if the Pod has not started yet. A Pod can be assigned to a node that has
          a problem in kubelet which in turns mean that `hostIP` will not be updated even
          if there is a node is assigned to Pod.
        type: string
        x-kab-description-zh: |-
          `hostIP` 保存的是 Pod 当前被指派到的主机的 IP 地址。如果 Pod 尚未启动，此字段为空。
          Pod 可能会被指派到一个 kubelet 有问题的节点，kubelet 有问题意味着意味着即使 Pod
          被调度到该节点，`hostIP` 也不会被更新。
      hostIPs:
        description: |-
          `hostIPs` holds the IP addresses allocated to the host.
          If this field is specified, the first entry must match the `hostIP` field.
          This list is empty if the Pod has not started yet.
          A Pod can be assigned to a node that has a problem in kubelet which in turns means that
          `hostIPs` will not be updated even if there is a node is assigned to this Pod.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.HostIP'
        type: array
        x-kab-description-zh: |-
          `hostIPs` 包含的是分配给节点的 IP 地址。
          如果此字段被设置，则其中第一个元素必须与 `hostIP` 字段的取值相同。
          如果 Pod 尚未启动，此列表为空。
          Pod 可能会被指派到一个 kubelet 有问题的节点，kubelet 有问题意味着意味着即使 Pod
          被调度到该节点，`hostIPs` 也不会被更新。
        x-kubernetes-list-type: atomic
        x-kubernetes-patch-merge-key: ip
        x-kubernetes-patch-strategy: merge
      initContainerStatuses:
        description: |-
          The list has one entry per init container in the manifest.
          The most recent successful init container will have `ready: true`, the most recently
          started container will have `startTime` set.'
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ContainerStatus'
        type: array
        x-kab-description-zh: |-
          此列表包含清单中各个初始化容器的状态。
          最近成功完成的初始化容器会具有 `read: true` 属性，最近启动的容器会被设置 `startTime` 属性。
        x-kubernetes-list-type: atomic
      message:
        description: A human readable message indicating details about why the Pod
          is in this condition.
        type: string
        x-kab-description-zh: 一条人类可读的消息，用来表明 Pod 为什么会处于当前的状况。
      nominatedNodeName:
        description: |-
          This is set only when this Pod preempts other Pods on the node, but it cannot be scheduled
          right away as preemption victims receive their graceful termination periods.
          This field does not guarantee that the Pod will be scheduled on this node.
          Scheduler may decide to place the Pod elsewhere if other nodes become available sooner.
          Scheduler may also decide to give the resources on this node to a higher priority Pod
          that is created after preemption.
          As a result, this field may be different than `spec.nodeName` when the Pod is scheduled.
        type: string
        x-kab-description-zh: |-
          如果此 Pod 抢占了节点上其他 Pod，但因为被抢占的 Pod 还存在终止宽限期，这一 Pod
          当前还无法立即被调度，系统会设置此字段。
          设置此字段并不意味着 Pod 就一定会被调度到对应的节点。调度器可能在其他节点更早变得可用时，
          将 Pod 调度到其他位置。如果在发生抢占之后，有更高优先级的 Pod 被创建，
          调度器也有可能会决定将节点上的资源分配给后来者。
          因此，这个字段可能与 Pod 真正被调度后 `spec.nodeName` 中呈现的值不同。
      phase:
        description: |-
          The phase of a Pod is a simple, high-level summary of where the Pod is in its lifecycle.
          The `conditions` array, the `reason` and `message` fields, and the individual container
          status arrays contain more detail about the Pod's status.

          Possible enum values:
          - `"Failed"` means that all containers in the pod have terminated, and at least one container
            has terminated in a failure (exited with a non-zero exit code or was stopped by the system).
          - `"Pending"` means the pod has been accepted by the system, but one or more of the containers
            has not been started.
            This includes time before being scheduled as well as time spent downloading images over
            the network, which could take a while.
          - `"Running"` means the Pod has been bound to a node and all of the containers have been started.
            At least one container is still running or is in the process of being restarted.
          - `"Succeeded"` means that all containers in the pod have terminated n success, with
            a container exit code of 0, and the system is not going to restart any of these containers.
          - `"Unknown"` means that for some reason the state of the Pod could not be obtained,
            typically due to an error in communicating with the host of the Pod.
        enum:
          - Failed
          - Pending
          - Running
          - Succeeded
          - Unknown
        type: string
        x-kab-description-zh: |-
          Pod 的阶段（Phase）是对 Pod 在生命周期中所处的状态的一种简化的、高度抽象的概括。
          关于 Pod 状态的进一步详细信息，可以查看数组 `conditions`、`reason` 和 `message` 字段，
          以及包含各个容器状态的数组。

          可能的枚举值包括：

          - `"Failed"` 意味着 Pod 中的所有容器都已终止，并且至少一个容器以失败的状态终止
            （其退出代码非零或者容器是被系统停止的）。
          - `"Pending"` 意味着 Pod 已经被系统接受，但是其中一个或者多个容器尚未被启动。
            这个状态包括 Pod 被调度的时间，以及通过网络下载镜像的时间（可能不是立即完成）。
          - `"Running"` 表明 Pod 已经被绑定到某个节点，并且其中的所有容器都已经被启动。
            至少一个容器仍然处于运行状态或者处于正在被重启的状态。
          - `"Succeeded"` 表明 Pod 中所有容器都已经以成功的状态终止，即其容器退出代码为 0，
            系统已经决定不再重新启动任何容器。
          - `"Unknown"` 意味着出于某些原因，现在无法获知 Pod 的状态。可能的原因之一是
            与 Pod 所在的节点通信时出现错误。
      podIP:
        description: |-
          The IP address allocated to the Pod. Routable at least within the cluster.
          Empty if not yet allocated.
        type: string
        x-kab-description-zh: |-
          分配给 Pod 的 IP 地址。此地址至少在集群内时可路由的。
          如果尚未分配 IP 地址，此字段也可能为空。
      podIPs:
        description: |-
          The IP addresses allocated to the Pod.
          If this field is specified, the 0th entry must match the `podIP` field.
          Pods may be allocated at most 1 value for each of IPv4 and IPv6.
          This list is empty if no IPs have been allocated yet.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodIP'
        type: array
        x-kab-description-zh: |-
          分配给 Pod 的 IP 地址。
          如果设置了此字段，则其中第一个元素一定与 `podIP` 字段值匹配。
          Pod 至多可以分配一个 IPv4 地址和一个 IPv6 地址。
          如果尚未分配 IP 地址，此列表也可能为空。
        x-kubernetes-list-map-keys:
          - ip
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: ip
        x-kubernetes-patch-strategy: merge
      qosClass:
        description: |-
          The Quality of Service (QOS) classification assigned to the Pod based on resource requirements.

          Possible enum values:

          - `"BestEffort"`
          - `"Burstable"`
          - `"Guaranteed"`
        enum:
          - BestEffort
          - Burstable
          - Guaranteed
        type: string
        x-kab-description-zh: |-
          基于资源需求给 Pod 分配的服务质量（QoS）类。可能的值有：

          - `"BestEffort"`
          - `"Burstable"`
          - `"Guaranteed"`
      reason:
        description: A brief CamelCase message indicating details about why the Pod
          is in this state. e.g. `"Evicted"`.
        type: string
        x-kab-description-zh: 一个简短的、驼峰编码的字符串消息，给出 Pod 处于当前状态的原因，例如：`"Evicted"`。
      resize:
        description: |-
          Status of resources resize desired for Pod's containers.
          It is empty if no resources resize is pending.
          Any changes to container resources will automatically set this to "Proposed".
        type: string
        x-kab-description-zh: |-
          对 Pod 中容器做资源规格变更时，变更所处的状态。
          如果没有待定的变更操作，此字段为空。
          只要发生对容器资源的变更，就会自动将此字段设置为 `"Proposed"`。
      resourceClaimStatuses:
        description: Status of resource claims.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodResourceClaimStatus'
        type: array
        x-kab-description-zh: ResourceClaim 的状态。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge,retainKeys
      startTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          RFC 3339 date and time at which the Pod was acknowledged by the kubelet.
          This is before the kubelet pulled the container image(s) for the Pod.
        x-kab-description-zh: |-
          Pod 被 kubelet 认可接受的时间，以 RFC 3339 日期与时间格式给出。
          这个时间戳早于 kubelet 开始为 Pod 拉取容器镜像的操作。
    required:
      - conditions
      - containerStatuses
      - message
      - phase
      - reason
    type: object
    x-kab-description-zh: |-
      关于 Pod 当前状态的信息。此信息记录可能与系统的实际状态之间存在一定的滞后，
      尤其是当托管 Pod 的节点无法联系控制面节点时。
  io.k8s.api.core.v1.PodTemplate.CREATE:
    description: A template for creating copies of a predefined Pod.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodTemplate
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: Template defines the Pods that will be created from this Pod
          template.
        x-kab-description-zh: 定义从此 Pod 模板所创建的 Pod 的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - template
    type: object
    x-kab-description-zh: 用来创建预定义 Pod 的副本的模板。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PodTemplate
        version: v1
  io.k8s.api.core.v1.PodTemplate.GET:
    description: A template for creating copies of a predefined Pod.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodTemplate
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: Template defines the Pods that will be created from this Pod
          template.
        x-kab-description-zh: 定义从此 Pod 模板所创建的 Pod 的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - template
    type: object
    x-kab-description-zh: 用来创建预定义 Pod 的副本的模板。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PodTemplate
        version: v1
  io.k8s.api.core.v1.PodTemplate.UPDATE:
    description: A template for creating copies of a predefined Pod.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodTemplate
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The `name` must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: Template defines the Pods that will be created from this Pod
          template.
        x-kab-description-zh: 定义从此 Pod 模板所创建的 Pod 的规约。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: 用来创建预定义 Pod 的副本的模板。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PodTemplate
        version: v1
  io.k8s.api.core.v1.PodTemplateList:
    description: A list of PodTemplate objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PodTemplate objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
        type: array
        x-kab-description-zh: 包含 PodTemplate 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodTemplateList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 PodTemplate 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: PodTemplateList
        version: v1
  io.k8s.api.core.v1.PodTemplateSpec.CREATE:
    description: The specification a Pod should have when created from the template.
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERCREATE'
        description: Object metadata for nested Pod template.
        x-kab-description-zh: 用于嵌套的 Pod 模板的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec.CREATE'
        description: Specification of the desired behavior of the Pod.
        x-kab-description-zh: 关于 Pod 预期行为的规约。
    required:
      - spec
    type: object
    x-kab-description-zh: 基于此模板所创建的 Pod 所具有的规约。
  io.k8s.api.core.v1.PodTemplateSpec.GET:
    description: The specification a Pod should have when created from the template.
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERGET'
        description: Object metadata for nested Pod template.
        x-kab-description-zh: 用于嵌套的 Pod 模板的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec.GET'
        description: Specification of the desired behavior of the Pod.
        x-kab-description-zh: 关于 Pod 预期行为的规约。
    required:
      - metadata
      - spec
    type: object
    x-kab-description-zh: 基于此模板所创建的 Pod 所具有的规约。
  io.k8s.api.core.v1.PodTemplateSpec.UPDATE:
    description: The specification a Pod should have when created from the template.
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERUPDATE'
        description: Object metadata for nested Pod template.
        x-kab-description-zh: 用于嵌套的 Pod 模板的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSpec.UPDATE'
        description: Specification of the desired behavior of the Pod.
        x-kab-description-zh: 关于 Pod 预期行为的规约。
    type: object
    x-kab-description-zh: 基于此模板所创建的 Pod 所具有的规约。
  io.k8s.api.core.v1.PortStatus:
    description: The status about a port.
    properties:
      error:
        description: |-
          This field records the problem with the Service port.
          The format of the `error` shall comply with the following rules:
          - built-in error values shall be specified in this file and those shall use CamelCase names
          - cloud provider specific error values must have names that comply with the format
            `"foo.example.com/CamelCase"`.
        type: string
        x-kab-description-zh: |-
          字段记录与 Service 端口相关的问题。
          `error` 的格式应该遵从以下规则：

          - 内置的错误应该在源码中给出且使用驼峰编码的名称
          - 特定于云平台的错误信息要带有域名前缀，符合格式 `"foo.example.com/CamelCase"`
      port:
        description: The port number of the Service port whose status is recorded
          here.
        format: int32
        type: integer
        x-kab-description-zh: 记录所对应的 Service 端口号。
      protocol:
        description: The protocol of the Service port whose status is recorded here.
        enum:
          - SCTP
          - TCP
          - UDP
        type: string
        x-kab-description-zh: 记录对应的 Service 端口协议。
    required:
      - port
      - protocol
    type: object
    x-kab-description-zh: 端口的状态。
  io.k8s.api.core.v1.PortworxVolumeSource:
    description: A Portworx volume resource.
    properties:
      fsType:
        default: ext4
        description: The filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型。
      readOnly:
        default: false
        description: Force the volume to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载卷。
      volumeID:
        description: Unique ID that identifies a Portworx volume
        minLength: 1
        type: string
        x-kab-description-zh: 用来标识 Portworx 卷的唯一 ID。
    required:
      - volumeID
    type: object
    x-kab-description-zh: Portworx 卷资源。
  io.k8s.api.core.v1.PreferAvoidPodsEntry:
    description: This describes a class of Pods that should avoid the node.
    properties:
      evictionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time at which this entry was added to the list.
        x-kab-description-zh: 此条目被添加到列表中的时间。
      message:
        description: Human readable message indicating why this entry was added to
          the list.
        type: string
        x-kab-description-zh: 人类可读的字符串消息，标明条目被加入列表的原因。
      podSignature:
        $ref: '#/definitions/io.k8s.api.core.v1.PodSignature'
        description: The class of Pods.
        x-kab-description-zh: Pod 的类型。
      reason:
        description: A (brief) reason why this entry was added to the list.
        type: string
        x-kab-description-zh: 关于条目被添加到列表的（简短）原因。
    required:
      - podSignature
    type: object
    x-kab-description-zh: 描述需要避开节点的 Pod 类型。
  io.k8s.api.core.v1.PreferredSchedulingTerm:
    description: |-
      An empty term matches all objects with implicit weight 0 (i.e. it's a no-op).
      A null term matches no objects (i.e. is also a no-op).
    properties:
      preference:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelectorTerm'
        description: A node selector term, associated with the corresponding weight.
        x-kab-description-zh: 一个节点选择条件，对应着此结构中的权重设置。
      weight:
        description: Weight associated with matching the corresponding preference.
        format: int32
        maximum: 100
        minimum: 1
        type: integer
        x-kab-description-zh: 对应匹配 `preference` 的权重。
    required:
      - preference
      - weight
    type: object
    x-kab-description-zh: |-
      空的条件（Term）会匹配所有对象，且权重为 0（即，对应着无操作）。
      条件为 null 时，不会匹配任何对象（即，也对应着无操作）。
  io.k8s.api.core.v1.Probe:
    description: |-
      A health check to be performed against a container to determine whether it is alive or ready
      to receive traffic. One and only one of the `exec`, `httpGet` and `tcpSocket` action can be specified.
    properties:
      exec:
        $ref: '#/definitions/io.k8s.api.core.v1.ExecAction'
        description: This specifies the action to take.
        x-kab-description-zh: 指定要执行的动作。
      failureThreshold:
        default: 3
        description: Minimum consecutive failures for the probe to be considered failed
          after having succeeded.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: 当此探针连续失败次数达到此阈值时，系统会认为探针失败。
      grpc:
        $ref: '#/definitions/io.k8s.api.core.v1.GRPCAction'
        description: An action involving a GRPC port.
        x-kab-description-zh: 与某 GRPC 端口相关的一个动作。
      httpGet:
        $ref: '#/definitions/io.k8s.api.core.v1.HTTPGetAction'
        description: This specifies the HTTP request to perform.
        x-kab-description-zh: 指定要执行的 HTTP 请求。
      initialDelaySeconds:
        description: Number of seconds after the container has started before liveness
          probes are initiated.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 在容器启动指定的秒数之后，才启动存活态探针。
      periodSeconds:
        default: 10
        description: How often (in seconds) to perform the probe.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: 执行探测的频度（按秒计）。
      successThreshold:
        default: 1
        description: |-
          Minimum consecutive successes for the probe to be considered successful after having failed.
          Must be 1 for liveness and startup probes.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          探针一旦失败之后，需要其连续成功次数达到此阈值之后，才认为其再次成功。
          对于存活态探针和启动探针，此字段必须为 1。
      tcpSocket:
        $ref: '#/definitions/io.k8s.api.core.v1.TCPSocketAction'
        description: This specifies an action involving a TCP port.
        x-kab-description-zh: 此字段设置使用 TCP 端口的一个动作。
      terminationGracePeriodSeconds:
        description: |-
          Optional duration in seconds the Pod needs to terminate gracefully upon probe failure.
          The grace period is the duration in seconds after the processes running in the Pod are sent
          a termination signal and the time when the processes are forcibly halted with a kill signal.
          Set this value longer than the expected cleanup time for your process.
          If this value is `nil`, the Pod's `terminationGracePeriodSeconds` will be used.
          Otherwise, this value overrides the value provided by the Pod spec.
          Value must be non-negative integer. The value zero indicates stop immediately via the kill signal
          (no opportunity to shut down).
          This is a Beta field and requires enabling the `ProbeTerminationGracePeriod` feature gate.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          可选字段，用来设置 Pod 在探针失败时可以获得的终止宽限期。
          宽限期计时从 kubelet 向 Pod 中运行的进程发送 TERM 信号开始，宽限期结束时，
          kubelet 会向容器中进程发送 KILL 信号强制终止进程。
          为此字段所设置的值要长于进程完成清理操作所需要的时间。
          如果字段未设置，则使用 Pod 层面定义的 `terminationGracePeriodSeconds`。
          否则，这里定义的值会覆盖 Pod 规约所提供的值。字段值必须是非负整数。
          如果字段值为零，则意味着 kubelet 会直接发送 KILL 信号终止进程（因而没有机会执行关闭操作）。

          此字段处于 Beta 阶段，需要启用 `ProbeTerminationGracePeriod` 特性门控。
      timeoutSeconds:
        default: 1
        description: Number of seconds after which the probe times out.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: 探针执行的超时秒数。
    type: object
    x-kab-description-zh: |-
      要针对容器执行的一种健康检查，用来确定容器是否存活或者准备好接收请求。
      只能设置 `exec`、`grpc`、`httpGet` 和 `tcpSocket` 之一。
  io.k8s.api.core.v1.ProjectedVolumeSource:
    description: A projected volume source.
    properties:
      defaultMode:
        description: |-
          Mode bits used to set permissions on created files by default.
          Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file mode, like `fsGroup`,
          and the result can be other mode bits set.
        format: int32
        maximum: 511
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          默认为所创建的文件设置的访问权限位。
          取值必须是介于 `0` 和 `0777` 之间的八进制数，或者 `0` 与 `511` 之间的十进制数。
          YAML 既可接受八进制数，也可接受十进制数，JSON 需要使用十进制数来设置模式位。
          路径中的目录部分不受此设置影响。
          此设置可能与其他一些影响文件模式的选项（如 `fsGroup`）有冲突，
          因而最终的模式设置可能会有不同。
      sources:
        description: List of VolumeProjection structs.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.VolumeProjection'
        minItems: 1
        type: array
        x-kab-description-zh: VolumeProjection 结构的列表。
        x-kubernetes-list-type: atomic
    required:
      - sources
    type: object
    x-kab-description-zh: 一个投射的卷源。
  io.k8s.api.core.v1.QuobyteVolumeSource:
    description: |-
      A Quobyte mount that lasts the lifetime of a Pod.
      Quobyte volumes do not support ownership management or SELinux relabeling.
    properties:
      group:
        description: Group to map volume access to. Default is no group.
        type: string
        x-kab-description-zh: 访问卷时要映射的用户组。默认没有用户组信息。
      readOnly:
        default: false
        description: Force the Quobyte volume to be mounted with read-only permissions.
        type: boolean
        x-kab-description-zh: 强制使用只读模式挂载 Quobyte 卷。
      registry:
        description: |-
          A single or multiple Quobyte registry services which act as the central registries for volumes,
          specified as a string as `"host:port"` pair (multiple entries are separated with commas).
        minLength: 1
        type: string
        x-kab-description-zh: |-
          一个或者多个 Quobyte 仓库服务，用作存储卷的集中仓库。
          设置值为 `"host:port"` 形式的字符串，多个条目之间用逗号隔开。
      tenant:
        description: |-
          Tenant owning the given Quobyte volume in the backend.
          This is used with dynamically provisioned Quobyte volumes, value is set by the plugin.
        maxLength: 64
        type: string
        x-kab-description-zh: |-
          后台拥有此 Quobyte 数据卷的租户。
          此字段用于动态制备的 Quobyte 数据卷，字段值由插件负责填充。
      user:
        description: User to map volume access to. Defaults to SerivceAccount user.
        type: string
        x-kab-description-zh: 访问卷时要映射的用户。默认使用 SerivceAccount 用户。
      volume:
        description: A string that references the name of an existing Quobyte volume.
        minLength: 1
        type: string
        x-kab-description-zh: 引用现有 Quobyte 存储卷名的一个字符串。
    required:
      - registry
      - volume
    type: object
    x-kab-description-zh: |-
      在 Pod 生命周期内持续有效的 Quobyte 挂载卷。
      Quobyte 卷不支持属主管理或者 SELinux 重新打标签操作。
  io.k8s.api.core.v1.RBDPersistentVolumeSource:
    description: |-
      A Rados Block Device (RBD) mount that lasts the lifetime of a Pod.
      RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        default: ext4
        description: Filesystem type of the volume to mount. The filesystem type must
          be supported by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的卷的文件系统类型。此文件系统类型必须被宿主操作系统支持。
      image:
        description: The rados image name.
        minLength: 1
        type: string
        x-kab-description-zh: RADOS 镜像名称。
      keyring:
        default: /etc/ceph/keyring
        description: The path to key ring for RBDUser.
        type: string
        x-kab-description-zh: 指向 RBD 用户的密钥环的路径。
      monitors:
        description: A collection of Ceph monitors.
        items:
          type: string
        type: array
        x-kab-description-zh: 一个 Ceph 监视器（Monitor）集合。
        x-kubernetes-list-type: atomic
      pool:
        default: rbd
        description: The rados pool name.
        type: string
        x-kab-description-zh: RADOS 池的名称。
      readOnly:
        default: false
        description: Force the disk to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制磁盘以只读模式挂载。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: The name of the authentication Secret for RBDUser. If provided
          overrides `keyring`.
        x-kab-description-zh: RBD 用户所使用的身份认证 Secret 的名称。如果设置了此字段，会覆盖 `keyring` 设置。
      user:
        default: admin
        description: The rados user name.
        type: string
        x-kab-description-zh: RADOS 用户名。
    required:
      - image
      - monitors
    type: object
    x-kab-description-zh: |-
      在 Pod 整个生命周期内可用的一个 Rados Block Device (RBD) 挂载卷。
      RBD 卷支持属主管理和 SELinux 重新打标签操作。
  io.k8s.api.core.v1.RBDVolumeSource:
    description: |-
      Represents a Rados Block Device (RBD) mount that lasts the lifetime of a Pod.
      RBD volumes support ownership management and SELinux relabeling.
    properties:
      fsType:
        default: ext4
        description: |-
          Filesystem type of the volume that you want to mount.
          The filesystem type must be supported by the host operating system.
          Implicitly inferred to be `"ext4"` if unspecified.
        type: string
        x-kab-description-zh: |-
          期望挂载的卷的文件系统类型。此文件系统类型必须被宿主操作系统支持。
          如果未设置，默认假定为 `"ext4"`。
      image:
        description: The rados image name.
        minLength: 1
        type: string
        x-kab-description-zh: RADOS 镜像名称。
      keyring:
        default: /etc/ceph/keyring
        description: Keyring is the path to key ring for RBDUser.
        type: string
        x-kab-description-zh: 指向 RBD 用户的密钥环的路径。
      monitors:
        description: A collection of Ceph monitors.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: 一个 Ceph 监视器（Monitor）集合。
        x-kubernetes-list-type: atomic
      pool:
        default: rbd
        description: The rados pool name.
        type: string
        x-kab-description-zh: RADOS 池的名称。
      readOnly:
        default: false
        description: Force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: 强制 `volumeMounts` 中的 `readOnly` 设置。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: Name of the authentication Secret for RBDUser. If provided overrides
          `keyring`.
        x-kab-description-zh: RBD 用户所使用的身份认证 Secret 的名称。如果设置了此字段，会覆盖 `keyring` 设置。
      user:
        default: admin
        description: The rados user name.
        type: string
        x-kab-description-zh: RADOS 用户名。
    required:
      - image
      - monitors
    type: object
    x-kab-description-zh: |-
      在 Pod 整个生命周期内可用的一个 Rados Block Device (RBD) 挂载卷。
      RBD 卷支持属主管理和 SELinux 重新打标签操作。
  io.k8s.api.core.v1.ReplicationController.CREATE:
    description: The configuration of a ReplicationController.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ReplicationController
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. If the `labels` of a ReplicationController are empty,
          they are defaulted to that of the Pod(s) the ReplicationController manages.
          The `name`, if specified, must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          标准的对象元数据。如果 ReplicationController 的 `labels` 为空，默认会被设置为
          ReplicationController 所管理的 Pod 上的标签。
          对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.CREATE'
        description: The specification of the desired behavior of the ReplicationController.
        x-kab-description-zh: ReplicationController 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ReplicationController 的配置。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ReplicationController
        version: v1
  io.k8s.api.core.v1.ReplicationController.GET:
    description: The configuration of a ReplicationController.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ReplicationController
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.GET'
        description: The specification of the desired behavior of the ReplicationController.
        x-kab-description-zh: ReplicationController 预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerStatus'
        description: |-
          The most recently observed status of the ReplicationController.
          This data may be out of date by some window of time.
        x-kab-description-zh: ReplicationController 的最新观测状态。此数据可能与真实情况之间存在一定的滞后。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: ReplicationController 的配置。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ReplicationController
        version: v1
  io.k8s.api.core.v1.ReplicationController.UPDATE:
    description: The configuration of a ReplicationController.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ReplicationController
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. If the `labels` of a ReplicationController are empty,
          they are defaulted to that of the Pod(s) the ReplicationController manages.
          The `name`, if specified, must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          标准的对象元数据。如果 ReplicationController 的 `labels` 为空，默认会被设置为
          ReplicationController 所管理的 Pod 上的标签。
          对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerSpec.UPDATE'
        description: The specification of the desired behavior of the ReplicationController.
        x-kab-description-zh: ReplicationController 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ReplicationController 的配置。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ReplicationController
        version: v1
  io.k8s.api.core.v1.ReplicationControllerCondition:
    description: The state of the ReplicationController at a certain point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间戳。
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of ReplicationController condition.
        enum:
          - ReplicaFailure
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: ReplicationController 在特定时间点的状态。
  io.k8s.api.core.v1.ReplicationControllerList:
    description: A list of ReplicationController objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation..
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ReplicationController objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
        type: array
        x-kab-description-zh: 包含 ReplicationController 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ReplicationControllerList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ReplicationController 对象的列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ReplicationControllerList
        version: v1
  io.k8s.api.core.v1.ReplicationControllerSpec.CREATE:
    description: The specification of a ReplicationController.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without any of
          its Container crashing for it to be considered available.
          The default value 0 meands a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 必须在所给的秒数内保持就绪态，没有容器崩溃，才会被视为可用。
          默认值 0 意为 Pod 就绪之后就被视为可用。
      replicas:
        default: 1
        description: The number of desired replicas.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 期望的副本个数。
      selector:
        additionalProperties:
          type: string
        description: |-
          Label keys and values for Pods that must match in order to be controlled by this
          ReplicationController. If `selector` is empty, it defaults to the labels present on the `template`.
          If `selector` is not empty, it must match the `labels` defined on the `template`.
        type: object
        x-kab-description-zh: |-
          Pod 必须具有所给的标签键值才会被此 ReplicationController 控制。
          如果 `selector` 为空，则默认为在 `template` 中给出的标签。
          如果 `selector` 非空，则必须与 `template` 中定义的 `labels` 匹配。
        x-kubernetes-map-type: atomic
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.CREATE'
        description: |-
          The object that describes the Pod to create if insufficient replicas are detected.
          The only allowed `template.spec.restartPolicy` value is "Always".
        x-kab-description-zh: |-
          此对象描述检测到副本个数不足时要创建的 Pod。
          其中 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
    required:
      - template
    type: object
    x-kab-description-zh: ReplicationController 的规约。
  io.k8s.api.core.v1.ReplicationControllerSpec.GET:
    description: The specification of a ReplicationController.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without any of
          its Container crashing for it to be considered available.
          The default value 0 meands a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 必须在所给的秒数内保持就绪态，没有容器崩溃，才会被视为可用。
          默认值 0 意为 Pod 就绪之后就被视为可用。
      replicas:
        default: 1
        description: The number of desired replicas.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 期望的副本个数。
      selector:
        additionalProperties:
          type: string
        description: |-
          Label keys and values for Pods that must match in order to be controlled by this
          ReplicationController. If `selector` is empty, it defaults to the labels present on the `template`.
          If `selector` is not empty, it must match the `labels` defined on the `template`.
        type: object
        x-kab-description-zh: |-
          Pod 必须具有所给的标签键值才会被此 ReplicationController 控制。
          如果 `selector` 为空，则默认为在 `template` 中给出的标签。
          如果 `selector` 非空，则必须与 `template` 中定义的 `labels` 匹配。
        x-kubernetes-map-type: atomic
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.GET'
        description: The object that describes the Pod to create if insufficient replicas
          are detected.
        x-kab-description-zh: 此对象描述检测到副本个数不足时要创建的 Pod。
    required:
      - template
    type: object
    x-kab-description-zh: ReplicationController 的规约。
  io.k8s.api.core.v1.ReplicationControllerSpec.UPDATE:
    description: The specification of a ReplicationController.
    properties:
      minReadySeconds:
        default: 0
        description: |-
          Minimum number of seconds for which a newly created Pod should be ready without any of
          its Container crashing for it to be considered available.
          The default value 0 meands a Pod will be considered available as soon as it is ready.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          新创建的 Pod 必须在所给的秒数内保持就绪态，没有容器崩溃，才会被视为可用。
          默认值 0 意为 Pod 就绪之后就被视为可用。
      replicas:
        default: 1
        description: The number of desired replicas.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 期望的副本个数。
      selector:
        additionalProperties:
          type: string
        description: |-
          Label keys and values for Pods that must match in order to be controlled by this
          ReplicationController. If `selector` is empty, it defaults to the labels present on the `template`.
          If `selector` is not empty, it must match the `labels` defined on the `template`.
        type: object
        x-kab-description-zh: |-
          Pod 必须具有所给的标签键值才会被此 ReplicationController 控制。
          如果 `selector` 为空，则默认为在 `template` 中给出的标签。
          如果 `selector` 非空，则必须与 `template` 中定义的 `labels` 匹配。
        x-kubernetes-map-type: atomic
      template:
        $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateSpec.UPDATE'
        description: |-
          The object that describes the Pod to create if insufficient replicas are detected.
          The only allowed `template.spec.restartPolicy` value is "Always".
        x-kab-description-zh: |-
          此对象描述检测到副本个数不足时要创建的 Pod。
          其中 `template.spec.restartPolicy` 的取值只能是 `"Always"`。
    required:
      - template
    type: object
    x-kab-description-zh: ReplicationController 的规约。
  io.k8s.api.core.v1.ReplicationControllerStatus:
    description: The current status of the ReplicationController.
    properties:
      availableReplicas:
        description: |-
          The number of available replicas (ready for at least `minReadySeconds`)
          for this ReplicationController.
        format: int32
        type: integer
        x-kab-description-zh: 当前可用的副本个数（就绪时长超过 `minReadySeconds`）。
      conditions:
        description: The latest observations of a ReplicationController's current
          state.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerCondition'
        type: array
        x-kab-description-zh: 对 ReplicationController 的当前状态的最新观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      fullyLabeledReplicas:
        description: |-
          The number of Pods that have labels matching the `labels` of the Pod `template` of
          the ReplicationController.
        format: int32
        type: integer
        x-kab-description-zh: 标签与此 ReplicationController 的 Pod `template` 中的 `labels`
          匹配的 Pod 个数。
      observedGeneration:
        description: The generation of the most recently observed ReplicationController.
        format: int64
        type: integer
        x-kab-description-zh: 最新观测到的 ReplicationController 的代数。
      readyReplicas:
        description: The number of ready replicas for this ReplicationController.
        format: int32
        type: integer
        x-kab-description-zh: 此 ReplicationController 的就绪的副本个数。
      replicas:
        description: The most recently observed number of replicas.
        format: int32
        type: integer
        x-kab-description-zh: 最近观测到的副本个数。
    required:
      - replicas
    type: object
    x-kab-description-zh: ReplicationController 的当前状态。
  io.k8s.api.core.v1.ResourceClaim:
    description: ResourceClaim references one entry in `pod.spec.resourceClaims`.
    properties:
      name:
        description: |-
          Name must match the name of one entry in `spec.resourceClaims` of a Pod where this field is used.
          It makes that resource available inside a container.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此名字必须与当前 Pod 中 `spec.resourceClaims` 内的一项的名字匹配。
          此资源可在容器内使用。
    required:
      - name
    type: object
    x-kab-description-zh: ResourceClaim 引用 `pod.spec.resourceClaims` 中的一项。
  io.k8s.api.core.v1.ResourceFieldSelector:
    description: ResourceFieldSelector represents container resources (`cpu`, `memory`)
      and their output format.
    properties:
      containerName:
        description: |-
          The container name. This is required when injecting the data as volume into Pods,
          and it is optional when injecting the data as environment variables into Pods.
        type: string
        x-kab-description-zh: |-
          容器名称。当将数据放入存储卷内并注入到 Pod 中时需要此信息。
          当使用环境变量将数据注入到 Pod 中时，此字段为可选的。
      divisor:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        default: '1'
        description: |-
          Specifies the output format of the exposed resources.
          For `"cpu"`, it can be `"1m"` or `"1"`; for `"memory"`, `"ephemeral-storage"` or hugepage
          resources (i.e. prefixed with `"requests.hugepages-"` or `"limits.hugepages-"`),
          it can be one of `"1"`, `"1k"`, `"1M"`, `"1G"`, `"1T"`, `"1P"`, `"1E"`, `"1Ki"`,
          `"1Mi"`, `"1Gi"`, `"1Ti"`, `"1Pi"`, `"1Ei"`.
        x-kab-description-zh: |-
          设置所公开的资源的格式。
          对于 `"cpu"`，可以是 `"1m"` 或 `"1"`；对于 `"memory"`、`"ephemeral-storage"` 或者大页面资源
          （即带有前缀 `"requests.hugepages-"` 或 `"limits.hugepages-"` 的资源），
          可以是 `"1"`、`"1k"`、`"1M"`、`"1G"`、`"1T"`、`"1P"`、`"1E"`、`"1Ki"`、
          `"1Mi"`、`"1Gi"`、`"1Ti"`、`"1Pi"`、`"1Ei"` 之一。
      resource:
        description: |-
          Resource to select. It can be `"limits.cpu"`, `"requests.cpu"`, `"limits.memory"`,
          `"requests.memory"`, `"limits.ephemeral-storage"`, `"requests.ephemeral-storage"`.
          If the feature gate `DownwardAPIHugePages` is enabled, the resource can be prefixed
          by `"requests.hugepages-"` or `"limits.hugepages-"`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要选择的资源。可以是 `"limits.cpu"`、`"requests.cpu"`、`"limits.memory"`、
          `"requests.memory"`、`"limits.ephemeral-storage"`、`"requests.ephemeral-storage"` 之一。
          如果特性门控 `DownwardAPIHugePages` 被启用，则资源可以带有
          `"requests.hugepages-"` 或`"limits.hugepages-"` 前缀。
    required:
      - resource
    type: object
    x-kab-description-zh: ResourceFieldSelector 表示的是容器资源（`cpu`、`memory`）及其输出格式。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.ResourceQuota.CREATE:
    description: ResourceQuota sets aggregate quota restrictions enforced per namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceQuota
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec'
        description: Spec defines the desired quota.
        x-kab-description-zh: 预期的配额设置。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceQuota 设置在整个名字空间内的配额限制。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ResourceQuota
        version: v1
  io.k8s.api.core.v1.ResourceQuota.GET:
    description: ResourceQuota sets aggregate quota restrictions enforced per namespace
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceQuota
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec'
        description: Spec defines the desired quota.
        x-kab-description-zh: 预期的配额设置。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuotaStatus'
        description: The actual enforced quota and its current usage.
        x-kab-description-zh: 实际应用的配额及其用量。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: ResourceQuota 设置在整个名字空间内的配额限制。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ResourceQuota
        version: v1
  io.k8s.api.core.v1.ResourceQuota.UPDATE:
    description: ResourceQuota sets aggregate quota restrictions enforced per namespace
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceQuota
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuotaSpec'
        description: Spec defines the desired quota.
        x-kab-description-zh: 预期的配额设置。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceQuota 设置在整个名字空间内的配额限制。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ResourceQuota
        version: v1
  io.k8s.api.core.v1.ResourceQuotaList:
    description: A list of ResourceQuota objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ResourceQuota objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
        type: array
        x-kab-description-zh: 包含 ResourceQuota 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceQuotaList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ResourceQuota 对象的列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ResourceQuotaList
        version: v1
  io.k8s.api.core.v1.ResourceQuotaSpec:
    description: The desired hard limits to enforce as quota.
    properties:
      hard:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The set of desired hard limits for each named resource.
          The resource name must be a standard quota resources or fully qualified name.
          All quantity values must be non-negative.
          For integer resources, the value cannot contain milli-value.
          The standard quota resources are `"cpu"`, `"memory"`, `"ephemeral-storage"`,
          `"requests.cpu"`, `"requests.memory"`, `"requests.storage"`, `"requests.ephemeral-storage"`,
          `"limits.cpu"`, `"limits.memory"`, `"limits.ephemeral-storage"`, `"pods"`, `"resourcequotas"`,
          `"services"`, `"replicationcontrollers"`, `"secrets"`, `"persistentvolumeclaims"`,
          `"configmaps"`, `"services.nodeports"`, `"services.loadbalancers"`.
        type: object
        x-kab-description-zh: |-
          所列举的各项资源的硬性限制。资源名称必须时标准的配额资源或者全限定名称。
          所有配额值都必须是非负数。对于整数资源，所给的数值要用整数。
          标准的配额资源包括 `"cpu"`、`"memory"`、`"ephemeral-storage"`、`"requests.cpu"`、
          `"requests.memory"`、`"requests.storage"`、`"requests.ephemeral-storage"`、
          `"limits.cpu"`、`"limits.memory"`、`"limits.ephemeral-storage"`、`"pods"`、
          `"resourcequotas"`、`"services"`、`"replicationcontrollers"`、`"secrets"`、
          `"persistentvolumeclaims"`、`"configmaps"`、`"services.nodeports"`、
          `"services.loadbalancers"`。
      scopeSelector:
        $ref: '#/definitions/io.k8s.api.core.v1.ScopeSelector'
        description: |-
          A collection of filters like `scopes` for matching objects tracked by a quota but expressed
          using scope selectors operator in combination with possible values.
          For a resource to match, both `scopes` AND `scopeSelector` (if specified) must match.
        x-kab-description-zh: |-
          一组类似 `scopes` 这样的过滤器，用来匹配要被配额跟踪的对象。
          此字段用作用域选择算符配合一些可能的取值来表达。
          如果某资源要与此配额匹配，就需要同时匹配 `scopes` 和 `scopeSelector`（如果设置了）。
      scopes:
        description: |-
          A collection of filters that for matching objects tracked by a quota.
          An empty list matches all objects. For a resource to match, both `scopes` AND `scopeSelector`
          (if specified) must match. For standard resources, when `scopes` contain `"Terminating"`,
          `"NotTerminating"`, `"NotBestEffort"` or `"PriorityClass"`, the resource in `hard` can be one of
          `"cpu"`, `"memory"`, `"limits.cpu"`, `"limits.memory"`, `"requests.cpu"`, `"requests.memory"`
          or `"pods"`.
          When `scopes` contain `"BestEffort"`, the resource name in `hard` can only be `"pods"`.
          `"Terminating"` conflicts with `"NonTerminating"` and `"BestEffort"` conflicts with
          `"NotBestEffort"`.
          This field is immutable so cannot be updated.
        items:
          enum:
            - BestEffort
            - NotBestEffort
            - NotTerminating
            - PriorityClass
            - Terminating
          type: string
        type: array
        x-kab-description-zh: |-
          用来匹配被配额跟踪的对象的一组过滤条件。如果此列表为空，可以匹配所有对象。
          如果某资源要与此配额匹配，就需要同时匹配 `scopes` 和 `scopeSelector`（如果设置了）。

          对于标准资源，当 `scopes` 中包含 `"Terminating"`、`"NotTerminating"`、`"NotBestEffort"` 或
          `"PriorityClass"`，通过 `hard` 可以设置的资源包括 `"cpu"`、`"memory"`、`"limits.cpu"`、
          `"limits.memory"`、`"requests.cpu"`、`"requests.memory"` 或者 `"pods"`。
          当 `scopes` 中包含 `"BestEffort"` 时，`hard` 中设置的资源只能是 `"pods"`。

          `"Terminating"` 与 `"NonTerminating"` 冲突，`"BestEffort"` 和 `"NotBestEffort"`
          也不能同时出现。

          此字段时不可变更的。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 期望作为配额来实施的硬性限制。
  io.k8s.api.core.v1.ResourceQuotaStatus:
    description: The enforced hard limits and observed use.
    properties:
      hard:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The set of desired hard limits for each named resource.
          The resource name must be a standard quota resources or fully qualified name.
          All quantity values must be non-negative.
          For integer resources, the value cannot contain milli-value.
          The standard quota resources are `"cpu"`, `"memory"`, `"ephemeral-storage"`, `"requests.cpu"`,
          `"requests.memory"`, `"requests.storage"`, `"requests.ephemeral-storage"`, `"limits.cpu"`,
          `"limits.memory"`, `"limits.ephemeral-storage"`, `"pods"`, `"resourcequotas"`,
          `"services"`, `"replicationcontrollers"`, `"secrets"`, `"persistentvolumeclaims"`,
          `"configmaps"`, `"services.nodeports"`, `"services.loadbalancers"`.
        type: object
        x-kab-description-zh: |-
          所列的每种资源的预期硬性限制。资源名称必须是标准的配额资源或者全限定名称。
          所有量纲值都必须是非负数。对于整数值，不能使用 `"m"` 形式。
          标准的配额资源包括 `"cpu"`、`"memory"`、`"ephemeral-storage"`、`"requests.cpu"`、
          `"requests.memory"`、`"requests.storage"`、`"requests.ephemeral-storage"`、`"limits.cpu"`、
          `"limits.memory"`、`"limits.ephemeral-storage"`、`"pods"`、`"resourcequotas"`、
          `"services"`、`"replicationcontrollers"`、`"secrets"`、`"persistentvolumeclaims"`、
          `"configmaps"`、`"services.nodeports"`、`"services.loadbalancers"`。
      used:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The current observed total usage of the resource in the namespace.
          The resource name must be a standard quota resources or fully qualified name.
          All quantity values must be non-negative. For integer resources, the value cannot contain
          milli-value. The standard quota resources are `"cpu"`, `"memory"`, `"ephemeral-storage"`,
          `"requests.cpu"`, `"requests.memory"`, `"requests.storage"`, `"requests.ephemeral-storage"`,
          `"limits.cpu"`, `"limits.memory"`, `"limits.ephemeral-storage"`, `"pods"`, `"resourcequotas"`,
          `"services"`, `"replicationcontrollers"`, `"secrets"`, `"persistentvolumeclaims"`,
          `"configmaps"`, `"services.nodeports"`, `"services.loadbalancers"`.
        type: object
        x-kab-description-zh: |-
          名字空间中各类资源当前观测到的总的用量。资源名称必须是标准的配额资源或者全限定名称。
          所有量纲值都必须是非负数。对于整数值，不能使用 `"m"` 形式。
          标准的配额资源包括 `"cpu"`、`"memory"`、`"ephemeral-storage"`、`"requests.cpu"`、
          `"requests.memory"`、`"requests.storage"`、`"requests.ephemeral-storage"`、`"limits.cpu"`、
          `"limits.memory"`、`"limits.ephemeral-storage"`、`"pods"`、`"resourcequotas"`、
          `"services"`、`"replicationcontrollers"`、`"secrets"`、`"persistentvolumeclaims"`、
          `"configmaps"`、`"services.nodeports"`、`"services.loadbalancers"`。
    required:
      - hard
      - used
    type: object
    x-kab-description-zh: 实际应用的硬性限制及观测到的用量。
  io.k8s.api.core.v1.ResourceRequirements:
    description: |-
      The resource requirements.
      Resources can be `"cpu"`, `"memory"`, `"ephemeral-storage"` or prefixed with `"hugepages-"`.
      Resource names prefixed with `"kubernetes.io/"` are valid but reserved by Kubernetes.
      Extended resources can be specified if the name follows the standard:
      not prefixed with `"requests."`; can form quota if prefixed with `"requests."`.
      When hugepages resource is specified in `requests` or `limits`, CPU or memory resource
      must be specified in `limits` or `requests`.
      If `requests` is omitted for a container, it defaults to `limits` if that is explicitly
      specified, otherwise to an implementation-defined value.
      For native resources other than huge pages, overcommit is allowed, the `requests` value
      must be lower or equal to that of the `limits`.
      For other resources, overcommit is disallowed, their `limits` must be set and
      the `requests` must equal to the `limits`.
    properties:
      claims:
        description: |-
          The names of resources, defined in `spec.resourceClaims`, that are used by
          this container.
          This is an Alpha field and requires enabling the `DynamicResourceAllocation`
          feature gate. This field is immutable. It can only be set for containers.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ResourceClaim'
        type: array
        x-kab-description-zh: |-
          在 `spec.resourceClaims` 中定义的资源的名称，当前容器要使用该资源。
          此字段处于 Alpha 阶段，需要启用`DynamicResourceAllocation` 特性门控。
          此字段是不可变更的。此字段只能在容器层面设置。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
      limits:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The maximum amount of compute resources allowed.
          The values in the map must be non-negative quantity values.
          For extended resources, the value must be a full integer.
        type: object
        x-kab-description-zh: |-
          可以使用的计算资源的上限。映射中的资源量必须是非负数量值。
          对于扩展资源，资源量必须是整数值。
      requests:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The minimum amount of compute resources required.
          The values in the map must be non-negative quantity values.
          For extended resources, the value must be a full integer.
          The `requests` value cannot exceed that of `limits`.
        type: object
        x-kab-description-zh: |-
          所需要的计算资源的下限。映射中的资源量必须是非负数量值。
          对于扩展资源，资源量必须是整数值。`requests` 值不可以大于 `limits` 值。
    type: object
    x-kab-description-zh: |-
      资源需求设置。资源可以是`"cpu"`、`"memory"`、`"ephemeral-storage"` 或者带前缀的 `"hugepages-"`。
      带前缀 `"kubernetes.io/"` 的资源名称是合法的，但是是 Kubernetes 保留的。
      如果扩展资源名称符合下面的要求，也可以指定：

      - 没有前缀`"requests."`；
      - 带上前缀 `"requests."` 之后可以构成配额。

      如果在 `requests` 或 `limits` 中指定了大页面资源，则 `limits` 或 `requests` 中必须指定
      CPU 或者内存资源
      容器未设置 `requests` 时，如果容器设置了 `limits`，则其 `requests` 会被自动设置为
      `limits` 值，否则 `requests` 的设置取决于具体实现。
      对于大页面之外的原生资源，过量分配是被允许的，`requests` 值必须小于或等于 `limits` 值。
      对于其他资源，过量分配是被禁止的，必须为其设置 `limits` 并且 `requests` 值必须等于
      `limits` 值。
  io.k8s.api.core.v1.SELinuxOptions:
    description: The SELinux labels to be applied to a container.
    properties:
      level:
        description: The SELinux level label to be applies to the container.
        type: string
        x-kab-description-zh: 要应用到容器上的 SELinux level 标签。
      role:
        description: A SELinux role label to be applied to the container.
        type: string
        x-kab-description-zh: 要应用到容器上的 SELinux role 标签。
      type:
        description: A SELinux type label to be applied to the container.
        type: string
        x-kab-description-zh: 要应用到容器上的 SELinux type 标签。
      user:
        description: A SELinux user label to be applied to the container.
        type: string
        x-kab-description-zh: 要应用到容器上的 SELinux user 标签。
    type: object
    x-kab-description-zh: 要应用到容器上的 SELinux 标签。
  io.k8s.api.core.v1.ScaleIOPersistentVolumeSource:
    description: A persistent ScaleIO volume.
    properties:
      fsType:
        default: xfs
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型之一。
      gateway:
        description: The host address of the ScaleIO API gateway.
        minLength: 1
        type: string
        x-kab-description-zh: ScaleIO API 网关的主机地址。
      protectionDomain:
        description: The name of the ScaleIO protection domain for the configured
          storage.
        type: string
        x-kab-description-zh: 所配置的存储的 ScaleIO 保护域名称。
      readOnly:
        default: false
        description: Force the volume to be mounted in read-only mode.
        type: boolean
        x-kab-description-zh: 强制以只读模式挂载存储卷。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretReference'
        description: |-
          Reference to the Secret for ScaleIO user and other sensitive information.
          If this is not provided, Login operation will fail.
        x-kab-description-zh: |-
          对某 Secret 对象的引用，该 Secret 中包含 ScaleIO 用户及一些其他敏感信息。
          如果不提供此信息，登录操作会失败。
      sslEnabled:
        default: false
        description: Flag to enable/disable SSL communication with `gateway`.
        type: boolean
        x-kab-description-zh: 用来启用或禁止与 `gateway` 之间 SSL 通信的标志。
      storageMode:
        default: ThinProvisioned
        description: Indicates whether the storage for a volume should be `"ThickProvisioned"`
          or `"ThinProvisioned"`.
        enum:
          - ThickProvisioned
          - ThinProvisioned
        type: string
        x-kab-description-zh: 表明卷存储的制备方式。可以选择 `"ThickProvisioned"` 和 `"ThinProvisioned"`
          之一。
      storagePool:
        description: The ScaleIO storage pool associated with the protection domain.
        type: string
        x-kab-description-zh: 与保护域相关联的 ScaleIO 存储池。
      system:
        description: The name of the storage system as configured in ScaleIO.
        minLength: 1
        type: string
        x-kab-description-zh: ScaleIO 中配置的存储系统的名称。
      volumeName:
        description: The name of an existing volume in the ScaleIO system that is
          associated with this volume source.
        minLength: 1
        type: string
        x-kab-description-zh: ScaleIO 系统中某个现有卷的名称，该卷与此卷源相关联。
    required:
      - gateway
      - secretRef
      - system
      - volumeName
    type: object
    x-kab-description-zh: 一个 ScaleIO 持久卷资源。
  io.k8s.api.core.v1.ScaleIOVolumeSource:
    description: ScaleIOVolumeSource represents a ScaleIO volume.
    properties:
      fsType:
        default: xfs
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型之一。
      gateway:
        description: The host address of the ScaleIO API gateway.
        minLength: 1
        type: string
        x-kab-description-zh: ScaleIO API 网关的主机地址。
      protectionDomain:
        description: The name of the ScaleIO Protection Domain for the configured
          storage.
        type: string
        x-kab-description-zh: 所配置的存储的 ScaleIO 保护域名称。
      readOnly:
        default: false
        description: |-
          Defaults to `false` (read/write).
          `readOnly` here will force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: |-
          默认值为 `false` （可读可写）。
          这里设置的 `readOnly` 会强制 `volumeMounts` 中 `readOnly` 也为 `true`。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: |-
          SecretRef references to the Secret for ScaleIO user and other sensitive information.
          If this is not provided, login operation will fail.
        x-kab-description-zh: |-
          对某 Secret 对象的引用，该 Secret 中包含 ScaleIO 用户及一些其他敏感信息。
          如果不提供此信息，登录操作会失败。
      sslEnabled:
        default: false
        description: Flag to enable/disable SSL communication with `gateway`
        type: boolean
        x-kab-description-zh: 用来启用或禁止与 `gateway` 之间 SSL 通信的标志。
      storageMode:
        default: ThinProvisioned
        description: Indicates whether the storage for a volume should be thick provisioned
          or thin provisioned.
        enum:
          - ThickProvisioned
          - ThinProvisioned
        type: string
        x-kab-description-zh: 表明卷存储的制备方式。可以选择 `"ThickProvisioned"` 和 `"ThinProvisioned"`
          之一。
      storagePool:
        description: The ScaleIO Storage Pool associated with the protection domain.
        type: string
        x-kab-description-zh: 与保护域相关联的 ScaleIO 存储池。
      system:
        description: The name of the storage system as configured in ScaleIO.
        minLength: 1
        type: string
        x-kab-description-zh: ScaleIO 中配置的存储系统的名称。
      volumeName:
        description: |-
          The name of a volume already created in the ScaleIO system that is associated with this
          volume source.
        type: string
        x-kab-description-zh: ScaleIO 系统中某个现有卷的名称，该卷与此卷源相关联。
    required:
      - gateway
      - secretRef
      - system
    type: object
    x-kab-description-zh: 一个 ScaleIO 卷。
  io.k8s.api.core.v1.ScopeSelector:
    description: |-
      The AND of all the selectors represented by the `matchExpressions` selectors.
      This is currently only used in ResourceQuota.
    properties:
      matchExpressions:
        description: |-
          A list of scope selector requirements by `scope` of the resources.
          Note that the `"BestEffort"` and `"NotBestEffort"` scopes conflicts with each other, and
          the `"Terminating"` and the `"NotTerminating"` scopes conflict with each other.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ScopedResourceSelectorRequirement'
        type: array
        x-kab-description-zh: |-
          根据资源的 `scope` 设定的作用域选择条件列表。
          注意 `"BestEffort"` 和`"NotBestEffort"` 两个作用域彼此互斥，
          `"Terminating"` 和 `"NotTerminating"` 两个作用域也彼此互斥。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      此选择算符将各个 `matchExpressions` 选择算符的条件进行逻辑 AND 操作。
      此结构目前仅用于 ResourceQuota 资源。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.ScopedResourceSelectorRequirement:
    description: |-
      A selector that contains `values`, a `scopeName`, and an `operator` that
      relates the `scopeName` and `values`.
    properties:
      operator:
        description: |-
          Represents a scope's relationship to a set of values. Valid operators are
          `"In"`, `"NotIn"`, `"Exists"`, `"DoesNotExist"`.
          When scope is one of `"Terminating"`, `"NotTerminating"`, `"BestEffort"`, `"NotBestEffort"`,
          the operator can only be `"Exists"`.
        enum:
          - DoesNotExist
          - Exists
          - In
          - NotIn
        type: string
        x-kab-description-zh: |-
          此字段给出范围（scope）与一组值之间的关系。合法的 `operator` 值有：
          `"In"`、`"NotIn"`、`"Exists"`、`"DoesNotExist"`。
          当范围是 `"Terminating"`、`"NotTerminating"`、`"BestEffort"`、`"NotBestEffort"` 之一时，
          `perator` 只能是 `"Exists"`。
      scopeName:
        description: |-
          The name of the scope that the selector applies to. Possible enum values:
          - `"BestEffort"` matches all Pod objects that have best effort quality of service.
          - `"CrossNamespacePodAffinity"` matches all Pod objects that have cross-namespace Pod
            (anti)affinity mentioned. This is a Beta feature enabled by the `PodAffinityNamespaceSelector`
            feature gate.
          - `"NotBestEffort"` matches all Pod objects that do not have best effort quality of service.
          - `"NotTerminating"` matches all Pod objects where `spec.activeDeadlineSeconds` is null.
          - `"PriorityClass"` matches all Pod objects that have priority class mentioned.
          - `"Terminating"` matches all Pod objects where `spec.activeDeadlineSeconds >=0`.
        enum:
          - BestEffort
          - CrossNamespacePodAffinity
          - NotBestEffort
          - NotTerminating
          - PriorityClass
          - Terminating
        minLength: 1
        type: string
        x-kab-description-zh: |-
          选择算符所使用的范围的名称。可选的取值包括：

          - `"BestEffort"`：匹配所有服务质量类为 `BestEffort` 的 Pod 对象。
          - `"CrossNamespacePodAffinity"`：匹配所有提及跨名字空间（反）亲和性的 Pod 对象。
            此范围值处于 Beta 阶段，需要启用`PodAffinityNamespaceSelector` 特性门控。
          - `"NotBestEffort"`：匹配服务质量类不是 `BestEffort` 的所有 Pod 对象。
          - `"NotTerminating"`：匹配所有 `spec.activeDeadlineSeconds` 为空的 Pod 对象。
          - `"PriorityClass"`：匹配所有与某优先级类关联的 Pod 对象。
          - `"Terminating"`：匹配所有 `spec.activeDeadlineSeconds >=0` 的 Pod 对象。
      values:
        description: |-
          An array of string values.
          If the operator is `"In"` or `"NotIn"`, the values array must be non-empty.
          If the operator is `"Exists"` or `"DoesNotExist"`, the values array must be empty.
          This array is replaced during a strategic merge patch.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          取值为一个字符串列表。
          如果 `operator` 是 `"In"` 或 `"NotIn"` 之一，则此数组不能为空。
          如果 `operator` 是 `"Exists"` 或 `"DoesNotExist"`，则此数组必须为空。
          在执行策略性合并补丁操作时，此字段的数组会被替换。
        x-kubernetes-list-type: atomic
    required:
      - operator
      - scopeName
    type: object
    x-kab-description-zh: 一个包含 `values`、`scopeName` 以及将二者关联起来的 `operator` 的选择算符。
  io.k8s.api.core.v1.SeccompProfile:
    description: The SeccompProfile defines the seccomp profile settings for a container
      or a Pod. Only one profile source may be set.
    properties:
      localhostProfile:
        description: |-
          This indicates a profile defined in a file on the node should be used.
          The profile must be preconfigured on the node to work.
          Must be a descending path, relative to the kubelet's configured seccomp profile location.
          Must be set if `type` is `"Localhost"`. Must NOT be set for any other `type`.
        type: string
        x-kab-description-zh: |-
          此字段表明要使用节点上某文件中保存的配置。Seccomp 的配置必须在节点上事先配置好才能使用。
          路径必须是自 kubelet 所配置的 seccomp 配置位置开始单向下降的。
          当 `type` 为 `"Localhost"` 时，必须设置此字段。
          对于其他的 `type` 值，不可设置此字段。
      type:
        description: |-
          The type of seccomp profile to apply. Valid options are:

          - `"Localhost"`: a profile defined in a file on the node should be used.
            The file's location relative to `<kubelet-root-dir>/seccomp`.
          - `"RuntimeDefault"`: the container runtime default profile should be used.
          - `"Unconfined"`: no profile should be applied.
        enum:
          - Localhost
          - RuntimeDefault
          - Unconfined
        type: string
        x-kab-description-zh: |-
          要应用的 Seccomp 配置类型。合法的选项有：

          - `"Localhost"`：要使用节点上某文件中定义的配置。所给的文件位置是相对于
            `<kubelet 根目录>/seccomp` 的。
          - `"RuntimeDefault"`：使用容器运行时所决定的默认配置。
          - `"Unconfined"`：不应用任何配置。
    required:
      - type
    type: object
    x-kab-description-zh: SeccompProfile 定义容器或者 Pod 的 seccomp 配置。 结构中只能配置配置源之一。
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          localhostProfile: LocalhostProfile
  io.k8s.api.core.v1.Secret.CREATE:
    description: |-
      Secret holds secret data of a certain type.
      The total bytes of the values in the `data` or `stringData` field must be less than 1MB.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      data:
        additionalProperties:
          format: byte
          type: string
        description: |-
          The secret data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          The serialized form of the Secret data is a [base64](https://tools.ietf.org/html/rfc4648#section-4)
          encoded string, representing the arbitrary (possibly non-string) data value here.
        type: object
        x-kab-description-zh: |-
          秘密数据字典。其中的每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 构成。
          Secret 数据的序列化形式是一个以 [base64](https://tools.ietf.org/html/rfc4648#section-4)
          格式编码的字符串，代表的是这里保存的任意（可能并不一定是字符串）数据值。
      immutable:
        description: |-
          If set to `true`, ensures that data stored in the Secret cannot be updated
          (only `metadata` can be modified).
          If not set to `true`, the field can be modified at any time. Defaulted to nil.
        type: boolean
        x-kab-description-zh: |-
          此字段设置为 `true` 时能够保证 Secret 中保存的数据不被变更（只可变更 `metadata`）。
          如果此字段未被设置为 `true`，则 Secret 中的字段可以在任何时候变更。
          默认值为 nil。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Secret
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The Secret name must be a valid DNS subdomain value.
          Note that some Secret types may have additional requirements on the `annotations`
          or assumptions on the Secret name.
        x-kab-description-zh: |-
          标准的对象元数据。Secret 的名字必须是一个合法的 DNS 子域名。
          注意某些 Secret 类型可能对 `annotations` 字段有额外的要求，或者对 Secret 名字有额外的规定。
      stringData:
        additionalProperties:
          type: string
        description: |-
          The `stringData` field allows for specifying non-binary Secret data in string form.
          It is provided as a write-only input field for convenience.
          All keys and values are merged into the `data` field on write, overwriting any existing values.
          The `stringData` field is never output when reading from the API.
        type: object
        x-kab-description-zh: |-
          `stringData` 字段允许以字符串的形式输入非二进制的 Secret 数据。
          提供这一只能写的输入字段是为了方便用户使用。
          此字段中的所有键、值都会在保存的时候合并到 `data` 字段中，且覆盖其中已有的值。
          从 API 返回时，对象不会包含 `stringData` 字段。
      type:
        default: Opaque
        description: |-
          Used to facilitate programmatic handling of secret data.
          The `type` field can take one of the following builtin values.
          You can add your own type as well.
          - `"Opaque"` (default): arbitrary user-defined data.
          - `"kubernetes.io/service-account-token"`: a token that identifies a service acccount.
            This type requires that the `"kubernetes.io/service-account.name"` annotation set to
            an existing service account name and the `data.token` field set to the token content.
          - `"kubernetes.io/dockercfg"`: reserved for a serialized `"~/.dockercfg"` file.
            This type requires that the `data` field contains a `.dockercfg` key for the config content.
          - `"kubernetes.io/dockerconfigjson"`: reserved for serialized JSON data that follows the
            same format rules as the `"~/.docker/config.json"` file. This type requires that the
            `data` field contains a `.dockerconfigjson` key for the config data.
          - `"kubernetes.io/basic-auth"`: a builtin type for storing credentials needed for basic
            authentication. This type requires the `data` field contains the `username` and `password`
            key for user name and password (or token) for authentication, respectively.
          - `"kubernetes.io/ssh-auth"`: reserved for data used in SSH authentication.
            This type requires that the `data` field contains a `ssh-privatekey` key as the SSH credential
            to use.
          - `"kubernetes.io/tls"`: reserved to store information about a TLS client or server.
            It is primarily used with TLS termination of the Ingress resource, but may be used
            in other types. This type requires the settings of the `tls.key` and the `tls.crt` keys
            in the `data` field, although the server doesn't actually validate the contents.
          - `"bootstrap.kubernetes.io/token"`: reserved for tokens used during the bootstrap process
            for a node. It stores tokens used to sign well known ConfigMaps.
            This type of a Secret is usually created in the `"kube-system"` namespace and named as
            `"bootstrap-token-<token-id>"`.

          A Secret of bootstrap token type has the following keys specified under `data`:
          - `"token_id"`: A random 6 character string as the token identifier. Required.
          - `"token-secret"`: A random 16 character string as the actual token secret. Required.
          - `"description"`: A human-readable string that describes what the token is used for. Optional.
          - `"expiration"`: An absolute UTC time using RFC3339 specifying when the token should be expired.
            Optional.
          - `"usage-bootstrap-<usage>"`: A boolean flag  indicating additional usage for the bootstrap token.
          - `"auth-extra-groups"`: A comma-separated list of group names that will be authenticated as
            in addition to `"system:bootstrappers"` group.
        enum:
          - bootstrap.kubernetes.io/token
          - kubernetes.io/service-account-token
          - kubernetes.io/dockercfg
          - kubernetes.io/dockerconfigjson
          - kubernetes.io/basic-auth
          - kubernetes.io/ssh-auth
          - kubernetes.io/tls
          - Opaque
        type: string
        x-kab-description-zh: |-
          用于方便对 Secret 中的数据进行编程处理。`type` 字段可以取以下内置的类型值之一。
          用户也可添加自己的类型。

          - `"Opaque"`（默认）：用户定义的任意数据。
          - `"kubernetes.io/service-account-token"`：一个用来标识某服务账号（ServiceAccount）的令牌。
            此类型的 Secret 要求设置 `"kubernetes.io/service-account.name"` 注解为现有 ServiceAccount
            的名字，并且 `.data.token` 字段中保存令牌的内容。
          - `"kubernetes.io/dockercfg"`：预留给序列化的 `"~/.dockercfg"` 文件。
            此类型的 Secret 要求 `data` 中包含 `.dockercfg` 键，其中保存配置数据内容。
          - `"kubernetes.io/dockerconfigjson"`：预留类型值，用来保存序列化的 JSON 数据。数据的格式遵从与
            `"~/.docker/config.json"` 文件相同的规则。此类型的 Secret 对象要求在 `data` 字段中包含
            `.dockerconfigjson` 键，其中保存配置数据。
          - `"kubernetes.io/basic-auth"`：内置的用来保存基本身份认证所需要的凭据数据。此类型的
            Secret 对象的 `data` 字段需要包含 `username` 和 `password` 主键，
            分别对应身份认证所需要的用户名和密码（或令牌）。
          - `"kubernetes.io/ssh-auth"`：预留的用于 SSH 身份认证的类型。此类型的 Secret 对象要求在
            `data` 字段中包含 `ssh-privatekey` 主键，作为要使用的 SSH 凭据。
          - `"kubernetes.io/tls"`：预留的类型，用来保存 TLS 客户端或服务器端的信息。此字段目前主要用于
            Ingress 资源，执行 TLS 终结操作。不过也可以用于其他场景。
            这种类型的 Secret 对象要求在 `data` 中设置 `tls.key` 和 `tls.crt` 主键，
            尽管服务器端并不会对其内容做正确性检查。
          - `"bootstrap.kubernetes.io/token"`：预留给节点的一种类型，用于节点的启动引导过程。
            其中保存的是用来对某个众所周知的 ConfigMap 进行签名的令牌。此类型的 Secret 通常被创建于
            `"kube-system"` 名字空间内，并且命名为 `"bootstrap-token-<令牌 ID>"`。

          启动引导令牌类型的 Secret 要求在 `data` 中存在以下主键：
          - `"token_id"`：一个作为令牌标识符使用的随机字符串，长度为 6 字符。必须存在。
          - `"token-secret"`：一个长度为 16 的随机字符串，用作实际的令牌秘密数据。必须存在。
          - `"description"`：一个用来描述令牌用途的人类刻度字符串。可选。
          - `"expiration"`：一个 RFC-3339 格式的 UTC 时间戳字符串，给出令牌到期时间。可选。
          - `"usage-bootstrap-<usage>"`：一个布尔值标记，给出启动引导令牌的额外用途。可选。
          - `"auth-extra-groups"`：用逗号分隔开的组名列表，请求者被身份认证时，除了属于
            `"system:bootstrappers"` 用户组之外，也属于这里给出的用户组。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      Secret 中保存的是某种类型的机密数据。
      `data` 或 `stringData` 字段中保存的数值的总的大小不可超过 1MB。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Secret
        version: v1
  io.k8s.api.core.v1.Secret.GET:
    description: |-
      Secret holds secret data of a certain type.
      The total bytes of the values in the `data` or `stringData` field must be less than 1MB.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      data:
        additionalProperties:
          format: byte
          type: string
        description: |-
          The secret data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          The serialized form of the Secret data is a [base64](https://tools.ietf.org/html/rfc4648#section-4)
          encoded string, representing the arbitrary (possibly non-string) data value here.
        type: object
        x-kab-description-zh: |-
          秘密数据字典。其中的每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 构成。
          Secret 数据的序列化形式是一个以 [base64](https://tools.ietf.org/html/rfc4648#section-4)
          格式编码的字符串，代表的是这里保存的任意（可能并不一定是字符串）数据值。
      immutable:
        description: |-
          If set to `true`, ensures that data stored in the Secret cannot be updated
          (only `metadata` can be modified).
          If not set to `true`, the field can be modified at any time. Defaulted to nil.
        type: boolean
        x-kab-description-zh: |-
          此字段设置为 `true` 时能够保证 Secret 中保存的数据不被变更（只可变更 `metadata`）。
          如果此字段未被设置为 `true`，则 Secret 中的字段可以在任何时候变更。
          默认值为 nil。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Secret
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      type:
        default: Opaque
        description: |-
          Used to facilitate programmatic handling of secret data.
          The `type` field can take one of the following builtin values.
          You can add your own type as well.
          - `"Opaque"` (default): arbitrary user-defined data.
          - `"kubernetes.io/service-account-token"`: a token that identifies a service acccount.
            This type requires that the `"kubernetes.io/service-account.name"` annotation set to
            an existing service account name and the `data.token` field set to the token content.
          - `"kubernetes.io/dockercfg"`: reserved for a serialized `"~/.dockercfg"` file.
            This type requires that the `data` field contains a `.dockercfg` key for the config content.
          - `"kubernetes.io/dockerconfigjson"`: reserved for serialized JSON data that follows the
            same format rules as the `"~/.docker/config.json"` file. This type requires that the
            `data` field contains a `.dockerconfigjson` key for the config data.
          - `"kubernetes.io/basic-auth"`: a builtin type for storing credentials needed for basic
            authentication. This type requires the `data` field contains the `username` and `password`
            key for user name and password (or token) for authentication, respectively.
          - `"kubernetes.io/ssh-auth"`: reserved for data used in SSH authentication.
            This type requires that the `data` field contains a `ssh-privatekey` key as the SSH credential
            to use.
          - `"kubernetes.io/tls"`: reserved to store information about a TLS client or server.
            It is primarily used with TLS termination of the Ingress resource, but may be used
            in other types. This type requires the settings of the `tls.key` and the `tls.crt` keys
            in the `data` field, although the server doesn't actually validate the contents.
          - `"bootstrap.kubernetes.io/token"`: reserved for tokens used during the bootstrap process
            for a node. It stores tokens used to sign well known ConfigMaps.
            This type of a Secret is usually created in the `"kube-system"` namespace and named as
            `"bootstrap-token-<token-id>"`.

          A Secret of bootstrap token type has the following keys specified under `data`:
          - `"token_id"`: A random 6 character string as the token identifier. Required.
          - `"token-secret"`: A random 16 character string as the actual token secret. Required.
          - `"description"`: A human-readable string that describes what the token is used for. Optional.
          - `"expiration"`: An absolute UTC time using RFC3339 specifying when the token should be expired.
            Optional.
          - `"usage-bootstrap-<usage>"`: A boolean flag  indicating additional usage for the bootstrap token.
          - `"auth-extra-groups"`: A comma-separated list of group names that will be authenticated as
            in addition to `"system:bootstrappers"` group.
        enum:
          - bootstrap.kubernetes.io/token
          - kubernetes.io/service-account-token
          - kubernetes.io/dockercfg
          - kubernetes.io/dockerconfigjson
          - kubernetes.io/basic-auth
          - kubernetes.io/ssh-auth
          - kubernetes.io/tls
          - Opaque
        type: string
        x-kab-description-zh: |-
          用于方便对 Secret 中的数据进行编程处理。`type` 字段可以取以下内置的类型值之一。
          用户也可添加自己的类型。

          - `"Opaque"`（默认）：用户定义的任意数据。
          - `"kubernetes.io/service-account-token"`：一个用来标识某服务账号（ServiceAccount）的令牌。
            此类型的 Secret 要求设置 `"kubernetes.io/service-account.name"` 注解为现有 ServiceAccount
            的名字，并且 `.data.token` 字段中保存令牌的内容。
          - `"kubernetes.io/dockercfg"`：预留给序列化的 `"~/.dockercfg"` 文件。
            此类型的 Secret 要求 `data` 中包含 `.dockercfg` 键，其中保存配置数据内容。
          - `"kubernetes.io/dockerconfigjson"`：预留类型值，用来保存序列化的 JSON 数据。数据的格式遵从与
            `"~/.docker/config.json"` 文件相同的规则。此类型的 Secret 对象要求在 `data` 字段中包含
            `.dockerconfigjson` 键，其中保存配置数据。
          - `"kubernetes.io/basic-auth"`：内置的用来保存基本身份认证所需要的凭据数据。此类型的
            Secret 对象的 `data` 字段需要包含 `username` 和 `password` 主键，
            分别对应身份认证所需要的用户名和密码（或令牌）。
          - `"kubernetes.io/ssh-auth"`：预留的用于 SSH 身份认证的类型。此类型的 Secret 对象要求在
            `data` 字段中包含 `ssh-privatekey` 主键，作为要使用的 SSH 凭据。
          - `"kubernetes.io/tls"`：预留的类型，用来保存 TLS 客户端或服务器端的信息。此字段目前主要用于
            Ingress 资源，执行 TLS 终结操作。不过也可以用于其他场景。
            这种类型的 Secret 对象要求在 `data` 中设置 `tls.key` 和 `tls.crt` 主键，
            尽管服务器端并不会对其内容做正确性检查。
          - `"bootstrap.kubernetes.io/token"`：预留给节点的一种类型，用于节点的启动引导过程。
            其中保存的是用来对某个众所周知的 ConfigMap 进行签名的令牌。此类型的 Secret 通常被创建于
            `"kube-system"` 名字空间内，并且命名为 `"bootstrap-token-<令牌 ID>"`。

          启动引导令牌类型的 Secret 要求在 `data` 中存在以下主键：
          - `"token_id"`：一个作为令牌标识符使用的随机字符串，长度为 6 字符。必须存在。
          - `"token-secret"`：一个长度为 16 的随机字符串，用作实际的令牌秘密数据。必须存在。
          - `"description"`：一个用来描述令牌用途的人类刻度字符串。可选。
          - `"expiration"`：一个 RFC-3339 格式的 UTC 时间戳字符串，给出令牌到期时间。可选。
          - `"usage-bootstrap-<usage>"`：一个布尔值标记，给出启动引导令牌的额外用途。可选。
          - `"auth-extra-groups"`：用逗号分隔开的组名列表，请求者被身份认证时，除了属于
            `"system:bootstrappers"` 用户组之外，也属于这里给出的用户组。
    required:
      - apiVersion
      - data
      - immutable
      - kind
      - metadata
      - type
    type: object
    x-kab-description-zh: |-
      Secret 中保存的是某种类型的机密数据。
      `data` 或 `stringData` 字段中保存的数值的总的大小不可超过 1MB。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Secret
        version: v1
  io.k8s.api.core.v1.Secret.UPDATE:
    description: |-
      Secret holds secret data of a certain type.
      The total bytes of the values in the `data` or `stringData` field must be less than 1MB.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      data:
        additionalProperties:
          format: byte
          type: string
        description: |-
          The secret data. Each key must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`.
          The serialized form of the Secret data is a [base64](https://tools.ietf.org/html/rfc4648#section-4)
          encoded string, representing the arbitrary (possibly non-string) data value here.
        type: object
        x-kab-description-zh: |-
          秘密数据字典。其中的每个主键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 构成。
          Secret 数据的序列化形式是一个以 [base64](https://tools.ietf.org/html/rfc4648#section-4)
          格式编码的字符串，代表的是这里保存的任意（可能并不一定是字符串）数据值。
      immutable:
        description: |-
          If set to `true`, ensures that data stored in the Secret cannot be updated
          (only `metadata` can be modified).
          If not set to `true`, the field can be modified at any time. Defaulted to nil.
        type: boolean
        x-kab-description-zh: |-
          此字段设置为 `true` 时能够保证 Secret 中保存的数据不被变更（只可变更 `metadata`）。
          如果此字段未被设置为 `true`，则 Secret 中的字段可以在任何时候变更。
          默认值为 nil。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Secret
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The Secret name must be a valid DNS subdomain value.
          Note that some Secret types may have additional requirements on the `annotations`
          or assumptions on the Secret name.
        x-kab-description-zh: |-
          标准的对象元数据。Secret 的名字必须是一个合法的 DNS 子域名。
          注意某些 Secret 类型可能对 `annotations` 字段有额外的要求，或者对 Secret 名字有额外的规定。
      stringData:
        additionalProperties:
          type: string
        description: |-
          The `stringData` field allows for specifying non-binary Secret data in string form.
          It is provided as a write-only input field for convenience.
          All keys and values are merged into the `data` field on write, overwriting any existing values.
          The `stringData` field is never output when reading from the API.
        type: object
        x-kab-description-zh: |-
          `stringData` 字段允许以字符串的形式输入非二进制的 Secret 数据。
          提供这一只能写的输入字段是为了方便用户使用。
          此字段中的所有键、值都会在保存的时候合并到 `data` 字段中，且覆盖其中已有的值。
          从 API 返回时，对象不会包含 `stringData` 字段。
      type:
        default: Opaque
        description: |-
          Used to facilitate programmatic handling of secret data.
          The `type` field can take one of the following builtin values.
          You can add your own type as well.
          - `"Opaque"` (default): arbitrary user-defined data.
          - `"kubernetes.io/service-account-token"`: a token that identifies a service acccount.
            This type requires that the `"kubernetes.io/service-account.name"` annotation set to
            an existing service account name and the `data.token` field set to the token content.
          - `"kubernetes.io/dockercfg"`: reserved for a serialized `"~/.dockercfg"` file.
            This type requires that the `data` field contains a `.dockercfg` key for the config content.
          - `"kubernetes.io/dockerconfigjson"`: reserved for serialized JSON data that follows the
            same format rules as the `"~/.docker/config.json"` file. This type requires that the
            `data` field contains a `.dockerconfigjson` key for the config data.
          - `"kubernetes.io/basic-auth"`: a builtin type for storing credentials needed for basic
            authentication. This type requires the `data` field contains the `username` and `password`
            key for user name and password (or token) for authentication, respectively.
          - `"kubernetes.io/ssh-auth"`: reserved for data used in SSH authentication.
            This type requires that the `data` field contains a `ssh-privatekey` key as the SSH credential
            to use.
          - `"kubernetes.io/tls"`: reserved to store information about a TLS client or server.
            It is primarily used with TLS termination of the Ingress resource, but may be used
            in other types. This type requires the settings of the `tls.key` and the `tls.crt` keys
            in the `data` field, although the server doesn't actually validate the contents.
          - `"bootstrap.kubernetes.io/token"`: reserved for tokens used during the bootstrap process
            for a node. It stores tokens used to sign well known ConfigMaps.
            This type of a Secret is usually created in the `"kube-system"` namespace and named as
            `"bootstrap-token-<token-id>"`.

          A Secret of bootstrap token type has the following keys specified under `data`:
          - `"token_id"`: A random 6 character string as the token identifier. Required.
          - `"token-secret"`: A random 16 character string as the actual token secret. Required.
          - `"description"`: A human-readable string that describes what the token is used for. Optional.
          - `"expiration"`: An absolute UTC time using RFC3339 specifying when the token should be expired.
            Optional.
          - `"usage-bootstrap-<usage>"`: A boolean flag  indicating additional usage for the bootstrap token.
          - `"auth-extra-groups"`: A comma-separated list of group names that will be authenticated as
            in addition to `"system:bootstrappers"` group.
        enum:
          - bootstrap.kubernetes.io/token
          - kubernetes.io/service-account-token
          - kubernetes.io/dockercfg
          - kubernetes.io/dockerconfigjson
          - kubernetes.io/basic-auth
          - kubernetes.io/ssh-auth
          - kubernetes.io/tls
          - Opaque
        type: string
        x-kab-description-zh: |-
          用于方便对 Secret 中的数据进行编程处理。`type` 字段可以取以下内置的类型值之一。
          用户也可添加自己的类型。

          - `"Opaque"`（默认）：用户定义的任意数据。
          - `"kubernetes.io/service-account-token"`：一个用来标识某服务账号（ServiceAccount）的令牌。
            此类型的 Secret 要求设置 `"kubernetes.io/service-account.name"` 注解为现有 ServiceAccount
            的名字，并且 `.data.token` 字段中保存令牌的内容。
          - `"kubernetes.io/dockercfg"`：预留给序列化的 `"~/.dockercfg"` 文件。
            此类型的 Secret 要求 `data` 中包含 `.dockercfg` 键，其中保存配置数据内容。
          - `"kubernetes.io/dockerconfigjson"`：预留类型值，用来保存序列化的 JSON 数据。数据的格式遵从与
            `"~/.docker/config.json"` 文件相同的规则。此类型的 Secret 对象要求在 `data` 字段中包含
            `.dockerconfigjson` 键，其中保存配置数据。
          - `"kubernetes.io/basic-auth"`：内置的用来保存基本身份认证所需要的凭据数据。此类型的
            Secret 对象的 `data` 字段需要包含 `username` 和 `password` 主键，
            分别对应身份认证所需要的用户名和密码（或令牌）。
          - `"kubernetes.io/ssh-auth"`：预留的用于 SSH 身份认证的类型。此类型的 Secret 对象要求在
            `data` 字段中包含 `ssh-privatekey` 主键，作为要使用的 SSH 凭据。
          - `"kubernetes.io/tls"`：预留的类型，用来保存 TLS 客户端或服务器端的信息。此字段目前主要用于
            Ingress 资源，执行 TLS 终结操作。不过也可以用于其他场景。
            这种类型的 Secret 对象要求在 `data` 中设置 `tls.key` 和 `tls.crt` 主键，
            尽管服务器端并不会对其内容做正确性检查。
          - `"bootstrap.kubernetes.io/token"`：预留给节点的一种类型，用于节点的启动引导过程。
            其中保存的是用来对某个众所周知的 ConfigMap 进行签名的令牌。此类型的 Secret 通常被创建于
            `"kube-system"` 名字空间内，并且命名为 `"bootstrap-token-<令牌 ID>"`。

          启动引导令牌类型的 Secret 要求在 `data` 中存在以下主键：
          - `"token_id"`：一个作为令牌标识符使用的随机字符串，长度为 6 字符。必须存在。
          - `"token-secret"`：一个长度为 16 的随机字符串，用作实际的令牌秘密数据。必须存在。
          - `"description"`：一个用来描述令牌用途的人类刻度字符串。可选。
          - `"expiration"`：一个 RFC-3339 格式的 UTC 时间戳字符串，给出令牌到期时间。可选。
          - `"usage-bootstrap-<usage>"`：一个布尔值标记，给出启动引导令牌的额外用途。可选。
          - `"auth-extra-groups"`：用逗号分隔开的组名列表，请求者被身份认证时，除了属于
            `"system:bootstrappers"` 用户组之外，也属于这里给出的用户组。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ''
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Secret
        version: v1
  io.k8s.api.core.v1.SecretEnvSource:
    description: |-
      SecretEnvSource populates the environment variables of a container with data from the named Secret.
      The key-value pairs from the the Secret's `data` field will be represented as environment variables.
    properties:
      name:
        description: Name of the referenced Secret. The name must be a valid DNS subdomain
          name.
        type: string
        x-kab-description-zh: 所引用的 Secret 的名字。名字字符串必须是合法的 DNS 子域名。
      optional:
        description: Specify whether the Secret must be defined.
        type: boolean
        x-kab-description-zh: 指定所引用的 Secret 是否必须已经存在。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      SecretEnvSource 使用所引用的 Secret 中的数据为容器添加环境变量。
      来自 Secret 的 `data` 中的键值对会呈现为环境变量。
  io.k8s.api.core.v1.SecretKeySelector:
    description: SecretKeySelector selects a key of a Secret.
    properties:
      key:
        description: |-
          The key of the Secret to select from.
          The string must be a valid DNS subdomain name, no more than 253 characters.
          It must consist of alphanumeric characters, `'.'`, `'-'` or `'-'`.
          It cannot be `"."`, `".."` or start with `".."`.
        maxLength: 253
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要选择的 Secret 中的主键。此字符串必须是合法的 DNS 子域名，不能超过 253 个字符。
          字符串必须由字母、数字、`'.'`、`'-'` 或 `'-'` 组成。
          字符串不可以是 `"."` 或 `".."`，也不可以以 `".."` 开头。
      name:
        description: Name of the referenced Secret. The name must be a valid DNS subdomain
          name.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 Secret 的名称。此名称必须是一个合法的 DNS 子域名。
      optional:
        description: Specify whether the Secret or its key must be defined.
        type: boolean
        x-kab-description-zh: 指定是否所引用的 Secret 及主键必须都已存在。
    required:
      - key
      - name
    type: object
    x-kab-description-zh: SecretKeySelector 选择某个 Secret 中的一个键。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.SecretList:
    description: A list of Secret objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Secret objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
        type: array
        x-kab-description-zh: 包含 Secret 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - SecretList
        type: string
        x-kab-description-zh: 包含 ResourceQuota 对象的列表。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata..
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Secret 对象的列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: SecretList
        version: v1
  io.k8s.api.core.v1.SecretProjection:
    description: |-
      Adapts a Secret into a projected volume.
      The contents of the target Secret's `data` field will be presented in a projected volume as files
      using the keys in the `data` field as the file names.
      Note that this is identical to a Secret volume source without the default mode.
    properties:
      items:
        description: |-
          If unspecified, each key-value pair in the `data` field of the referenced Secret will be projected
          into the volume as a file whose name is the key and content is the value.
          If specified, the listed keys will be projected into the specified paths, and unlisted keys
          will not be present.
          If a key is specified which is not present in the Secret, the volume setup will error unless
          it is marked `optional`. Paths must be relative and may not contain the `".."` string
          or start with `".."`.
          Each path in the map must be unique.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
        x-kab-description-zh: |-
          如果未设置此字段，则所引用的 Secret 中 `data` 的每个键值对都会被投射到卷中，
          主键作为文件名，以键值作为文件内容。
          如果设置了此字段，则所列举的主键会被投射到指定的路径上，未被列举的主键不会出现。
          如果所指定的主键在 Secret 中不存在，则卷的创建会出错，除非该键被标记为 `optional`。
          映射中的路径必须是相对路径，不可以包含 `".."`，也不可以以 `".."` 开头。
          映射中的每个路径都必须是唯一的。
        x-kubernetes-list-type: atomic
      name:
        description: Name of the referenced Secret.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 Secret 的名称。
      optional:
        description: Specify whether the Secret or its key must be defined.
        type: boolean
        x-kab-description-zh: 指定是否所引用的 Secret 及主键必须都已存在。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      将一个 Secret 转换为一个投射卷。目标 Secret 的 `data` 字段会呈现为投射卷中的文件，
      文件名即是 `data` 字段中的主键名。
      注意，此结构与 SecretVolumeSource 完全相同，只是不包含默认模式设置。
  io.k8s.api.core.v1.SecretReference:
    description: A reference to a Secret. It has enough information to retrieve Secret
      in any namespace.
    properties:
      name:
        description: Name of the referenced Secret resource.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的 Secret 资源的名称。
      namespace:
        description: 被引用的 Secret 所在的名字空间名称。
        type: string
    required:
      - name
    type: object
    x-kab-description-zh: 对某 Secret 的引用。其中包含的信息可供引用任何名字空间中 Secret。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.SecretVolumeSource:
    description: |-
      Adapts a Secret into a volume. The contents of the target Secret's `data`
      field will be presented in a volume as files using the keys in the `data` field
      as the file names. Secret volumes support ownership management and SELinux relabeling.
    properties:
      defaultMode:
        default: 420
        description: |-
          Mode bits used to set permissions on created files by default.
          Must be an octal value between `0` and `0777` or a decimal value between `0` and `511`.
          YAML accepts both octal and decimal values, JSON requires decimal values for mode bits.
          Defaults to `0644`. Directories within the path are not affected by this setting.
          This might be in conflict with other options that affect the file mode, like `fsGroup`,
          and the result can be other mode bits set.
        format: int32
        maximum: 511
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          可选的模式位信息，用来设置所创建的文件的默认访问模式。
          所给的数值必须介于八进制的 `0` 和 `0777` 之间，也就是十进制的 `0` 和 `511` 之间。
          YAML 既能接受八进制值，也能接受十进制值；JSON 只能使用十进制值。
          路径中的目录不会受到此设置的影响。
          这里的设置可能与影响文件访问模式的其他选项之间存在冲突，例如 `fsGroup`。
          最终的结果可能导致某些其他模式位被设置。
      items:
        description: |-
          If unspecified, each key-value pair in the `data` field of the referenced Secret will be projected
          into the volume as a file whose name is the key and content is the value.
          If specified, the listed keys will be projected into the specified paths, and unlisted keys
          will not be present.
          If a key is specified which is not present in the Secret, the volume setup will error unless
          it is marked `optional`. Paths must be relative and may not contain the `".."` string
          or start with `".."`.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.KeyToPath'
        type: array
        x-kab-description-zh: |-
          如果未设置此字段，则所引用的 Secret 中 `data` 的每个键值对都会被投射到卷中，
          主键作为文件名，以键值作为文件内容。
          如果设置了此字段，则所列举的主键会被投射到指定的路径上，未被列举的主键不会出现。
          如果所指定的主键在 Secret 中不存在，则卷的创建会出错，除非该键被标记为 `optional`。
          映射中的路径必须是相对路径，不可以包含 `".."`，也不可以以 `".."` 开头。
        x-kubernetes-list-type: atomic
      optional:
        description: Specify whether the Secret or its keys must be defined.
        type: boolean
        x-kab-description-zh: 指定 Secret 及其主键是否必须存在。
      secretName:
        description: Name of the Secret to use.
        type: string
        x-kab-description-zh: 要使用的 Secret 的名字。
    required:
      - secretName
    type: object
    x-kab-description-zh: |-
      将一个 Secret 转换为一个投射卷。目标 Secret 的 `data` 字段会呈现为投射卷中的文件，
      文件名即是 `data` 字段中的主键名。Secret 卷支持属主管理和 SELinux 重新打标签操作。
  io.k8s.api.core.v1.SecurityContext:
    description: |-
      The security configuration for the container. Some fields are present in both `securityContext`
      of the container and the `securityContext` of the enclosing Pod.
      When both are set, the values in container's `securityContext` take precedence.
    properties:
      allowPrivilegeEscalation:
        appArmorProfile:
          $ref: '#/definitions/io.k8s.api.core.v1.AppArmorProfile'
          description: |-
            `appArmorProfile` is the AppArmor options to use by this container. If set, this profile overrides the pod's `appArmorProfile`.
            Note that this field cannot be set when `.spec.os.name` is `"windows"`.
          x-kab-description-zh: |-
            `appArmorProfile` 是容器要使用的 AppArmor 选项。如果设置了此选项，则所给的配置会覆盖 Pod 的 `appArmorProfile` 设置。
            注意，此字段在 `.spec.os.name` 值为 `"windows"` 时不可以设置。
        description: |-
          This controls whether a process can gain more privileges than its parent process.
          This bool directly controls if the `no_new_privs` flag will be set on the container process.
          `allowPrivilegeEscalation` is always `true` when the container:
          1) runs with as `securityContext.privileged` set to `true`,
          2) has `CAP_SYS_ADMIN` in its `securityContext.capabilities.add`.
          If `privileged` is set to `true`, this cannot be `false`.
        x-kab-description-zh: |-
          此字段控制一个进程是否可以获得比其父进程更多的特权。
          此布尔值直接控制是否会在容器的进程上设置 `no_new_privs` 标志。
          当容器符合以下条件时，`allowPrivilegeEscalation` 总是为 `true`：
          1) 容器中设置了 `securityContext.privileged` 为 `true`；
          2) 容器在其 `securityContext.capabilities.add` 中包含了 `CAP_SYS_ADMIN`。
          如果 `privileged` 被设置为 `true`，则此字段不可设置为 `false`。
      capabilities:
        $ref: '#/definitions/io.k8s.api.core.v1.Capabilities'
        description: |-
          The capabilities to add/drop when running the container.
          Defaults to the default set of capabilities granted by the container runtime.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        x-kab-description-zh: |-
          运行容器时要添加或放弃的权能。默认值为容器运行时所赋予的默认权能集合。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      privileged:
        default: false
        description: |-
          Run the container in privileged mode.
          Processes in a privileged container are essentially equivalent to `root` on the host.
          The API server must have `--allow--privileged` flag set to `true` to allow privileged containers.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        type: boolean
        x-kab-description-zh: |-
          用特权模式运行此容器。特权容器中的进程本质上相当于宿主系统上的 `root` 账号。
          API 服务器必须设置 `--allow-privileged` 参数为 `true` 才能接受特权容器。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      procMount:
        default: Default
        description: |-
          This denotes the type of proc mount to use for the containers.
          The valid options are:
          - `"Default"`: use the container runtime defaults for read-only paths and
            masked paths for `/proc`. Most container runtimes mask certain paths in
            `"/proc"` to avoid accidental security exposure of special devices or information.
            This requires the `ProcMountType` feature gate to be enabled.
          - `"Unmasked"`: bypass the default masking behavior of the container runtime and
            ensures the newly created `/proc` the container stays intact with no modifications.
            Note that this field cannot be set when `spec.os.name` is `"windows"`.
        enum:
          - Default
          - Unmasked
        type: string
        x-kab-description-zh: |-
          此字段表明为容器执行的 proc 文件系统挂载方式。可接受的选项有：

          - `"Default"`：使用容器运行时所给的默认方式挂载 `/proc` 下的只读和屏蔽路径。
            大多数容器运行时会屏蔽 `/proc` 下面的某些路径，避免造成特殊设备或信息的意外安全泄露。
            使用此值要求启用 `ProcMountType` 特性门控。
          - `"Unmasked"`：略过容器运行时默认的屏蔽行为，确保在容器内创建的 `/proc` 不会被容器修改。

          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      readOnlyRootFilesystem:
        default: false
        description: |-
          Whether this container has a read-only root filesystem.
          This allows a container to restrict the locations that an application can write files to,
          ensuring the persistent data can only be written to mounted volumes.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        type: boolean
        x-kab-description-zh: |-
          此字段控制容器的根文件系统是否只读。
          此字段允许容器限制应用可以写文件的位置，进而确保持久性数据只能被写入到所挂载的卷中。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      runAsGroup:
        description: The group ID (GID) to run the entry point of the container process.
          Uses runtime default if unset. May also be set in the `securityContext`
          of the enclosing Pod. The value must be within the scope of a 32-bit non-negative
          integer. Note that this field cannot be set when `spec.os.name` is `"windows"`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          运行容器进程入口点所使用的用户组 ID（GID）。如果未设置，则使用运行时所给的默认值。
          此属性也可以在上层 Pod 的 `securityContext` 中设置。
          所设置的值必须是一个 32 位非负整数。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      runAsNonRoot:
        description: Indicates that the container **MUST** run as a non-root user.
          If `true`, the kubelet will validate the image at runtime to ensure that
          it does not run as UID `0` (`root`). It will fail to start the container
          if it does. If unset or `false`, no such validation will be performed. May
          also be set in the `securityContext` of the enclosing Pod.
        type: boolean
        x-kab-description-zh: |-
          此字段表明不可以用 `root` 账号来运行容器。
          如果设置为 `true`，则 kubelet 会在运行时检查镜像，确保不会使用 UID `0`（`root`）来运行。
          如果镜像使用 `root` 账号，则容器不会被启动。
          如果没有设置，或者设置为 `false`，就不会执行这类合法性检查。
          此属性也可以在上层 Pod 的 `securityContext` 中设置。
      runAsUser:
        description: The user ID (UID) to run the entrypoint of the container process.
          Defaults to user specified in image metadata if unspecified. May also be
          set in the `securityContext` of the enclosing Pod. The value must be within
          the scope of a 32-bit non-negative integer. Note that this field cannot
          be set when `spec.os.name` is `"windows"`.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          运行容器进程入口点所使用的用户 ID（UID）。如果未设置，使用镜像元数据中给定的用户。
          此属性也可以在上层 Pod 的 `securityContext` 中设置。所设置的值必须是一个 32 位非负整数。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      seLinuxOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.SELinuxOptions'
        description: |-
          The SELinux context to be applied to the container.
          If unspecified, the container runtime will allocate a random SELinux context for each container.
          May also be set in the `securityContext` of the enclosing Pod.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        x-kab-description-zh: |-
          要应用到容器上的 SELinux 上下文选项。
          若未设置此字段，则容器会为每个容器分配一个随机的 SELinux 上下文。
          此属性也可以在上层 Pod 的 `securityContext` 中设置。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      seccompProfile:
        $ref: '#/definitions/io.k8s.api.core.v1.SeccompProfile'
        description: |-
          The seccomp options to use by this container.
          May also be set in the `securityContext` of the enclosing Pod.
          Note that this field cannot be set when `spec.os.name` is `"windows"`.
        x-kab-description-zh: |-
          此容器要使用的 Seccomp 选项。
          此属性也可以在上层 Pod 的 `securityContext` 中设置。
          注意当 `spec.os.name` 为 `"windows"` 时不可设置此字段。
      windowsOptions:
        $ref: '#/definitions/io.k8s.api.core.v1.WindowsSecurityContextOptions'
        description: |-
          The Windows specific settings to apply to the container.
          If unspecified, the options from the `securityContext` of the enclosing Pod
          will be used.
          Note that this field cannot be set when `spec.os.name` is `"linux"`.
        x-kab-description-zh: |-
          此容器要使用的特定于 Windows 的选项。
          若未设置，则使用在上层 Pod 的 `securityContext` 中的选项。
          注意当 `spec.os.name` 为 `"linux"` 时不可设置此字段。
    type: object
    x-kab-description-zh: |-
      容器的安全性配置。某些字段既可出现在容器的 `securityContext` 配置中，也可出现在上级 Pod
      的 `securityContext` 中。如果两个位置设置了相同的选项，则以容器层面的设置为准。
  io.k8s.api.core.v1.Service.CREATE:
    description: |-
      Service is a named abstraction of software service consisting of local port that the proxy listens on,
      and the selector that determines which Pods will answer requests sent through the proxy.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Service
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The service name must be valid DNS label.
          The annotation `"service.beta.kubernetes.io/load-balancer-source-ranges"` can be set to
          specify the Ingress range allowed when Service `type` is `"LoadBalancer"`.
          The annotation value should be a comma separated list of CIDRs.
          Default value is `"0.0.0.0/0"` which allows full access.
          Not all cloud-providers support this annotation.
        x-kab-description-zh: |-
          标准的对象元数据。服务的名称必须是合法的 DNS 标签。当 `type` 为 `"LoadBalancer"` 是，
          可以设置注解 `"service.beta.kubernetes.io/load-balancer-source-ranges"` 来指定所允许的
          Ingress 范围。该注解的值应该是用逗号分割的一组 CIDR 列表。
          默认值为 `"0.0.0.0/0"`，意味着允许所有 Ingress 访问。
          并非所有云平台都支持这一注解。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ServiceSpec'
        description: Spec defines the behavior of the Service.
        x-kab-description-zh: 此字段定义 Service 的行为。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      Service 是有名字的，是对软件服务的一种抽象。所谓软件服务，由代理所监听的本地端口及选择算符组成。
      选择算符决定哪些 Pod 会对通过代理发送过来的请求作出回应。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Service
        version: v1
  io.k8s.api.core.v1.Service.GET:
    description: |-
      Service is a named abstraction of software service consisting of local port that the proxy listens on,
      and the selector that determines which Pods will answer requests sent through the proxy.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Service
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ServiceSpec'
        description: Spec defines the behavior of a service.
        x-kab-description-zh: 此字段定义 Service 的行为。
      status:
        $ref: '#/definitions/io.k8s.api.core.v1.ServiceStatus'
        description: Most recently observed status of the service.
        x-kab-description-zh: Service 的最近观测状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      Service 是有名字的，是对软件服务的一种抽象。所谓软件服务，由代理所监听的本地端口及选择算符组成。
      选择算符决定哪些 Pod 会对通过代理发送过来的请求作出回应。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Service
        version: v1
  io.k8s.api.core.v1.Service.UPDATE:
    description: |-
      Service is a named abstraction of software service consisting of local port that the proxy listens on,
      and the selector that determines which Pods will answer requests sent through the proxy.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Service
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The service name must be valid DNS label.
          The annotation `"service.beta.kubernetes.io/load-balancer-source-ranges"` can be set to
          specify the Ingress range allowed when Service `type` is `"LoadBalancer"`.
          The annotation value should be a comma separated list of CIDRs.
          Default value is `"0.0.0.0/0"` which allows full access.
          Not all cloud-providers support this annotation.
        x-kab-description-zh: |-
          标准的对象元数据。服务的名称必须是合法的 DNS 标签。当 `type` 为 `"LoadBalancer"` 是，
          可以设置注解 `"service.beta.kubernetes.io/load-balancer-source-ranges"` 来指定所允许的
          Ingress 范围。该注解的值应该是用逗号分割的一组 CIDR 列表。
          默认值为 `"0.0.0.0/0"`，意味着允许所有 Ingress 访问。
          并非所有云平台都支持这一注解。
      spec:
        $ref: '#/definitions/io.k8s.api.core.v1.ServiceSpec'
        description: Spec defines the behavior of the Service.
        x-kab-description-zh: 此字段定义 Service 的行为。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      Service 是有名字的，是对软件服务的一种抽象。所谓软件服务，由代理所监听的本地端口及选择算符组成。
      选择算符决定哪些 Pod 会对通过代理发送过来的请求作出回应。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Service
        version: v1
  io.k8s.api.core.v1.ServiceAccount.CREATE:
    description: |-
      A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for
      an identity, a principal that can be authenticated and authorized and a set of secrets.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      automountServiceAccountToken:
        description: |-
          Flag indicating whether Pods running as this ServiceAccount should have an API token
          automatically mounted. Can be overridden at the Pod level.
        type: boolean
        x-kab-description-zh: |-
          表明以此 ServiceAccount 身份运行的 Pod 是否要自动挂载 API 访问令牌。
          此选项可以在 Pod 层重载。
      imagePullSecrets:
        description: |-
          A list of references to Secrets in the same namespace for pulling images for Pods that
          reference this ServiceAccount. Image pull Secrets are distinct from Secrets because Secrets
          can be mounted in the Pod, but image pull Secrets are only accessed by the kubelet.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        type: array
        x-kab-description-zh: |-
          此列表字段包含对当前名字空间中 Secret 的引用，用来为引用此 ServiceAccount 的 Pod 拉取镜像。
          镜像拉取 Secret 与普通的 Secret 不同，因为后者可以被挂载到 Pod 中使用，而镜像拉取 Secret
          只能被 kubelet 访问。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceAccount
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      secrets:
        description: |-
          A list of the Secrets in the same namespace that Pods running using this ServiceAccount are
          allowed to use. Pods are only limited to this list if this service account has a
          `"kubernetes.io/enforce-mountable-secrets"` annotation set to `"true"`.
          This field should not be used to find auto-generated ServiceAccount token Secrets for use
          outside of Pods. Instead, tokens can be requested directly using the TokenRequest API,
          or ServiceAccount token Secrets can be manually created.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        type: array
        x-kab-description-zh: |-
          此列表字段包含对当前名字空间中 Secret 对象的引用，使用此 ServiceAccount 的 Pod 可以使用这些 Secret。
          如果此 ServiceAccount 设置了注解 `"kubernetes.io/enforce-mountable-secrets": "true"`，
          则使用此 ServiceAccount 运行的 Pod 只能使用此列表中提供的 Secret。
          此字段不能用来查找自动生成的服务账号令牌 Secret 以便在 Pod 之外使用。
          如果需要访问令牌，可以直接使用 TokenRequest API，或者使用手动创建的服务账号令牌 Secret。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      ServiceAccount 将用户（或者某周边系统）所理解的某个标识符名字，和可被认证身份并鉴权的某个主体，
      和一组秘密数据关联起来。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceAccount
        version: v1
  io.k8s.api.core.v1.ServiceAccount.GET:
    description: |-
      A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for
      an identity, a principal that can be authenticated and authorized and a set of secrets.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      automountServiceAccountToken:
        description: |-
          Flag indicating whether Pods running as this ServiceAccount should have an API token
          automatically mounted. Can be overridden at the Pod level.
        type: boolean
        x-kab-description-zh: |-
          表明以此 ServiceAccount 身份运行的 Pod 是否要自动挂载 API 访问令牌。
          此选项可以在 Pod 层重载。
      imagePullSecrets:
        description: |-
          A list of references to Secrets in the same namespace for pulling images for Pods that
          reference this ServiceAccount. Image pull Secrets are distinct from Secrets because Secrets
          can be mounted in the Pod, but image pull Secrets are only accessed by the kubelet.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        type: array
        x-kab-description-zh: |-
          此列表字段包含对当前名字空间中 Secret 的引用，用来为引用此 ServiceAccount 的 Pod 拉取镜像。
          镜像拉取 Secret 与普通的 Secret 不同，因为后者可以被挂载到 Pod 中使用，而镜像拉取 Secret
          只能被 kubelet 访问。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource
        enum:
          - ServiceAccount
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      secrets:
        description: |-
          A list of the Secrets in the same namespace that Pods running using this ServiceAccount are
          allowed to use. Pods are only limited to this list if this service account has a
          `"kubernetes.io/enforce-mountable-secrets"` annotation set to `"true"`.
          This field should not be used to find auto-generated ServiceAccount token Secrets for use
          outside of Pods. Instead, tokens can be requested directly using the TokenRequest API,
          or ServiceAccount token Secrets can be manually created.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        type: array
        x-kab-description-zh: |-
          此列表字段包含对当前名字空间中 Secret 对象的引用，使用此 ServiceAccount 的 Pod 可以使用这些 Secret。
          如果此 ServiceAccount 设置了注解 `"kubernetes.io/enforce-mountable-secrets": "true"`，
          则使用此 ServiceAccount 运行的 Pod 只能使用此列表中提供的 Secret。
          此字段不能用来查找自动生成的服务账号令牌 Secret 以便在 Pod 之外使用。
          如果需要访问令牌，可以直接使用 TokenRequest API，或者使用手动创建的服务账号令牌 Secret。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
      - metadata
      - secrets
    type: object
    x-kab-description-zh: |-
      ServiceAccount 将用户（或者某周边系统）所理解的某个标识符名字，和可被认证身份并鉴权的某个主体，
      和一组秘密数据关联起来。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceAccount
        version: v1
  io.k8s.api.core.v1.ServiceAccount.UPDATE:
    description: |-
      A ServiceAccount binds together a name understood by users and perhaps by peripheral systems for
      an identity, a principal that can be authenticated and authorized and a set of secrets.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      automountServiceAccountToken:
        description: |-
          Flag indicating whether Pods running as this ServiceAccount should have an API token
          automatically mounted. Can be overridden at the Pod level.
        type: boolean
        x-kab-description-zh: |-
          表明以此 ServiceAccount 身份运行的 Pod 是否要自动挂载 API 访问令牌。
          此选项可以在 Pod 层重载。
      imagePullSecrets:
        description: |-
          A list of references to Secrets in the same namespace for pulling images for Pods that
          reference this ServiceAccount. Image pull Secrets are distinct from Secrets because Secrets
          can be mounted in the Pod, but image pull Secrets are only accessed by the kubelet.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        type: array
        x-kab-description-zh: |-
          此列表字段包含对当前名字空间中 Secret 的引用，用来为引用此 ServiceAccount 的 Pod 拉取镜像。
          镜像拉取 Secret 与普通的 Secret 不同，因为后者可以被挂载到 Pod 中使用，而镜像拉取 Secret
          只能被 kubelet 访问。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceAccount
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      secrets:
        description: |-
          A list of the Secrets in the same namespace that Pods running using this ServiceAccount are
          allowed to use. Pods are only limited to this list if this service account has a
          `"kubernetes.io/enforce-mountable-secrets"` annotation set to `"true"`.
          This field should not be used to find auto-generated ServiceAccount token Secrets for use
          outside of Pods. Instead, tokens can be requested directly using the TokenRequest API,
          or ServiceAccount token Secrets can be manually created.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        type: array
        x-kab-description-zh: |-
          此列表字段包含对当前名字空间中 Secret 对象的引用，使用此 ServiceAccount 的 Pod 可以使用这些 Secret。
          如果此 ServiceAccount 设置了注解 `"kubernetes.io/enforce-mountable-secrets": "true"`，
          则使用此 ServiceAccount 运行的 Pod 只能使用此列表中提供的 Secret。
          此字段不能用来查找自动生成的服务账号令牌 Secret 以便在 Pod 之外使用。
          如果需要访问令牌，可以直接使用 TokenRequest API，或者使用手动创建的服务账号令牌 Secret。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      ServiceAccount 将用户（或者某周边系统）所理解的某个标识符名字，和可被认证身份并鉴权的某个主体，
      和一组秘密数据关联起来。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceAccount
        version: v1
  io.k8s.api.core.v1.ServiceAccountList:
    description: A list of ServiceAccount objects
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ServiceAccount objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
        type: array
        x-kab-description-zh: 包含 ServiceAccount 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceAccountList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ServiceAccount 对象的列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceAccountList
        version: v1
  io.k8s.api.core.v1.ServiceAccountTokenProjection:
    description: |-
      ServiceAccountTokenProjection projects a service account token to a volume.
      This projection can be used to insert a service account token into the Pods runtime
      filesystem for use against APIs (Kubernetes API server or otherwise).
    properties:
      audience:
        description: |-
          The intended audience of the token.
          A recipient of a token must identify itself with an identifier specified in the `audience`
          of the token, and otherwise should reject the token.
          The `audience` defaults to the identifier of the API server.
        type: string
        x-kab-description-zh: |-
          令牌的意向受众。接收令牌者必须能够表明自己是令牌 `audience` 中所列举的身份标识之一，
          否则应该拒绝令牌。`audience` 的默认值为 API 服务器的标识。
      expirationSeconds:
        default: 3600
        description: |-
          The requested duration of validity of the service account token.
          As the token approaches expiration, the kubelet volume plugin will proactively
          rotate the service account token. The kubelet will start trying to rotate the
          token if the token is older than 80 percent of its time to live (TTL) or if
          the token is older than 24 hours.
        format: int32
        minimum: 600
        type: integer
        x-kab-description-zh: |-
          服务账号令牌被请求的有效期。当令牌快要过期时，kubelet 卷插件会主动尝试托换该服务账号令牌。
          令牌已经度过其整个存活期（Time To Live，TTL）的 80% 时间，或者令牌生命期已经超过 24 小时，
          kubelet 会开始尝试轮换令牌。
      path:
        description: The path relative to the mount point of the file to project the
          token into.
        minLength: 1
        type: string
        x-kab-description-zh: 字段值是相对文件挂载点的路径，令牌会被投射到这里指定的路径。
    required:
      - path
    type: object
    x-kab-description-zh: |-
      ServiceAccountTokenProjection 将某个服务账号令牌投射到存储卷中。
      这种投射机制可以用来将服务账号令牌注入到 Pod 运行时的文件系统内，以便 Pod
      访问 API（Kubernetes API 服务器或者其他 API）。
  io.k8s.api.core.v1.ServiceList:
    description: A list of Service objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Service objects.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
        type: array
        x-kab-description-zh: 包含 Service 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceList
        type: string
        x-kab-description-zh: 包含 ResourceQuota 对象的列表。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Service 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: ServiceList
        version: v1
  io.k8s.api.core.v1.ServicePort:
    description: Information on Service's port.
    properties:
      appProtocol:
        description: |-
          The application protocol for this port.
          This is used as a hint for implementations to offer richer behavior for protocols that
          they understand. This field follows standard Kubernetes label syntax. Valid values are either:

          - Un-prefixed protocol names: reserved for IANA standard service names
            (as per RFC-6335 and https://www.iana.org/assignments/service-names).
          - Kubernetes-defined prefixed names.
          - Other protocols should use implementation-defined prefixed names such as
            `"mycompany.com/my-custom-protocol"`.

          The Kubernetes-defined prefixed names can be one of:

          - `"kubernetes.io/h2c"` - HTTP/2 prior knowledge over cleartext as described in
            [RFC9113](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-)

          - `"kubernetes.io/ws"` - WebSocket over cleartext as described in
            [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)
          - `"kubernetes.io/wss"` - WebSocket over TLS as described in
            [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)
        type: string
        x-kab-description-zh: |-
          端口对应的应用协议。端点的视线可以将此字段值视为一种提示信息，
          从而提供它们所能够理解的协议的更丰富的行为。
          此字段遵从标准的 Kubernetes 标签语法。合法的取值如下：

          - 无前缀的协议名：保留给 IANA 标准服务名称
            （参见 RFC-6335 和 https://www.iana.org/assignments/service-names）。
          - Kubernetes 定义的、带前缀的名称。
          - 其他协议则需要使用由实现所定义的、带前缀的名称，例如 `"mycompany.com/my-custom-protocol"`。

          其中 Kubernetes 所定义的、带前缀的名称包括：

          - `"kubernetes.io/h2c"` - 采用明文传输的 HTTP/2 先验知识版本，
            如 [RFC9113](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-) 所述。
          - `"kubernetes.io/ws"` - 采用明文传输的 WebSocket，
            如 [RFC6455](https://www.rfc-editor.org/rfc/rfc6455) 所述。
          - `"kubernetes.io/wss"` - 采用 TLS 传输的WebSocket,
            如 [RFC6455](https://www.rfc-editor.org/rfc/rfc6455) 所述。
      name:
        description: |-
          The name of this port within the Service.
          This must be a DNS label and unique among all ports within a Service `spec` when specified.
          When considering the endpoints for a Service, this must match the `name` field in the
          EndpointPort objects. This field is optional if only one port is defined on this Service.
        type: string
        x-kab-description-zh: |-
          端口在 Service 内的名字。端口名必须是合法的 DNS 标签值，并且在 Service `spec` 中的所有端口中唯一。
          当为 Service 选择端点时，此端口名必须与 EndpointPort 对象中的 `name` 字段值相同。
          如果 Service 中仅定义了一个端口，则 `name` 字段是可选的。
      nodePort:
        description: |-
          The port on each node on which this Service is exposed when `type` is `"NodePort"` or
          `"LoadBalancer"`. This cannot be specified if the Service type is `"ClusterIP"`.
          Usually assigned by the system if the Service requires one.
          If a value is manually specified, in-range, and not in use it will be used, otherwise the
          operation will fail.
          If this field is specified when creating a Service which does not need it,
          the Service creation will fail.
          This field will be wiped when updating a Service to a type which no longer needs it
          (e.g.  changing `type` from `"NodePort"` to `"ClusterIP"`).
        format: int32
        type: integer
        x-kab-description-zh: |-
          当 `type` 为 `"NodePort"` 或者 `"LoadBalancer"` 时，Service 在节点上公开的端口。
          如果 Service 类型为 `"ClusterIP"` 则不可以设置此字段。
          如果 Service 需要一个节点端口，通常会由系统来自动分配。
          如果手动指定一个节点端口号，并且所给端口号在正确的范围内、未被使用，则系统会使用所指定端口，
          否则 Service 创建会失败。
          如果在创建 Service 时指定给了一个不需要节点端口的 Service 对象，Service 创建也会失败。
          当 Service 更新后会变成一个不再需要此字段的类型（例如，`type` 从 `"NodePort"` 变为 `"ClusterIP"`），
          则此字段的值会被去掉。
      port:
        description: |-
          The port that is exposed by the Service.
          The value cannot be the port number used by the kubelet which defaults to `10250`.
          The (`port`, `protocol`) tuple must be unique in the `ports` list for the Service.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此 Service 所公开的端口。这里设置的值不可以是 kubelet 所使用的端口（默认为 `10250`）。
          由 (`port`, `protocol`) 构成的元组必须在 Service 的整个 `ports` 列表中唯一。
      protocol:
        default: TCP
        description: |-
          The protocol for this port.
          When the Service `type` is `"LoadBalancer"`, all ports must have the same protocol.
        enum:
          - SCTP
          - TCP
          - UDP
        type: string
        x-kab-description-zh: 端口使用的协议。当 Service 的 `type` 为 `"LoadBalancer"` 时，所有端口都必须使用同一个协议。
      targetPort:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          Number or name of the port used to access Pods targeted by the Service.
          The port number must be in the range of 1 to 65535.
          If it is a string, it must be not empty and no more than 15 characters.
          It must contain only alphanumeric characters and hyphens.
          Port name will be looked up as a named port in the target Pod's container ports.
          If this is not specified, the value of the `port` field is used (an identity map).
          This field is ignored for Services with `clusterIP` set to `"None"` (i.e. **headless**),
          and should be omitted or set equal to the `port` field.
        x-kab-description-zh: |-
          用来访问 Service 所对应的 Pod 时要使用的端口号或端口名称。所给的端口号必须介于 1 到 65535 之间。
          如果字段值是一个字符串，则该字符串不可以为空，也不可以超过 15 个字符。
          使用端口名称时，字段值只能包含字母、数字和连字符字符。
          系统会在目标 Pod 的容器端口中按名字来查找对应的端口。
          如果未设置此字段，则默认使用 `port` 字段所给的端口（即端口一一映射场景）。
          当 `clusterIP` 为 `"None"` 时（即，无头服务），此字段的设置会被忽略，
          因此应该不设置或者设置为与 `port` 字段相同的值。
    required:
      - port
      - protocol
    type: object
    x-kab-description-zh: 关于 Service 上端口的信息。
  io.k8s.api.core.v1.ServiceSpec:
    description: The specification of a Service.
    properties:
      allocateLoadBalancerNodePorts:
        default: true
        description: |-
          This defines if node ports will be automatically allocated for Services with type `"LoadBalancer"`.
          It may be set to `false` if the cluster load-balancer does not rely on node ports.
          If the caller requests specific node ports (by specifying a value), those requests will be
          respected, regardless of this field. This field may only be set for Services with type
          `"LoadBalancer"` and will be cleared if the type is changed to any other type.
        type: boolean
        x-kab-description-zh: |-
          此字段用来设置是否为 `"LoadBalancer"` 类型的 Service 自动分配节点端口。
          如果集群的负载均衡器不依赖于节点端口，可以将此字段设置为 `false`。
          如果调用这需要特定的节点端口（通过指定节点端口），则系统会尊重请求的要求，忽略此字段设置。
          此字段只能用于 `"LoadBalancer"` 类型的 Service。当 Service 变更为其他类型时，此字段会被清除。
      clusterIP:
        description: |-
          The IP address of the Service. It is usually assigned randomly by the system.
          If an address is manually specified, is in-range (as per system configuration), and is not in use,
          it will be allocated to the Service; otherwise creation of the Service will fail.

          This field may not be changed through updates unless the `type` field is also being changed to
          `"ExternalName"` (which requires this field to be blank) or the `type` field is being changed
          from `"ExternalName"` (in which case this field may optionally be specified, as describe above).

          Valid values are `"None"`, empty string (`""`), or a valid IP address.
          Setting this to `"None"` makes a *headless service* (no virtual IP), which is useful when
          direct endpoint connections are preferred and proxying is not required.
          Only applies to types `"ClusterIP"`, `"NodePort"`, and `"LoadBalancer"`.
          This field cannot be set to `"None"` if Service type is `"NodePort"` or `"LoadBalancer"`.
          If this field is specified when creating a Service of type `"ExternalName"`, the Service creation
          will fail.
          This field will be wiped when updating a Service to type `"ExternalName"`.
        type: string
        x-kab-description-zh: |-
          Service 自身的 IP 地址。通常会由系统随机分配。
          如果手动设置此字段，并且所给字段值位于系统设置的 Service IP 地址范围内，并且该地址尚未被使用，
          则系统会使用用户所给的 IP 地址。否则 Service 创建请求会失败。

          此字段不可以通过更新请求来改变，除非 `type` 字段也被改为 `"ExternalName"`（进而要求此字段为空）
          或者 `type` 字段从 `"ExternalName"`（这时设置此字段时可选的）变为别的值。

          合法的取值可以是 `"None"`、空字符串（`""`）或者一个合法的 IP 地址。
          字段值为 `"None"` 意味着 Service 是一个没有虚拟 IP 的无头（Headless）服务。
          当希望直接连接到端点而不是经过服务代理时，无头服务是有用的。
          仅适用于 `"ClusterIP"`、`"NodePort"` 和 `"LoadBalancer"` 类型的 Service。
          当 Service `type` 为 `"NodePort"` 或 `"LoadBalancer"` 时，此字段不可设置为 `"None"`。
          如果创建类型为 `"ExternalName"` 的 Service 时设置了此字段，则 Service 创建会失败。
          当将现有 Service 的类型改为 `"ExternalName"` 时，此字段会被清除。
      clusterIPs:
        description: |-
          A list of IP addresses assigned to this Service. The values are usually assigned randomly.
          If an address is manually specified, is in-range (as per system configuration), and is not in use,
          it will be allocated to the Service; otherwise the Service creation will fail.
          This field may not be changed through updates unless the `type` field is also being changed to
          `"ExternalName"` (which requires this field to be empty) or the `type` field is being changed
          from `"ExternalName"` (in which case this field may optionally be specified, as describe above).

          Valid values are `"None"`, empty string (`""`), or a valid IP address. Setting this to
          `["None"]` makes a *headless service* (no virtual IP), which is useful when direct endpoint
          connections are preferred and proxying is not required.
          When `"None"` is in the list, there cannot be other items in the list.
          Only applies to types `"ClusterIP"`, `"NodePort"`, and `"LoadBalancer"`.
          If this field is specified when creating a Service of type `"ExternalName"`, the Service creation
          will fail. This field will be wiped when updating a Service to type `"ExternalName"`.

          If this field is not specified, it will be initialized from the `clusterIP` field.
          If this field is specified, clients must ensure that `clusterIPs[0]` and `clusterIP` have the
          same value.

          This field may hold a maximum of two entries (dual-stack IPs, in either order).
          These IPs must correspond to the values of the `ipFamilies` field.
          Both `clusterIPs` and `ipFamilies` are governed by the `ipFamilyPolicy` field.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          分配给此 Service 的 IP 地址的列表。此地址通常是随机分配的。
          如果手动设置此字段，并且所给字段值位于系统设置的 Service IP 地址范围内，并且该地址尚未被使用，
          则系统会使用用户所给的 IP 地址。否则 Service 创建请求会失败。

          此字段不可以通过更新请求来改变，除非 `type` 字段也被改为 `"ExternalName"`（进而要求此字段为空）
          或者 `type` 字段从 `"ExternalName"`（这时设置此字段时可选的）变为别的值。

          合法的取值可以是 `"None"`、空字符串（`""`）或者一个合法的 IP 地址。
          字段值为 `["None"]` 意味着 Service 是一个没有虚拟 IP 的无头（Headless）服务。
          当希望直接连接到端点而不是经过服务代理时，无头服务是有用的。
          当列表准存在 `"None"` 时，列表中不可存在其他条目。
          仅适用于 `"ClusterIP"`、`"NodePort"` 和 `"LoadBalancer"` 类型的 Service。
          如果创建类型为 `"ExternalName"` 的 Service 时设置了此字段，则 Service 创建会失败。
          当将现有 Service 的类型改为 `"ExternalName"` 时，此字段会被清除。

          如果未设置此字段，则 Service 初始化时会根据 `clusterIP` 字段内容来初始化。
          如果设置了此字段，则客户端必须确保 `clusterIPs[0]` 与 `clusterIP` 的值相同。

          此字段最多包含两个表项（针对双栈 IP，顺序任意）。所给的 IP 地址对应于 `ipFamilies` 字段中的值。
          `clusterIPs` 和 `ipFamilies` 字段都是受控于 `ipFamilyPolicy` 字段的。
        x-kubernetes-list-type: atomic
      externalIPs:
        description: |-
          A list of IP addresses for which nodes in the cluster will also accept traffic for this Service.
          These IPs are not managed by Kubernetes.
          The user is responsible for ensuring that traffic arrives at a node with this IP.
          A common example is external load-balancers that are not part of the Kubernetes system.
          The IP address provided cannot be `"0.0.0.0"` or loopback addresses (`"127.0.0.0/8"`) or link-local
          addresses (`"169.254.0.0/16"`) or link-local multicast addresses (`"244.0.0.0/24"`).
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          这里给出的是一个 IP 地址列表，集群中的节点会用这些 IP 地址接收对 Service 的请求流量。
          所给的 IP 地址是不受 Kubernetes 管理的。
          用户要确保指向所给 IP 地址的流量会被转发到节点上。
          一个比较常见的例子是使用 Kubernetes 系统之外的某种负载均衡器。
          所给的 IP 地址不可以是 `"0.0.0.0"` 或本地回路地址（`"127.0.0.0/8"`）或者链路本地地址
          （`"169.254.0.0/16"`）或者链路本地多播地址（`"244.0.0.0/24"`）。.
        x-kubernetes-list-type: atomic
      externalName:
        description: |-
          The external reference that discovery mechanisms will return as an alias for this Service
          (e.g. a DNS CNAME record). No proxying will be involved.
          Must be a lowercase [RFC-1123 hostname](https://tools.ietf.org/html/rfc1123)
          and requires `type` to be `"ExternalName"`. Having a trailing dot is acceptable.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一种外部引用，服务发现机制会将所给的字符串作为 Service 的别名返回
          （例如，以 DNS CNAME 记录的形式）。这里不会牵涉服务代理机制。
          所给的字符串必须是小写字母的 [RFC-1123 主机名](https://tools.ietf.org/html/rfc1123)形式，
          并且设置此字段时要求 `type` 为 `"ExternalName"`。
          字段值包含尾部的句点也是可接受的。
      externalTrafficPolicy:
        default: Cluster
        description: |-
          `externalTrafficPolicy` describes how nodes distribute service traffic they receive on
          one of the Service's *externally-facing* addresses (NodePorts, ExternalIPs, and LoadBalancer IPs).
          If set to `"Local"`, the proxy will configure the Service in a way that assumes that external
          load balancers will take care of balancing the service traffic between nodes, and so each node
          will deliver traffic only to the node-local endpoints of the Service, without masquerading
          the client source IP. (Traffic mistakenly sent to a node with no endpoints will
          be dropped.)

          The default value, `"Cluster"`, uses the standard behavior of routing to all endpoints evenly
          (possibly modified by topology and other features).
          Note that traffic sent to an external IP or LoadBalancer IP from within the cluster will always
          get `"Cluster"` semantics, but clients sending to a NodePort from within the cluster may
          need to take traffic policy into account when picking a node.
        enum:
          - Cluster
          - Local
        type: string
        x-kab-description-zh: |-
          `externalTrafficPolicy` 描述节点在从 Service 的**面向外部的**地址（节点端口、外部 IP、
          或者负载均衡器 IP）上接收到服务请求时，要如何对流量进行分发。
          如果字段值设置为 `"Local"`，代理会假定外部负载均衡器能够在节点之间完成服务流量的负载均衡，
          通过对 Service 进行配置，使得服务请求只会被转发给 Service 在节点本地的端点，
          而不会取伪装客户端的源 IP。错误地发送到不存在端点的节点的请求会被丢弃。

          字段的默认值为 `"Cluster"`，意味着采用标准的路由行为，均衡地将流量引向各个端点
          （可能会因为拓扑分布或者其他特性有所调整）。
          注意，从集群内部发往外部 IP 或者负载均衡器 IP 的流量都总是会按 `"Cluster"` 语义处理，
          但是集群内客户端发往节点端口的流量在选择目标节点时可能需要考虑这里设置的流量策略。
      healthCheckNodePort:
        description: |-
          The health-check node port for the Service. This only applies when `type` is set to
          `"LoadBalancer"` and `externalTrafficPolicy` is set to `"Local"`.
          If a value is specified, is in-range, and is not in use, it will be used.
          If not specified, a value will be automatically allocated.
          External systems (e.g.  load-balancers) can use this port to determine if a given node
          holds endpoints for this Service or not.
          If this field is specified when creating a Service which does not need it, the Service creation
          will fail. This field will be wiped when updating a Service to no longer need it
          (e.g. changing `type`).
          This field cannot be updated once set.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          用来对 Service 作健康检查时使用的节点端口。
          仅适用于 `type` 为 `"LoadBalancer"` 且 `externalTrafficPolicy` 被设置为 `"Local"` 的服务。
          如果此字段被设置，且所给的端口是在合理范围内亦未被使用，则系统会使用这里设置的端口。
          如果没有设置此字段，系统会自动分配一个端口号。
          外部系统（例如，负载均衡器）可以使用此端口来确定是否给定节点上存在此 Service 的端点。
          如果创建 Service 时为不需要此配置的 Service 设置了此字段，Service 创建操作会失败。
          当更新 Service 之后不再需要此字段时（例如，变更 `type`），字段内容会被清除。
          此字段一旦设置不可被更新。
      internalTrafficPolicy:
        default: Cluster
        description: |-
          This describes how nodes distribute service traffic they receive on the ClusterIP.
          If set to `"Local"`, the proxy will assume that pods only want to talk to endpoints of the Service
          on the same node as the pod, dropping the traffic if there are no local endpoints.
          The default value, `"Cluster"`, uses the standard behavior of routing to all endpoints evenly
          (possibly modified by topology and other features).
        enum:
          - Cluster
          - Local
        type: string
        x-kab-description-zh: |-
          此字段描述节点如何处理从 ClusterIP 上收到的服务请求流量。
          如果此字段设置为 `"Local"`，则代理会假定客户端 Pod 只想与 Pod 所在节点上的 Service 端点通信，
          如果本地没有 Service 的端点，则请求流量会被丢弃。
          默认值 `"Cluster"` 表示采用默认的路由行为，将请求均衡地发送到所有端点
          （由于拓扑结构或者其他特性，可能会有一定的调整）。
      ipFamilies:
        description: |-
          A list of IP families assigned to this Service.
          This field is usually assigned automatically based on the cluster configuration and the
          `ipFamilyPolicy` field.
          If this field is specified manually, the requested family is available in the cluster,
          and `ipFamilyPolicy` allows it, it will be used; otherwise the creation of the Service will fail.

          This field is conditionally mutable. It allows for adding or removing a secondary IP family,
          but it does not allow changing the primary IP family of the Service.
          This field only applies to Services of types `"ClusterIP"`, `"NodePort"`, and `"LoadBalancer"`,
          and does apply to *headless Services* or `"ExternalName"` Services.
          This field will be wiped when updating the Service type to `"ExternalName"`.

          This field may hold a maximum of two entries (dual-stack families, in either order).
          These families must correspond to the values of the `clusterIPs` field, if specified.
          Both `clusterIPs` and `ipFamilies` are governed by the `ipFamilyPolicy` field.
        items:
          enum:
            - IPV4
            - IPv6
          minLength: 1
          type: string
        type: array
        x-kab-description-zh: |-
          此列表字段包含分配给此 Service 的 IP 地址族。
          通常，此字段会根据集群的配置和 `ipFamilyPolicy` 字段的配置而被自动赋值。
          如果手动填写此字段，并且所请求的 IP 地址族在集群中可用，并且 `ipFamilyPolicy` 允许使用所给的值，
          则 Service 会使用手动设置的 IP 地址族。否则，创建 Service 的请求会失败。

          取决于具体情况，此字段可能是可以变更的。
          变更时可以添加或删除次要的 IP 地址族，但不允许变更 Service 的主要地址族。
          此字段只能用于类型为 `"ClusterIP"`、`"NodePort"` 和 `"LoadBalancer"` 的 Service，
          不能用于**无头服务**或者 `"ExternalName"` Service。
          当 Service 类型变更为 `"ExternalName"` 时，此字段会被清除。

          此字段最多可以包含两条记录（针对双协议栈地址族，顺序任意）。
          所给的地址族必须对应于 `clusterIPs` 字段的取值（如果设置了）。
          `clusterIPs` 和 `ipFamilies` 都受控于 `ipFamilyPolicy` 字段。
        x-kubernetes-list-type: atomic
      ipFamilyPolicy:
        description: |-
          The dual-stack-ness requested or required by this Service.
          If there is no value provided, then this field will be set to `"SingleStack"`.
          The valid value can be one of:

          - `"SingleStack"`: a single IP family
          - `"PreferDualStack"`: two IP families on dual-stack configured clusters or a single IP family
            on single-stack clusters
          - `"RequireDualStack"`: two IP families on dual-stack configured clusters, otherwise fail

          The `ipFamilies` and `clusterIPs` fields depend on the value of this field.
          This field cannot be specified for `"ExternalName"` Services, and it will be wiped when
          updating the Service type to `"ExternalName"`.
        enum:
          - PreferDualStack
          - RequireDualStack
          - SingleStack
        type: string
        x-kab-description-zh: |-
          此字段用来表达 Service 对双协议栈的请求或要求。如果未设置，则默认值为 `"SingleStack"`。
          合法的取值包括：

          - `"SingleStack"`：单个 IP 族；
          - `"PreferDualStack"`：在配置了双协议栈的集群中使用两个 IP 族，在只有单个协议栈的情况下，
            使用单个 IP 族。
          - `"RequireDualStack"`：要求运行在配置了双协议栈的集群上，使用两个 IP 地址族；否则会失败。

          字段 `ipFamilies` 和 `clusterIPs` 的设置都取决于此字段的取值。
          此字段不能用于 `"ExternalName"` 的 Service，并且会在 Service 类型变为 `"ExternalService"` 时被清除。
      loadBalancerClass:
        description: |-
          The class of the load balancer implementation this Service belongs to.
          If specified, the value of this field must be a label-style identifier, with an optional prefix,
          e.g. "internal-vip" or "example.com/internal-vip".
          Unprefixed names are reserved for end-users.
          This field can only be set when the Service type is `"LoadBalancer"`.
          If not set, the default load balancer implementation is used, today this is typically done
          through the cloud provider integration, but should apply for any default implementation.
          If set, it is assumed that a load balancer implementation is watching for Services with
          a matching class.
          Any default load balancer implementation (e.g. cloud providers) should ignore Services that
          set this field.
          This field can only be set when creating or updating a Service to type `"LoadBalancer"`.
          Once set, it can not be changed. This field will be wiped when a Service is updated to a
          non `"LoadBalancer"` type.
        type: string
        x-kab-description-zh: |-
          此 Service 所属的负载均衡器实现类型。
          如果设置了此字段，则其取值必须是标签风格的标识符，可以带有前缀，例如：`"internal-vip"`
          或 `"example.com/internal-vip"`。不带前缀的名字是保留给最终用户使用的。
          只有 Service 类型为 `"LoadBalaner"` 时才可以设置此字段。

          如果没有设置此字段，Service 会使用默认的负载均衡器实现。
          目前，默认负载均衡器一般通过与云平台集成来提供，不过应该适用于大多数默认实现。
          如果设置了此字段，则假定某个负载均衡器实现正在监视带有匹配类名设置的 Service 被创建。
          所有默认的负载均衡器实现（例如，来自云平台的实现）都应该忽略设置了此字段的 Service。

          此字段一旦设置，即不可变更。当 Service 类型发生变化，不再是 `"LoadBalancer"` 类型时，
          此字段会被清除。
      loadBalancerIP:
        description: |-
          Only applies to Service type "`LoadBalancer`".
          This feature depends on whether the underlying cloud-provider supports specifying the
          `loadBalancerIP` when a load balancer is created.
          This field will be ignored if the cloud-provider does not support the feature.

          **DEPRECATED**: This field was under-specified and its meaning varies across implementations.
          Using it is non-portable and it may not support dual-stack.
          Users are encouraged to use implementation-specific annotations when available.
        type: string
        x-kab-description-zh: |-
          仅适用于 `"LoadBalancer"` 类型的服务。
          此特性取决于下层的云平台是否支持在创建负载均衡器时指定 `loadBalancerIP`。
          如果云平台不支持此特性，则此字段会被忽略。

          **已弃用**： 此字段定义不明确，对于不同的实现而言，其他含义也会有所不同。
          设置这个字段可能会导致 Service 不可移植，而且可能不支持双栈环境。
          鼓励用户使用特定于具体实现的注解。
      loadBalancerSourceRanges:
        description: |-
          If specified and supported by the platform, this will restrict traffic through the cloud-provider
          load-balancer will be restricted to the specified client IPs.
          This field will be ignored if the cloud-provider does not support the feature.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          如果设置了此字段，并且平台支持这种设置，所设置的值会限制只有指定的客户端 IP
          地址可以通过云平台的负载均衡器发送服务请求。
          如果云平台不支持这一特性，字段会被忽略。
        x-kubernetes-list-type: atomic
      ports:
        description: |-
          The list of ports that are exposed by this Service.
          Required when the Service is not a *headless service* and it is not of type `"ExternalName"`.
          The tuple of (`protocol`, `nodePort`) must be unique among all port records and
          the tuple of (`protocol`, `port`) must be unique as well.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.ServicePort'
        type: array
        x-kab-description-zh: |-
          Service 所公开的端口列表。
          当 Service 不是一个**无头服务**且不是 `"ExternalName"` 类型的服务时，需要设置。
          元组 (`protocol`,`nodePort`) 在所有端口记录中必须唯一，并且元组 (`protocol`,`port`)
          也必须唯一。
        x-kubernetes-list-map-keys:
          - port
          - protocol
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: port
        x-kubernetes-patch-strategy: merge
      publishNotReadyAddresses:
        default: false
        description: |-
          This indicates that any agent which deals with endpoints for this Service should disregard
          any indications of ready/not-ready.
          The primary use case for setting this field is for a StatefulSet's *headless Service* to propagate
          SRV DNS records for its Pods for the purpose of peer discovery.
          The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services
          interpret this to mean that all endpoints are considered **ready** even if the Pods themselves
          are not.
          Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice
          resources can safely assume this behavior.
        type: boolean
        x-kab-description-zh: |-
          此字段表明所有与此 Service 的端点打交道的客户端都应该忽略端点是否就绪这类信息。
          这一字段的主要使用场景是针对 StatefulSet 的**无头服务**使用，该无头服务的主要目的是为其中的
          Pod 提供 SRV DNS 记录，以便 Pod 之间可以相互发现对方。
          负责为 Service 生成 Endpoints 和 EndpointSlice 资源的 Kubernetes 控制器会处理此字段，
          将其解释为即使 Pod 自身还没有就绪，也可以将所有端点视为**就绪**状态。
          如果客户端仅使用 Endpoints 或 EndpointSlice 对象来访问 Kubernetes 生成的端点，
          则可以放心地假定这一情况成立。
      selector:
        additionalProperties:
          type: string
        description: |-
          Service traffic will be routed to Pods with label keys and values matching this selector.
          If empty or not present, the Service is assumed to have an external process managing its endpoints,
          which Kubernetes will not modify.
          This field is ignored if Service `type` is `"ExternalName"`.
        type: object
        x-kab-description-zh: |-
          服务流量会被路由到标签键值与此选择算符匹配的 Pod 上。
          如果此字段为空或者不存在，则可以假定存在某个外部进程替 Service 管理其端点，Kubernetes 不再管理端点。
          如果 Service 的 `type` 是 `"ExternalName"`，则此字段会被忽略。
        x-kubernetes-map-type: atomic
      sessionAffinity:
        default: None
        description: |-
          Used to maintain session affinity.
          Setting this to `"ClientIP"` enables client IP based session affinity.
        enum:
          - ClientIP
          - None
        minLength: 1
        type: string
        x-kab-description-zh: |-
          用来维持会话亲和性的配置。
          将此字段设置为 `"ClientIP"` 可以启用基于客户端 IP 的会话亲和性设置。
      sessionAffinityConfig:
        $ref: '#/definitions/io.k8s.api.core.v1.SessionAffinityConfig'
        description: |-
          The configurations of session affinity.
          It is required when `sessionAffinity` is set to `"ClientIP"` and it cannot be set when
          `sessionAffinity` is set to `"None"`.
        x-kab-description-zh: |-
          会话亲和性的具体配置。
          当 `sessionAffinity` 被设置为 `"ClientIP"` 时，需要设置此字段；
          而当 `sessionAffinity` 被设置为 `"None"` 时，不可设置。
      trafficDistribution:
        description: |-
          `trafficDistribution` offers a way to express preferences for how traffic is distributed to Service endpoints.
          Implementations can use this field as a hint, but are not required to guarantee strict adherence.
          If the field is not set, the implementation will apply its default routing strategy.
          If set to `"PreferClose"`, implementations should prioritize endpoints that are topologically close (e.g., same zone).

          This is an Alpha field that requires enabling ServiceTrafficDistribution feature.
        type: string
        x-kab-description-zh: |-
          `trafficDistribution` 为用户提供一种方式来设置如何将请求流量分布到 Service 的各个端点之上。
          具体的实现中，可以将此字段设置值作为一种提示信息，但并不要求严格意义上的一致。
          如果未设置此字段，则实现会应用其默认的路由策略。
          如果设置为 `"PreferClose"`，则实现会将拓扑逻辑上更近的端点（例如，同一节点）的优先级提高。

          此字段处于 Alpha 阶段，需要启用 ServiceTrafficDistribution 特性。
      type:
        default: ClusterIP
        description: |-
          This field determines how the Service is exposed.

          - `"ClusterIP"`: allocates a cluster internal IP address for load-balancing to endpoints.
            Endpoints are determined by the `selector` or if that is not specified, by manual
            construction of an Endpoints object or EndpointSlice ojbects. If `clusterIP`
            is `"None"`, no virtual IP is allocated and the endpoints are published as
            a set of Endpoints rather than a virtual IP.
          - `"NodePort"`: builds on `"ClusterIP"` and allocates a port on every node which routes to
            the same Endpoints as the `clusterIP`.
          - `"LoadBalancer"`: builds on `"NodePort"` and creates an external load-balancer
            (if supported in the current cloud) which routes to the same Endpoints as the `clusterIP`.
          - `"ExternalName"` - aliases this Service to the specified `externalName`.
            The service consists of only a reference to an external name that DNS will return as
            a CNAME record, without exposing or proxying of any Pods involved.
            Several other fields do not apply to `"ExternalName"` Services.
        enum:
          - ClusterIP
          - ExternalName
          - LoadBalancer
          - NodePort
        type: string
        x-kab-description-zh: |-
          此字段用来确定 Service 的公开方式。

          - `"ClusterIP"`：分配一个用来为端点集合提供负载均衡的集群内部 IP 地址。
            端点可以通过 `selector` 来确定；或者如果没有设置 `selector` 的情况下也可以通过手动构造
            Endpoints 或 EndpointSlice 对象来确定。
            如果 Service 的 `clusterIP` 为 `"None"`，则不再为 Service 分配虚拟 IP 地址，
            所有服务端点都直接发布为一组 Endpoints 而不是共享一个虚拟 IP 地址。
          - `"NodePort"`：在 `"ClusterIP"` 的基础上构建，会在所有节点上分配一个端口，
            并指向该端口的流量都路由到 `clusterIP` 所代表的端点集合。
          - `"LoadBalancer"`：基于 `"NodePort"` 构建，会创建一个外部的负载均衡器
            （如果当前云环境支持）来将流量路由到 `clusterIP` 所代表的同一个端点集合。
          - `"ExternalName"`：为此 Service 设置一个通过 `externalName` 给定的别名。
            此 Service 只包含一个对外部名称的引用，DNS 会针对该名称返回一个 CNAME 记录。
            这种类型的 Service 不会涉及到公开 Pod 或者为其代理流量的事务。
            Service 中有若干其他字段不适用于 `"ExternalName"` 类型的 Service。
    type: object
    x-kab-description-zh: Service 对象的规约。
  io.k8s.api.core.v1.ServiceStatus:
    description: The current status of a Service.
    properties:
      conditions:
        description: Current Service state.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
        type: array
        x-kab-description-zh: Service 的当前状况。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      loadBalancer:
        $ref: '#/definitions/io.k8s.api.core.v1.LoadBalancerStatus'
        description: The current status of the load-balancer, if one is present.
        x-kab-description-zh: 负载均衡器的当前状态（如果有的话）。
    type: object
    x-kab-description-zh: Service 的当前状态。
  io.k8s.api.core.v1.SessionAffinityConfig:
    description: The configuration for session affinity.
    properties:
      clientIP:
        $ref: '#/definitions/io.k8s.api.core.v1.ClientIPConfig'
        description: The configuration for client IP based session affinity.
        x-kab-description-zh: 针对客户端 IP 会话亲和性的配置。
    required:
      - clientIP
    type: object
    x-kab-description-zh: 会话亲和性的配置。
  io.k8s.api.core.v1.SleepAction:
    description: SleepAction describes a _sleep_ action.
    properties:
      seconds:
        description: |-
          Seconds is the number of seconds to sleep.
          The number must be greater than 0 and less than `terminationGracePeriodSeconds`.
        format: int64
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此字段为睡眠的秒数。
          字段值必须大于零，并且小于 `terminationGracePeriodSeconds` 的数值。
    required:
      - seconds
    type: object
    x-kab-description-zh: SleepAction 描述的是睡眠动作。
  io.k8s.api.core.v1.StorageOSPersistentVolumeSource:
    description: A StorageOS persistent volume resource.
    properties:
      fsType:
        default: ext4
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-definitions-zh: 要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型之一。
      readOnly:
        default: false
        description: Force the volume to be mounted in read-only mode.
        type: boolean
        x-kab-definitions-zh: 强制以只读模式挂载卷。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          Reference to a Secret to use for obtaining the StorageOS API credentials.
          If not specified, default values will be attempted.
          When specified, the `name` and `namespace` fields must be specified as valid DNS_LABEL strings.
        x-kab-description-zh: |-
          对某 Secret 资源的引用，该 Secret 可用来获得 StorageOS API 访问凭据。
          如果未设置此字段，系统会尝试使用默认值。
          如果设置了此字段，则 `name` 和 `namespace` 都必须设置，并且都是合法的 DNS_LABEL 字符串。
      volumeName:
        description: |-
          The human-readable name of the StorageOS volume.
          Volume names are only unique within a namespace. The string must be a valid DNS label.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          人类可读的一个字符串，用作 StorageOS 卷的名称。卷名称仅在名字空间内唯一。
          所给的字符串必须是合法的 DNS 标签。
      volumeNamespace:
        description: |-
          The scope of the volume within StorageOS.
          If no namespace is specified then the Pod's namespace will be used.
          This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set `volumeName` to any name to override the default behaviour.
          Set to `"default"` if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          When specified, the string must be a valid DNS label.
        type: string
        x-kab-description-zh: |-
          卷在 StorageOS 中的作用域。如果没有设置名字空间，则会使用 Pod 的名字空间。
          这个字段的设计使得用户可以在 StorageOS 中模拟 Kubernetes 的名字作用域，实现更紧密的集成。
          将 `volumeName` 设置为任何其他的名称都会重载默认的行为。
          如果你没有在 StorageOS 中使用名字空间，可以将此字段设置为 `"default"`。
          在 StorageOS 中之前不存在的名字空间会被自动创建。
          如果设置了此字段，其取值必须是合法的 DNS 标签。
    required:
      - volumeName
    type: object
    x-kab-description-zh: StorageOS 持久卷资源。
  io.k8s.api.core.v1.StorageOSVolumeSource:
    description: A StorageOS persistent volume resource.
    properties:
      fsType:
        default: ext4
        description: |-
          Filesystem type to mount. Must be a filesystem type supported by the host operating system.
          Implicitly inferred to be `"ext4"` if unspecified.
        type: string
        x-kab-definitions-zh: |-
          要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统类型之一。
          若为指定，则假设为 `"ext4"`。
      readOnly:
        default: false
        description: |-
          Defaults to `false` (read/write).
          `readOnly` here will force the `readOnly` setting in `volumeMounts`.
        type: boolean
        x-kab-description-zh: |-
          默认为 `false` 支持可读可写的挂载。
          这里设置 `readOnly` 为 `true` 时，会强制 `volumeMounts` 中 `readOnly` 也设置为 `true`。
      secretRef:
        $ref: '#/definitions/io.k8s.api.core.v1.LocalObjectReference'
        description: |-
          The Secret to use for obtaining the StorageOS API credentials.
          If not specified, default values will be attempted.
          When specified, the `name` cannot be empty.
        x-kab-description-zh: |-
          对某 Secret 资源的引用，该 Secret 可用来获得 StorageOS API 访问凭据。
          如果未设置此字段，系统会尝试使用默认值。
          如果设置了此字段，则 `name` 必须设置。
      volumeName:
        description: |-
          The human-readable name of the StorageOS volume.
          Volume names are only unique within a namespace and must be a valid DNS label.
        type: string
        x-kab-description-zh: |-
          人类可读的一个字符串，用作 StorageOS 卷的名称。卷名称仅在名字空间内唯一。
          所给的字符串必须是合法的 DNS 标签。
      volumeNamespace:
        description: |-
          The scope of the volume within StorageOS.
          If no namespace is specified then the Pod's namespace will be used.
          This allows the Kubernetes name scoping to be mirrored within StorageOS for tighter integration.
          Set `volumeName` to any name to override the default behaviour.
          Set to `"default"` if you are not using namespaces within StorageOS.
          Namespaces that do not pre-exist within StorageOS will be created.
          The string, if specified, must be a valid DNS label.
        type: string
        x-kab-description-zh: |-
          卷在 StorageOS 中的作用域。如果没有设置名字空间，则会使用 Pod 的名字空间。
          这个字段的设计使得用户可以在 StorageOS 中模拟 Kubernetes 的名字作用域，实现更紧密的集成。
          将 `volumeName` 设置为任何其他的名称都会重载默认的行为。
          如果你没有在 StorageOS 中使用名字空间，可以将此字段设置为 `"default"`。
          在 StorageOS 中之前不存在的名字空间会被自动创建。
          如果设置了此字段，其取值必须是合法的 DNS 标签。
    required:
      - volumeName
    type: object
    x-kab-description-zh: StorageOS 持久卷资源。
  io.k8s.api.core.v1.Sysctl:
    description: A kernel parameter to set.
    properties:
      name:
        description: |-
          Name of a property to set. The name contains several segments separated with dots where
          each segment can contain alphanumeric characters, `'-'` and `'_'`.
          `'-'` and `'_'` cannot appear at the start or end, though.
        maxLength: 253
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要设置的属性的名称。名称可以包含多个用句点（`'.'`）隔开的部分，每个部分都可以包含字母、数字、
          `'-'` 和 `'_'`。 `'-'` 和 `'_'` 不能作为首尾字母。
      value:
        description: Value of a property to set.
        minLength: 1
        type: string
        x-kab-description-zh: 要设置的属性值。
    required:
      - name
      - value
    type: object
    x-kab-description-zh: 一个要设置的内核参数。
  io.k8s.api.core.v1.TCPSocketAction:
    description: TCPSocketAction describes an action based on opening a socket.
    properties:
      host:
        description: Host name to connect to, defaults to the Pod IP.
        type: string
        x-kab-description-zh: 要连接到的主机名，默认为 Pod IP 地址。
      port:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          Number or name of the port to access on the container.
          Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME.
        x-kab-description-zh: |-
          容器上要访问的端口的端口号或名称。
          端口号码必须在 1 和 65535 之间。端口名称必须是 IANA_SVC_NAME。
    required:
      - port
    type: object
    x-kab-description-zh: TCPSocketAction 描述某个基于打开的套接字来执行的动作。
  io.k8s.api.core.v1.Taint:
    description: The node this Taint is attached to has the `effect` on any Pod that
      does not tolerate the Taint.
    properties:
      effect:
        description: |-
          The effect of the taint on Pods that do not tolerate the taint.
          Possible enum values:

          - `"NoExecute"` Evict any already-running Pods that do not tolerate the taint.
            Currently enforced by the node controller.
          - `"NoSchedule"` Do not allow new Pods to schedule onto the node unless they tolerate the taint,
            but allow all Pods submitted to Kubelet without going through the scheduler to start,
            and allow all already-running Pods to continue running. Enforced by the scheduler.
          - `"PreferNoSchedule"` Like `"NoSchedule"`, but the scheduler tries not to schedule new Pods
            onto the node, rather than prohibiting new Pods from scheduling onto the node entirely.
            Enforced by the scheduler.
        enum:
          - NoExecute
          - NoSchedule
          - PreferNoSchedule
        type: string
        x-kab-description-zh: |-
          节点上的此污点对于无法忍受该污点的 Pod 的影响。可选的枚举值有：

          - `"NoExecute"`： 驱逐已经被运行的、无法忍受该污点的 Pod。目前由节点控制器保证这一点。
          - `"NoSchedule"`：不允许新的 Pod 被调度到该节点，除非 Pod 能够忍受该污点，但允许通过 kubelet
            提交的 Pod 不经过调度器的调度而启动，并且允许已经运行的 Pod 继续运行。由调度器保证。
          - `"PreferNoSchedule"`： 与 `"NoSchedule"` 类似，但是调度器会尽量不向节点调度新的 Pod，
            而不是完全杜绝向节点调度新 Pod。此效果由调度器保证。
      key:
        description: The taint key to be applied to a node. The string must be a qualified
          name. It must consist of alphanumeric characters, `'-'`, `'_'`, or `'.'`
          and must start and end with an alphanumeric character. The prefix, if exists,
          must be a valid DNS subdomain name. The name part may have at most 63 characters.
        minLength: 1
        type: string
        x-kab-description-zh: 要向节点添加的污点主键。字符串必须是限定名。 也就是主键只能包含字母、数字、`'-'`、`'_'` 或者
          `'.'`，并且必须以字母或数字开头并结尾。 如果字符串中包含前缀，则前缀必须是合法的 DNS 子域名。 名字部分最长为 63 个字符。
      timeAdded:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The time at which the taint was added. It is only written for
          `"NoExecute"` taints.
        x-kab-description-zh: 添加污点的时间。只有 `"NoExecute"` 污点才会添加这个时间。
      value:
        description: The taint value corresponding to the taint key. The value must
          be an empty string or consists of alphanumeric characters, `'-'`, `'_'`
          or `'.'`, and it must start and end with an alphanumeric character.
        maxLength: 63
        type: string
        x-kab-description-zh: 与污点主键对应的值。此字符串可以是空字符串，或者由字母、数字、`'-'`、`'_'` 或 `'.'` 组成。
          字符串必须以字母或数字开头并结尾。
    required:
      - effect
      - key
    type: object
    x-kab-description-zh: 关联此 Taint 的节点对于无法忍受该 Taint 的所有 Pod 而言具有效果 `effect`。
  io.k8s.api.core.v1.Toleration:
    description: |-
      The Pod this toleration attached to can tolerate any Taint that matches the triple
      (`key`,`value`,`effect`) using the matching `operator`.
    properties:
      effect:
        description: |-
          The taint effect to match.

          - `""`: Empty string means matching all taint effects.
          - `"NoExecute"`: Evict any already-running Pods that do not tolerate the taint.
            Currently enforced by the node controller.
          - `"NoSchedule"`: Do not allow new Pods to schedule onto the Node unlesss they tolerate the
            taint, but allow Pods submitted to kubelet without going through the scheduler
            to start, and allow all already-running Pods to continue running.
            Enforced by the scheduler.
          - `"PreferNoSchedule"`: The scheduler tries not to schedule new Pods onto the node,
            rather than prohibiting new Pods from being scheduled to the node entirely.
            This is enforced by the scheduler.
        enum:
          - ''
          - NoExecute
          - NoSchedule
          - PreferNoSchedule
        type: string
        x-kab-description-zh: |-
          要匹配的污点效果：

          - `""`：空字符串可以匹配所有的污点效果。
          - `"NoExecute"`： 驱逐已经被运行的、无法忍受该污点的 Pod。目前由节点控制器保证这一点。
          - `"NoSchedule"`：不允许新的 Pod 被调度到该节点，除非 Pod 能够忍受该污点，但允许通过 kubelet
            提交的 Pod 不经过调度器的调度而启动，并且允许已经运行的 Pod 继续运行。由调度器保证。
          - `"PreferNoSchedule"`：调度器会尽量不向节点调度新的 Pod，而不是完全杜绝向节点调度新 Pod。
            此效果由调度器保证。
      key:
        description: |-
          The taint key that the toleration applies to.
          If the `key` is empty, `operator` must be `"Exists"`;
          this combination means to match all values and all keys.
          If it is not empty, it must be a valid label name.
        type: string
        x-kab-description-zh: 容忍度适用的污点主键。如果 `key` 为空字符串，则 `operator` 必须是 `"Exists"`。
          这种组合意味着匹配所有的值和主键。 如果 `key` 不是空字符串，则字段值需要是合法的标签名。
      operator:
        default: Equal
        description: |-
          A key's relationship to the value. The value can be

          - `"Equal"` (default), the `value` property must be a valid label value.
          - `"Exists"`: equivalent to wildcard for `value`, it means a Pod can tolerate all taints of
            a particular category, so the `value` field must be empty.
          - `""`: An empty `operator` is equivalent to `"Equal"`.
        enum:
          - Equal
          - Exists
        type: string
        x-kab-description-zh: |-
          主键与值之间的关系。此字段可以是：

          - `"Equal"`（默认值）：`value` 属性必须是一个合法的标签值；
          - `"Exists"`：等价于为 `value` 提供的通配符，意味着 Pod 可以容忍特定类别的所有污点，
            因此 `value` 字段必须为空。
          - `""`：`operator` 为空字符串时等价于 `"Equal"`。
      tolerationSeconds:
        description: |-
          A period of time the toleration tolerates the taint.
          When this field is set, the `effect` must be `"NoExecute"`.
          By default, it is not set, which means tolerating the taint forever (do not evict).
          Zero and negative values will be treated as 0 (evict immediately) by the system.
        format: int64
        type: integer
        x-kab-description-zh: |-
          容忍度能够容忍污点的时长。如果设置了此字段，则 `effect` 必须是 `"NoExecute"`。
          默认情况下，这个字段是不设置的，也就意味着会一直容忍污点（不会被驱逐）。
          字段值为 0 或者负数时，按 0 处理（立即驱逐 Pod）。
      value:
        description: |-
          The taint value the toleration matches to.
          If the operator is `"Exists"`, the value should be empty (`""`), otherwise just a regular string.
        type: string
        x-kab-description-zh: |-
          容忍度所匹配的污点值。
          如果 `operator` 是 `"Exists"`，则此值应该是空字符串（`""`），否则是一个正常的字符串。
    type: object
    x-kab-description-zh: |-
      关联了此容忍度的 Pod 可以容忍用 `operator` 结合 (`key`,`value`,`effect`) 三元组匹配到的
      所有 Taint。
  io.k8s.api.core.v1.TopologySelectorLabelRequirement:
    description: |-
      A topology selector requirement is a selector that matches given label.
      This is an Alpha feature and may change in the future.
    properties:
      key:
        description: The label key that the selector applies to.
        minLength: 1
        type: string
        x-kab-description-zh: 选择算符所适用的标签主键。
      values:
        description: |-
          An array of string values. One value must match the label to be selected.
          Each entry in Values is ORed.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          字符串数组值。其中有一个值与标签取值相同才会选中。
          执行判断时要对 `values` 中的所有条目取逻辑或（OR）运算。
        x-kubernetes-list-type: atomic
    required:
      - key
      - values
    type: object
    x-kab-description-zh: |-
      拓扑选择需求是一个用给定标签来做选择的算符。
      此特性处于 Alpha 阶段，将来可能会变更。
  io.k8s.api.core.v1.TopologySelectorTerm:
    description: |-
      A topology selector term represents the result of label queries.
      A null or empty term matches no objects. The requirements of them are ANDed.
      It provides a subset of functionality as NodeSelectorTerm.
      This is an Alpha feature and may change in the future.
    properties:
      matchLabelExpressions:
        description: A list of topology selector requirements by labels.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySelectorLabelRequirement'
        type: array
        x-kab-description-zh: 按标签执行拓扑选择条件的列表。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      此结构表达一种拓扑选择条件，根据标签查询判定结果。
      条件为 null 或者空的时候，不会匹配任何对象。判定时会对各个需求进行逻辑与（AND）运算。
      此结构所表达的是 NodeSelectorTerm 的功能的一个子集。
      此结构目前处于 Alpha 阶段，将来版本中可能会变更。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.TopologySpreadConstraint:
    description: How to spread matching Pods among the given topology.
    properties:
      labelSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Label selector used to find matching Pods.
          Pods that match this label selector are counted to determine the number of Pods in
          their corresponding topology domain.
        x-kab-description-zh: |-
          用来过滤 Pod 集合的标签选择算符。
          在确定各个对应的拓扑域（Topology Domain）中 Pod 个数时，仅统计与此标签选择算符匹配的 Pod。
      matchLabelKeys:
        description: |-
          This is a set of Pod label keys to select the Pods over which spreading will be calculated.
          The keys are used to lookup values from the incoming Pod labels, those key-value labels are
          AND'ed with `labelSelector` to select the group of existing Pods over which spreading will be
          calculated for the incoming Pod.
          The same key is forbidden to exist in both `matchLabelKeys` and `labelSelector`.
          `matchLabelKeys` cannot be set when `labelSelector` isn't set. Keys that don't exist
          in the incoming Pod `labels` will be ignored.
          A null or empty list means only match against `labelSelector`.

          This is a Beta field and requires the `MatchLabelKeysInPodTopologySpread` feature gate
          to be enabled (enabled by default).
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          此字段为一组 Pod 标签主键。这些主键被用来选择用来计算分布状态的 Pod。
          所使用的主键被用来查询新 Pod 上的标签取值。
          为新 Pod 计算拓扑分布状况时，需要选择一组现有的 Pod。
          选择这组 Pod 的条件是要求它们满足这里的标签键值，**同时**要满足 `labelSelector` 所给条件。

          同一个标签主键不可以同时用于 `matchLabelKeys` 和 `labelSelector`。
          如果没有设置 `labelSelector`，则不允许设置 `matchLabelKeys`。
          在新 Pod 的 `labels` 中不存的的标签主键会被忽略。
          如果此字段值为 null （未设置）或者为空列表，则意味着仅使用 `labelSelector` 来过滤 Pod。

          此字段处于 Beta 阶段，需要启用 `MatchLabelKeysInPodTopologySpread` 特性门控。
        x-kubernetes-list-type: atomic
      maxSkew:
        default: 1
        description: |-
          The degree to which Pods may be unevenly distributed. When `whenUnsatisfiable="DoNotSchedule"`,
          it is the maximum permitted difference between the number of matching Pods in the target topology
          and the global minimum.
          The global minimum is the minimum number of matching Pods in an eligible domain or zero if the
          number of eligible domains is less than `minDomains`. For example, in a 3-zone cluster,
          `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as '2/2/1'.
          In this case, the global minimum is 1.

          ```
          +-------+--------+--------+
          | zone1 | zone2  | zone3  |
          +-------+--------+--------+
          |   PP  |  PP    |    P   |
          +-------+--------+--------+
          ``

          - If `maxSkew` is 1, incoming Pod can only be scheduled to zone3 to become 2/2/2;
            scheduling it onto zone1(zone2) would make the actual skew (3-1) on zone1(zone2)
            violate `maxSkew(1)`.
          - If `maxSkew` is 2, incoming Pod can be scheduled onto any zone.

          When `whenUnsatisfiable="ScheduleAnyway"`, it is used to give higher precedence to
          topologies that satisfy it.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          可接受的 Pod 分布不均衡程度。

          当 `whenUnsatisfiable` 为 `"DoNotSchedule"` 时，此字段表示的是目标拓扑中匹配的 Pod
          个数与**全局最小值（Global Minimum）**之间可接受的最大偏差。
          所谓全局最小值是指某个候选拓扑域中匹配的 Pod 个数的最小值。如果候选域的个数少于 `minDomains`
          时，全局最小值为 0。

          例如，对于一个分布在 3 个可用区的集群，`maxSkew` 为 1，具有相同的 `labelSelector` 的
          Pod 的分布状况是 '2/2/1'。这时，全局最小值为 1。

          ```
          +-------+--------+--------+
          | zone1 | zone2  | zone3  |
          +-------+--------+--------+
          |   PP  |  PP    |    P   |
          +-------+--------+--------+
          ``

          - 如果 `maxSkew` 为 1，则新的 Pod 只能被调度到 zone3，形成 '2/2/2' 的分布；
            将它调度到 zone1（或 zone2），会使 zone1（或 zone2）上实际的偏差（skew）值变为 3-1，
            因此违反了 `maxSkow` 为 1 的要求。
          - 如果 `maxSkew` 为 2，则新的 Pod 可以被调度到任何一个可用区中。

          当 `whenUnsatisfiable` 被设置为 `"ScheduleAnyway"` 时，
          调度器用此阈值来优选能够满足偏差约束的调度方案。
      minDomains:
        description: |-
          This indicates a minimum number of eligible domains.
          When the number of eligible domains with matching topology keys is less than `minDomains`,
          Pod topology ppread treats `"global minimum"` as 0, and then the calculation of `skew` is performed.
          And when the number of eligible domains with matching topology keys equals or greater than
          `minDomains`, this value has no effect on scheduling.
          As a result, when the number of eligible domains is less than `minDomains`, scheduler won't
          schedule more than `maxSkew` Pods to those domains.
          If value is nil, the constraint behaves as if `minDomains` is equal to 1.
          Valid values are integers greater than 0. When value is not nil, `whenUnsatisfiable` must be
          `"DoNotSchedule"`.

          For example, in a 3-zone cluster, `maxSkew` is set to 2, `minDomains` is set to 5 and Pods with
          the same labelSelector spread as 2/2/2:

          ```
          +---------+---------+---------+
          |  zone1  |  zone2  |  zone3  |
          |   P P   |   P P   |   P P   |
          +---------+---------+---------+
          ```

          The number of domains is less than 5 (`minDomains`), so **global minimum** is treated as 0.
          In this situation, new Pod with the same `labelSelector` cannot be scheduled,
          because computed skew will be 3 (3 - 0) if a new Pod is scheduled to any of the three zones,
          it will violate `maxSkew`.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段用来给出候选拓扑域的最小数目。
          当带有匹配拓扑主键的候选域个数小于 `minDomains` 阈值时，Pod 拓扑分布机制将其视为**全局最小值**为
          0 的情况来处理，继续计算偏差（skew）情况。
          当带有匹配拓扑主键的候选域个数等于或者大于 `minDomains` 阈值时，此字段值对调度没有影响。
          因此，当候选拓扑域的个数小于 `minDomains` 时，调度器向某个拓扑域调度的 Pod 个数不会超过 `maxSkew`。

          如果 `minDomains` 没有设置，则拓扑分布机制的行为好像 `minDomains` 被设置为 1 一样。
          此字段的合法值是一个大于 0 的整数。如果设置了此字段，`whenUnsatisfiable` 只能是 `"DoNotSchedule"`。

          例如，在一个跨 3 个可用区的集群中，`maxSkew` 被设置为 2，`minDomains` 被设置为 5，
          具有 `labelSelector` 的 Pod 的当前分布状况是 '2/2/2'。

          ```
          +---------+---------+---------+
          |  zone1  |  zone2  |  zone3  |
          |   P P   |   P P   |   P P   |
          +---------+---------+---------+
          ```

          候选拓扑域的个数小于 5（`minDomains`），所以**全局最小值**被视为 0。
          在这种情况下，新的匹配 `labelSelector` 的 Pod 无法被调度，因为 Pod 被调度到这三个可用区中任何一个，
          都会导致计算得到的偏差值为 3（3 - 0），因而违反了 `maxSkew` 所设置的约束。
      nodeAffinityPolicy:
        description: |-
          This indicates how we will treat Pod's `nodeAffinity.nodeSelector` when calculating Pod topology
          spread skew. Options are:
          - `"Honor"`: only nodes matching `nodeAffinity.nodeSelector` are included in the calculations.
          - `"Ignore"`: `nodeAffinity.nodeSelector` are ignored. All nodes are included in the calculations.

          If this value is nil, the behavior is equivalent to the `Honor` policy.

          This is a Beta-level feature default enabled by the `NodeInclusionPolicyInPodTopologySpread`
          feature flag.
        type: string
        x-kab-description-zh: |-
          此字段表明在计算 Pod 分布偏差时，如何对待 Pod 的节点亲和性（`nodeAffinity.nodeSelector`）。
          可以选择的选项包括：

          - `"Honor"`：只有符合 `nodeAffinity.nodeSelector` 的节点会被纳入计算中；
          - `"Ignore"`：忽略 `nodeAffinity.nodeSelector` 设置，所有节点都被纳入计算中。

          如果此字段未设置，默认行为是按照 `"Honor"` 策略处理。

          此特性处于 Beta 阶段，受 `NodeInclusionPolicyInPodTopologySpread` 特性门控控制。
      nodeTaintsPolicy:
        description: |-
          This indicates how we will treat node taints when calculating pod topology spread skew.

          - `"Honor"`: nodes without taints, along with tainted nodes for which the incoming Pod
            has a toleration, are included.
          - `"Ignore"`: node taints are ignored. All nodes are included.

          If this value is nil, the behavior is equivalent to the `"Ignore"` policy.
          This is a Beta feature default enabled by the `NodeInclusionPolicyInPodTopologySpread` feature.
        type: string
        x-kab-description-zh: |-
          此字段表明在计算 Pod 拓扑分布偏差时，如何处理节点污点。可选项有：

          - `"Honor"`：没有污点的节点以及所标污点可被 Pod 容忍的节点会被纳入计算；
          - `"Ignore"`：忽略节点污点，将所有节点纳入计算。

          此字段未设置时，行为相当于 `"Ignore"` 策略。

          此特性处于 Beta 阶段，受 `NodeInclusionPolicyInPodTopologySpread` 特性门控控制。
      topologyKey:
        description: |-
          The key of node labels.
          Nodes that have a label with this key and identical values are considered to be in the same
          topology. We consider each `<key, value>` as a bucket, and try to put balanced number of Pods
          into each bucket. We define a domain as a particular instance of a topology. Also, we
          define an eligible domain as a domain whose nodes meet the requirements of `nodeAffinityPolicy`
          and `nodeTaintsPolicy`. e.g. If `topologyKey` is `"kubernetes.io/hostname"`, each Node
          is a domain of that topology. And, if `topologyKey` is `"topology.kubernetes.io/zone"`,
          each zone is a domain of that topology. This is a required field.
        type: string
        x-kab-description-zh: |-
          此字段值为节点的标签主键之一。
          具有此标签主键，且对应标签值相同的节点被视为处于同一个拓扑（Topology）。
          如果将 `<键,值>` 视为一个容器，则 Pod 拓扑分布的目标是让分布到不同容器中的 Pod 个数基本均衡。
          域（Domain）是拓扑的一个特定实例。候选域（Eligible Domain）是一个其中节点满足
          `nodeAffinityPolicy` 和 `nodeTaintsPolicy` 要求的域。
          例如，如果 `topologyKey` 为 `"kubernetes.io/hostname"`，每个节点都是该拓扑的一个域。
          如果 `topologyKey` 为 `"topology.kubernetes.io/zone"`，每个可用区是该拓扑的一个域。

          此字段是必需字段。
      whenUnsatisfiable:
        default: DoNotSchedule
        description: |-
          This indicates how to deal with a Pod if it doesn't satisfy the spread constraint.

          - `"DoNotSchedule"` (default) tells the scheduler not to schedule it.
          - `"ScheduleAnyway"` tells the scheduler to schedule the Pod in any location,
            but giving higher precedence to topologies that would help reduce the skew.

          A constraint is considered `"Unsatisfiable"` for an incoming Pod if and only if
          every possible node assigment for that Pod would violate `maxSkew` on some topology.

          For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector`
          spread as 3/1/1:

          ```
          +-------+--------+--------+
          | zone1 | zone2  | zone3  |
          | P P P |    P   |   P    |
          +-------+--------+--------+
          ```

          If `whenUnsatisfiable` is set to `"DoNotSchedule"`, incoming Pod can only be scheduled to
          zone2(zone3) to become 3/2/1(3/1/2) as actual skew (2-1) on zone2(zone3) satisfies `maxSkew` (1).
          In other words, the cluster can still be imbalanced, but scheduler won't make it **more**
          imbalanced.
        enum:
          - DoNotSchedule
          - ScheduleAnyway
        type: string
        x-kab-description-zh: |-
          此字段表明如何处理不能满足拓扑分布约束的 Pod。

          - `"DoNotSchedule"`（默认值）：通知调度器不要调度该 Pod；
          - `"ScheduleAnyway"`：通知调度器继续调度 Pod，优选能够减少偏差的拓扑域。

          如果 Pod 被调度到任何节点都会违反某个拓扑所设置的 `maxSkew`，那么这个约束就被视为
          `"Unsatisfiable"`（无法被满足）。
          例如，在一个跨 3 个可用区的集群中，`maxSkew` 取值 1，满足同一 `labelSelector` 的 Pod
          的当前分布为 '3/1/1'：

          ```
          +-------+--------+--------+
          | zone1 | zone2  | zone3  |
          | P P P |    P   |   P    |
          +-------+--------+--------+
          ```

          如果 `whenUnsatisfiable` 被设置为 `"DoNotSchedule"`，则新的 Pod 只能被调度到 zone2（或 zone3），
          形成 '3/2/1'（或 '3/1/2'）的分布，因为 zone2（或 zone3）上的实际偏差为 2 - 1，能够满足
          `maxSkew` 约束。换言之，集群仍然是不均衡的，但调度器不会让集群变得更加不均衡。
    required:
      - maxSkew
      - topologyKey
      - whenUnsatisfiable
    type: object
    x-kab-description-zh: 根据给定的拓扑来分布匹配到的 Pod 集合。
  io.k8s.api.core.v1.TypedLocalObjectReference:
    description: Information for locating the typed referenced object inside the same
      namespace.
    properties:
      apiGroup:
        description: |-
          The group for the resource being referenced.
          If not specified, the specified `kind` must be in the `"core"` API group.
        type: string
        x-kab-description-zh: |-
          被引用的资源对象所属的 API 组。
          如果未指定则视为空字符串，意味着所给的 `kind` 必须位于 `"core"` API 组中。
      kind:
        description: The kind for the resoruce being referenced.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源对象的类别。
      name:
        description: The name of resource being referenced.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源对象的名称。
    required:
      - kind
      - name
    type: object
    x-kab-description-zh: 关于引用当前名字空间中某个指定类型的对象的的信息。
    x-kubernetes-map-type: atomic
  io.k8s.api.core.v1.TypedObjectReference:
    description: Information for locating an object across namespaces.
    properties:
      apiGroup:
        description: |-
          The group for the resource being referenced.
          If `apiGroup` is not specified, the specified `kind` must be in the core API group.
          For any other third-party types, `apiGroup` is required.
        type: string
        x-kab-description-zh: |-
          所引用的资源对应的 API 组。
          如果未指定，则视为空字符串，即所引用的 `kind` 必须位于 `"core"` API 组。
          针对其他类别，需要设置 `apiGroup`。
      kind:
        description: |-
          The type of resource being referenced.
          This must be "PersistentVolumeClaim" if `apiGroup` is empty string.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源的类别。目前，引用 `"core"` API 组时，只能引用 `"PersistentVolumeClaim"`。
      name:
        description: The name of resource being referenced.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的名称。
      namespace:
        description: |-
          The namespace of resource being referenced.
          Note that when a namespace is specified, a `gateway.networking.k8s.io/ReferenceGrant`
          object is required in the referent namespace to allow that namespace's owner to accept
          the reference.
          See the ReferenceGrant documentation for details.

          This field is Alpha-level, and it requires the `CrossNamespaceVolumeDataSource` feature gate
          to be enabled. When specified, the namespace string must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          被引用资源所在名字空间。
          注意，如果指定了名字空间，需要在被引用的 Namespace 设置 `gateway.networking.k8s.io/ReferenceGrant`
          对象，从而允许该名字空间的属主接受此引用。
          参见 ReferenceGrant 文档了解详情。
          字段值必须是合法的 DNS 子域名。

          此字段为 Alpha 阶段，需要启用 `CrossNamespaceVolumeDataSource` 特性门控。
    required:
      - kind
      - name
    type: object
    x-kab-description-zh: 用来跨名字空间引用资源对象的信息。目前用于引用 PVC 对象。
  io.k8s.api.core.v1.Volume:
    description: Volume represents a named volume in a Pod that may be accessed by
      any container in the Pod.
    properties:
      awsElasticBlockStore:
        $ref: '#/definitions/io.k8s.api.core.v1.AWSElasticBlockStoreVolumeSource'
        description: An AWS Disk resource that is attached to a kubelet's host machine
          and then exposed to the Pod.
        x-kab-description-zh: 挂接到 kubelet 所在的主机之后提供给 Pod 使用的 AWS Disk 资源。
      azureDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.AzureDiskVolumeSource'
        description: An Azure Data Disk mount on the host and bind mount to the Pod.
        x-kab-description-zh: 挂载到主机之后绑定挂载给 Pod 使用的 AWS Data Disk。
      azureFile:
        $ref: '#/definitions/io.k8s.api.core.v1.AzureFileVolumeSource'
        description: An Azure File Service mount on the host and bind mount to the
          Pod.
        x-kab-description-zh: 挂载到主机之后绑定挂载给 Pod 使用的 AWS File Service。
      cephfs:
        $ref: '#/definitions/io.k8s.api.core.v1.CephFSVolumeSource'
        description: A Ceph FS mount on the host that shares a Pod's lifetime.
        x-kab-description-zh: 挂载到主机并与 Pod 生命周期相同的 Ceph FS。
      cinder:
        $ref: '#/definitions/io.k8s.api.core.v1.CinderVolumeSource'
        description: A Cinder volume attached and mounted on kubelets host machine.
        x-kab-description-zh: 挂接并挂载到 kubelet 所在主机的 Cinder 卷。
      configMap:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapVolumeSource'
        description: A ConfigMap that should populate this volume.
        x-kab-description-zh: 负责填充此卷内容的一个 ConfigMap。
      csi:
        $ref: '#/definitions/io.k8s.api.core.v1.CSIVolumeSource'
        description: An ephemeral storage that is handled by certain external CSI
          drivers (Beta feature).
        x-kab-description-zh: 由某外部 CSI 驱动来处理的临时存储（Beta 特性）。
      downwardAPI:
        $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIVolumeSource'
        description: Downward API about the Pod that should populate this volume.
        x-kab-description-zh: 要负责填充此卷的、关于此 Pod 的 Downward API。
      emptyDir:
        $ref: '#/definitions/io.k8s.api.core.v1.EmptyDirVolumeSource'
        description: A temporary directory that shares a Pod's lifetime.
        x-kab-description-zh: 与 Pod 生命周期完全相同的一个临时目录。
      ephemeral:
        $ref: '#/definitions/io.k8s.api.core.v1.EphemeralVolumeSource'
        description: |-
          此字段代表一种由某集群存储驱动来处理的卷。卷的生命周期与定义该卷的 Pod 完全相同 ——
          卷会在 Pod 启动之前被创建，并在 Pod 被移除时删除。符合下面的情况时，可以使用这种类型的卷：

          - 只有当 Pod 运行的时候才需要此卷；
          - 需要基于快照来恢复数据或者执行容量跟踪这类正常卷所具有的功能特性；
          - 通过存储类来指定存储驱动；
          - 存储驱动支持通过 `PersistentVolumeClaim` 来动态制备存储卷
            （关于此卷类型与 PersistentVolumeClaim 之间的联系，参阅 `EphemeralVolumeSource`）。

          如果期望卷的生命期长于单个 Pod，应该使用 `PersistentVolumeClaim` 或者某种特定于厂商的 API。
          如果某 CSI 驱动被设计用来提供轻量级的本地临时卷，可以考虑使用该 CSI。

          同一个 Pod 可以既使用临时卷又使用持久卷。
      fc:
        $ref: '#/definitions/io.k8s.api.core.v1.FCVolumeSource'
        description: A Fibre Channel resource that is attached to a kubelet's host
          machine and then exposed to the Pod.
        x-kab-description-zh: 挂载到主机之后绑定挂载给 Pod 使用的光纤通道资源。
      flexVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.FlexVolumeSource'
        description: A generic volume resource that is provisioned/attached using
          an exec based plugin.
        x-kab-description-zh: 通过基于 exec 的插件来制备并挂接的一种通用卷资源。
      flocker:
        $ref: '#/definitions/io.k8s.api.core.v1.FlockerVolumeSource'
        description: |-
          A Flocker volume attached to a kubelet's host machine.
          This depends on the Flocker control service being running.
        x-kab-description-zh: 挂接到 kubelet 所在主机上的一个 Flocker 卷。此特性要求 Flocker 控制服务在运行。
      gcePersistentDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.GCEPersistentDiskVolumeSource'
        description: A GCE Disk resource that is attached to a kubelet's host machine
          and then exposed to the Pod.
        x-kab-description-zh: 挂载到主机之后绑定挂载给 Pod 使用的 GCE Disk 资源。
      gitRepo:
        $ref: '#/definitions/io.k8s.api.core.v1.GitRepoVolumeSource'
        description: |-
          A git repository at a particular revision.
          **DEPRECATED**: To provision a container with a git repo, mount an `emptyDir` into an
          `initContainer` that clones the repo using `git`, then mount the `emptyDir` into the
          Pod's container."
        x-kab-description-zh: |-
          给定修订版本的一个 GIT 仓库。
          **已弃用*： 要为容器提供一个 GIT 仓库，可以向某个 `initContainer` 中挂载一个 `emptyDir` 卷，
          并在该容器中使用 `git` 克隆仓库内容，最后将 `emptyDir` 卷挂载到 Pod 的应用容器中。
      glusterfs:
        $ref: '#/definitions/io.k8s.api.core.v1.GlusterfsVolumeSource'
        description: A Glusterfs mount on the host that shares a Pod's lifetime.
        x-kab-description-zh: 挂载到主机并与 Pod 生命周期相同的 Glusterfs。
      hostPath:
        $ref: '#/definitions/io.k8s.api.core.v1.HostPathVolumeSource'
        description: |-
          A pre-existing file or directory on the host machine that is directly exposed to the container.
          This is generally used for system agents or other privileged things that are allowed to
          see the host machine. Most containers will NOT need this.
        x-kab-description-zh: |-
          此字段引用宿主机器上之前存在的一个文件或目录，将其直接公开给容器使用。
          这种数据卷通常用于系统代理或者其他被允许查看主机的特权事务。大多数容器不需要这种数据卷。
      iscsi:
        $ref: '#/definitions/io.k8s.api.core.v1.ISCSIVolumeSource'
        description: An ISCSI Disk resource that is attached to a kubelet's host machine
          and then exposed to the Pod.
        x-kab-description-zh: 挂接到 kubelet 所在主机之后挂载给 Pod 使用的 iSCSI Disk 资源。
      name:
        description: Volume's name. Must be a DNS_LABEL and unique within the Pod.
        minLength: 1
        type: string
        x-kab-description-zh: 卷的名称。必须是合法的 DNS_LABEL，并且在 Pod 内唯一。
      nfs:
        $ref: '#/definitions/io.k8s.api.core.v1.NFSVolumeSource'
        description: A NFS mount on the host that shares a Pod's lifetime.
        x-kab-description-zh: 挂载到主机并与 Pod 生命周期相同的 NFS 存储。
      persistentVolumeClaim:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimVolumeSource'
        description: A reference to a existing PersistentVolumeClaim in the same namespace.
        x-kab-description-zh: 对同一名字空间内某 PersistentVolumeClaim 的引用。
      photonPersistentDisk:
        $ref: '#/definitions/io.k8s.api.core.v1.PhotonPersistentDiskVolumeSource'
        description: A PhotonController persistent disk attached and mounted on the
          host machine.
        x-kab-description-zh: 挂接并挂载到主机的 PhotonController 持久盘。
      portworxVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.PortworxVolumeSource'
        description: A Portworx volume attached and mounted on the host machine.
        x-kab-description-zh: 挂接并挂载到主机的 Portworx 卷。
      projected:
        $ref: '#/definitions/io.k8s.api.core.v1.ProjectedVolumeSource'
        description: Items for all in one resources Secrets, ConfigMaps, and Downward
          APIs.
        x-kab-description-zh: 可以包含来自 Secret、ConfigMap 和 Downward API 的内容的综合卷。
      quobyte:
        $ref: '#/definitions/io.k8s.api.core.v1.QuobyteVolumeSource'
        description: A Quobyte mount on the host that shares a Pod's lifetime.
        x-kab-description-zh: 挂载到主机并与 Pod 生命周期相同的 Quobyte 卷。
      rbd:
        $ref: '#/definitions/io.k8s.api.core.v1.RBDVolumeSource'
        description: A Rados Block Device (RBD) mount on the host that shares a Pod's
          lifetime.
        x-kab-description-zh: 挂载到主机并与 Pod 生命周期相同的 Rados 块设备（RBD）。
      scaleIO:
        $ref: '#/definitions/io.k8s.api.core.v1.ScaleIOVolumeSource'
        description: A ScaleIO persistent volume attached and mounted on Kubernetes
          nodes.
        x-kab-description-zh: 挂接并挂载到节点上的 ScaleIO 持久卷。
      secret:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretVolumeSource'
        description: A Secret that should populate this volume.
        x-kab-description-zh: 负责填充此卷内容的一个 Secret。
      storageos:
        $ref: '#/definitions/io.k8s.api.core.v1.StorageOSVolumeSource'
        description: A StorageOS volume attached and mounted on the node.
        x-kab-description-zh: 挂接并挂载到节点上的 StorageOS 卷。
      vsphereVolume:
        $ref: '#/definitions/io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource'
        description: A vSphere volume attached and mounted on the host machine.
        x-kab-description-zh: 挂接并挂载到宿主机器上的 vSphere 卷。
    required:
      - name
    type: object
    x-kab-description-zh: Volume 代表的是 Pod 中的一个有名字的卷，此卷可供 Pod 内任何容器访问。
  io.k8s.api.core.v1.VolumeDevice:
    description: VolumeDevice describes a mapping of a raw block device within a container.
    properties:
      devicePath:
        description: |-
          The path inside the container that the device will be mapped to.
          The path must be unique inside a container. The path cannot contain `".."` in it.
          It cannot overlap with the paths in the container's `volumeMounts`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          设备要映射到的、位于容器内部的路径。此路径必须在容器内唯一。路径中不可包含 `".."`。
          此路径不可与容器的 `volumeMounts` 内的路径重叠。
      name:
        description: |-
          The name must match the `name` of a `persistentVolumeClaim` volume in the Pod.
          It must be unique in the scope of the container.
          It cannot overlap with names in the container's `volumeMounts`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此名称必须与 Pod 中某个 `persistentVolumeClaim` 的 `name` 属性匹配。
          字段值必须在容器范围内唯一。
          此名称不可与容器的 `volumeMounts` 中的名称重叠。
    required:
      - devicePath
      - name
    type: object
    x-kab-description-zh: VolumeDevice 描述容器内的原生块设备映射。
  io.k8s.api.core.v1.VolumeMount:
    description: The mounting of a volume into a container.
    properties:
      mountPath:
        description: |-
          Path within the container at which the volume should be mounted.  Must not contain `":"`.
          The mounting point must be unique in the container and it cannot overlap
          with those from the container's `volumeDevices`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          容器内路径，给出卷的挂载位置。路径字符串不能包含 `":"`。
          挂载点必须在容器内唯一，并且不能与容器的 `volumeDevices` 中的挂载点重叠。
      mountPropagation:
        default: None
        description: |-
          This attribute determines how mounts are propagated from the host to container
          and the other way around. `"Bidirectional"` mount propagation is only available
          to privileged containers, i.e., the `securityContext.privileged` is `true`.
          This field is Beta in 1.10.

          When `recursiveReadOnly` is set to `"IfPossible"` or to `"Enabled"`, `mountPropagation`
          must be `"None"` or unspecified (which defaults to `"None"`).
        enum:
          - Bidirectional
          - HostToContainer
          - None
        type: string
        x-kab-description-zh: |-
          此属性决定卷挂载如何从主机传播到容器以及从容器传播到主机。
          `"Bidirectional"` 选项只能用于特权容器，即 `securityContext.privileged` 为 `true` 的容器。
          此字段从 v1.10 开始进入 Beta 阶段。

          当 `recursiveReadOnly` 被设置为 `"IfPossible"` 或者 `"Enabled"`，`mountPropagation`
          必须是 `"None"` 或者未设置（会被默认当作 `"None"` 处理）。
      name:
        description: |-
          This must match the `name` of a volume.
          The name cannot overlap with any of the container's `volumeDevices`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          卷名称，必须与某个卷的 `name` 属性匹配。
          此卷名称不可以与容器中 `volumeDevices` 的任何条目重叠。
      readOnly:
        default: false
        description: Mounted read-only if `true`, read-write otherwise (`false` or
          unspecified).
        type: boolean
        x-kab-description-zh: 如果此字段为 `true` 则以只读模式挂载，否则以可读可写模式挂载。
      recursiveReadOnly:
        description: |-
          `recursiveReadOnly` specifies whether read-only mounts should be handled recursively.

          If `readOnly` is false, this field has no meaning and must be unspecified.

          If `readOnly` is true, and this field is set to `"Disabled"`, the mount is not made recursively read-only.
          If this field is set to `"IfPossible"`, the mount is made recursively read-only, if it is supported by the container runtime.
          If this field is set to `"Enabled"`, the mount is made recursively read-only if it is supported by the container runtime,
          otherwise the pod will not be started and an error will be generated to indicate the reason.

          If this field is set to `"IfPossible"` or `"Enabled"`, `mountPropagation` must be set to `"None"` (or be unspecified,
          which defaults to `"None"`).

          If this field is not specified, it is treated as an equivalent of `"Disabled"`.
        enum:
          - Disabled
          - Enabled
          - IfPossible
        type: string
        x-kab-description-zh: |-
          `recursiveReadOnly` 设置是否需要以递归的方式去处理只读的卷挂载。

          如果 `readOnly` 为 false，则此字段无意义，并且不可以设置。

          如果 `readOnly` 为 true 并且此字段被设置为 `"Disabled"`，则挂载卷不会按递归只读来处理。
          如果此字段被设置为 `"IfPossible"`，则挂载卷会被按递归性只读来挂载，前提是容器运行时支持这种处理。
          如果此字段被设置为 `"Enabled"`，则只有被容器运行时支持的情况下，卷挂载会以递归性只读来处理；
          否则 Pod 不会被启动，系统会生成一个错误信息给出原因。

          如果此字段被设置为 `"IfPossible"` 或 `"Enabled"`，则 `mountPropagation` 必须被设置为 `"None"`
          （或者留空不设，同样视为 `"None"` 处理）。

          如果未设置此字段，则系统默认其取值等效于 `"Disabled"`。
      subPath:
        default: ''
        description: |-
          Path within the volume from which the container's volume should be mounted.
          Default value `""` means the volume's root. This path cannot contain `".."` or prefixed with `"/"`.
          This `subPath` property is mutual exclusive to the `subPathExpr` property.
        type: string
        x-kab-description-zh: |-
          容器的卷要挂载的卷中路径。默认值 `""` 表示挂载卷的根目录。
          此目录字符串不能包含 `".."`，也不能以 `"/"` 开头。
          `subPath` 属性与 `subPathExpr` 属性是互斥的。
      subPathExpr:
        description: |-
          Expanded path within the volume from which the container's volume should be mounted.
          Behaves similarly to the `subPath` property but environment variable references
          `$(VAR_NAME)` are expanded using the container's environment.
          Defaults to `""` (volume's root). `subPathExpr` and `subPath` are mutually exclusive.
          The path must be relative path and it cannot contain `".."` or prefix with `".."`.
        type: string
        x-kab-description-zh: |-
          可被展开的表达式，给出容器的卷要挂载的卷中路径。
          与 `subPath` 的行为相同，只是字段值中的环境变量引用 `$(VAR_NAME)` 会使用容器的环境变量展开。
          默认值 `""` 表示挂载卷的根目录。
          `subPathExpr` 属性与 `subPath` 属性是互斥的。
          此字符串必须是相对路径，不能包含 `".."`，也不能以 `".."` 开头。
    required:
      - mountPath
      - name
    type: object
    x-kab-description-zh: 容器内挂载指定卷。
  io.k8s.api.core.v1.VolumeMountStatus:
    description: VolumeMountStatus shows status of volume mounts.
    properties:
      mountPath:
        description: '`mountPath` corresponds to the original VolumeMount.'
        type: string
        x-kab-description-zh: '`mountPath` 对应于原来的 VolumeMount 对象。'
      name:
        description: '`name` corresponds to the name of the original VolumeMount.'
        type: string
        x-kab-description-zh: '`name` 对应与原来的 VolumeMount 的名称。'
      readOnly:
        description: '`readOnly` corresponds to the original VolumeMount.'
        type: boolean
        x-kab-description-zh: '`readOnly` 对应于原来的 VolumeMount 挂载模式。'
      recursiveReadOnly:
        description: |-
          `recursiveReadOnly` must be set to `"Disabled"`, `"Enabled"`, or unspecified (for non-readonly mounts).
          An `"IfPossible"` value in the original VolumeMount must be translated to `"Disabled"` or `"Enabled"`, depending on the mount result.
        enum:
          - Disabled
          - Enabled
        type: string
        x-kab-description-zh: |-
          `recursiveReadOnly` 必须被设置为 `"Disabled"`、`"Enabled"` 或者干脆不设置（用于非只读挂载）。
          原来的 VolumeMount 中的 `"IfPossible"` 值必须被翻译为 `"Disabled"` 或者 `"Enabled"`，具体翻译情况取决于挂载结果。
    required:
      - name
      - mountPath
    type: object
    x-kab-description-zh: VolumeMountStatus 显示卷挂载的状态。
  io.k8s.api.core.v1.VolumeNodeAffinity:
    description: The constraints that limit which nodes this volume can be accessed
      from.
    properties:
      required:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: This specifies the hard constraints that nodes must meet.
        x-kab-description-zh: 此字段给出节点必须满足的硬性约束条件。
    required:
      - required
    type: object
    x-kab-description-zh: 表明可以从哪些节点访问此卷。
  io.k8s.api.core.v1.VolumeProjection:
    description: |-
      Data that are projected into a container as part of a projected volume.
      The data projected cannot have duplicated paths. One and only one of the fields
      can be specified per-volume.
    properties:
      clusterTrustBundle:
        $ref: '#/definitions/io.k8s.api.core.v1.ClusterTrustBundleProjection'
        description: |-
          `clusterTrustBundle` allows a Pod to access the `.spec.trustBundle` field of ClusterTrustBundle objects in an auto-updating file.

          ClusterTrustBundle objects can either be selected by name, or by the combination of signer name and a label selector.
          Kubelet performs aggressive normalization of the PEM contents written into the pod filesystem.
          Esoteric PEM features such as inter-block comments and block headers are stripped. Certificates are deduplicated.
          The ordering of certificates within the file is arbitrary, and Kubelet may change the order over time.

          This field is in Alpha state, gated by the ClusterTrustBundleProjection feature gate.
        x-kab-description-zh: |-
          `clusterTrustBundle` 允许 Pod 以自动更新文件的方式访问 ClusterTrustBundle 对象的 `.spec.trustBundle` 字段。

          ClusterTrustBundle 对象可以通过名字来选择，也可以通过签名者名称与标签选择算符组合的形式来选择。
          kubelet 会对写入到 Pod 文件系统中的 PEM 内容执行比较激进的规格化操作。
          较少使用的一些 PEM 特性（如块间注释、块头部信息）会被去掉，重复的证书也会被删除。
          文件内证书的顺序是比较随意的，并且 kubelet 可能会随时改变证书顺序。

          此字段处于 Alpha 阶段，需要启用 ClusterTrustBundleProjection 特性门控。
      configMap:
        $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapProjection'
        description: Information about a ConfigMap whose data will be projected.
        x-kab-description-zh: 关于要被投射的 ConfigMap 的信息。
      downwardAPI:
        $ref: '#/definitions/io.k8s.api.core.v1.DownwardAPIProjection'
        description: Information about the downwardAPI data to project.
        x-kab-description-zh: 关于要被投射的 DownwardAPI 数据的信息。
      secret:
        $ref: '#/definitions/io.k8s.api.core.v1.SecretProjection'
        description: Information about a Secret whose data will be projected.
        x-kab-description-zh: 关于要被投射的 Secret 的信息。
      serviceAccountToken:
        $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccountTokenProjection'
        description: Information about the ServiceAccountToken whose data will be
          projected.
        x-kab-description-zh: 关于要被投射的服务账号令牌的信息。
    type: object
    x-kab-description-zh: |-
      作为投射卷的一部分投射到容器内的数据。所投射的数据不可以包含重复的路径。
      每个卷中可以且只能挂载一种数据源。
  io.k8s.api.core.v1.VolumeResourceRequirements:
    description: VolumeResourceRequirements describes the storage resource requirements
      for a volume.
    properties:
      limits:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: '`limits` describes the maximum amount of compute resources allowed.'
        type: object
        x-kab-description-zh: '`limits` 设置所允许的计算资源上限。'
      requests:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          `requests` describes the minimum amount of compute resources required.
          If `requests` is omitted for a container, it defaults to `limits` if that is explicitly specified,
          otherwise to an implementation-defined value. `requests` cannot exceed `limits`.
        type: object
        x-kab-description-zh: |-
          `requests` 描述所需要的计算资源下限。
          如果某个容器的 `requests` 值未设置，但 `limits` 设置了，则其 `requests` 默认与 `limits` 值相同。
          若 `limits` 也未设置，则 `requests` 的最终取值取决于具体实现。
          `requests` 值不可以超过 `limits` 值。
    type: object
    x-kab-description-zh: VolumeResourceRequirements 描述某个存储卷的存储资源需求。
  io.k8s.api.core.v1.VsphereVirtualDiskVolumeSource:
    description: A vSphere volume resource.
    properties:
      fsType:
        default: ext4
        description: Filesystem type to mount. Must be a filesystem type supported
          by the host operating system.
        type: string
        x-kab-description-zh: 要挂载的文件系统类型。必须是宿主操作系统所支持的文件系统之一。
      storagePolicyID:
        description: Storage Policy Based Management (SPBM) profile ID associated
          with the `storagePolicyName`.
        type: string
        x-kab-description-zh: 与 `storagePolicyName` 相关联的、基于存储策略的管理（SPBM）配置 ID。
      storagePolicyName:
        description: Storage Policy Based Management (SPBM) profile name.
        type: string
        x-kab-description-zh: 基于存储策略的管理（SPBM）配置名称。
      volumePath:
        description: Path that identifies vSphere volume VMDK.
        minLength: 1
        type: string
        x-kab-description-zh: 用来标识某 vSphere 卷 VMDK 的路径。
    required:
      - volumePath
    type: object
    x-kab-description-zh: vSphere 卷资源。
  io.k8s.api.core.v1.WeightedPodAffinityTerm:
    description: |-
      The `weight`s of all of the matched `podAffinityTerm`s are added per-node to find
      the most preferred node(s).
    properties:
      podAffinityTerm:
        $ref: '#/definitions/io.k8s.api.core.v1.PodAffinityTerm'
        description: A Pod affinity term, associated with the corresponding weight.
        x-kab-description-zh: Pod 亲和性条件，与所给的权重对应。
      weight:
        description: Weight associated with matching the corresponding term.
        format: int32
        maximum: 100
        minimum: 1
        type: integer
        x-kab-description-zh: 与亲和性条件对应的权重。
    required:
      - podAffinityTerm
      - weight
    type: object
    x-kab-description-zh: |-
      此结构定义 Pod 亲和性条件及其对应的权重。
      在寻找最合适的节点或节点集合时，使用者会按节点将所有被满足条件的权重加和。
  io.k8s.api.core.v1.WindowsSecurityContextOptions:
    description: Windows-specific options and credentials.
    properties:
      gmsaCredentialSpec:
        description: |-
          Where the GMSA admission webhook (https://github.com/kubernetes-sigs/windows-gmsa)
          inlines the contents of the GMSA credential spec named by the `gmsaCredentialSpecName` field.
          This field cannot be an empty string and its maximum length is 64 K.
          This field is Beta-level and is only honored by servers that enable the `WindowsGMSA`
          feature flag.
        type: string
        x-kab-description-zh: |-
          GMSA 准入 [Webhook](https://github.com/kubernetes-sigs/windows-gmsa) 将 `gmsaCredentialSpecName`
          所引用的 GMSA 凭据规约内容以内联方式存放到此字段。
          此字段不可以是空字符串，其最大长度为 64K。
          此字段处于 Beta 阶段，需要启用 `WindowsGMSA` 特性门控。
      gmsaCredentialSpecName:
        description: |-
          The name of the GMSA credential spec to use.  The string must be a valid DNS subdomain name.
          This field is Beta-level and is only honored by servers that enable the `WindowsGMSA` feature flag.
        type: string
        x-kab-description-zh: |-
          要使用的 GMSA 凭据规约的名字。此字符串必须是一个合法的 DNS 子域名。
          此字段处于 Beta 阶段，需要启用 `WindowsGMSA` 特性门控。
      hostProcess:
        description: This determines if a container should be run as a 'Host Process'
          container. All of a Pod's containers must have the same effective `hostProcess`
          value (it is not allowed to have a mix of `hostProcess` containers and non-`hostProcess`
          containers). In addition, if `hostProcess` is true then `hostNetwork` must
          also be set to true.
        type: boolean
        x-kab-description-zh: 此字段确定容器是否应该以 'Host Process' 容器模式运行。 同一个 Pod 中的所有容器的
          `hostProcess` 配置要一致 （不可以混合 `hostProcess` 和非 `hostProcess` 容器）。 此外，如果 `hostProcess`
          被设置为 `true`，则 `hostNetwork` 也要设置为 `true`。
      runAsUserName:
        description: |-
          The Windows user name to run the entrypoint of the container.
          Defaults to the `user` defined in image metadata if unspecified.
          May also be set in the `securityContext` of the enclosing Pod.
          This string cannot be empty string; it cannot contain control characters;
          it cannot contain more than one backslash.
          The domain name, when specified, must be no more than 256 characters and it must either match
          the NetBios or the DNS format.
          The user name part can be no more than 104 characters.
          The name cannot only contain periods or spaces and it cannot contain characters like
          `/\:;|=,+*?<>@[]`.
        type: string
        x-kab-description-zh: |-
          用来运行容器入口点的 Windows 用户名。如未指定，则默认使用镜像元数据中定义的 `user`。
          也可以通过上层 Pod 中的 `securityContext` 来设置。
          此字段不可以是空字符串，不可以包含控制字符，不可以包含超过一个反斜线。
          如果包含了域名，则不可超过 256 字符，并且必须符合 NetBios 或 DNS 格式。
          用户名部分不可以超过 104 字符。
          用户名部分不可以包含句点、空格字符，也不可以包含 `/\:;|=,+*?<>@[]` 这类字符。
    type: object
    x-kab-description-zh: 特定于 Windows 的选项和凭据信息。
  io.k8s.api.discovery.v1.Endpoint:
    description: A logical backend implementing a Service.
    properties:
      addresses:
        description: |-
          Addresses of this endpoint. The contents of this field are interpreted according to
          the corresponding EndpointSlice `addressType` field.
          This allows for cases like dual-stack (IPv4 and IPv6) networking.
          Consumers (e.g. `kube-proxy`) must handle different types of addresses in the context of
          their own capabilities.
          This must contain at least one address but no more than 100.
          These are all assumed to be fungible and clients may choose to only use the first element.
        items:
          type: string
        maxItems: 100
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此端点的地址。字段的内容会根据 EndpointSlice 的 `addressType` 来解释。
          此字段可用于双协议栈（IPv4 和 IPv6）联网支持。
          用户（例如，`kube-proxy`）必须根据其自身能力处理不同的地址类型。
          此字段要包含至少一个地址，但不能超过 100 个。
          所有地址都可视为可替代的，客户端可以选择只使用其中第一个元素。
        x-kubernetes-list-type: set
      conditions:
        $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointConditions'
        description: Information about the current status of the Endpoint.
        x-kab-description-zh: 关于 Endpoint 当前状态的信息。
      deprecatedTopology:
        additionalProperties:
          type: string
        description: |-
          This contains topology information part of the v1beta1 API.
          **DEPRECATED**: This field will be removed when the v1beta1 API is removed
          (no sooner than kubernetes v1.24).
          While this field can hold values, it is not writable through the v1 API, and any attempts to
          write to it will be silently ignored.
          Topology information can be found in the zone and nodeName fields instead.
        type: object
        x-kab-description-zh: |-
          此字段保存 v1beta1 API 所定义的拓扑信息。
          **已弃用**： 此字段会在 v1beta1 API 被移除后删掉（不早于 v1.24）。
          尽管此字段可以存放数值，用户不能通过 v1 API 为其赋值，所有的写入操作都会被忽略。
          关于拓扑的信息可以使用 `zone` 和 `nodeName` 字段。
      hints:
        $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointHints'
        description: Information associated with how an endpoint should be consumed.
        x-kab-description-zh: 关于此端点应如何使用的信息。
      hostname:
        description: |-
          The hostname of this Endpoint.
          This field may be used by consumers of endpoints to distinguish endpoints from each other
          (e.g. in DNS names).
          Multiple endpoints which use the same `hostname` should be considered fungible
          (e.g.  multiple A values in DNS).
          The value must be lowercase and a valid DNS label (RFC 1123) when specified.
        type: string
        x-kab-description-zh: |-
          此端点的主机名。此字段可能被端点的用户用来区分不同端点（例如，使用 DNS 名称）。
          多个端点使用相同的 `hostname` 时，应该被视为彼此可替代的（例如，DNS 中的多个 A 值记录）。
          此字段的设置值必须是小写字母字符串，并且是合法的 DNS 标签（RFC 1123）。
      nodeName:
        description: |-
          The name of the Node hosting this endpoint. This can be used to determine endpoints local to a Node.
          The name must be a valid DNS subdomain name when specified.
        type: string
        x-kab-description-zh: |-
          托管此端点的 Node 的名称。此字段可用来判断端点是否在节点本地。
          所给的名称必须是合法的 DNS 子域名。
      targetRef:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: A reference to a Kubernetes object that represents this endpoint.
        x-kab-description-zh: 对代表此端点的 Kubernetes 对象的引用。
      zone:
        description: The name of the Zone this endpoint exists in.
        type: string
        x-kab-description-zh: 此端点所处的可用区名称。
    required:
      - addresses
    type: object
    x-kab-description-zh: 实现某 Service 的逻辑后端。
  io.k8s.api.discovery.v1.EndpointConditions:
    description: The current condition of an Endpoint.
    properties:
      ready:
        description: |-
          This indicates that this endpoint is prepared to receive traffic,
          according to whatever system is managing the endpoint.  A `nil` value indicates an unknown state.
          In most cases consumers should interpret this unknown state as *ready*.
          For compatibility reasons, `ready` should never be `true` for terminating endpoints,
          except when the normal readiness behavior is being explicitly overridden,
          for example when the associated Service has set the `publishNotReadyAddresses` flag.
        type: boolean
        x-kab-description-zh: |-
          此字段用来表明根据管理端点的系统反映，端点已经为接受请求流量做好准备。
          未设置时表示状态未知。大多数情况下，用户可以将这种未知的状态理解为**就绪（Ready）**。
          出于兼容性考虑，对于正在被终止的端点，其 `ready` 字段不应该设置为 `true`，
          除非正常的就绪态行为已经被显式地重载。
          例如，对应的 Service 已经设置了 `publishNotReadyAddresses` 标志的时候。
      serving:
        description: |-
          This is identical to `ready` except that it is set regardless of the terminating state of endpoints.
          This condition should be set to `true` for a ready endpoint that is terminating.
          If `nil`, consumers should defer to the `ready` condition.
        type: boolean
        x-kab-description-zh: |-
          此字段作用与 `ready` 字段完全相同，只是字段设置不会考虑端点是否正在被终止。
          对于一个就绪的端点，当其正在被终止时，此状况要设置为 `true`。
          如果没有设置此字段，用户应该转而查看 `ready` 状况。
      terminating:
        description: |-
          This indicates that this endpoint is terminating. A `nil` value indicates an unknown state.
          Consumers should interpret this unknown state to mean that the endpoint is not terminating.
        type: boolean
        x-kab-description-zh: |-
          此字段用来表明端点正在被终止。如果此字段未设置，则无法判断端点是否正在被终止。
          用户应该假定如果此字段未设置，端点就没有处于被终止的状态。
    type: object
    x-kab-description-zh: Endpoint 的当前状况。
  io.k8s.api.discovery.v1.EndpointHints:
    description: Hints describing how an Endpoint should be consumed.
    properties:
      forZones:
        description: |-
          This indicates the zone(s) this Endpoint should be consumed by to enable topology-aware routing.
          Zone names must be unique among all items.
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.ForZone'
        maxItems: 8
        type: array
        x-kab-description-zh: |-
          此字段给出为了启用拓扑感知的路由，哪些可用区可以访问此 Endpoint。
          可用区的名称应该在列表中唯一。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 关于 Endpoint 用法的提示信息。
  io.k8s.api.discovery.v1.EndpointPort:
    description: A port used by an EndpointSlice.
    properties:
      appProtocol:
        description: |-
          The application protocol for this port. This is used as a hint for implementations
          to offer richer behavior for protocols that they understand.
          This field follows standard Kubernetes label syntax. Valid values are either:

          - Un-prefixed protocol names: reserved for IANA standard service names
            (as per RFC-6335 and https://www.iana.org/assignments/service-names).
          - Kubernetes-defined prefixed names.
          - Other protocols should use implementation-defined prefixed names such as
            `"mycompany.com/my-custom-protocol"`.

          The Kubernetes-defined prefixed names can be one of:

          - `"kubernetes.io/h2c"` - HTTP/2 prior knowledge over cleartext as described in
            [RFC9113](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-)

          - `"kubernetes.io/ws"` - WebSocket over cleartext as described in
            [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)
          - `"kubernetes.io/wss"` - WebSocket over TLS as described in
            [RFC6455](https://www.rfc-editor.org/rfc/rfc6455)
        type: string
        x-kab-description-zh: |-
          端口对应的应用协议。端点的视线可以将此字段值视为一种提示信息，
          从而提供它们所能够理解的协议的更丰富的行为。
          此字段遵从标准的 Kubernetes 标签语法。合法的取值如下：

          - 无前缀的协议名：保留给 IANA 标准服务名称
            （参见 RFC-6335 和 https://www.iana.org/assignments/service-names）。
          - Kubernetes 定义的、带前缀的名称。
          - 其他协议则需要使用由实现所定义的、带前缀的名称，例如 `"mycompany.com/my-custom-protocol"`。

          其中 Kubernetes 所定义的、带前缀的名称包括：

          - `"kubernetes.io/h2c"` - 采用明文传输的 HTTP/2 先验知识版本，
            如 [RFC9113](https://www.rfc-editor.org/rfc/rfc9113.html#name-starting-http-2-with-prior-) 所述。
          - `"kubernetes.io/ws"` - 采用明文传输的 WebSocket，
            如 [RFC6455](https://www.rfc-editor.org/rfc/rfc6455) 所述。
          - `"kubernetes.io/wss"` - 采用 TLS 传输的WebSocket,
            如 [RFC6455](https://www.rfc-editor.org/rfc/rfc6455) 所述。
      name:
        default: ''
        description: |-
          The name of this port. All ports in an EndpointSlice must have a unique name.
          If the EndpointSlice is dervied from a Kubernetes Service, this corresponds to the
          `service.ports[].name`. Name must either be an empty string or pass DNS_LABEL validation:

          - must be no more than 63 characters long.
          - must consist of lower case alphanumeric characters or '-';
          - must start and end with an alphanumeric character.
        maxLength: 63
        type: string
        x-kab-description-zh: |-
          端口的名称。EndpointSlice 中的所有端口都必须具有唯一的名称。
          如果此 EndpointSlice 是从某 Kubernetes Service 衍生而来，则此 `name` 值对应于 Service 的 `[].name`。
          端口名必须是一个空字符串或者通过以下 DNS_LABEL 格式检查：

          - 长度不能超过 63 个字符；
          - 只能由小写字母、数字或者 `'-'` 组成；
          - 必须以字母或者数字开头和结尾。
      port:
        description: |-
          The port number of the endpoint. If this is not specified, ports are not restricted and
          must be interpreted in the context of the specific consumer.
        format: int32
        type: integer
        x-kab-description-zh: 端点的端口号。如果未设置此字段，则端口号没有限制，需要结合特定用户的上下文来解释。
      protocol:
        default: TCP
        description: The IP protocol for this port.
        enum:
          - SCTP
          - TCP
          - UDP
        minLength: 1
        type: string
        x-kab-description-zh: 端口的 IP 协议。
    required:
      - protocol
    type: object
    x-kab-description-zh: EndpointSlice 所使用的一个端口。
    x-kubernetes-map-type: atomic
  io.k8s.api.discovery.v1.EndpointSlice.CREATE:
    description: |-
      EndpointSlice represents a subset of the endpoints that implement a Service.
      For a given Service there may be multiple EndpointSlice objects, selected by `labels`,
      which must be joined to produce the full set of Endpoints.
    properties:
      addressType:
        description: |-
          The type of address carried by this EndpointSlice.
          All addresses in this slice must be the same type. This field is immutable after creation.
          The following address types are currently supported:

          - `"IPv4"`: Represents an IPv4 Address.
          - `"IPv6"`: Represents an IPv6 Address.
          - `"FQDN"`: Represents a Fully Qualified Domain Name.
        enum:
          - FQDN
          - IPv4
          - IPv6
        type: string
        x-kab-description-zh: |-
          此 EndpointSlice 所使用的地址类型。此对象中的所有地址都必须是同一种类型。
          对象被创建之后，此字段不可变更。目前支持的地址类型如下：

          - `"IPv4"`：IPv4 地址
          - `"IPv6"`：IPv6 地址
          - `"FQDN"`：全限定域名地址
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - discovery.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      endpoints:
        description: A list of unique endpoints in this slice. Each slice may include
          a maximum of 1000 endpoints.
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.Endpoint'
        maxItems: 1000
        type: array
        x-kab-description-zh: 一组不含重复项的端点。每个 EndpointSlice 可以包含最多 1000 个端点。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - EndpointSlice
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      ports:
        description: |-
          The list of network ports exposed by each endpoint in this slice. Each port must have a unique name.
          When `ports` is empty, it indicates that there are no defined ports.
          When a port is defined with a `nil` port value, it indicates "all ports".
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointPort'
        maxItems: 100
        type: array
        x-kab-description-zh: |-
          此列表包含 EndpointSlice 中每个端点所公开的网络端口。每个端口都必须具有唯一的名称。
          如果 `ports` 列表字段为空，则意味着没有定义端口。
          如果某个端口的值为 null，则意味着**所有端口**。
        x-kubernetes-list-type: atomic
    required:
      - addressType
      - apiVersion
      - endpoints
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      EndpointSlice 代表的是实现某个 Service 的端点的一个子集。
      对于一个给定的 Service 而言，可能存在多个 EndpointSlice 对象，通过 `labels` 关联。
      这些 EndpointSlice 连接到一起可以获得 Service 端点的全集。
    x-kubernetes-group-version-kind:
      - group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
  io.k8s.api.discovery.v1.EndpointSlice.GET:
    description: |-
      EndpointSlice represents a subset of the endpoints that implement a Service.
      For a given Service there may be multiple EndpointSlice objects, selected by `labels`,
      which must be joined to produce the full set of Endpoints.
    properties:
      addressType:
        description: |-
          The type of address carried by this EndpointSlice.
          All addresses in this slice must be the same type. This field is immutable after creation.
          The following address types are currently supported:

          - `"IPv4"`: Represents an IPv4 Address.
          - `"IPv6"`: Represents an IPv6 Address.
          - `"FQDN"`: Represents a Fully Qualified Domain Name.
        type: string
        x-kab-description-zh: |-
          此 EndpointSlice 所使用的地址类型。此对象中的所有地址都必须是同一种类型。
          对象被创建之后，此字段不可变更。目前支持的地址类型如下：

          - `"IPv4"`：IPv4 地址
          - `"IPv6"`：IPv6 地址
          - `"FQDN"`：全限定域名地址
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - discovery.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      endpoints:
        description: A list of unique endpoints in this slice. Each slice may include
          a maximum of 1000 endpoints.
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.Endpoint'
        maxItems: 1000
        type: array
        x-kab-description-zh: 一组不含重复项的端点。每个 EndpointSlice 可以包含最多 1000 个端点。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - EndpointSlice
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      ports:
        description: |-
          The list of network ports exposed by each endpoint in this slice. Each port must have a unique name.
          When `ports` is empty, it indicates that there are no defined ports.
          When a port is defined with a `nil` port value, it indicates "all ports".
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointPort'
        maxItems: 100
        type: array
        x-kab-description-zh: |-
          此列表包含 EndpointSlice 中每个端点所公开的网络端口。每个端口都必须具有唯一的名称。
          如果 `ports` 列表字段为空，则意味着没有定义端口。
          如果某个端口的值为 null，则意味着**所有端口**。
        x-kubernetes-list-type: atomic
    required:
      - addressType
      - apiVersion
      - endpoints
      - kind
      - metadata
      - ports
    type: object
    x-kab-description-zh: |-
      EndpointSlice 代表的是实现某个 Service 的端点的一个子集。
      对于一个给定的 Service 而言，可能存在多个 EndpointSlice 对象，通过 `labels` 关联。
      这些 EndpointSlice 连接到一起可以获得 Service 端点的全集。
    x-kubernetes-group-version-kind:
      - group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
  io.k8s.api.discovery.v1.EndpointSlice.UPDATE:
    description: |-
      EndpointSlice represents a subset of the endpoints that implement a Service.
      For a given Service there may be multiple EndpointSlice objects, selected by `labels`,
      which must be joined to produce the full set of Endpoints.
    properties:
      addressType:
        description: |-
          The type of address carried by this EndpointSlice.
          All addresses in this slice must be the same type. This field is immutable after creation.
          The following address types are currently supported:

          - `"IPv4"`: Represents an IPv4 Address.
          - `"IPv6"`: Represents an IPv6 Address.
          - `"FQDN"`: Represents a Fully Qualified Domain Name.
        type: string
        x-kab-description-zh: |-
          此 EndpointSlice 所使用的地址类型。此对象中的所有地址都必须是同一种类型。
          对象被创建之后，此字段不可变更。目前支持的地址类型如下：

          - `"IPv4"`：IPv4 地址
          - `"IPv6"`：IPv6 地址
          - `"FQDN"`：全限定域名地址
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - discovery.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      endpoints:
        description: A list of unique endpoints in this slice. Each slice may include
          a maximum of 1000 endpoints.
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.Endpoint'
        maxItems: 1000
        type: array
        x-kab-description-zh: 一组不含重复项的端点。每个 EndpointSlice 可以包含最多 1000 个端点。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - EndpointSlice
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。名称必须是合法的 DNS 子域名。
      ports:
        description: |-
          The list of network ports exposed by each endpoint in this slice. Each port must have a unique name.
          When `ports` is empty, it indicates that there are no defined ports.
          When a port is defined with a `nil` port value, it indicates "all ports".
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointPort'
        maxItems: 100
        type: array
        x-kab-description-zh: |-
          此列表包含 EndpointSlice 中每个端点所公开的网络端口。每个端口都必须具有唯一的名称。
          如果 `ports` 列表字段为空，则意味着没有定义端口。
          如果某个端口的值为 null，则意味着**所有端口**。
        x-kubernetes-list-type: atomic
    required:
      - addressType
      - apiVersion
      - endpoints
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      EndpointSlice 代表的是实现某个 Service 的端点的一个子集。
      对于一个给定的 Service 而言，可能存在多个 EndpointSlice 对象，通过 `labels` 关联。
      这些 EndpointSlice 连接到一起可以获得 Service 端点的全集。
    x-kubernetes-group-version-kind:
      - group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
  io.k8s.api.discovery.v1.EndpointSliceList:
    description: A list of EndpointSlice objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - discovery.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of EndpointSlice objects.
        items:
          $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
        type: array
        x-kab-description-zh: 包含 EndpointSlice 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - EndpointSliceList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 EndpointSlice 对象的列表。
    x-kubernetes-group-version-kind:
      - group: discovery.k8s.io
        kind: EndpointSliceList
        version: v1
  io.k8s.api.discovery.v1.ForZone:
    description: Information about which zones should consume this Endpoint.
    properties:
      name:
        description: |-
          The name of the zone. It must be a valid label value,
          i.e. it must be an empty string or consist of alphanumeric characters, '-', '_', or '.',
          and must start and end with an alphanumeric character.
        maxLength: 63
        minLength: 0
        type: string
        x-kab-description-zh: |-
          可用区的名称。此字段值必须是合法的标签名称。
          换言之，字段值可以是空字符串，或者由字母、数字、`'-'`、`'_'`、或 `'.'` 组成。
          字符串只能以字母或数字开头和结尾。
    required:
      - name
    type: object
    x-kab-description-zh: 关于哪些可用区可以使用当前端点的信息。
  io.k8s.api.events.v1.Event.CREATE:
    description: |-
      Event is a report of an event somewhere in the cluster.
      It generally denotes some state change in the system.
      Events have a limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given `reason`
      reflecting a consistent underlying trigger, or the continued existence of events with that `reason`.
      Events should be treated as informative, best-effort, supplemental data.
    properties:
      action:
        description: |-
          What action was taken/failed regarding to the `regarding` object. It is machine-readable.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          就 `regarding` 所引用的对象而言，采取了的（或者失败了的）操作是什么。字段值是机器可读的。
          对于新的 Event，此字段不可以为空，最大长度是 128 字符。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - events.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      deprecatedCount:
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        format: int32
        type: integer
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件的发生次数。'
      deprecatedFirstTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件第一次记录的时间。'
      deprecatedLastTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件最近一次出现并被记录的时间。'
      deprecatedSource:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSource'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示报告此 Event
          的组件。'
      eventTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: The time when this Event was first observed.
        x-kab-description-zh: 事件第一次被观测到的时间。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Event
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object's metadata.
        x-kab-description-zh: 标准的对象元数据。
      note:
        description: |-
          A human-readable description of the status of this operation.
          Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.
        type: string
        x-kab-description-zh: |-
          关于此操作状态的描述，人类可读字符串。
          此说明的最大长度为 1 KB，不过用户应该为 64 KB 大小的说明做好准备。
      reason:
        description: |-
          Why the action was taken. It is human-readable.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          人类可读字符串，表示采取当前动作的原因。
          对于新的 Event 对象而言，此字段不可为空，最多 128 个字符。
      regarding:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The object this Event is about.
          In most cases it's an object reporting controller implements,
          e.g. ReplicaSetController implements ReplicaSets and this event is emitted because
          it acts on some changes in a ReplicaSet object.
        x-kab-description-zh: |-
          此事件所关联的对象。大多数时候，所引用的是负责报告的控制器所实现的一个对象。
          例如，ReplicaSetController 实现了 ReplicaSets，而此事件之所以被报告是因为控制器在某个
          ReplicaSet 对象上作出了某种变更。
      related:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The optional secondary object for more complex actions.
          E.g. when the `regarding` object triggers a creation or deletion of the `related` object.
        x-kab-description-zh: |-
          较复杂的动作所牵涉的另一个对象。
          例如，某 `regarding` 对象触发了 `related` 对象的创建或删除。
      reportingController:
        description: |-
          The name of the controller that emitted this Event, e.g. `"kubernetes.io/kubelet"`.
          This field cannot be empty for new Events.
        type: string
        x-kab-description-zh: |-
          生成此 Event 的控制器的名称。例如，`"kubernetes.io/kubelet"`。
          对于新的 Event，此字段不可为空。
      reportingInstance:
        description: |-
          The ID of the controller instance, e.g. `"kubelet-xyzf"`.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          控制器实例的 ID。例如，`"kubelet-xyzf"`。
          对于新的 Event，此字段不可为空且最大长度为 128 字符。
      series:
        $ref: '#/definitions/io.k8s.api.events.v1.EventSeries'
        description: Data about the Event series this Event represents or nil if it's
          a singleton Event.
        x-kab-description-zh: |-
          关于此 Event 所代表的 Event 序列的数据。
          对于单实例的 Event 而言，此字段为 null。
      type:
        description: |-
          The type of this event (`"Normal"`, `"Warning"`), new types could be added in the future.
          It is machine-readable. This field cannot be empty for new Events.
        enum:
          - Normal
          - Warning
        type: string
        x-kab-description-zh: |-
          事件的类型（`"Normal"` 或 `"Warning"`）。未来可能会添加新的类型。
          此字段的值是及其可读的。新的 Event 必须设置此字段（不可为空）。
    required:
      - action
      - apiVersion
      - eventTime
      - kind
      - metadata
      - reason
      - regarding
      - reportingController
      - reportingInstance
      - type
    type: object
    x-kab-description-zh: |-
      Event 是对集群中某处发生的事件的报告。通常用来表达系统中的某种状态变化。
      Event 的保存时间很有限。随着时间推进，其触发源以及所携带的消息都可能发生变化。
      Event 的用户不应该对某个给定 `reason` 的事件的出现时间、是否反映的是下层同一个触发源，
      以及这一 `reason` 的事件是否会持续存在等等作任何假定。
      Event 应该被看做一种纯粹告知性质的、尽力而为的、补充性质的数据。
    x-kubernetes-group-version-kind:
      - group: events.k8s.io
        kind: Event
        version: v1
  io.k8s.api.events.v1.Event.GET:
    description: |-
      Event is a report of an event somewhere in the cluster.
      It generally denotes some state change in the system.
      Events have a limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given `reason`
      reflecting a consistent underlying trigger, or the continued existence of events with that `reason`.
      Events should be treated as informative, best-effort, supplemental data.
    properties:
      action:
        description: |-
          What action was taken/failed regarding to the `regarding` object. It is machine-readable.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          就 `regarding` 所引用的对象而言，采取了的（或者失败了的）操作是什么。字段值是机器可读的。
          对于新的 Event，此字段不可以为空，最大长度是 128 字符。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - events.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      deprecatedCount:
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        format: int32
        type: integer
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件的发生次数。'
      deprecatedFirstTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件第一次记录的时间。'
      deprecatedLastTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件最近一次出现并被记录的时间。'
      deprecatedSource:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSource'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示报告此 Event
          的组件。'
      eventTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: The time when this Event was first observed.
        x-kab-description-zh: 事件第一次被观测到的时间。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Event
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object's metadata.
        x-kab-description-zh: 标准的对象元数据。
      note:
        description: |-
          A human-readable description of the status of this operation.
          Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.
        type: string
        x-kab-description-zh: |-
          关于此操作状态的描述，人类可读字符串。
          此说明的最大长度为 1 KB，不过用户应该为 64 KB 大小的说明做好准备。
      reason:
        description: |-
          Why the action was taken. It is human-readable.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          人类可读字符串，表示采取当前动作的原因。
          对于新的 Event 对象而言，此字段不可为空，最多 128 个字符。
      regarding:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The object this Event is about.
          In most cases it's an object reporting controller implements,
          e.g. ReplicaSetController implements ReplicaSets and this event is emitted because
          it acts on some changes in a ReplicaSet object.
        x-kab-description-zh: |-
          此事件所关联的对象。大多数时候，所引用的是负责报告的控制器所实现的一个对象。
          例如，ReplicaSetController 实现了 ReplicaSets，而此事件之所以被报告是因为控制器在某个
          ReplicaSet 对象上作出了某种变更。
      related:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The optional secondary object for more complex actions.
          E.g. when the `regarding` object triggers a creation or deletion of the `related` object.
        x-kab-description-zh: |-
          较复杂的动作所牵涉的另一个对象。
          例如，某 `regarding` 对象触发了 `related` 对象的创建或删除。
      reportingController:
        description: |-
          The name of the controller that emitted this Event, e.g. `"kubernetes.io/kubelet"`.
          This field cannot be empty for new Events.
        type: string
        x-kab-description-zh: |-
          生成此 Event 的控制器的名称。例如，`"kubernetes.io/kubelet"`。
          对于新的 Event，此字段不可为空。
      reportingInstance:
        description: |-
          The ID of the controller instance, e.g. `"kubelet-xyzf"`.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          控制器实例的 ID。例如，`"kubelet-xyzf"`。
          对于新的 Event，此字段不可为空且最大长度为 128 字符。
      series:
        $ref: '#/definitions/io.k8s.api.events.v1.EventSeries'
        description: Data about the Event series this Event represents or nil if it's
          a singleton Event.
        x-kab-description-zh: |-
          关于此 Event 所代表的 Event 序列的数据。
          对于单实例的 Event 而言，此字段为 null。
      type:
        description: |-
          The type of this event (`"Normal"`, `"Warning"`), new types could be added in the future.
          It is machine-readable. This field cannot be empty for new Events.
        enum:
          - Normal
          - Warning
        type: string
        x-kab-description-zh: |-
          事件的类型（`"Normal"` 或 `"Warning"`）。未来可能会添加新的类型。
          此字段的值是及其可读的。新的 Event 必须设置此字段（不可为空）。
    required:
      - action
      - apiVersion
      - eventTime
      - kind
      - metadata
      - reason
      - regarding
      - reportingController
      - reportingInstance
      - type
    type: object
    x-kab-description-zh: |-
      Event 是对集群中某处发生的事件的报告。通常用来表达系统中的某种状态变化。
      Event 的保存时间很有限。随着时间推进，其触发源以及所携带的消息都可能发生变化。
      Event 的用户不应该对某个给定 `reason` 的事件的出现时间、是否反映的是下层同一个触发源，
      以及这一 `reason` 的事件是否会持续存在等等作任何假定。
      Event 应该被看做一种纯粹告知性质的、尽力而为的、补充性质的数据。
    x-kubernetes-group-version-kind:
      - group: events.k8s.io
        kind: Event
        version: v1
  io.k8s.api.events.v1.Event.UPDATE:
    description: |-
      Event is a report of an event somewhere in the cluster.
      It generally denotes some state change in the system.
      Events have a limited retention time and triggers and messages may evolve with time.
      Event consumers should not rely on the timing of an event with a given `reason`
      reflecting a consistent underlying trigger, or the continued existence of events with that `reason`.
      Events should be treated as informative, best-effort, supplemental data.
    properties:
      action:
        description: |-
          What action was taken/failed regarding to the `regarding` object. It is machine-readable.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          就 `regarding` 所引用的对象而言，采取了的（或者失败了的）操作是什么。字段值是机器可读的。
          对于新的 Event，此字段不可以为空，最大长度是 128 字符。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - events.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      deprecatedCount:
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        format: int32
        type: integer
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件的发生次数。'
      deprecatedFirstTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件第一次记录的时间。'
      deprecatedLastTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示事件最近一次出现并被记录的时间。'
      deprecatedSource:
        $ref: '#/definitions/io.k8s.api.core.v1.EventSource'
        description: '**DEPRECATED**: field assuring backward compatibility with `"core.v1"`
          Event type.'
        x-kab-description-zh: '**已弃用**：用来确保与 `"core.v1"` 中 Event 类型兼容的字段，表示报告此 Event
          的组件。'
      eventTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: The time when this Event was first observed.
        x-kab-description-zh: 事件第一次被观测到的时间。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Event
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object's metadata.
        x-kab-description-zh: 标准的对象元数据。
      note:
        description: |-
          A human-readable description of the status of this operation.
          Maximum length of the note is 1 kB, but libraries should be prepared to handle values up to 64kB.
        type: string
        x-kab-description-zh: |-
          关于此操作状态的描述，人类可读字符串。
          此说明的最大长度为 1 KB，不过用户应该为 64 KB 大小的说明做好准备。
      reason:
        description: |-
          Why the action was taken. It is human-readable.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          人类可读字符串，表示采取当前动作的原因。
          对于新的 Event 对象而言，此字段不可为空，最多 128 个字符。
      regarding:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The object this Event is about.
          In most cases it's an object reporting controller implements,
          e.g. ReplicaSetController implements ReplicaSets and this event is emitted because
          it acts on some changes in a ReplicaSet object.
        x-kab-description-zh: |-
          此事件所关联的对象。大多数时候，所引用的是负责报告的控制器所实现的一个对象。
          例如，ReplicaSetController 实现了 ReplicaSets，而此事件之所以被报告是因为控制器在某个
          ReplicaSet 对象上作出了某种变更。
      related:
        $ref: '#/definitions/io.k8s.api.core.v1.ObjectReference'
        description: |-
          The optional secondary object for more complex actions.
          E.g. when the `regarding` object triggers a creation or deletion of the `related` object.
        x-kab-description-zh: |-
          较复杂的动作所牵涉的另一个对象。
          例如，某 `regarding` 对象触发了 `related` 对象的创建或删除。
      reportingController:
        description: |-
          The name of the controller that emitted this Event, e.g. `"kubernetes.io/kubelet"`.
          This field cannot be empty for new Events.
        type: string
        x-kab-description-zh: |-
          生成此 Event 的控制器的名称。例如，`"kubernetes.io/kubelet"`。
          对于新的 Event，此字段不可为空。
      reportingInstance:
        description: |-
          The ID of the controller instance, e.g. `"kubelet-xyzf"`.
          This field cannot be empty for new Events and it can have at most 128 characters.
        maxLength: 128
        type: string
        x-kab-description-zh: |-
          控制器实例的 ID。例如，`"kubelet-xyzf"`。
          对于新的 Event，此字段不可为空且最大长度为 128 字符。
      series:
        $ref: '#/definitions/io.k8s.api.events.v1.EventSeries'
        description: Data about the Event series this Event represents or nil if it's
          a singleton Event.
        x-kab-description-zh: |-
          关于此 Event 所代表的 Event 序列的数据。
          对于单实例的 Event 而言，此字段为 null。
      type:
        description: |-
          The type of this event (`"Normal"`, `"Warning"`), new types could be added in the future.
          It is machine-readable. This field cannot be empty for new Events.
        enum:
          - Normal
          - Warning
        type: string
        x-kab-description-zh: |-
          事件的类型（`"Normal"` 或 `"Warning"`）。未来可能会添加新的类型。
          此字段的值是及其可读的。新的 Event 必须设置此字段（不可为空）。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      Event 是对集群中某处发生的事件的报告。通常用来表达系统中的某种状态变化。
      Event 的保存时间很有限。随着时间推进，其触发源以及所携带的消息都可能发生变化。
      Event 的用户不应该对某个给定 `reason` 的事件的出现时间、是否反映的是下层同一个触发源，
      以及这一 `reason` 的事件是否会持续存在等等作任何假定。
      Event 应该被看做一种纯粹告知性质的、尽力而为的、补充性质的数据。
    x-kubernetes-group-version-kind:
      - group: events.k8s.io
        kind: Event
        version: v1
  io.k8s.api.events.v1.EventList:
    description: A list of Event objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - events.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Event objects.
        items:
          $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
        type: array
        x-kab-description-zh: 包含 Event 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - EventList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Event 对象的列表。
    x-kubernetes-group-version-kind:
      - group: events.k8s.io
        kind: EventList
        version: v1
  io.k8s.api.events.v1.EventSeries:
    description: |-
      EventSeries contain information on series of Events, i.e. thing that was/is happening continuously
      for some time. How often to update the EventSeries is up to the event reporters.
      The default event reporter in `"k8s.io/client-go/tools/events/event_broadcaster.go"`
      shows how this struct is updated on heartbeats and can guide customized reporter implementations.
    properties:
      count:
        description: The number of occurrences in this series up to the last heartbeat
          time.
        format: int32
        type: integer
        x-kab-description-zh: 到上次心跳为止，事件序列中累计的事件计数。
      lastObservedTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime'
        description: Time when last Event from the series was seen before last heartbeat.
        x-kab-description-zh: 到上次心跳之前，最后一个事件出现时的时间戳。
    required:
      - count
      - lastObservedTime
    type: object
    x-kab-description-zh: |-
      EventSeries 包含关于 Event 序列的信息，即一段时间以来持续发生的某件事情。
      事件的报告者负责决定更新此 EventSeries 的频率。
      位于 `"k8s.io/client-go/tools/events/event_broadcaster.go"` 中的默认事件报告组件是一个例子，
      展示如何根据心跳更新此字段，可用来做事件报告实现的参考。
  io.k8s.api.flowcontrol.v1.ExemptPriorityLevelConfiguration:
    description: |-
      ExemptPriorityLevelConfiguration describes the configurable aspects of the handling of exempt requests.
      In the mandatory exempt configuration object the values in the fields here can be modified
      by authorized users, unlike the rest of the `spec`.
    properties:
      lendablePercent:
        default: 0
        description: This prescribes the fraction of the level's NominalCL that can
          be borrowed by other priority levels.
        format: int32
        maximum: 100
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          `lendablePercent` 包含一个百分比值，给出的是当前级别的 NominalCL 中可被其他优先级别借用的比例。
          根据此百分比，可以计算其他优先级别能够从本级别借用的席位数目，
      nominalConcurrencyShares:
        default: 0
        description: |-
          This (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level.
          This is the number of execution seats nominally reserved for this priority level.
          This DOES NOT limit the dispatching from this priority level but affects the other priority
          levels through the borrowing mechanism.
          The server's concurrency limit (ServerCL) is divided among all the priority levels
          in proportion to their NCS values.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段是当前优先级别名义上预留的执行席位数目，可用来帮助计算本级别可供其他级别借用的席位数目。
          此字段值对当前优先级别的请求派发没有影响，只会影响其他级别从此级别借用的席位。
          服务器上的并发度是基于各个优先级别的名义执行席位数来按比例分配的。
    type: object
    x-kab-description-zh: |-
      ExemptPriorityLevelConfiguration 描述处理豁免请求的一些可配置方面。
      在强制豁免配置对象中，这里的字段取值可被授权的用户修改，与 `spec` 中的其他字段不同。
  io.k8s.api.flowcontrol.v1.FlowDistinguisherMethod:
    description: The method of a flow distinguisher.
    properties:
      type:
        description: |-
          The type of flow distinguisher method.
          - `"ByUser"`: Use the username in the request as the flow distinguisher so that
            requests from different users can be insulated.
          - `"ByNamespace"`: Use the namespace of the object targeted by the request as
            the flow distinguisher. If the object is not namespaced, or if the request is
            a non-resource request, the distinguisher will be an empty string.
            An example usage of this type is to provide some insulation between
            projects in a multi-tenant environment.
        enum:
          - ByNamespace
          - ByUser
        minLength: 1
        type: string
        x-kab-description-zh: |-
          对请求数据流进行划分的方法：

          - `"ByUser"`：使用请求中的用户名来区分不同的数据流，用户名成为分类器。
          - `"ByNamespace"`：使用请求所针对的对象的名字空间来区分数据流，名字空间名称成为分类器。
            如果所请求的对象是集群作用域的，或者请求本身不是一个针对资源的请求，
            请求会被划分到一个特殊的组中（分类器是一个空字符串）。
            使用这种方法的个例子是在多租户场景对不同项目进行限流。
    required:
      - type
    type: object
    x-kab-description-zh: 流分类器（Flow Distinguisher）划分请求流的方法。
  io.k8s.api.flowcontrol.v1.FlowSchema.CREATE:
    description: |-
      FlowSchema defines the schema of a group of flows.
      Note that a flow is made up of a set of inbound API requests with similar attributes and
      is identified by the name of the FlowSchema and a **flow distinguisher**.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchema
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaSpec'
        description: The specification of the desired behavior of a FlowSchema.
        x-kab-description-zh: FlowSchema 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      FlowSchema 定义一组请求数据流的模式。
      注意，每个数据流由一组属性近似的 API 请求组成，可以通过 FlowSchema 名字和流分类器来区分。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
  io.k8s.api.flowcontrol.v1.FlowSchema.GET:
    description: |-
      FlowSchema defines the schema of a group of flows.
      Note that a flow is made up of a set of inbound API requests with similar attributes and
      is identified by the name of the FlowSchema and a **flow distinguisher**.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchema
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaSpec'
        description: The specification of the desired behavior of a FlowSchema.
        x-kab-description-zh: FlowSchema 预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaStatus'
        description: The current status of a FlowSchema.
        x-kab-description-zh: FlowSchema 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      FlowSchema 定义一组请求数据流的模式。
      注意，每个数据流由一组属性近似的 API 请求组成，可以通过 FlowSchema 名字和流分类器来区分。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
  io.k8s.api.flowcontrol.v1.FlowSchema.UPDATE:
    description: |-
      FlowSchema defines the schema of a group of flows.
      Note that a flow is made up of a set of inbound API requests with similar attributes and
      is identified by the name of the FlowSchema and a **flow distinguisher**.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchema
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name if specified must be a valid
          DNS subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaSpec'
        description: The specification of the desired behavior of a FlowSchema.
        x-kab-description-zh: FlowSchema 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      FlowSchema 定义一组请求数据流的模式。
      注意，每个数据流由一组属性近似的 API 请求组成，可以通过 FlowSchema 名字和流分类器来区分。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
  io.k8s.api.flowcontrol.v1.FlowSchemaCondition:
    description: Conditions for a FlowSchema.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: A unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        x-kab-description-zh: 唯一的、由一个单词构成的、驼峰编码的字符串，给出上次状况转换的原因。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: The type of the condition.
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: FlowSchema 的状况。
  io.k8s.api.flowcontrol.v1.FlowSchemaList:
    description: A list of FlowSchema objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of FlowSchema objects.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
        type: array
        x-kab-description-zh: 包含 FlowSchema 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchemaList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: The standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 FlowSchema 对象的列表。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchemaList
        version: v1
  io.k8s.api.flowcontrol.v1.FlowSchemaSpec:
    description: The FlowSchema's specification.
    properties:
      distinguisherMethod:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowDistinguisherMethod'
        description: |-
          This defines how to compute the flow distinguisher for requests that match this schema.
          `nil` means that the distinguisher is disabled and thus will always be an empty string.
        x-kab-description-zh: |-
          此字段用来定义如何为与此 FlowSchema 匹配的请求确定流分类器。
          此字段为 null 表示禁止使用分类器（分类器始终是一个空字符串）。
      matchingPrecedence:
        default: 1000
        description: |-
          This is used to choose among the FlowSchemas that match a given request.
          The chosen FlowSchema is among those with the numerically lowest
          (which we take to be logically highest) `matchingPrecedence`.
          Each `matchingPrecedence` value must be in the range `[1,10000]`.
          Note that if the precedence is not specified, it will be set to 1000 as default.
          Only when the name of the FlowSchema is `"exempt"` can the `matchingPrecedence` be set to 1.
        format: int32
        maximum: 10000
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此字段用来为给定请求选择 FlowSchema。所选定的 FlowSchema 是 `matchingPrecedence` 数值最低者。
          此字段值必须介于 1 和 10000 之间。未设置时，此字段默认值为 1000。
          只有 FlowSchemas 的名字为 `"exempt"` 时，才可将此字段设置为 1。
      priorityLevelConfiguration:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationReference'
        description: |-
          Reference to a PriorityLevelConfiguration in the cluster.
          If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid
          in its status.
        x-kab-description-zh: |-
          此字段值是对集群中某 PriorityLevelConfiguration 对象的引用。
          如果所引用的对象不存在，此 FlowSchema 会被忽略，并在其 `.status` 中标记为非法模式。
      rules:
        description: |-
          This describes which requests will match this FlowSchema.
          A request is matched if and only if at least one member of `rules` matches the request.
          If it is an empty slice, there will be no requests matching the FlowSchema.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PolicyRulesWithSubjects'
        type: array
        x-kab-description-zh: |-
          此字段描述哪些请求会与此 FlowSchema 匹配。
          如果 `rules` 中至少有一条规则与请求匹配，则视为请求与此 FlowSchema 匹配。
          如果此规则为空列表，则没有请求会与此 FlowSchema 匹配。
        x-kubernetes-list-type: atomic
    required:
      - priorityLevelConfiguration
    type: object
    x-kab-description-zh: FlowSchema 的行为规约。
  io.k8s.api.flowcontrol.v1.FlowSchemaStatus:
    description: The current state of a FlowSchema.
    properties:
      conditions:
        description: A list of the current states of FlowSchema.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaCondition'
        type: array
        x- kubernetes-patch-merge-key: type
        x- kubernetes-patch-strategy: merge
        x-kab-description-zh: FlowSchema 当前状况的列表。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
    type: object
    x-kab-description-zh: FlowSchema 对象的当前状态。
  io.k8s.api.flowcontrol.v1.GroupSubject:
    description: Detailed information for Group type of subject.
    properties:
      name:
        description: The user group that matches, or `"*"` to match all user groups.
        minLength: 1
        type: string
        x-kab-description-zh: 要匹配的用户组名。字段值 `"*"` 可以匹配所有用户组。
    required:
      - name
    type: object
    x-kab-description-zh: 关于 Group 类型主体的详细信息。
  io.k8s.api.flowcontrol.v1.LimitResponse:
    description: This defines how to handle requests that cannot be executed right
      now.
    properties:
      queuing:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.QueuingConfiguration'
        description: The configuration parameters for queuing. This field must be
          non-empty only if `type` is `"Queue"`.
        x-kab-description-zh: 排队操作的配置参数。当 `type` 为 `"Queue"` 才不可以为空。
      type:
        description: |-
          Valid options are:
          - `"Queue"` means that requests that cannot be executed upon arrival
            are held in a queue until they can be executed or a queuing limit is reached.
          - `"Reject"` means that requests that can not be executed upon arrival are rejected.
        enum:
          - Queue
          - Reject
        minLength: 1
        type: string
        x-kab-description-zh: |-
          可选的配置有：

          - `"Queue"`：表示到达时无法立即执行的请求会被保存到一个队列中，直到请求可被执行或者队列超限。
          - `"Reject"`：到达时无法立即执行的请求会被拒绝。
    required:
      - type
    type: object
    x-kab-description-zh: 此结构设置如何处理当前无法立即执行的请求。
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          queuing: Queuing
  io.k8s.api.flowcontrol.v1.LimitedPriorityLevelConfiguration:
    description: |-
      This specifies how to handle requests that are subject to limits. It addresses two issues:
      - How are requests for this priority level limited?
      - What should be done with requests that exceed the limit?
    properties:
      borrowingLimitPercent:
        description: |-
          This field, if present, configures a limit on how many seats this priority level can borrow
          from other priority levels.
          The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit
          on the total number of seats that this level may borrow at any one time.
          This field holds the ratio of that limit to the level's nominal concurrency limit.
          When this field is non-nil, it must hold a non-negative integer.

          The value of this field can be more than 100, implying that this priority level can borrow
          a number of seats that is greater than its own nominal concurrency limit (NominalCL).
          When this field is left `nil`, the limit is effectively infinite.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段如果被设置，则用来配置当前优先级别可以从其他优先级别借用的席位数。
          字段值是基于当前优先级别的名义并发度限制的百分比。
          此字段值非空时，必须为非负整数。例如当前优先级别的名义并发度限制为 200，当此值为 30 时，
          当前优先级别可以从其他级别借用的席位为 200 * 30 / 100 = 60.

          字段值大于 100 是允许的。当此字段未设置时，意味着可以借用的席位数不受限制。
      lendablePercent:
        description: |-
          `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed
          by other priority levels. The value of this field must be between 0 and 100, inclusive,
          and it defaults to 0.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段设置当前优先级别的名义并发度限制中，有多大比例的席位是可以借给其他优先级别使用的。
          字段值必须介于 0 和 100 之间，默认值为 0。
      limitResponse:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.LimitResponse'
        description: This indicates what to do with requests that can not be executed
          right now.
        x-kab-description-zh: 此字段用来设置如何处理当前不能马上执行的请求。
      nominalConcurrencyShares:
        default: 30
        description: |-
          This is to compute the nominal concurrency limit of this level.
          This is the number of execution seats available at this priority level.
          This is used both for requests dispatched from this priority level as well as requests dispatched from other priority levels
          borrowing seats from this level.
          The server's concurrency limit is divided among the limited priority levels in proportion to their norminal concurrency limits.
          Bigger numbers mean a larger nominal concurrency limit, at the expense of every other priority level.

          Setting this field to zero supports the construction of a **jail** for this priority level that is used to hold some request(s).
        format: int32,
        type: integer
        x-kab-description-zh: |-
          此字段配置当前优先级别的名义并发度限制，即在此优先级别上可用的执行席位个数。
          席位数包括以此优先级别派发的请求，也包括按其他借用了此级别席位的优先级别派发的请求。
          服务器上的并发度限制根据各个优先级别的名义并发度限值按比例分配。
          字段值必须是正整数。字段数值越大，意味着并发度限制值越高，尽管可能会伤害到其他优先级别的请求。

          此字段设置为零时，相当于为此优先级别构造了一个隔离区域，能够拘留某些请求。
    required:
      - limitResponse
    type: object
    x-kab-description-zh: |-
      此结构用来配置如何处理收到限制的请求。主要用来解决两个问题：

      - 当前优先级别下的请求是如何被限制的？
      - 超出限制时，应该怎样处理请求？
  io.k8s.api.flowcontrol.v1.NonResourcePolicyRule:
    description: |-
      A predicate that matches non-resource requests according to their verb and the target non-resource URL.
      A `nonResourcePolicyRule` matches a request if and only if both:
      - at least one member of `verbs` matches the request, and
      - at least one member of `nonResourceURLs` matches the request.
    properties:
      nonResourceURLs:
        description: |-
          A set of URL prefixes that a user should have access to and may not be empty. For example:

          - `"/healthz"` is legal
          - `"/hea*"` is illegal
          - `"/hea"` is legal but matches nothing
          - `"/hea/*"` also matches nothing
          - `"/healthz/*"` matches all per-component health checks
          - `"*"` matches all non-resource URLs. If it is present, it must be the only entry.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段给出一组 URL 前缀，列举用户可以访问的非资源端点。例如：

          - `"/healthz"` 是合法的
          - `"/hea*"` 是非法的
          - `"/hea"` 是合法的，但不会匹配任何请求
          - `"/hea/*"` 是合法的，但不会匹配任何请求
          - `"/healthz/*"` 可以匹配所有分组件给出的健康检查地址
          - `"*"` 可以匹配所有非资源的 URL。如果存在此项，则列表中不可包含条目。

          此列表不可为空。
        x-kubernetes-list-type: set
      verbs:
        description: |-
          A list of matching verbs and may not be empty.
          `"*"` matches all verbs. If it is present, it must be the only entry.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段为用来匹配的动词列表。列表不可为空。
          `"*"` 可以用来匹配所有的动词。
          如果列表中包含 `"*"`，则不可包含其他动词。
        x-kubernetes-list-type: set
    required:
      - nonResourceURLs
      - verbs
    type: object
    x-kab-description-zh: |-
      用来匹配非资源请求的条件，匹配是根据请求的动词及所针对的非资源 URL 来执行的。
      如果下面两个条件都满足，则请求被判定为匹配：

      - 至少 `verbs` 之一与请求的动词匹配，且
      - 至少 `nonResourceURLs` 之一与请求匹配。
  io.k8s.api.flowcontrol.v1.PolicyRulesWithSubjects:
    description: |-
      PolicyRulesWithSubjects prescribes a test on an API request.
      The test considers the subject making the request, the verb being requested, and the resource
      to be acted upon.
      A request is matched if and only if both (a) at least one member of `subjects` matches
      the request and (b) at least one member of `resourceRules` or `nonResourceRules` matches the request.
      At least one of `resourceRules` and `nonResourceRules` has to be specified."
    properties:
      nonResourceRules:
        description: |-
          A list of NonResourcePolicyRule that identify matching requests according to their verbs
          and the target non-resource URLs.
          At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.NonResourcePolicyRule'
        type: array
        x-kab-description-zh: |-
          由 NonResourcePolicyRule 组成的一个列表，用来根据请求的动词及所针对的非资源 URL 筛选请求。
          `resourceRules` 和 `nonResourceRules` 之一必须被设置。
        x-kubernetes-list-type: atomic
      resourceRules:
        description: |-
          A list of `ResourcePolicyRule`s that identify matching requests according to their verbs
          and the target resources.
          At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.ResourcePolicyRule'
        type: array
        x-kab-description-zh: |-
          由 ResourcePolicyRule 组成的一个列表，用来根据请求的动词及所针对的资源筛选请求。
          `resourceRules` 和 `nonResourceRules` 之一必须被设置。
        x-kubernetes-list-type: atomic
      subjects:
        description: |-
          The list of normal user, ServiceAccount, or group that this rule cares about.
          A list that includes both the `"system:authenticated"` and `"system:unauthenticated"`
          user groups matches every request.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.Subject'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          由普通用户、ServiceAccount、用户组构成的列表，用来表明此规则所关注的主体。
          如果列表中包含 `"system:authenticated"` 和 `"system:unauthenticated"` 用户组，
          则意味着匹配所有的请求。
        x-kubernetes-list-type: atomic
    required:
      - subjects
    type: object
    x-kab-description-zh: |-
      PolicyRulesWithSubjects 包含对 API 请求进行测试的条件。
      测试会考虑发起请求的主体、所请求的动词以及所操作的资源。
      只有请求 1）与 `subjects` 中至少一个成员匹配，并且 2）与 `resourceRules` 或 `nonResourceRules`
      之一匹配，才能认为请求通过测试。
      `resourceRules` 和 `nonResourceRules` 之一必须被设置。
  io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.CREATE:
    description: The configuration of a priority level.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名字必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec'
        description: The desired behavior of a PriorityLevelConfiguration
        x-kab-description-zh: PriorityLevelConfiguration 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 优先级别配置。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
  io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET:
    description: The configuration of a priority level.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec'
        description: The desired behavior of a PriorityLevelConfiguration.
        x-kab-description-zh: PriorityLevelConfiguration 的预期行为。
      status:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationStatus'
        description: The current status of a PriorityLevelConfiguration.
        x-kab-description-zh: PriorityLevelConfiguration 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: 优先级别配置。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
  io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.UPDATE:
    description: The configuration of a priority level.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名字必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec'
        description: The desired behavior of a PriorityLevelConfiguration.
        x-kab-description-zh: PriorityLevelConfiguration 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: 优先级别配置。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
  io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationCondition:
    description: The condition of a PriorityLevelConfiguration.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: A unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        x-kab-description-zh: 唯一的、由一个单词构成的、驼峰编码的字符串，给出上次状况转换的原因。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: The type of the condition.
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: PriorityLevelConfiguration 的状况。
  io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationList:
    description: A list of PriorityLevelConfiguration objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PriorityLevelConfiguration objects.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
        type: array
        x-kab-description-zh: 包含 PriorityLevelConfiguration 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfigurationList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 PriorityLevelConfiguration 对象的列表。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfigurationList
        version: v1
  io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationReference:
    description: Information about the priority level used.
    properties:
      name:
        description: The name of a `PriorityLevelConfiguration` resource. The name
          must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: 某个 `PriorityLevelConfiguration` 资源的名字。此字段必须是一个合法的 DNS
          子域名。
    required:
      - name
    type: object
    x-kab-description-zh: 关于所使用的优先级别的信息。
  io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationSpec:
    description: The configuration for a priority level.
    properties:
      exempt:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.ExemptPriorityLevelConfiguration'
        description: |-
          `exempt` specifies how requests are handled for an exempt priority level.
          This field MUST be empty if `type` is `"Limited"`.
          This field MAY be non-empty if `type` is `"Exempt"`.
          If empty and `type` is `"Exempt"` then the default values for
          `ExemptPriorityLevelConfiguration` apply.
        x-kab-description-zh: |-
          `exempt` 设置如果处理豁免优先级别的请求。当 `type` 为 `"Limited"` 时，此字段必须为空。
          当 `type` 为 `"Exempt"` 时，此字段可以不为空。
          如果 `type` 为 `"Exempt"` 时，此字段为空，则使用 ExemptPriorityLevelConfiguration 的默认值。
      limited:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.LimitedPriorityLevelConfiguration'
        description: |-
          This specifies how requests are handled for a *limited* priority level.
          This field must be non-empty if and only if `type` is `"Limited"`.
        x-kab-description-zh: |-
          此字段设置如何处理 **Limited** 优先级别的请求。
          `type` 为 `"Limited"` 时，必须设置此字段。其他情况下，不应设置此字段。
      type:
        description: |-
          This indicates whether this priority level is subject to limitation on request execution.

          - `"Exempt"` means that requests of this priority level are not subject to a limit
            (and thus are never queued) and do not detract from the capacity made available to
            other priority levels.
          - `"Limited"` means that (a) requests of this priority level *are* subject to limits and
            (b) some of the server's limited capacity is made available exclusively to this priority level.

          This field must be `"Exempt"` if the FlowoSchema's name is `"exempt"`.
        enum:
          - Exempt
          - Limited
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段设置当前优先级别的请求执行是否有可能被限制。

          - `"Exempt"`：意味着此优先级别的请求不会被受限制（因而也不会放入排队队列中），
            并且此优先级别的请求不会参与其他优先级别的容量计算中。
          - `"Limited"`：意味着 (a) 此优先级别的请求可能会收到限制；(b) 服务器端的有限容量中，
            有一部分会是为此优先级别专门预留的。

          如果 FlowoSchema 的名称为 `"exempt"`，则此字段值只能是 `"Exempt"`。
    required:
      - type
    type: object
    x-kab-description-zh: 某个优先级别的配置。
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          limited: Limited
  io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationStatus:
    description: The current state of a PriorityLevelConfigurationCondition.
    properties:
      conditions:
        description: The current conditions of the PriorityLevelConfigurationCondition.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationCondition'
        type: array
        x-kab-description-zh: PriorityLevelConfigurationCondition 的当前状况。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: PriorityLevelConfigurationCondition 的当前状态。
  io.k8s.api.flowcontrol.v1.QueuingConfiguration:
    description: The configuration parameters for request queuing.
    properties:
      handSize:
        default: 8
        description: |-
          A small positive number that configures the shuffle sharding of requests into queues.
          When enqueuing a request at this priority level, the request's flow identifier (a string pair)
          is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size
          specified here.
          The request is put into one of the shortest queues in that hand.
          `handSize` must be no larger than `queues`, and should be significantly smaller
          (so that a few heavy flows do not saturate most of the queues).
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段值为一个较小的正整数，用来配置如何将请求放入排队的队列。
          对当前优先级别的请求进行排队处理时，系统会对请求的流标识符求哈希值，
          并使用该哈希值来对队列的列表进行混排，并选取 `handSize` 个队列作为目标队列。
          要排队的请求会被放到目标队列集合的最短队列中。
          `handSize` 的大小不能大于 `queues` 值，并且应该远远小于后者，
          只有这样，才不会出现几个压力较大的请求流将大多数队列冲垮的情形。
      queueLengthLimit:
        default: 50
        description: |-
          The maximum number of requests allowed to be waiting in a given queue of this priority level
          at a time; excess requests are rejected.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          在任意时刻，此优先级别的给定队列中处于等待状态的请求个数不能超出这里设的阈值。
          队列中过长时，请求会被拒绝。
      queues:
        default: 64
        description: |-
          The number of queues for this priority level. The queues exist independently at each API server.
          Setting it to 1 effectively precludes shuffle sharding and thus makes the distinguisher method
          of associated flow schemas irrelevant.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此优先级别的排队队列个数。各个队列在每个 API 服务器上独立存在。
          如果将此字段设置为 1，就相当于不会执行队列混洗的情况，对应的 FlowSchema 中的流分类也就无意义了。
    type: object
    x-kab-description-zh: 用于管理请求排队的配置参数。
  io.k8s.api.flowcontrol.v1.ResourcePolicyRule:
    description: |-
      A predicate that matches some resource requests, testing the request's verb and the target resource.
      A resource request is matched if and only if:
      - at least one member of `verbs` matches the request,
      - at least one member of `apiGroups` matches the request,
      - at least one member of `resources` matches the request, and
      - either a) the request does not specify a namespace (i.e., `namespace==""`)
        and `clusterScope` is true or b) the request specifies a namespace and
        at least one member of `namespaces` matches the request's namespace.
    properties:
      apiGroups:
        description: |-
          A list of matching API groups and may not be empty.
          `"*"` matches all API groups and, if present, must be the only entry.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          一个用来匹配的 API 组的列表，不可为空。
          `"*"` 可以匹配所有 API 组。
          如果数组中存在 `"*"`，则不可存在其他条目。
        x-kubernetes-list-type: set
      clusterScope:
        description: |-
          This indicates whether to match requests that do not specify a namespace
          (which happens either because the resource is not namespaced or the request
          targets all namespaces).
          If this field is omitted or `false` then the `namespaces` field must contain a non-empty list.
        type: boolean
        x-kab-description-zh: |-
          此字段标明是否允许匹配未指定名字空间的请求（当所请求的资源是集群作用域的，
          或者请求针对所有名字空间时，会出现这种情况）。
          未设置此字段或者将其设置为 `false` 时，`namespaces` 字段不可为空列表。
      namespaces:
        description: |-
          A list of target namespaces that restricts matches.
          A request that specifies a target namespace matches only if either:

          1. this list contains that target namespace or
          1. this list contains `"*"`.

          Note that `"*"` matches any specified namespace but does not match a request that does NOT
          specify a namespace (see the `clusterScope` field for that).
          This list may be empty only if `clusterScope` is `true`.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          用来匹配请求的名字空间列表。当请求是针对具体名字空间时，满足如下条件的请求会被过滤出来：

          1. `namespaces` 中包括了请求所针对的名字空间，或者
          1. `namespaces` 列表中包含 `"*"`。

          注意，`"*"` 会匹配所有指定了名字空间的请求，但不会匹配未指定名字空间的请求。
          只有 `clusterScope` 设置为 `true` 时，此列表才可以为空。
        x-kubernetes-list-type: set
      resources:
        description: |-
          A list of matching resources (i.e., lowercase and plural) with, if desired, subresource.
          For example, `["services", "nodes/status"]`. This list may not be empty.
          `"*"` matches all resources and, if present, must be the only entry.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          用来匹配请求的资源（小写、负数）列表。如有需要，可以包含子资源。
          例如，`["services", "nodes/status"]`。
          此列表不可为空。
          `"*"` 可以用来匹配所有的资源。如果列表中包含了 `"*"`，则不可包含其他条目。
        x-kubernetes-list-type: set
      verbs:
        description: A list of matching verbs. `"*"` matches all verbs and, if present,
          must be the only entry.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          一个用来匹配的动词列表，不可为空。`"*"` 可以匹配所有动词。
          如果数组中存在 `"*"`，则不可存在其他条目。
        x-kubernetes-list-type: set
    required:
      - apiGroups
      - resources
      - verbs
    type: object
    x-kab-description-zh: |-
      用来通过测试请求的动词与目标资源来匹配过滤资源请求的条件。
      只有满足了以下条件的请求才会被筛选出来：

      - 请求动词与 `verbs` 中的至少一项匹配，并且
      - 请求的 API 组与 `apiGroups` 中的至少一项匹配，并且
      - 请求的资源与 `resources` 中的至少一项匹配，并且
      - 请求满足以下条件之一：
        a) 请求未指定名字空间（即 `namespace==""`）而 ResourcePolicyRule 中的 `clusterScope` 为 true，或者
        b) 请求指定了名字空间，且该名字空间与 `namespaces` 中至少一项匹配。
  io.k8s.api.flowcontrol.v1.ServiceAccountSubject:
    description: The detailed information for ServiceAccount type of subject.
    properties:
      name:
        description: The name of matching ServiceAccount objects, or `"*"` to match
          regardless of name.
        minLength: 1
        type: string
        x-kab-description-zh: 用来匹配 ServiceAccount 名称的字符串。`"*"` 可以匹配所有 ServiceAccount。
      namespace:
        description: The namespace of matching ServiceAccount objects.
        minLength: 1
        type: string
        x-kab-description-zh: ServiceAccount 所在的名字空间。
    required:
      - namespace
      - name
    type: object
    x-kab-description-zh: 关于 ServiceAccount 类型主体的详细信息。
  io.k8s.api.flowcontrol.v1.Subject:
    description: |-
      Subject matches the originator of a request, as identified by the request authentication system.
      There are three ways of matching an originator - by user, group, or ServiceAccount.
      One and only one of the subject kind must be specified.
    properties:
      group:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.GroupSubject'
        description: |-
          The group of the request originator.
          Required when `type` is set to `"Group"` and invalid otherwise.
        x-kab-description-zh: |-
          请求发起者所属的用户组。
          当 `type` 为 `"Group"` 时必须设置。其他情况下不可设置。
      kind:
        description: '`kind` indicates which one of the other fields is non-empty.'
        enum:
          - Group
          - ServiceAccount
          - User
        minLength: 1
        type: string
        x-kab-description-zh: '`kind` 用来标示结构中哪个字段内包含有意义的信息。'
      serviceAccount:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.ServiceAccountSubject'
        description: |-
          The ServiceAccount of the request originator.
          Required when `type` is set to `"ServiceAccount"` and invalid otherwise.
        x-kab-description-zh: |-
          发起请求的 ServiceAccount。
          当 `type` 为 `"ServiceAccount"` 时必须设置。其他情况下不可设置。
      user:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1.UserSubject'
        description: |-
          The user of the request originator.
          Required when `type` is set to `"User"` and invalid otherwise.
        x-kab-description-zh: |-
          发起请求的用户。
          当 `type` 为 `"User"` 时必须设置。其他情况下不可设置。
    required:
      - kind
    type: object
    x-kab-description-zh: |-
      Subject 用来匹配请求的发起者，请求的身份认证系统能够识别出这类信息。
      匹配发起者的方法有三种：按用户、按用户组、按服务账号。
      此结构中可以且仅可以设置三种主体中的一种。
    x-kubernetes-unions:
      - discriminator: kind
        fields-to-discriminateBy:
          group: Group
          serviceAccount: ServiceAccount
          user: User
  io.k8s.api.flowcontrol.v1.UserSubject:
    description: The detailed information for User type of subject.
    properties:
      name:
        description: The username that matches, or `"*"` to match all usernames.
        minLength: 1
        type: string
        x-kab-description-zh: 要匹配的用户名。`"*"` 意味着匹配所有用户名。
    required:
      - name
    type: object
    x-kab-description-zh: 关于 User 类型主体的详细信息。
  io.k8s.api.flowcontrol.v1beta3.ExemptPriorityLevelConfiguration:
    description: ExemptPriorityLevelConfiguration describes the configurable aspects
      of the handling of exempt requests. In the mandatory exempt configuration object
      the values in the fields here can be modified by authorized users, unlike the
      rest of the `spec`.
    properties:
      lendablePercent:
        description: This prescribes the fraction of the level's NominalCL that can
          be borrowed by other priority levels.
        format: int32
        type: integer
        x-kab-description-zh: |-
          `lendablePercent` 包含一个百分比值，给出的是当前级别的 NominalCL 中可被其他优先级别借用的比例。
          根据此百分比，可以计算其他优先级别能够从本级别借用的席位数目，
      nominalConcurrencyShares:
        default: 0
        description: |-
          This (NCS) contributes to the computation of the NominalConcurrencyLimit (NominalCL) of this level.
          This is the number of execution seats nominally reserved for this priority level.
          This DOES NOT limit the dispatching from this priority level but affects the other priority
          levels through the borrowing mechanism.
          The server's concurrency limit (ServerCL) is divided among all the priority levels
          in proportion to their NCS values.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段是当前优先级别名义上预留的执行席位数目，可用来帮助计算本级别可供其他级别借用的席位数目。
          此字段值对当前优先级别的请求派发没有影响，只会影响其他级别从此级别借用的席位。
          服务器上的并发度是基于各个优先级别的名义执行席位数来按比例分配的。
    type: object
    x-kab-description-zh: |-
      ExemptPriorityLevelConfiguration 描述处理豁免请求的一些可配置方面。
      在强制豁免配置对象中，这里的字段取值可被授权的用户修改，与 `spec` 中的其他字段不同。
  io.k8s.api.flowcontrol.v1beta3.FlowDistinguisherMethod:
    description: The method of a flow distinguisher.
    properties:
      type:
        description: |-
          The type of flow distinguisher method.
          - `"ByUser"`: Use the username in the request as the flow distinguisher so that
            requests from different users can be insulated.
          - `"ByNamespace"`: Use the namespace of the object targeted by the request as
            the flow distinguisher. If the object is not namespaced, or if the request is
            a non-resource request, the distinguisher will be an empty string.
            An example usage of this type is to provide some insulation between
            projects in a multi-tenant environment.
        enum:
          - ByNamespace
          - ByUser
        minLength: 1
        type: string
        x-kab-description-zh: |-
          对请求数据流进行划分的方法：

          - `"ByUser"`：使用请求中的用户名来区分不同的数据流，用户名成为分类器。
          - `"ByNamespace"`：使用请求所针对的对象的名字空间来区分数据流，名字空间名称成为分类器。
            如果所请求的对象是集群作用域的，或者请求本身不是一个针对资源的请求，
            请求会被划分到一个特殊的组中（分类器是一个空字符串）。
            使用这种方法的个例子是在多租户场景对不同项目进行限流。
    required:
      - type
    type: object
    x-kab-description-zh: 流分类器（Flow Distinguisher）划分请求流的方法。
  io.k8s.api.flowcontrol.v1beta3.FlowSchema.CREATE:
    description: |-
      FlowSchema defines the schema of a group of flows.
      Note that a flow is made up of a set of inbound API requests with similar attributes and
      is identified by the name of the FlowSchema and a **flow distinguisher**.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchema
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaSpec'
        description: The specification of the desired behavior of a FlowSchema.
        x-kab-description-zh: FlowSchema 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      FlowSchema 定义一组请求数据流的模式。
      注意，每个数据流由一组属性近似的 API 请求组成，可以通过 FlowSchema 名字和流分类器来区分。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET:
    description: |-
      FlowSchema defines the schema of a group of flows.
      Note that a flow is made up of a set of inbound API requests with similar attributes and
      is identified by the name of the FlowSchema and a **flow distinguisher**.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchema
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaSpec'
        description: The specification of the desired behavior of a FlowSchema.
        x-kab-description-zh: FlowSchema 预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaStatus'
        description: The current status of a FlowSchema.
        x-kab-description-zh: FlowSchema 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      FlowSchema 定义一组请求数据流的模式。
      注意，每个数据流由一组属性近似的 API 请求组成，可以通过 FlowSchema 名字和流分类器来区分。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.FlowSchema.UPDATE:
    description: |-
      FlowSchema defines the schema of a group of flows.
      Note that a flow is made up of a set of inbound API requests with similar attributes and
      is identified by the name of the FlowSchema and a **flow distinguisher**.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchema
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name if specified must be a valid
          DNS subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaSpec'
        description: The specification of the desired behavior of a FlowSchema.
        x-kab-description-zh: FlowSchema 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      FlowSchema 定义一组请求数据流的模式。
      注意，每个数据流由一组属性近似的 API 请求组成，可以通过 FlowSchema 名字和流分类器来区分。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.FlowSchemaCondition:
    description: Conditions for a FlowSchema.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: A unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        x-kab-description-zh: 唯一的、由一个单词构成的、驼峰编码的字符串，给出上次状况转换的原因。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: The type of the condition.
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: FlowSchema 的状况。
  io.k8s.api.flowcontrol.v1beta3.FlowSchemaList:
    description: A list of FlowSchema objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of FlowSchema objects.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
        type: array
        x-kab-description-zh: 包含 FlowSchema 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - FlowSchemaList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: The standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 FlowSchema 对象的列表。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: FlowSchemaList
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.FlowSchemaSpec:
    description: The FlowSchema's specification
    properties:
      distinguisherMethod:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowDistinguisherMethod'
        description: |-
          This defines how to compute the flow distinguisher for requests that match this schema.
          `nil` means that the distinguisher is disabled and thus will always be an empty string.
        x-kab-description-zh: |-
          此字段用来定义如何为与此 FlowSchema 匹配的请求确定流分类器。
          此字段为 null 表示禁止使用分类器（分类器始终是一个空字符串）。
      matchingPrecedence:
        default: 1000
        description: |-
          This is used to choose among the FlowSchemas that match a given request.
          The chosen FlowSchema is among those with the numerically lowest
          (which we take to be logically highest) `matchingPrecedence`.
          Each `matchingPrecedence` value must be in the range `[1,10000]`.
          Note that if the precedence is not specified, it will be set to 1000 as default.
          Only when the name of the FlowSchema is `"exempt"` can the `matchingPrecedence` be set to 1.
        format: int32
        maximum: 10000
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此字段用来为给定请求选择 FlowSchema。所选定的 FlowSchema 是 `matchingPrecedence` 数值最低者。
          此字段值必须介于 1 和 10000 之间。未设置时，此字段默认值为 1000。
          只有 FlowSchemas 的名字为 `"exempt"` 时，才可将此字段设置为 1。
      priorityLevelConfiguration:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationReference'
        description: |-
          Reference to a PriorityLevelConfiguration in the cluster.
          If the reference cannot be resolved, the FlowSchema will be ignored and marked as invalid
          in its status.
        x-kab-description-zh: |-
          此字段值是对集群中某 PriorityLevelConfiguration 对象的引用。
          如果所引用的对象不存在，此 FlowSchema 会被忽略，并在其 `.status` 中标记为非法模式。
      rules:
        description: |-
          This describes which requests will match this FlowSchema.
          A request is matched if and only if at least one member of `rules` matches the request.
          If it is an empty slice, there will be no requests matching the FlowSchema.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PolicyRulesWithSubjects'
        type: array
        x-kab-description-zh: |-
          此字段描述哪些请求会与此 FlowSchema 匹配。
          如果 `rules` 中至少有一条规则与请求匹配，则视为请求与此 FlowSchema 匹配。
          如果此规则为空列表，则没有请求会与此 FlowSchema 匹配。
        x-kubernetes-list-type: atomic
    required:
      - priorityLevelConfiguration
    type: object
  io.k8s.api.flowcontrol.v1beta3.FlowSchemaStatus:
    description: The current state of a FlowSchema.
    properties:
      conditions:
        description: A list of the current states of FlowSchema.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaCondition'
        type: array
        x-kab-description-zh: FlowSchema 当前状况的列表。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: FlowSchema 对象的当前状态。
  io.k8s.api.flowcontrol.v1beta3.GroupSubject:
    description: Detailed information for Group type of subject.
    properties:
      name:
        description: The user group that matches, or `"*"` to match all user groups.
        minLength: 1
        type: string
        x-kab-description-zh: 要匹配的用户组名。字段值 `"*"` 可以匹配所有用户组。
    required:
      - name
    type: object
    x-kab-description-zh: 关于 Group 类型主体的详细信息。
  io.k8s.api.flowcontrol.v1beta3.LimitResponse:
    description: This defines how to handle requests that cannot be executed right
      now.
    properties:
      queuing:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.QueuingConfiguration'
        description: The configuration parameters for queuing. This field must be
          non-empty only if `type` is `"Queue"`.
        x-kab-description-zh: 排队操作的配置参数。当 `type` 为 `"Queue"` 才不可以为空。
      type:
        description: |-
          Valid options are:
          - `"Queue"` means that requests that cannot be executed upon arrival
            are held in a queue until they can be executed or a queuing limit is reached.
          - `"Reject"` means that requests that can not be executed upon arrival are rejected.
        enum:
          - Queue
          - Reject
        minLength: 1
        type: string
        x-kab-description-zh: |-
          可选的配置有：

          - `"Queue"`：表示到达时无法立即执行的请求会被保存到一个队列中，直到请求可被执行或者队列超限。
          - `"Reject"`：到达时无法立即执行的请求会被拒绝。
    required:
      - type
    type: object
    x-kab-description-zh: 此结构设置如何处理当前无法立即执行的请求。
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          queuing: Queuing
  io.k8s.api.flowcontrol.v1beta3.LimitedPriorityLevelConfiguration:
    description: |-
      This specifies how to handle requests that are subject to limits. It addresses two issues:
      - How are requests for this priority level limited?
      - What should be done with requests that exceed the limit?
    properties:
      borrowingLimitPercent:
        description: |-
          This field, if present, configures a limit on how many seats this priority level can borrow
          from other priority levels.
          The limit is known as this level's BorrowingConcurrencyLimit (BorrowingCL) and is a limit
          on the total number of seats that this level may borrow at any one time.
          This field holds the ratio of that limit to the level's nominal concurrency limit.
          When this field is non-nil, it must hold a non-negative integer.

          The value of this field can be more than 100, implying that this priority level can borrow
          a number of seats that is greater than its own nominal concurrency limit (NominalCL).
          When this field is left `nil`, the limit is effectively infinite.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段如果被设置，则用来配置当前优先级别可以从其他优先级别借用的席位数。
          字段值是基于当前优先级别的名义并发度限制的百分比。
          此字段值非空时，必须为非负整数。例如当前优先级别的名义并发度限制为 200，当此值为 30 时，
          当前优先级别可以从其他级别借用的席位为 200 * 30 / 100 = 60.

          字段值大于 100 是允许的。当此字段未设置时，意味着可以借用的席位数不受限制。
      lendablePercent:
        description: |-
          `lendablePercent` prescribes the fraction of the level's NominalCL that can be borrowed
          by other priority levels. The value of this field must be between 0 and 100, inclusive,
          and it defaults to 0.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段设置当前优先级别的名义并发度限制中，有多大比例的席位是可以借给其他优先级别使用的。
          字段值必须介于 0 和 100 之间，默认值为 0。
      limitResponse:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.LimitResponse'
        description: This indicates what to do with requests that can not be executed
          right now.
        x-kab-description-zh: 此字段用来设置如何处理当前不能马上执行的请求。
      nominalConcurrencyShares:
        default: 30
        description: |-
          `nominalConcurrencyShares` (NCS) contributes to the computation of the nominal
          concurrency limit (NominalCL) of this level.
          This is the number of execution seats available at this priority level.
          This is used both for requests dispatched from this priority level as well as
          requests dispatched from other priority levels borrowing seats from this level.
          The server's concurrency limit (ServerCL) is divided among the Limited priority
          levels in proportion to their NCS values.
          Bigger numbers mean a larger nominal concurrency limit, at the expense of every
          other Limited priority level.
        format: int32
        type: integer
        x-kab-description-zh: |-
          `nominalConcurrencyShares` (NCS) 用来计算当前优先级别的名义并发限制。
          此值给出当前优先级别的执行席位个数，
          包括按此级别派发的请求以及按其他从此级别借用席位的级别派发的请求。
          服务器的并发度限制根据各个级别的 NCS 值按比例分配。
          数值越大，代表其名义并发度限制值越大，对其他级别的影响也越大。
    required:
      - limitResponse
    type: object
    x-kab-description-zh: |-
      此结构用来配置如何处理收到限制的请求。主要用来解决两个问题：

      - 当前优先级别下的请求是如何被限制的？
      - 超出限制时，应该怎样处理请求？
  io.k8s.api.flowcontrol.v1beta3.NonResourcePolicyRule:
    description: |-
      A predicate that matches non-resource requests according to their verb and the target non-resource URL.
      A `nonResourcePolicyRule` matches a request if and only if both:
      - at least one member of `verbs` matches the request, and
      - at least one member of `nonResourceURLs` matches the request.
    properties:
      nonResourceURLs:
        description: |-
          A set of URL prefixes that a user should have access to and may not be empty. For example:

          - `"/healthz"` is legal
          - `"/hea*"` is illegal
          - `"/hea"` is legal but matches nothing
          - `"/hea/*"` also matches nothing
          - `"/healthz/*"` matches all per-component health checks
          - `"*"` matches all non-resource URLs. If it is present, it must be the only entry.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段给出一组 URL 前缀，列举用户可以访问的非资源端点。例如：

          - `"/healthz"` 是合法的
          - `"/hea*"` 是非法的
          - `"/hea"` 是合法的，但不会匹配任何请求
          - `"/hea/*"` 是合法的，但不会匹配任何请求
          - `"/healthz/*"` 可以匹配所有分组件给出的健康检查地址
          - `"*"` 可以匹配所有非资源的 URL。如果存在此项，则列表中不可包含条目。

          此列表不可为空。
        x-kubernetes-list-type: set
      verbs:
        description: |-
          A list of matching verbs and may not be empty.
          `"*"` matches all verbs. If it is present, it must be the only entry.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段为用来匹配的动词列表。列表不可为空。
          `"*"` 可以用来匹配所有的动词。
          如果列表中包含 `"*"`，则不可包含其他动词。
        x-kubernetes-list-type: set
    required:
      - nonResourceURLs
      - verbs
    type: object
    x-kab-description-zh: |-
      用来匹配非资源请求的条件，匹配是根据请求的动词及所针对的非资源 URL 来执行的。
      如果下面两个条件都满足，则请求被判定为匹配：

      - 至少 `verbs` 之一与请求的动词匹配，且
      - 至少 `nonResourceURLs` 之一与请求匹配。
  io.k8s.api.flowcontrol.v1beta3.PolicyRulesWithSubjects:
    description: |-
      PolicyRulesWithSubjects prescribes a test that applies to a request to an API server.
      The test considers the subject making the request, the verb being requested,
      and the resource to be acted upon.
      This PolicyRulesWithSubjects matches a request if and only if both
      (a) at least one member of `subjects` matches the request and
      (b) at least one member of `resourceRules` or `nonResourceRules` matches the request.

      At least one of `resourceRules` and `nonResourceRules` has to be specified."
    properties:
      nonResourceRules:
        description: |-
          A list of NonResourcePolicyRule that identify matching requests according to their verbs
          and the target non-resource URLs.
          At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.NonResourcePolicyRule'
        type: array
        x-kab-description-zh: |-
          由 NonResourcePolicyRule 组成的一个列表，用来根据请求的动词及所针对的非资源 URL 筛选请求。
          `resourceRules` 和 `nonResourceRules` 之一必须被设置。
        x-kubernetes-list-type: atomic
      resourceRules:
        description: |-
          A list of `ResourcePolicyRule`s that identify matching requests according to their verbs
          and the target resources.
          At least one of `resourceRules` and `nonResourceRules` has to be non-empty.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.ResourcePolicyRule'
        type: array
        x-kab-description-zh: |-
          由 ResourcePolicyRule 组成的一个列表，用来根据请求的动词及所针对的资源筛选请求。
          `resourceRules` 和 `nonResourceRules` 之一必须被设置。
        x-kubernetes-list-type: atomic
      subjects:
        description: |-
          The list of normal user, ServiceAccount, or group that this rule cares about.
          A list that includes both the `"system:authenticated"` and `"system:unauthenticated"`
          user groups matches every request.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.Subject'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          由普通用户、ServiceAccount、用户组构成的列表，用来表明此规则所关注的主体。
          如果列表中包含 `"system:authenticated"` 和 `"system:unauthenticated"` 用户组，
          则意味着匹配所有的请求。
        x-kubernetes-list-type: atomic
    required:
      - subjects
    type: object
    x-kab-description-zh: |-
      PolicyRulesWithSubjects 包含对 API 请求进行测试的条件。
      测试会考虑发起请求的主体、所请求的动词以及所操作的资源。只有请求
      1）与 `subjects` 中至少一个成员匹配，并且
      2）与 `resourceRules` 或 `nonResourceRules`
      之一匹配，才能认为请求通过测试。

      `resourceRules` 和 `nonResourceRules` 之一必须被设置。
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.CREATE:
    description: The configuration of a priority level.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名字必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec'
        description: The desired behavior of a PriorityLevelConfiguration
        x-kab-description-zh: PriorityLevelConfiguration 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 优先级别配置。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET:
    description: The configuration of a priority level.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec'
        description: The desired behavior of a PriorityLevelConfiguration.
        x-kab-description-zh: PriorityLevelConfiguration 的预期行为。
      status:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationStatus'
        description: The current status of a PriorityLevelConfiguration.
        x-kab-description-zh: PriorityLevelConfiguration 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: 优先级别配置。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.UPDATE:
    description: The configuration of a priority level.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfiguration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。名字必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec'
        description: The desired behavior of a PriorityLevelConfiguration.
        x-kab-description-zh: PriorityLevelConfiguration 的预期行为。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 优先级别配置。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationCondition:
    description: The condition of a PriorityLevelConfiguration.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: A human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: A unique, one-word, CamelCase reason for the condition's last
          transition.
        type: string
        x-kab-description-zh: 唯一的、由一个单词构成的、驼峰编码的字符串，给出上次状况转换的原因。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        minLength: 1
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: The type of the condition.
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: PriorityLevelConfiguration 的状况。
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationList:
    description: A list of PriorityLevelConfiguration objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - flowcontrol.apiserver.k8s.io/v1beta3
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PriorityLevelConfiguration objects.
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
        type: array
        x-kab-description-zh: 包含 PriorityLevelConfiguration 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityLevelConfigurationList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 PriorityLevelConfiguration 对象的列表。
    x-kubernetes-group-version-kind:
      - group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfigurationList
        version: v1beta3
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationReference:
    description: Information that points to the "request-priority" being used.
    properties:
      name:
        description: The name of a `PriorityLevelConfiguration` resource. The name
          must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: 某个 `PriorityLevelConfiguration` 资源的名字。此字段必须是一个合法的 DNS
          子域名。
    required:
      - name
    type: object
    x-kab-description-zh: 指向所使用的请求优先级的信息。
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationSpec:
    description: The configuration for a priority level.
    properties:
      exempt:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.ExemptPriorityLevelConfiguration'
        description: |-
          `exempt` specifies how requests are handled for an exempt priority level.
          This field MUST be empty if `type` is `"Limited"`.
          This field MAY be non-empty if `type` is `"Exempt"`.
          If empty and `type` is `"Exempt"` then the default values for
          `ExemptPriorityLevelConfiguration` apply.
        x-kab-description-zh: |-
          `exempt` 设置如果处理豁免优先级别的请求。当 `type` 为 `"Limited"` 时，此字段必须为空。
          当 `type` 为 `"Exempt"` 时，此字段可以不为空。
          如果 `type` 为 `"Exempt"` 时，此字段为空，则使用 ExemptPriorityLevelConfiguration 的默认值。
      limited:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.LimitedPriorityLevelConfiguration'
        description: |-
          This specifies how requests are handled for a *limited* priority level.
          This field must be non-empty if and only if `type` is `"Limited"`.
        x-kab-description-zh: |-
          此字段设置如何处理 **Limited** 优先级别的请求。
          `type` 为 `"Limited"` 时，必须设置此字段。其他情况下，不应设置此字段。
      type:
        description: |-
          This indicates whether this priority level is subject to limitation on request execution.

          - `"Exempt"` means that requests of this priority level are not subject to a limit
            (and thus are never queued) and do not detract from the capacity made available to
            other priority levels.
          - `"Limited"` means that (a) requests of this priority level *are* subject to limits and
            (b) some of the server's limited capacity is made available exclusively to this priority level.

          This field must be `"Exempt"` if the FlowoSchema's name is `"exempt"`.
        enum:
          - Exempt
          - Limited
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段设置当前优先级别的请求执行是否有可能被限制。

          - `"Exempt"`：意味着此优先级别的请求不会被受限制（因而也不会放入排队队列中），
            并且此优先级别的请求不会参与其他优先级别的容量计算中。
          - `"Limited"`：意味着 (a) 此优先级别的请求可能会收到限制；(b) 服务器端的有限容量中，
            有一部分会是为此优先级别专门预留的。

          如果 FlowoSchema 的名称为 `"exempt"`，则此字段值只能是 `"Exempt"`。
    required:
      - type
    type: object
    x-kab-description-zh: 某个优先级别的配置。
    x-kubernetes-unions:
      - discriminator: type
        fields-to-discriminateBy:
          exempt: Exempt
          limited: Limited
  io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationStatus:
    description: The current state of a "request-priority".
    properties:
      conditions:
        description: The current state of "request-priority".
        items:
          $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationCondition'
        type: array
        x-kab-description-zh: PriorityLevelConfigurationCondition 的当前状况。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: PriorityLevelConfigurationCondition 的当前状态。
  io.k8s.api.flowcontrol.v1beta3.QueuingConfiguration:
    description: The configuration parameters for request queuing.
    properties:
      handSize:
        default: 8
        description: |-
          A small positive number that configures the shuffle sharding of requests into queues.
          When enqueuing a request at this priority level, the request's flow identifier (a string pair)
          is hashed and the hash value is used to shuffle the list of queues and deal a hand of the size
          specified here.
          The request is put into one of the shortest queues in that hand.
          `handSize` must be no larger than `queues`, and should be significantly smaller
          (so that a few heavy flows do not saturate most of the queues).
        format: int32
        type: integer
        x-kab-description-zh: |-
          此字段值为一个较小的正整数，用来配置如何将请求放入排队的队列。
          对当前优先级别的请求进行排队处理时，系统会对请求的流标识符求哈希值，
          并使用该哈希值来对队列的列表进行混排，并选取 `handSize` 个队列作为目标队列。
          要排队的请求会被放到目标队列集合的最短队列中。
          `handSize` 的大小不能大于 `queues` 值，并且应该远远小于后者，
          只有这样，才不会出现几个压力较大的请求流将大多数队列冲垮的情形。
      queueLengthLimit:
        default: 50
        description: |-
          The maximum number of requests allowed to be waiting in a given queue of this priority level
          at a time; excess requests are rejected.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          在任意时刻，此优先级别的给定队列中处于等待状态的请求个数不能超出这里设的阈值。
          队列中过长时，请求会被拒绝。
      queues:
        default: 64
        description: |-
          The number of queues for this priority level. The queues exist independently at each API server.
          Setting it to 1 effectively precludes shuffle sharding and thus makes the distinguisher method
          of associated flow schemas irrelevant.
        format: int32
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此优先级别的排队队列个数。各个队列在每个 API 服务器上独立存在。
          如果将此字段设置为 1，就相当于不会执行队列混洗的情况，对应的 FlowSchema 中的流分类也就无意义了。
    type: object
    x-kab-description-zh: 用于管理请求排队的配置参数。
  io.k8s.api.flowcontrol.v1beta3.ResourcePolicyRule:
    description: |-
      A predicate that matches some resource requests, testing the request's verb and the target resource.
      A resource request is matched if and only if:
      - at least one member of `verbs` matches the request,
      - at least one member of `apiGroups` matches the request,
      - at least one member of `resources` matches the request, and
      - either a) the request does not specify a namespace (i.e., `namespace==""`)
        and `clusterScope` is true or b) the request specifies a namespace and
        at least one member of `namespaces` matches the request's namespace.
    properties:
      apiGroups:
        description: |-
          A list of matching API groups and may not be empty.
          `"*"` matches all API groups and, if present, must be the only entry.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          一个用来匹配的 API 组的列表，不可为空。
          `"*"` 可以匹配所有 API 组。
          如果数组中存在 `"*"`，则不可存在其他条目。
        x-kubernetes-list-type: set
      clusterScope:
        description: |-
          This indicates whether to match requests that do not specify a namespace
          (which happens either because the resource is not namespaced or the request
          targets all namespaces).
          If this field is omitted or `false` then the `namespaces` field must contain a non-empty list.
        type: boolean
        x-kab-description-zh: |-
          此字段标明是否允许匹配未指定名字空间的请求（当所请求的资源是集群作用域的，
          或者请求针对所有名字空间时，会出现这种情况）。
          未设置此字段或者将其设置为 `false` 时，`namespaces` 字段不可为空列表。
      namespaces:
        description: |-
          A list of target namespaces that restricts matches.
          A request that specifies a target namespace matches only if either:

          1. this list contains that target namespace or
          1. this list contains `"*"`.

          Note that `"*"` matches any specified namespace but does not match a request that does NOT
          specify a namespace (see the `clusterScope` field for that).
          This list may be empty only if `clusterScope` is `true`.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          用来匹配请求的名字空间列表。当请求是针对具体名字空间时，满足如下条件的请求会被过滤出来：

          1. `namespaces` 中包括了请求所针对的名字空间，或者
          1. `namespaces` 列表中包含 `"*"`。

          注意，`"*"` 会匹配所有指定了名字空间的请求，但不会匹配未指定名字空间的请求。
          只有 `clusterScope` 设置为 `true` 时，此列表才可以为空。
        x-kubernetes-list-type: set
      resources:
        description: |-
          A list of matching resources (i.e., lowercase and plural) with, if desired, subresource.
          For example, `["services", "nodes/status"]`. This list may not be empty.
          `"*"` matches all resources and, if present, must be the only entry.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          用来匹配请求的资源（小写、负数）列表。如有需要，可以包含子资源。
          例如，`["services", "nodes/status"]`。
          此列表不可为空。
          `"*"` 可以用来匹配所有的资源。如果列表中包含了 `"*"`，则不可包含其他条目。
        x-kubernetes-list-type: set
      verbs:
        description: A list of matching verbs. `"*"` matches all verbs and, if present,
          must be the only entry.
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          一个用来匹配的动词列表，不可为空。`"*"` 可以匹配所有动词。
          如果数组中存在 `"*"`，则不可存在其他条目。
        x-kubernetes-list-type: set
    required:
      - apiGroups
      - resources
      - verbs
    type: object
    x-kab-description-zh: |-
      用来通过测试请求的动词与目标资源来匹配过滤资源请求的条件。
      只有满足了以下条件的请求才会被筛选出来：

      - 请求动词与 `verbs` 中的至少一项匹配，并且
      - 请求的 API 组与 `apiGroups` 中的至少一项匹配，并且
      - 请求的资源与 `resources` 中的至少一项匹配，并且
      - 请求满足以下条件之一：
        a) 请求未指定名字空间（即 `namespace==""`）而 ResourcePolicyRule 中的 `clusterScope` 为 true，或者
        b) 请求指定了名字空间，且该名字空间与 `namespaces` 中至少一项匹配。
  io.k8s.api.flowcontrol.v1beta3.ServiceAccountSubject:
    description: The detailed information for ServiceAccount type of subject.
    properties:
      name:
        description: The name of matching ServiceAccount objects, or `"*"` to match
          regardless of name.
        minLength: 1
        type: string
        x-kab-description-zh: 用来匹配 ServiceAccount 名称的字符串。`"*"` 可以匹配所有 ServiceAccount。
      namespace:
        description: The namespace of matching ServiceAccount objects.
        minLength: 1
        type: string
        x-kab-description-zh: ServiceAccount 所在的名字空间。
    required:
      - namespace
      - name
    type: object
    x-kab-description-zh: 关于 ServiceAccount 类型主体的详细信息。
  io.k8s.api.flowcontrol.v1beta3.Subject:
    description: |-
      Subject matches the originator of a request, as identified by the request authentication system.
      There are three ways of matching an originator - by user, group, or ServiceAccount.
      One and only one of the subject kind must be specified.
    properties:
      group:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.GroupSubject'
        description: |-
          The group of the request originator.
          Required when `type` is set to `"Group"` and invalid otherwise.
        x-kab-description-zh: |-
          请求发起者所属的用户组。
          当 `type` 为 `"Group"` 时必须设置。其他情况下不可设置。
      kind:
        description: '`kind` indicates which one of the other fields is non-empty.'
        enum:
          - Group
          - ServiceAccount
          - User
        minLength: 1
        type: string
        x-kab-description-zh: '`kind` 用来标示结构中哪个字段内包含有意义的信息。'
      serviceAccount:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.ServiceAccountSubject'
        description: |-
          The ServiceAccount of the request originator.
          Required when `type` is set to `"ServiceAccount"` and invalid otherwise.
        x-kab-description-zh: |-
          发起请求的 ServiceAccount。
          当 `type` 为 `"ServiceAccount"` 时必须设置。其他情况下不可设置。
      user:
        $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.UserSubject'
        description: |-
          The user of the request originator.
          Required when `type` is set to `"User"` and invalid otherwise.
        x-kab-description-zh: |-
          发起请求的用户。
          当 `type` 为 `"User"` 时必须设置。其他情况下不可设置。
    required:
      - kind
    type: object
    x-kab-description-zh: |-
      Subject 用来匹配请求的发起者，请求的身份认证系统能够识别出这类信息。
      匹配发起者的方法有三种：按用户、按用户组、按服务账号。
      此结构中可以且仅可以设置三种主体中的一种。
    x-kubernetes-unions:
      - discriminator: kind
        fields-to-discriminateBy:
          group: Group
          serviceAccount: ServiceAccount
          user: User
  io.k8s.api.flowcontrol.v1beta3.UserSubject:
    description: The detailed information for User type of subject.
    properties:
      name:
        description: The username that matches, or `"*"` to match all usernames.
        minLength: 1
        type: string
        x-kab-description-zh: 要匹配的用户名。`"*"` 意味着匹配所有用户名。
    required:
      - name
    type: object
    x-kab-description-zh: 关于 User 类型主体的详细信息。
  io.k8s.api.networking.v1.HTTPIngressPath:
    description: A path regex with a backend. Incoming URLs matching the `path` are
      forwarded to the `backend`.
    properties:
      backend:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressBackend'
        description: The referenced Service endpoint to which the traffic will be
          forwarded to.
        x-kab-description-zh: 对某 Service 端点的引用，请求流量会被转发到这个端点。
      path:
        description: |-
          An extended POSIX regex (as defined by IEEE Std 1003.1) matched against the path of
          an incoming request. Currently it can contain characters disallowed
          from the conventional "path" part of a URL as defined by RFC 3986.
          The path must begin with a `'/'` and must be present when `pathType` is "Exact" or "Prefix".
        type: string
        x-kab-description-zh: |-
          一种扩展的 POSIX 正则表达式（如 IEEE Std 1003.1 中所定义），用来对入站请求的路径进行匹配。
          目前，其中可以包含 RFC 3986 所定义的传统 URL 的 _path_ 部分所不允许的字符。
          路径字符串必须以 `'/'` 开头，并且当 `pathType` 为 `"Exact"` 或者 `"Prefix"` 时必须设置。
      pathType:
        default: ImplementationSpecific
        description: |-
          This determines the interpretation of the `path` matching.
          `pathType` can be one of the following values:
          - `"Exact"`: Matches the URL path exactly.
          - `"Prefix"`: Matches based on a URL path prefix split by `'/'`.
            Matching is done on a path element by element basis.
            Path elements are the list of labels in the path split by the `'/'` separator.
            A request is a match for path *p* if every *p* is an element-wise prefix of *p*
            of the request path. Note that if the last element of the path is a substring of
            the last element in request path, it is not a match
            (e.g. `"/foo/bar"` matches `"/foo/bar/baz"`, but does not match `"/foo/barbaz"`).
          - `"ImplementationSpecific"`: Interpretation of the `path` matching is up to the IngressClass.
            Implementations can treat this as a separate `pathType` or treat it identically to `"Prefix"`
            or `"Exact"` path types.

          Implementations are required to support all path types.
        enum:
          - Exact
          - ImplementationSpecific
          - Prefix
        type: string
        x-kab-description-zh: |-
          此字段决定如何执行 `path` 部分的匹配。`pathType` 可以是以下值之一：

          - `"Exact"`：对 URL 路径作精确匹配；
          - `"Prefix"`：基于 URL 用 `'/'` 分解后得到的部分作前缀匹配。匹配测试是逐个路径元素来进行的。
            路径元素是路径用 `'/'` 分割之后形成的标签列表。
            对于一个请求而言，如果其 `path` 中的每个元素 *p* 都是请求路径中对应元素的前缀，则请求被匹配。
            如意，如果 `path` 中的最后一个元素是请求路径中最后一个元素的子字符串，则请求不匹配。
            例如，`"/foo/bar"` 可以匹配 `"/foo/bar/baz"`，但不能匹配 `"/foo/barbaz"`。
          - `"ImplementationSpecific"`：由 IngressClass 来决定如何解释 `path` 匹配。
            具体的实现可以将其视为不同的 `pathType` 来处理，也可以用 `"Prefix"` 或 `"Exact"`
            路径类型相同的逻辑来处理。

          Kubernetes 要求 Ingress 的实现能够支持所有路径类型。
    required:
      - backend
      - pathType
    type: object
    x-kab-description-zh: 路径正则表达式与后端对应关系。请求 URL 如果与 `path` 匹配，就会被转发给对应的 `backend`。
  io.k8s.api.networking.v1.HTTPIngressRuleValue:
    description: |-
      A list of HTTP selectors pointing to backends.
      In the example `"http://<host>/<path>?<searchpart> -> backend"` where parts of the URL
      correspond to RFC 3986, this resource will be used to match against everything after
      the last `'/'` and before the first `'?'` or `'#'`.
    properties:
      paths:
        description: A collection of paths that map requests to backends.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.HTTPIngressPath'
        type: array
        x-kab-description-zh: 一个数组值，其中每个约束是从给定路径向后端的映射。
        x-kubernetes-list-type: atomic
    required:
      - paths
    type: object
    x-kab-description-zh: |-
      一组指向后端的 HTTP 选择算符。
      例如，在 `"http://<host>/<path>?<searchpart> -> backend"` 这一映射中，URL 的部分对应于
      RFC 3986 格式定义。HTTPIngressRuleValue 定义如何匹配路径中中最后一个 `'/'` 到第一个
      `'?'` 或 `'#'` 的部分（即 path 部分）。
  io.k8s.api.networking.v1.IPBlock:
    description: |-
      A particular CIDR (e.g. `"192.168.1.1/24"`,`"2001:db8::/64"`) that is allowed for the Pods
      matched by a NetworkPolicySpec's `podSelector`.
      The `except` entry describes CIDRs that should not be included within this rule.
    properties:
      cidr:
        description: A string representing the IP Block. Valid examples are `"192.168.1.1/24"`
          or `"2001:db8::/64"`.
        minLength: 1
        type: string
        x-kab-description-zh: 代表 IP 块的一个字符串。合法的取值例子：`"192.168.1.1/24"` 或 `"2001:db8::/64"`。
      except:
        description: |-
          A list of CIDRs that should not be included within an IP Block.
          Valid examples are `"192.168.1.1/24"` or `"2001:db8::/64"`.
          `except` values will be rejected if they are outside the `cidr` range.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          此字段给出一个 CIDR 的列表。列表中的网段都是需要从 IP 块中排除的。
          合法的取值例子：`"192.168.1.1/24"` 或 `"2001:db8::/64"`。
          `except` 的值如果不在 `cidr` 所给的范围，则会被拒绝。
        x-kubernetes-list-type: atomic
    required:
      - cidr
    type: object
    x-kab-description-zh: |-
      此结构包含一个特定的 CIDR（例如 `"192.168.1.1/24"`、`"2001:db8::/64"`）。
      某个 NetworkPolicy 的规约中使用 `podSelector` 选中的 Pod 可以允许此 CIDR 地址段访问。
      `except` 字段描述不应被包含在此规则中的 CIDR。
  io.k8s.api.networking.v1.Ingress.CREATE:
    description: |-
      Ingress is a collection of rules that allow inbound connections to reach the endpoints
      defined by a backend.
      An Ingress can be configured to give services externally-reachable URLs, load balance traffic,
      terminate SSL, offer name-based virtual hosting etc.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Ingress
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressSpec'
        description: The desired state of the Ingress.
        x-kab-description-zh: Ingress 的预期状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      Ingress 是一组规则，允许入站连接到达后端定义的端点。
      通过配置 Ingress 可以可以为 Service 提供外部可访问的 URL，可以完成流量负载均衡，
      可以终结 SSL 链接，提供基于名字的虚拟托管等等。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: Ingress
        version: v1
  io.k8s.api.networking.v1.Ingress.GET:
    description: |-
      Ingress is a collection of rules that allow inbound connections to reach the endpoints
      defined by a backend.
      An Ingress can be configured to give services externally-reachable URLs, load balance traffic,
      terminate SSL, offer name-based virtual hosting etc.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Ingress
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressSpec'
        description: The desired state of the Ingress.
        x-kab-description-zh: Ingress 的预期状态。
      status:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressStatus'
        description: The current state of the Ingress.
        x-kab-description-zh: Ingress 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      Ingress 是一组规则，允许入站连接到达后端定义的端点。
      通过配置 Ingress 可以可以为 Service 提供外部可访问的 URL，可以完成流量负载均衡，
      可以终结 SSL 链接，提供基于名字的虚拟托管等等。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: Ingress
        version: v1
  io.k8s.api.networking.v1.Ingress.UPDATE:
    description: |-
      Ingress is a collection of rules that allow inbound connections to reach the endpoints
      defined by a backend.
      An Ingress can be configured to give services externally-reachable URLs, load balance traffic,
      terminate SSL, offer name-based virtual hosting etc.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Ingress
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressSpec'
        description: The desired state of the Ingress.
        x-kab-description-zh: Ingress 的预期状态。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      Ingress 是一组规则，允许入站连接到达后端定义的端点。
      通过配置 Ingress 可以可以为 Service 提供外部可访问的 URL，可以完成流量负载均衡，
      可以终结 SSL 链接，提供基于名字的虚拟托管等等。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: Ingress
        version: v1
  io.k8s.api.networking.v1.IngressBackend:
    description: |-
      IngressBackend describes all endpoints for a given service and port.
      One and only one of `resource` and `service` backends must be specified.
    properties:
      resource:
        $ref: '#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference'
        description: |-
          An object reference to another Kubernetes resource in the namespace of the Ingress object.
          This is a mutual exclusive setting with `service`.
          The `kind` and `name` fields are required and they must be valid path segment names.
          The `apiGroup`, when specified, must be a valid DNS subdomain name.
        x-kab-description-zh: |-
          对 Ingress 对象所在的名字空间中的另一个 Kubernetes 资源的引用。
          此字段与 `service` 设置是互斥的。
          引用中的 `kind` 和 `name` 字段是必需的，且其取值必须是合法的路径区段名称。
          `apiGroup` 字段如果设定，则必须是一个合法的 DNS 子域名。
      service:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressServiceBackend'
        description: A reference to a Service as a backend. This is a mutually exclusive
          setting with `resource`.
        x-kab-description-zh: 引用某 Service 作为后端。此设置与 `resource` 字段是互斥的。
    type: object
    x-kab-description-zh: |-
      IngressBackend 描述给定服务和端口的所有端点。
      `resource` 和 `service` 后端必须且仅能设置其一。
  io.k8s.api.networking.v1.IngressClass.CREATE:
    description: |-
      IngressClass represents the class of the Ingress, referenced by the Ingress spec.
      The `"ingressclass.kubernetes.io/is-default-class"` annotation can be used to indicate that
      an IngressClass should be considered *default*.
      When a single IngressClass resource has this annotation set to `true`, new Ingress resources
      without a class specified will be assigned this default class.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IngressClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressClassSpec'
        description: The desired state of the IngressClass.
        x-kab-description-zh: IngressClass 的预期状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      IngressClass 代表的是 Ingress 的类别，可以在 Ingress 的规约中引用。
      注解 `"ingressclass.kubernetes.io/is-default-class"` 可以用来表明某 IngressClass
      可以被视为**默认**的 IngressClass。
      如果某个 IngressClass 中将此注解设置为 `true`, 新的、未设定 Ingress 类的 Ingress
      资源会被赋予这个默认类。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IngressClass
        version: v1
  io.k8s.api.networking.v1.IngressClass.GET:
    description: |-
      IngressClass represents the class of the Ingress, referenced by the Ingress spec.
      The `"ingressclass.kubernetes.io/is-default-class"` annotation can be used to indicate that
      an IngressClass should be considered *default*.
      When a single IngressClass resource has this annotation set to `true`, new Ingress resources
      without a class specified will be assigned this default class.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IngressClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressClassSpec'
        description: The desired state of the IngressClass.
        x-kab-description-zh: IngressClass 的预期状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      IngressClass 代表的是 Ingress 的类别，可以在 Ingress 的规约中引用。
      注解 `"ingressclass.kubernetes.io/is-default-class"` 可以用来表明某 IngressClass
      可以被视为**默认**的 IngressClass。
      如果某个 IngressClass 中将此注解设置为 `true`, 新的、未设定 Ingress 类的 Ingress
      资源会被赋予这个默认类。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IngressClass
        version: v1
  io.k8s.api.networking.v1.IngressClass.UPDATE:
    description: |-
      IngressClass represents the class of the Ingress, referenced by the Ingress spec.
      The `"ingressclass.kubernetes.io/is-default-class"` annotation can be used to indicate that
      an IngressClass should be considered *default*.
      When a single IngressClass resource has this annotation set to `true`, new Ingress resources
      without a class specified will be assigned this default class.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IngressClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressClassSpec'
        description: The desired state of the IngressClass.
        x-kab-description-zh: IngressClass 的预期状态。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      IngressClass 代表的是 Ingress 的类别，可以在 Ingress 的规约中引用。
      注解 `"ingressclass.kubernetes.io/is-default-class"` 可以用来表明某 IngressClass
      可以被视为**默认**的 IngressClass。
      如果某个 IngressClass 中将此注解设置为 `true`, 新的、未设定 Ingress 类的 Ingress
      资源会被赋予这个默认类。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IngressClass
        version: v1
  io.k8s.api.networking.v1.IngressClassList:
    description: A list of IngressClass objects.
    properties:
      apiVersion:
        description: The version of the schema for this representation of an object.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of IngressClass objects.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
        type: array
        x-kab-description-zh: 包含 IngressClass 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IngressClassList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 IngressClass 对象的列表。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IngressClassList
        version: v1
  io.k8s.api.networking.v1.IngressClassParametersReference:
    description: |-
      IngressClassParametersReference identifies an API object.
      This can be used to specify a cluster or namespace-scoped resource.
    properties:
      apiGroup:
        description: |-
          The group for the resource being referenced.
          If `apiGroup` is not specified, the specified `kind` must be in the core API group.
          For any other third-party types, `apiGroup` is required.
          When specified, it must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          被引用的资源所属的 API 组。
          如果未指定 `apiGroup`，则所指定的 `kind` 必须位于核心 API 组内。
          对于所有第三方的类型，都需要指定 `apiGroup`。
          设置了此字段时，其字段值必须是合法的 DNS 子域名。
      kind:
        description: The type of resource being referenced. This field must be a valid
          path segment name.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的类别。字段值必须是合法的路径区段。
      name:
        description: The name of resource being referenced. This field must be a valid
          path segment name.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的名字。字段值必须是合法的路径区段。
      namespace:
        description: |-
          The namespace of the resource being referenced.
          This field is required when `scope` is set to `"Namespace"` and must be unset when `scope` is set to
          `"Cluster"`.
        type: string
        x-kab-description-zh: |-
          被引用资源所在的名字空间。
          当 `scope` 被设置时`"Namespace"`，此字段必须设置。而当 `scope` 为 `"Cluster"` 时不可以设置。
      scope:
        default: Cluster
        description: |-
          This represents if this refers to a cluster- or namespace-scoped resource.
          This may be set to `"Cluster"` or `"Namespace"`.
        enum:
          - Cluster
          - Namespace
        type: string
        x-kab-description-zh: |-
          设置此字段以表明资源是集群作用域的还是名字空间作用域的。
          字段可以设置为 `"Cluster"` 或 `"Namespace"`。
    required:
      - kind
      - name
    type: object
    x-kab-description-zh: |-
      IngressClassParametersReference 标示某个  API 对象。
      此结构可以用来指定一个集群作用域的对象或者一个名字空间作用域的对象。
  io.k8s.api.networking.v1.IngressClassSpec:
    description: Information about the IngressClass.
    properties:
      controller:
        description: |-
          The name of the controller that should handle this class.
          This allows for different *flavors* to be controlled by the same controller.
          For example, you may have different `parameters` for the same controller.
          This should be specified as a domain-prefixed path no more than 250 characters in length, e.g.
          `"acme.io/ingress-controller".
          This field is immutable.
        maxLength: 250
        type: string
        x-kab-description-zh: |-
          应该处理此 Ingress 类的控制器的名称。
          这一字段的存在使得多种不同风格 Ingress 可以用同一个控制器来控制。
          例如，你可能会让同一控制器处理不同的 `parameters` 设置。
          此字段应该设置为一个带域名前缀的字符串，长度不超过 250 字符。
          例如：`"acme.io/ingress-controller"`。

          此字段不可变更。
      parameters:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressClassParametersReference'
        description: |-
          A link to a custom resource containing additional configuration for the controller.
          This is optional if the controller does not require extra parameters.
          When specified, the `apiGroup` field must be a valid DNS subdomain name;
          the `kind` and the `name` fields are required and they must be valid path segment names.
        x-kab-description-zh: |-
          指向某个自定义资源的连接，该自定义资源中包含控制器的一些附加配置信息。
          如果控制器不需要额外的参数时，此字段是可选的。
          如果设置了此字段，则 `apiGroup` 字段必须是一个合法的 DNS 子域名，
          `kind` 和 `name` 字段都必须设置，并且都必须是合法的路径区段名称。
    required:
      - controller
    type: object
    x-kab-description-zh: 关于 IngressClass 的信息。
  io.k8s.api.networking.v1.IngressList:
    description: A list of Ingress objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Ingress objects.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
        type: array
        x-kab-description-zh: 包含 Ingress 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IngressList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 Ingress 对象的列表。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IngressList
        version: v1
  io.k8s.api.networking.v1.IngressLoadBalancerIngress:
    description: IngressLoadBalancerIngress represents the status of a load-balancer
      ingress point.
    properties:
      hostname:
        description: |-
          Hostname is set for load-balancer ingress points that are DNS based.
          The value of this field must be a valid DNS subdomain name rather than an IP address.
        type: string
        x-kab-description-zh: |-
          hostname 字段为基于 DNS 的负载均衡器 Ingress 点设置的。
          字段的取值必须是合法的 DNS 子域名，而不是一个 IP 地址。
      ip:
        description: |-
          IP is set for load-balancer ingress points that are IP based.
          The value of this field must be a valid IP address.
        type: string
        x-kab-description-zh: |-
          ip 字段是为基于 IP 的负载均衡器 Ingress 点设置的。
          字段的取值必须是合法的 IP 地址。
      ports:
        description: Information about the ports exposed by this LoadBalancer.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.IngressPortStatus'
        type: array
        x-kab-description-zh: 关于此 LoadBalancer 所公开的端口的信息。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: IngressLoadBalancerIngress 代表的是某个负载均衡 Ingress 点的状态。
  io.k8s.api.networking.v1.IngressLoadBalancerStatus:
    description: IngressLoadBalancerStatus represents the status of a load-balancer.
    properties:
      ingress:
        description: A list containing ingress points for the load-balancer.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerIngress'
        type: array
        x-kab-description-zh: 包含负载均衡 Ingress 点的一个列表。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: IngressLoadBalancerStatus 代表的是一个负载均衡器的状态。
  io.k8s.api.networking.v1.IngressPortStatus:
    description: IngressPortStatus represents the error condition of a service port.
    properties:
      error:
        description: |-
          This field records the problem with the service port.
          The format of the `error` shall comply with the following rules:

          - built-in error values shall be specified in this file and those shall use CamelCase names
          - cloud provider specific error values must have names that comply with the format
            `"foo.example.com/CamelCase"`.
        type: string
        x-kab-description-zh: |-
          此字段记录服务端口相关的问题。`error` 字段的格式要遵从以下规则：

          - 内置的错误值应该使用驼峰编码的名字；
          - 特定于云平台的错误值必须使用符合 `"foo.example.com/CamelCase"` 格式的名字。
      port:
        description: The port number of the ingress port.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: Ingress 端口的端口号。
      protocol:
        description: The protocol of the ingress port.
        enum:
          - SCTP
          - TCP
          - UDP
        type: string
        x-kab-description-zh: Ingress 端口的协议。
    required:
      - port
      - protocol
    type: object
    x-kab-description-zh: IngressPortStatus 代表的是某个服务端口的出错状况。
  io.k8s.api.networking.v1.IngressRule:
    description: |-
      A rule mapping the paths under a specified `host` to the related backend Services.
      Incoming requests are first evaluated for a `host` match, then routed
      to the backend associated with the matching `http` backend.
    properties:
      host:
        description: |-
          The fully qualified domain name of a network host, as defined by RFC 3986.
          Note the following deviations from the `"host"` part of the URI as defined in RFC 3986:

          1. IPs are not allowed. Currently an entry in the `http` list can only apply to
             the IP in the `spec` of the parent Ingress.
          1. The `':'` delimiter is not respected because ports are not allowed.
             The port of an Ingress is implicitly 80 for HTTP and 443 for HTTPS.

          Both may change in the future.
          Incoming requests are matched against the `host` before the `http`.
          If the `host` is unspecified, the Ingress routes all traffic based on the specified `http` backend.
          Host can be *precise* which is a domain name without the terminating dot of a network host
          (e.g. `"foo.bar.com"`) or *wildcard*, which is a domain name prefixed with a single wildcard
          label (e.g. `"*.foo.com"`).
          The wildcard character `'*'` must appear by itself as the first DNS label and matches only
          a single label.
          You cannot have a wildcard label by itself (e.g. `host == "*"`).
          Requests will be matched against the `host` field in the following way:
          1. If `host` is precise, the request matches this rule if the HTTP `"host"` header is equal to
             `host` value.
          2. If `host` value is a wildcard, then the request matches this rule if the HTTP `"host"`
             header is to equal to the suffix (removing the first label) of the wildcard rule.
        type: string
        x-kab-description-zh: |-
          网络主机的全限定域名，如 RFC 3986 所定义。
          注意，这里有一些与 RFC 3986 中所定义的 URI 中的 `"host"` 部分不同的地方：

          1. 不允许使用 IP 地址。目前，`http` 列表字段中的每一项仅适用于上级 Ingress 的 `spec`
             中的 IP 地址。
          1. 分隔符 `':'` 是不被接受的，因为 `host` 部分不允许有端口地址。
             Ingress 对于 HTTP 而言默认端口是 80，对于 HTTPS 而言默认端口是 443。

          这两项不同在将来都可能会变化。入站的请求先要通过 `host` 匹配，之后才作 `http` 规则处理。
          如果未设置 `host`，则 Ingres 会将所有的流量基于所指定的 `http` 后端来路由。
          `host` 部分可以是精确的、某个网络主机的没有结尾句点的域名（如 `"foo.bar.com"`），
          或者也可以是通配符，给出一个带有唯一通配符的域名前缀（如 `"*.foo.bom"`）。
          通配符字符 `'*'` 必须是第一个 DNS 标签，并且只能用来匹配一个 DNS 标签。
          不可以直接使用 `"*"` 做通配符（例如 `host == "*"`）。

          请求与 `host` 字段进行匹配时，按以下方式进行：

          1. 如果 `host` 字段给的是精确的域名，则当请求的 HTTP `"host"` 头部与
             `host` 字段值相同时，视为请求匹配。
          2. 如果 `host` 字段的值包含通配符，则当请求的 HTTP `"host"` 头部与通配符规则的后缀部分
             （去除第一个标签）相等，则视为请求匹配。
      http:
        $ref: '#/definitions/io.k8s.api.networking.v1.HTTPIngressRuleValue'
    type: object
    x-kab-description-zh: |-
      将指定 `host` 下的路径映射到对应的后端 Service 的规则。
      入站的请求首先会作 `host` 层的匹配，之后会被路由到与匹配的 `http`
      后端相关的后端。
  io.k8s.api.networking.v1.IngressServiceBackend:
    description: A reference to a Kubernetes Service as an Ingress backend.
    properties:
      name:
        description: |-
          Name of the referenced Service. The Service must exist in the same namespace as the Ingress object.
          The string must be a valid DNS label.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          被引用的 Service 的名字。Service 必须与 Ingress 对象位于相同的名字空间。
          此字符串必须是一个合法的 DNS 标签。
      port:
        $ref: '#/definitions/io.k8s.api.networking.v1.ServiceBackendPort'
        description: Port of the referenced Service. A port name or port number is
          required.
        x-kab-description-zh: 被引用的 Service 的端口。需要指定端口名或者端口号码。
    required:
      - name
      - port
    type: object
    x-kab-description-zh: 引用某个 Kubernetes Service 作为 Ingress 的后端。
  io.k8s.api.networking.v1.IngressSpec:
    description: The desired state of the Ingress. At least one of `defaultBackend`
      and `rules` must be specified.
    properties:
      defaultBackend:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressBackend'
        description: |-
          A default backend that should handle requests that don't match any rule.
          If `defaultBackend` is not set, the handling of requests that do not match
          any of the `rules` will be up to the Ingress controller.
        x-kab-description-zh: |-
          此字段给出一个默认的后端，用来处理未能与任何规则匹配的请求。
          如果没有设置 `defaultBackend`，对于未能与 `rules` 中任何规则匹配的请求要如何处理，
          要取决于 Ingress 控制器的实现。
      ingressClassName:
        description: |-
          This is the name of an IngressClass cluster resource.
          Ingress controller implementations use this field to know whether they should be serving this
          Ingress resource, by a transitive connection (controller -> IngressClass -> Ingress resource).
          Although the `"kubernetes.io/ingress.class"` annotation (simple constant name) was never formally
          defined, it was widely supported by Ingress controllers to create a direct binding between
          Ingress controller and Ingress resources.
          Newly created Ingress resources should prefer using the field.
          However, even though the annotation is officially deprecated, for backwards compatibility reasons,
          ingress controllers should still honor that annotation if present.
        type: string
        x-kab-description-zh: |-
          字段值是一个 IngressClass 集群资源的名称。
          Ingress 控制器实现使用这个字段来判断是否自己需要为此 Ingress 资源提供服务。这种关联关系是以
          IngressClass 为媒介的，即 '控制器 -> IngressClass -> Ingress 资源'。

          尽管 `"kubernetes.io/ingress.class"` 这个注解（简单的名字常数）一直没有正式的定义，
          很多 Ingress 控制器都支持它，以便构建 Ingress 控制器与 Ingress 资源之间的绑定关系。
          新创建的 Ingress 资源应该使用 `ingressClassName` 这个字段而不是之间的注解。
          不过，尽管这个注解已经被正式弃用了，出于向后兼容的原因，Ingress 控制器如果检测到此注解，
          仍然应该做正确处理。
      rules:
        description: |-
          A list of host rules used to configure the Ingress.
          If unspecified, or no rule matches, all traffic is sent to the default backend.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.IngressRule'
        type: array
        x-kab-description-zh: |-
          一组用来配置 Ingress 的主机规则。
          如果未指定此字段，或者没有规则匹配服务请求，那么请求会被转发到默认的后端。
        x-kubernetes-list-type: atomic
      tls:
        description: |-
          TLS configuration. Currently the Ingress only supports a single TLS port, 443.
          If multiple members of this list specify different hosts, they will be multiplexed
          on the same port according to the hostname specified through the SNI TLS extension,
          if the ingress controller fulfilling the ingress supports SNI.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.IngressTLS'
        type: array
        x-kab-description-zh: |-
          TLS 配置。目前 Ingress 仅支持唯一的 TLS 端口 443。
          如果此列表中存在多个条目使用不同的主机段，它们会在同一端口上多路复用，通过 SNI TLS
          扩展所指定的主机名来分解流量。前提是 Ingress 控制器支持 SNI。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh`: Ingress 的期望状态。`defaultBackend` 和 `rules` 二者至少要设置其一。
  io.k8s.api.networking.v1.IngressStatus:
    description: The current state of the Ingress.
    properties:
      loadBalancer:
        $ref: '#/definitions/io.k8s.api.networking.v1.IngressLoadBalancerStatus'
        description: The current status of the load-balancer.
        x-kab-description-zh: 负载均衡器的当前状态。
    type: object
    x-kab-description-zh: Ingress 的当前状态。
  io.k8s.api.networking.v1.IngressTLS:
    description: The transport layer security (TLS) associated with an Ingress.
    properties:
      hosts:
        description: |-
          A list of hosts included in the TLS certificate.
          The values in this list must match the name/s used in the TLS Secret.
          Defaults to the wildcard host setting for the loadbalancer controller fulfilling this Ingress.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          列举 TLS 整数中包含的主机。此列表中列举的值必须与 TLS Secret 中使用的名字匹配。
          默认值是为此 Ingress 提供服务的负载均衡控制器的通配主机设置值。
        x-kubernetes-list-type: atomic
      secretName:
        description: |-
          The name of the Secret used to terminate TLS traffic on port 443.
          Field is left optional to allow TLS routing based on SNI hostname alone.
          If the SNI host in a listener conflicts with the `"Host"` header field used by an entry
          in the `rules` list, the SNI host is used for termination and value of the `"Host"` header
          is used for routing.
          The string must be a valid DNS subdomain name if specified.
        type: string
        x-kab-description-zh: |-
          用来终结 443 端口上 TLS 流量所使用的 Secret 的名字。
          此字段是可选的，这样就可以直接基于 SNI 主机名来完成 TLS 路由。
          如果监听器中的 SNI 主机与 `rules` 列表中某个规则使用的 `"Host"` 头部字段冲突，
          会使用 SNI 主机来终结 TLS 连接，并使用 `"Host"` 头部的内容来完成路由。
          此字段在设置时其值必须是一个合法的 DNS 子域名。
    type: object
    x-kab-description-zh: 与 Ingress 关联的传输层安全（TLS）配置。
  io.k8s.api.networking.v1.NetworkPolicy.CREATE:
    description: NetworkPolicy describes what network traffic is allowed for a set
      of Pods.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - NetworkPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec'
        description: Specification of the desired behavior for this NetworkPolicy.
        x-kab-description-zh: 此 NetworkPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: NetworkPolicy 描述一组 Pod 上被允许的网络流量。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
  io.k8s.api.networking.v1.NetworkPolicy.GET:
    description: NetworkPolicy describes what network traffic is allowed for a set
      of Pods.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - NetworkPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec'
        description: Specification of the desired behavior for this NetworkPolicy.
        x-kab-description-zh: 此 NetworkPolicy 的预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: NetworkPolicy 描述一组 Pod 上被允许的网络流量。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
  io.k8s.api.networking.v1.NetworkPolicy.UPDATE:
    description: NetworkPolicy describes what network traffic is allowed for a set
      of Pods.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - NetworkPolicy
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicySpec'
        description: Specification of the desired behavior for this NetworkPolicy.
        x-kab-description-zh: 此 NetworkPolicy 的预期行为的规约。
    required:
      - apiVersion
      - metadata
      - kind
    type: object
    x-kab-description-zh: NetworkPolicy 描述一组 Pod 上被允许的网络流量。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
  io.k8s.api.networking.v1.NetworkPolicyEgressRule:
    description: |-
      A set of traffic that is allowed out of Pods matched by a NetworkPolicySpec's `podSelector`.
      The traffic must match both `ports` and `to`.
    properties:
      ports:
        description: |-
          List of destination ports for outgoing traffic.
          Each item in this list is combined using a logical OR.
          If this field is empty or missing, this rule matches all ports (traffic not restricted by port).
          If this field is present and contains at least one item, then this rule allows traffic
          only if the traffic matches at least one port in the list.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort'
        type: array
        x-kab-description-zh: |-
          此字段列举离站流量的目标端口。最终语义是对此列表中的各个条目取逻辑 OR 操作。
          如果此字段未设置，或者为空列表，则规则会匹配所有端口（流量不受端口限制）。
          如果此字段设置了，至少含有一个表项，则只有流量至少与列表中某个端口匹配时才是被允许的。
        x-kubernetes-list-type: atomic
      to:
        description: |-
          List of destinations for outgoing traffic of Pods selected for this rule.
          Items in this list are combined using a logical OR operation.
          If this field is empty or missing, this rule matches all destinations
          (traffic not restricted by destination).
          If this field is present and contains at least one item, this rule allows traffic only
          if the traffic matches at least one item in the `to` list.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer'
        type: array
        x-kab-description-zh: |-
          当前规则所选定的 Pod 的离站流量的目标地址。
          最终判定结果是对列表中各个条目取逻辑 OR 操作。
          如果此字段未设置，或者为空列表，则此规则会匹配所有目标地址（流量不受目标地址限制）。
          如果设置了此字段且列表中至少包含一个表项，则只有流量至少与 `to` 列表中某个条目匹配时才是被允许的。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      针对和 NetworkPolicy 规约中 `podSelector` 匹配的 Pod 集合，设置被允许的可以从 Pod 指向外界的流量。
      这类流量必须同时满足 `ports` 和 `to` 规则。
  io.k8s.api.networking.v1.NetworkPolicyIngressRule:
    description: |-
      A particular set of traffic that is allowed to the Pods matched by a NetworkPolicy's `podSelector`.
      The traffic must match both `ports` and `from`.
    properties:
      from:
        description: |-
          List of sources which should be able to access the Pods selected by this rule.
          Items in this list are combined using a logical OR operation.
          If this field is empty or missing, this rule matches all sources
          (traffic not restricted by source).
          If this field is present and contains at least on item, this rule allows traffic only
          if the traffic matches at least one item in the `from` list.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyPeer'
        type: array
        x-kab-description-zh: |-
          此字段列举一些流量来源，来自指定来源的请求可以当前规则所选定的 Pod 集合。
          最终判定结果是对列表中各个条目取逻辑 OR 操作。
          如果此字段未设置，或者为空列表，则此规则会匹配所有来源地址（流量不受来源地址限制）。
          如果设置了此字段且列表中至少包含一个表项，则只有流量至少与 `to` 列表中某个条目匹配时才是被允许的。
        x-kubernetes-list-type: atomic
      ports:
        description: |-
          List of ports which should be made accessible on the Pods selected by this rule.
          Each item in this list is combined using a logical OR.
          If this field is empty or missing, this rule matches all ports (traffic not restricted by port).
          If this field is present and contains at least one item, then this rule allows traffic only
          if the traffic matches at least one port in the list.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyPort'
        type: array
        x-kab-description-zh: |-
          此字段列举规则所选定的 Pod 对外公开的端口。最终语义是对此列表中的各个条目取逻辑 OR 操作。
          如果此字段未设置，或者为空列表，则规则会匹配所有端口（流量不受端口限制）。
          如果此字段设置了，至少含有一个表项，则只有流量至少与列表中某个端口匹配时才是被允许的。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      针对和 NetworkPolicy 规约中 `podSelector` 匹配的 Pod 集合，设置被允许的可以流入这些 Pod 的流量。
      这类流量必须同时满足 `ports` 和 `from` 规则。
  io.k8s.api.networking.v1.NetworkPolicyList:
    description: A list of NetworkPolicy objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of NetworkPolicy objects.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
        type: array
        x-kab-description-zh: 包含 NetworkPolicy 的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - NetworkPolicyList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 NetworkPolicy 的一个列表。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: NetworkPolicyList
        version: v1
  io.k8s.api.networking.v1.NetworkPolicyPeer:
    description: |-
      A peer to allow traffic to/from.
      If `ipBlock` is specified, the `namespaceSelector` or the `podSelector` cannot be specified.
    properties:
      ipBlock:
        $ref: '#/definitions/io.k8s.api.networking.v1.IPBlock'
        description: |-
          This defines a policy on a particular IP block.
          If this field is set then neither of the other fields can be set.
        x-kab-description-zh: |-
          此字段定义针对特定 IP 网段的策略。
          如果设置了此字段，则另外两个字段不可设置。
      namespaceSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Selects namespaces using cluster-scoped labels.
          This field follows standard label selector semantics;
          if present but empty, it selects all namespaces.
          If `podSelector` is also set, then the NetworkPolicyPeer as a whole selects the Pods
          matching `podSelector` in the namespaces selected by `namespaceSelector`.
          Otherwise it selects all Pods in the namespaces selected by `namespaceSelector`.
        x-kab-description-zh: |-
          使用集群作用域的标签选择名字空间。此字段遵从标准的标签选择算符语义。
          如果设置了此字段，但字段值为空，则会选择所有名字空间。
          如果同时设置了 `podSelector`，则整个 NetworkPolicyPeer 结构会选择 `namespaceSelector`
          所选择的名字空间内符合 `podSelector` 条件的 Pod 集合。
          如果没有设置 `podSelector`，则会选择 `namespaceSelector` 所选的名字空间下的所有 Pod。
      podSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          This is a label selector which selects Pods.
          This field follows standard label selector semantics; if present but empty, it selects all Pods.
          If `namespaceSelector` is also set, then the NetworkPolicyPeer as a whole selects the Pods
          matching `podSelector` in the namespaces selected by `namespaceSelector`.
          Otherwise it selects the Pods matching `podSelector` in the policy's own namespace.
        x-kab-description-zh: |-
          此字段是一个用来选择 Pod 的标签选择算符，遵从标准的标签选择算符语义。
          如果设置了此字段，但字段值为空，则会选择所有 Pod。
          如果同时设置了 `namespaceSelector`，则整个 NetworkPolicyPeer 结构会选择 `namespaceSelector`
          所选择的名字空间内符合 `podSelector` 条件的 Pod 集合。
          如果没有设置 `namespaceSelector`，则会选择 NetworkPolicy 所在名字空间下的所有 Pod。
    type: object
    x-kab-description-zh: |-
      允许流量流入或流出的网络对端。
      如果设置了 `ipBlock`，则不能设置 `namespaceSelector` 或 `podSelector`。
  io.k8s.api.networking.v1.NetworkPolicyPort:
    description: A port on which traffic is allowed.
    properties:
      endPort:
        description: |-
          If set, indicates that the range of ports from `port` to `endPort`, inclusive,
          should be allowed by the policy.
          This field cannot be defined if the `port` field is not defined or if the `port` field
          is defined as a named (string) port.
          The `endPort` must be equal or greater than `port`.
        format: int32
        type: integer
        x-kab-description-zh: |-
          如果设置了此字段，则表明从 `port` 到 `endPort`（包括 `port` 和 `endPort` 自身）
          的端口范围都是策略所允许的。
          如果 `port` 字段未定义，或者 `port` 字段所定义的是一个端口名称（字符串），则不能设置此字段。
          设置此字段时，字段值要大于等于 `port` 所给的端口号。
      port:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          The port on the given protocol. This can either be a numerical or named port on a Pod.
          The port number must be between 1 and 65535, if specified.
          If it is a port name, the name string subject to validation.
          If this field is not provided, this matches all port names and numbers.
          If present, only traffic on the specified `protocol` AND `port` will be matched.
        x-kab-description-zh: |-
          给定协议上的端口。可以是 Pod 上的端口号或者端口名称。
          如果设置的是端口号，则数值必须介于 1 和 65535 之间。
          如果设置的是端口名称，则名字字符串需要通过合法性检查。
          如果没有设置此字段，则此结构会匹配所有的端口名和端口号。
          如果设置了此字段，则所匹配的是指定端口上指定协议的流量。
      protocol:
        default: TCP
        description: The protocol which traffic must match.
        enum:
          - SCTP
          - TCP
          - UDP
        type: string
        x-kab-description-zh: 要匹配的流量协议类型。
    type: object
    x-kab-description-zh: 给定的一个流量被放通的端口。
  io.k8s.api.networking.v1.NetworkPolicySpec:
    description: The specification of the NetworkPolicy.
    properties:
      egress:
        description: |-
          List of egress rules to be applied to the selected Pods.
          Outgoing traffic is allowed if there are no NetworkPolicies selecting the Pod
          (and cluster policy otherwise allows the traffic),
          OR if the traffic matches at least one egress rule across all of the NetworkPolicy objects
          whose `podSelector` matches the Pod.
          If this field is empty then this NetworkPolicy limits all outgoing traffic
          (and serves solely to ensure that the Pods it selects are isolated by default).

          This field is Beta in 1.8
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyEgressRule'
        type: array
        x-kab-description-zh: |-
          要对所选 Pod 应用的离站流量规则。如果没有 NetworkPolicy 选中 Pod，则 Pod 上的离站流量是被允许的。
          或者对于所有 `podSelector` 选中了 Pod 的 NetworkPolicy 对象而言，流量至少与其中一个对象上定义的
          egress 规则匹配，则流量也是被允许的。
          如果此字段为空，那么 NetworkPolicy 会限制所有的离站流量（相当于将被选中的 Pod 隔离起来）。

          此字段从 v1.8 开始进入 Beta 阶段。
        x-kubernetes-list-type: atomic
      ingress:
        description: |-
          List of ingress rules to be applied to the selected Pods.
          Traffic is allowed to a Pod if there are no NetworkPolicies selecting the Pod
          (and cluster policy otherwise allows the traffic),
          OR if the traffic source is the Pod's local node,
          OR if the traffic matches at least one ingress rule across all of the NetworkPolicy objects
          whose `podSelector` matches the Pod.
          If this field is empty then this NetworkPolicy does not allow any traffic
          (and serves solely to ensure that the Pods it selects are isolated by default).
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyIngressRule'
        type: array
        x-kab-description-zh: |-
          要对所选中的 Pod 应用的入站流量规则。如果没有 NetworkPolicy 选中 Pod，则流量是被允许的。
          如果流量来源是 Pod 所在的本地节点，或者对于所有 `podSelector` 选中了 Pod 的 NetworkPolicy
          对象而言，流量至少与其中一条 ingress 规则匹配，则流量也是被允许的。
          如果此字段为空，那么 NetworkPolicy 会限制所有的入站流量（相当于将被选中的 Pod 隔离起来）。
        x-kubernetes-list-type: atomic
      podSelector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Selects the Pods to which this NetworkPolicy object applies.
          The array of `ingress` rules is applied to all Pods selected by this field.
          Multiple network policies can select the same set of Pods.
          In this case, the `ingress` rules for each are combined additively.
          An empty `podSelector` matches all Pods in this namespace.
        x-kab-description-zh: |-
          选择此 NetworkPolicy 所适用的 Pod 集合。
          `ingress` 、`egress` 数组中的规则会被应用到此字段所选中的所有 Pod 之上。
          多个 NetworkPolicy 对象可以选中同一组 Pod。这时，各个 NetworkPolicy 所定义的规则是叠加的。
          如果 `podSelector` 为空，则会匹配 NetworkPolicy 所在名字空间中的所有对象。
      policyTypes:
        description: |-
          List of rule types that the NetworkPolicy relates to.
          Valid options are ["Ingress"], ["Egress"], or ["Ingress", "Egress"].
          If this field is not specified, it will default based on the existence of Ingress or Egress rules;
          policies that contain an Egress section are assumed to affect Egress, and all policies
          (whether or not they contain an Ingress section) are assumed to affect Ingress.
          If you want to write an egress-only policy, you must explicitly specify policyTypes [ "Egress" ].
          Likewise, if you want to write a policy that specifies that no egress is allowed,
          you must specify a policyTypes value that include "Egress"
          (since such a policy would not include an Egress section and would otherwise default to just
          [ "Ingress" ]).
          This field is Beta level in 1.8.
        items:
          enum:
            - Egress
            - Ingress
          type: string
        type: array
        x-kab-description-zh: |-
          对 NetworkPolicy 对象所关联的规则类型的列表。
          合法的选项为：`["Ingress"]`、`["Egress"]` 或 `["Ingress", "Egress"]`。
          如果没有设置此字段，则会根据 `ingress` 或 `egress` 规则字段是否存在来取默认值。
          设置了 `egress` 规则的 NetworkPolicy 会影响此字段是否包含 `"Egress"`，所有 NetworkPolicy
          （无论是否包含了 `ingress` 规则）都默认会包含 `"Ingress"`。
          如果希望仅针对离站流量设置网络策略，你必须显式地将 `policyTypes` 设置为 `["Egress"]`。
          类似的，如果你希望网络策略禁止离站流量，必须在 `policyTypes` 字段中包含 `"Egress"`
          （因为如果不这样做，NetworkPolicy 就不会包含 `engress` 部分，`policyTypes` 会被默认设置为
          `["Ingress"]`。）

          此字段从 1.8 版本开始处于 Beta 阶段。
        x-kubernetes-list-type: atomic
    required:
      - podSelector
    type: object
    x-kab-description-zh: NetworkPolicy 的规约。
  io.k8s.api.networking.v1.ServiceBackendPort:
    description: The Service port referenced. Either `name` or `number` must be specified.
    properties:
      name:
        description: |-
          The name of the port on the Service. This is a mutually exclusive setting with `number`.
          When specified, the name string must be a non-empty string and no more than 15 characters long.
          It must contain only `"[-a-z0-9]"` and must contain at least one letter `"[a-z]"`.
          It must not start or end with a hyphen, or contain adjacent hyphens.
          **Note**: Kubernetes only allow lower-case characters, even though RFC 6335 is case insensitive.
        type: string
        x-kab-description-zh: |-
          在 Service 上定义的端口名称。此字段设置与 `number` 字段是互斥的。
          设置此字段时，名字字符串不可以为空，不可以超过 15 个字符长度。
          其中必须只包含 `"[-a-z0-9]"` 字符，并且字少包含一个字母。
          名字字符串不可以以连字符开头或结尾，不可以包含连续的连字符。
          **注意**： Kubernetes 值允许小写字母字符，尽管 RFC 6335 是大小写不敏感的。
      number:
        description: |-
          The numerical port number (e.g. 80) on the Service.
          This is a mutually exclusive setting with `name`.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          Service 上定义的、数字表示的端口号（例如 80）。
          此字段设置与 `name` 字段是互斥的。
    type: object
    x-kab-description-zh: 所引用的 Service 端口。`name` 或 `number` 二者要设置其一。
    x-kubernetes-map-type: atomic
  io.k8s.api.networking.v1alpha1.IPAddress.CREATE:
    description: |-
      IPAddress represents a single IP of a single IP Family.
      The object is designed to be used by APIs that operate on IP addresses.
      The object is used by the Service core API for allocation of IP addresses.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IPAddress
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The name of the object is the IP address in canonical format,
          four decimal digits separated by dots suppressing leading zeros for IPv4 and
          the representation defined by RFC 5952 for IPv6.
          Valid: `"192.168.1.5"` or `"2001:db8::1"` or `"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1"`.
          Invalid: `"10.01.2.3"` or `"2001:db8:0:0:0::1"`.
        x-kab-description-zh: |-
          标准的对象元数据。对象的名称是 IP 地址的字符串形式。
          对于 IPv4 而言，是点分的十进制数字格式（不允许有前导零）；
          对于 IPv6 而言，采用 RFC 5952 的格式定义。
          合法地址：`"192.168.1.5"`、`"2001:db8::1"` 或 `"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1"`。
          非法地址：`"10.01.2.3"` 或 `"2001:db8:0:0:0::1"`。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddressSpec'
        description: The desired state of the IPAddress.
        x-kab-description-zh: IPAddress 对象的预期状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      IPAddress 代表的是某个给定 IP 地址族中的一个 IP 地址。
      定义此字段是为了提供给需要操控 IP 地址的 API 使用。
      目前，Service 的 API 使用此对象来分配 IP 地址。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.IPAddress.GET:
    description: |-
      IPAddress represents a single IP of a single IP Family.
      The object is designed to be used by APIs that operate on IP addresses.
      The object is used by the Service core API for allocation of IP addresses.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IPAddress
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddressSpec'
        description: The desired state of the IPAddress.
        x-kab-description-zh: IPAddress 对象的预期状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      IPAddress 代表的是某个给定 IP 地址族中的一个 IP 地址。
      定义此字段是为了提供给需要操控 IP 地址的 API 使用。
      目前，Service 的 API 使用此对象来分配 IP 地址。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.IPAddress.UPDATE:
    description: |-
      IPAddress represents a single IP of a single IP Family.
      The object is designed to be used by APIs that operate on IP addresses.
      The object is used by the Service core API for allocation of IP addresses.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IPAddress
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The name of the object is the IP address in canonical format,
          four decimal digits separated by dots suppressing leading zeros for IPv4 and
          the representation defined by RFC 5952 for IPv6.
          Valid: `"192.168.1.5"` or `"2001:db8::1"` or `"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1"`.
          Invalid: `"10.01.2.3"` or `"2001:db8:0:0:0::1"`.
        x-kab-description-zh: |-
          标准的对象元数据。对象的名称是 IP 地址的字符串形式。
          对于 IPv4 而言，是点分的十进制数字格式（不允许有前导零）；
          对于 IPv6 而言，采用 RFC 5952 的格式定义。
          合法地址：`"192.168.1.5"`、`"2001:db8::1"` 或 `"2001:db8:aaaa:bbbb:cccc:dddd:eeee:1"`。
          非法地址：`"10.01.2.3"` 或 `"2001:db8:0:0:0::1"`。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddressSpec'
        description: The desired state of the IPAddress.
        x-kab-description-zh: IPAddress 对象的预期状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      IPAddress 代表的是某个给定 IP 地址族中的一个 IP 地址。
      定义此字段是为了提供给需要操控 IP 地址的 API 使用。
      目前，Service 的 API 使用此对象来分配 IP 地址。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.IPAddressList:
    description: IPAddressList contains a list of IPAddress.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of IPAddress objects.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
        type: array
        x-kab-description-zh: 包含 IPAddress 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - IPAddressList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 IPAddress 对象的列表。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: IPAddressList
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.IPAddressSpec:
    description: IPAddressSpec describe the attributes in an IP Address.
    properties:
      parentRef:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ParentReference'
        description: |-
          This references the resource that an IPAddress is attached to.
          An IPAddress must reference a parent object.
        x-kab-description-zh: |-
          此字段给出的是 IPAddress 对象所关联的父级对象。
          每个 IPAddress 对象必须引用某个父级对象。
    required:
      - parentRef
    type: object
    x-kab-description-zh: IPAddressSpec 定义 IP 地址的属性。
  io.k8s.api.networking.v1alpha1.ParentReference:
    description: ParentReference describes a reference to a parent object.
    properties:
      group:
        description: |-
          The group of the object being referenced.
          Empty string or null value means the core API group. For example, a Service object.
          If the string is not empty, it must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          被引用对象所在的 API 组。未设置或者字符串为空是表示核心 API 组。例如，一个 Service。
          如果此字符串非空，则其值必须是一个合法的 DNS 子域名。
      name:
        description: The name of the object being referenced. The value must be a
          valid path segment.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的对象的名称。此字段值必须是合法的路径段落。
      namespace:
        description: The namespace of the object being referenced. This field is optional.
        type: string
        x-kab-description-zh: 被引用的对象的名字空间。此字段为可选。
      resource:
        description: The resource of the object being referenced. The value must be
          a valid path segment.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的对象的资源类别。此字段值必须是合法的路径段落。
    required:
      - name
      - resource
    type: object
    x-kab-description-zh: ParentReference 描述对某个父级对象的引用。
  io.k8s.api.networking.v1alpha1.ServiceCIDR.CREATE:
    description: |-
      ServiceCIDR defines a range of IP addresses using CIDR format (e.g. `"192.168.0.0/24"` or `"2001:db2::/64"`).
      This range is used to allocate ClusterIPs to Service objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceCIDR
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRSpec'
        description: The desired state of the ServiceCIDR.
        x-kab-description-zh: 此 ServiceCIDR 的期望状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ServiceCIDR 使用 CIDR 格式（例如，`"192.168.0.0/24"` 或 `"2001:db2::/64"`）来定义一组 IP 地址。
      所给的地址范围用来为 Service 对象分配集群 IP 地址。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.ServiceCIDR.GET:
    description: |-
      ServiceCIDR defines a range of IP addresses using CIDR format (e.g. `"192.168.0.0/24"` or `"2001:db2::/64"`).
      This range is used to allocate ClusterIPs to Service objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceCIDR
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRSpec'
        description: The desired state of the ServiceCIDR.
        x-kab-description-zh: 此 ServiceCIDR 的期望状态。
      status:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRStatus'
        description: The current state of the ServiceCIDR.
        x-kab-description-zh: 此 ServiceCIDR 的当前状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      ServiceCIDR 使用 CIDR 格式（例如，`"192.168.0.0/24"` 或 `"2001:db2::/64"`）来定义一组 IP 地址。
      所给的地址范围用来为 Service 对象分配集群 IP 地址。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.ServiceCIDR.UPDATE:
    description: |-
      ServiceCIDR defines a range of IP addresses using CIDR format (e.g. `"192.168.0.0/24"` or `"2001:db2::/64"`).
      This range is used to allocate ClusterIPs to Service objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceCIDR
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRSpec'
        description: The desired state of the ServiceCIDR.
        x-kab-description-zh: 此 ServiceCIDR 的期望状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ServiceCIDR 使用 CIDR 格式（例如，`"192.168.0.0/24"` 或 `"2001:db2::/64"`）来定义一组 IP 地址。
      所给的地址范围用来为 Service 对象分配集群 IP 地址。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.ServiceCIDRList:
    description: ServiceCIDRList contains a list of ServiceCIDR objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - networking.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: The list of ServiceCIDR objects.
        items:
          $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
        type: array
        x-kab-description-zh: 包含 ServiceCIDR 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ServiceCIDRList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ServiceCIDR 对象的列表。
    x-kubernetes-group-version-kind:
      - group: networking.k8s.io
        kind: ServiceCIDRList
        version: v1alpha1
  io.k8s.api.networking.v1alpha1.ServiceCIDRSpec:
    description: ServiceCIDRSpec define the CIDRs the user wants to use for allocating
      ClusterIPs for Services.
    properties:
      cidrs:
        description: |-
          The IP blocks in CIDR notation (e.g. "192.168.0.0/24" or "2001:db8::/64") from which to assign service cluster IPs.
          Max of two items is allowed, one of each IP family. This field is immutable.
        items:
          minLength: 1
          type: string
        maxItems: 2
        type: array
        x-kab-description-zh: |-
          以 CIDR 方式（例如，`"192.168.0.0/24"` 或者 `"2001:db8::/64"`）给出的 IP 网段，集群将从中为 Service 分配集群 IP 地址。
          此数组最多两个元素，分别用于不同的 IP 地址族。
          此字段不可变更。
        x-kubernetes-list-type: atomic
    required:
      - cidrs
    type: object
    x-kab-description-zh: ServiceCIDRSpec 定义用户在为 Service 分配集群 IP 时希望使用的 CIDR 网段。
  io.k8s.api.networking.v1alpha1.ServiceCIDRStatus:
    description: ServiceCIDRStatus describes the current state of the ServiceCIDR.
    properties:
      conditions:
        description: An array of Condition that describe the state of the ServiceCIDR.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
        type: array
        x-kab-description-zh: 用来描述当前 ServiceCIDR 状态的 Condition 对象数组。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: ServiceCIDRStatus 描述 ServiceCIDR 的当前状态。
  io.k8s.api.node.v1.Overhead:
    description: The resource overhead associated with running a Pod.
    properties:
      podFixed:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The fixed resource overhead associated with running a Pod.
          Data in this map are validated as if they are specified as `limits` for Pod
          resource requirements.
        type: object
        x-kab-description-zh: |-
          与运行某个 Pod 相关的、确定的资源开销。
          此映射的合法性检查与 Pod 的 `resources.limits` 字段相同。
    type: object
    x-kab-description-zh: 与运行某个 Pod 相关联的资源开销。
  io.k8s.api.node.v1.RuntimeClass.CREATE:
    description: |-
      RuntimeClass defines a class of container runtime supported in the cluster.
      The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod.
      RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec.
      The Kubelet is responsible for resolving the `name` reference before running the Pod.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - node.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      handler:
        description: |-
          The underlying runtime and configuration that the CRI implementation will use to handle Pods of
          this class. The possible values are specific to the node & CRI configuration.
          It is assumed that all handlers are available on every node, and handlers of the same name are
          equivalent on every node.
          For example, a handler called `"runc"` might specify that the `runc` OCI runtime (using native
          Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase,
          conform to the DNS Label (RFC 1123) requirements, and is immutable.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          CRI 实现处理此类 Pod 时要使用的下层运行时及其配置。可能的值是特定于节点和 CRI 配置的。
          一般而言，在所有节点上都部署了所有的处理程序，不同节点上同名的处理程序也是等价的。
          例如，一个名为 `"runc"` 的处理程序可能指定要使用 `runc` OCI 运行时（原生的 Linux 容器）
          来运行 Pod 中的容器。
          这里的 `handler` 字符串必须是小写字母，遵从 DNS 标签（RFC 1123）格式。
          此字段不可变更。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RuntimeClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名称必须是合法的 DNS 子域名。
      overhead:
        $ref: '#/definitions/io.k8s.api.node.v1.Overhead'
        description: The resource overhead associated with running a Pod for a given
          RuntimeClass.
        x-kab-description-zh: 使用给定 RuntimeClass 运行 Pod 时会牵涉到的额外的资源消耗。
      scheduling:
        $ref: '#/definitions/io.k8s.api.node.v1.Scheduling'
        description: |-
          The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to
          nodes that support it.
          If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes.
        x-kab-description-zh: |-
          此字段为调度约束，目的是确保采用此 RuntimeClass 运行的 Pod 会被调度到支持该 RuntimeClass 的节点。
          如果 `scheduling` 未设置，则假定所有节点都支持此 RuntimeClass。
    required:
      - apiVersion
      - handler
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      RuntimeClass 定义的是集群内所支持的一类容器运行时。
      RuntimeClass 用来确定用哪个容器运行时来运行给定 Pod 中的所有容器。
      RuntimeClasses 要由用户或集群提供者来手动定义，并在 Pod 中引用。
      kubelet 要负责在运行 Pod 之前解析对 RuntimeClass 的引用。
    x-kubernetes-group-version-kind:
      - group: node.k8s.io
        kind: RuntimeClass
        version: v1
  io.k8s.api.node.v1.RuntimeClass.GET:
    description: |-
      RuntimeClass defines a class of container runtime supported in the cluster.
      The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod.
      RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec.
      The Kubelet is responsible for resolving the `name` reference before running the Pod.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - node.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      handler:
        description: |-
          The underlying runtime and configuration that the CRI implementation will use to handle Pods of
          this class. The possible values are specific to the node & CRI configuration.
          It is assumed that all handlers are available on every node, and handlers of the same name are
          equivalent on every node.
          For example, a handler called `"runc"` might specify that the `runc` OCI runtime (using native
          Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase,
          conform to the DNS Label (RFC 1123) requirements, and is immutable.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          CRI 实现处理此类 Pod 时要使用的下层运行时及其配置。可能的值是特定于节点和 CRI 配置的。
          一般而言，在所有节点上都部署了所有的处理程序，不同节点上同名的处理程序也是等价的。
          例如，一个名为 `"runc"` 的处理程序可能指定要使用 `runc` OCI 运行时（原生的 Linux 容器）
          来运行 Pod 中的容器。
          这里的 `handler` 字符串必须是小写字母，遵从 DNS 标签（RFC 1123）格式。
          此字段不可变更。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RuntimeClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名称必须是合法的 DNS 子域名。
      overhead:
        $ref: '#/definitions/io.k8s.api.node.v1.Overhead'
        description: The resource overhead associated with running a Pod for a given
          RuntimeClass.
        x-kab-description-zh: 使用给定 RuntimeClass 运行 Pod 时会牵涉到的额外的资源消耗。
      scheduling:
        $ref: '#/definitions/io.k8s.api.node.v1.Scheduling'
        description: |-
          The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to
          nodes that support it.
          If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes.
        x-kab-description-zh: |-
          此字段为调度约束，目的是确保采用此 RuntimeClass 运行的 Pod 会被调度到支持该 RuntimeClass 的节点。
          如果 `scheduling` 未设置，则假定所有节点都支持此 RuntimeClass。
    required:
      - apiVersion
      - handler
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      RuntimeClass 定义的是集群内所支持的一类容器运行时。
      RuntimeClass 用来确定用哪个容器运行时来运行给定 Pod 中的所有容器。
      RuntimeClasses 要由用户或集群提供者来手动定义，并在 Pod 中引用。
      kubelet 要负责在运行 Pod 之前解析对 RuntimeClass 的引用。
    x-kubernetes-group-version-kind:
      - group: node.k8s.io
        kind: RuntimeClass
        version: v1
  io.k8s.api.node.v1.RuntimeClass.UPDATE:
    description: |-
      RuntimeClass defines a class of container runtime supported in the cluster.
      The RuntimeClass is used to determine which container runtime is used to run all containers in a Pod.
      RuntimeClasses are manually defined by a user or cluster provisioner, and referenced in the Pod spec.
      The Kubelet is responsible for resolving the `name` reference before running the Pod.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - node.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      handler:
        description: |-
          The underlying runtime and configuration that the CRI implementation will use to handle Pods of
          this class. The possible values are specific to the node & CRI configuration.
          It is assumed that all handlers are available on every node, and handlers of the same name are
          equivalent on every node.
          For example, a handler called `"runc"` might specify that the `runc` OCI runtime (using native
          Linux containers) will be used to run the containers in a Pod. The `handler` must be lowercase,
          conform to the DNS Label (RFC 1123) requirements, and is immutable.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          CRI 实现处理此类 Pod 时要使用的下层运行时及其配置。可能的值是特定于节点和 CRI 配置的。
          一般而言，在所有节点上都部署了所有的处理程序，不同节点上同名的处理程序也是等价的。
          例如，一个名为 `"runc"` 的处理程序可能指定要使用 `runc` OCI 运行时（原生的 Linux 容器）
          来运行 Pod 中的容器。
          这里的 `handler` 字符串必须是小写字母，遵从 DNS 标签（RFC 1123）格式。
          此字段不可变更。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RuntimeClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象的名称必须是合法的 DNS 子域名。
      overhead:
        $ref: '#/definitions/io.k8s.api.node.v1.Overhead'
        description: The resource overhead associated with running a Pod for a given
          RuntimeClass.
        x-kab-description-zh: 使用给定 RuntimeClass 运行 Pod 时会牵涉到的额外的资源消耗。
      scheduling:
        $ref: '#/definitions/io.k8s.api.node.v1.Scheduling'
        description: |-
          The scheduling constraints to ensure that Pods running with this RuntimeClass are scheduled to
          nodes that support it.
          If `scheduling` is nil, this RuntimeClass is assumed to be supported by all nodes.
        x-kab-description-zh: |-
          此字段为调度约束，目的是确保采用此 RuntimeClass 运行的 Pod 会被调度到支持该 RuntimeClass 的节点。
          如果 `scheduling` 未设置，则假定所有节点都支持此 RuntimeClass。
    required:
      - apiVersion
      - handler
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      RuntimeClass 定义的是集群内所支持的一类容器运行时。
      RuntimeClass 用来确定用哪个容器运行时来运行给定 Pod 中的所有容器。
      RuntimeClasses 要由用户或集群提供者来手动定义，并在 Pod 中引用。
      kubelet 要负责在运行 Pod 之前解析对 RuntimeClass 的引用。
    x-kubernetes-group-version-kind:
      - group: node.k8s.io
        kind: RuntimeClass
        version: v1
  io.k8s.api.node.v1.RuntimeClassList:
    description: A list of RuntimeClass objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - node.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of RuntimeClass objects.
        items:
          $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
        type: array
        x-kab-description-zh: 包含 RuntimeClass 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RuntimeClassList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 RuntimeClass 对象的列表。
    x-kubernetes-group-version-kind:
      - group: node.k8s.io
        kind: RuntimeClassList
        version: v1
  io.k8s.api.node.v1.Scheduling:
    description: The scheduling constraints for Nodes supporting a RuntimeClass.
    properties:
      nodeSelector:
        additionalProperties:
          type: string
        description: |-
          Labels that must be present on Nodes that support this RuntimeClass.
          Pods using this RuntimeClass can only be scheduled to a Node matched by this selector.
          The RuntimeClass `nodeSelector` is merged with a Pod's existing `nodeSelector`.
          Any conflicts will cause the Pod to be rejected during admission.
        type: object
        x-kab-description-zh: |-
          支持此 RuntimeClass 的 Node 上必须具有的标签。
          使用此 RuntimeClass 的 Pod 只能被调度与此选择算符匹配的节点上。
          RuntimeClass 的 `nodeSelector` 会与 Pod 现有的 `nodeSelector` 条件合并。
          如果二者之间出现任何冲突，Pod 会在准入时被拒绝。
        x-kubernetes-map-type: atomic
      tolerations:
        description: |-
          The tolerations to be appended (excluding duplicates) to Pods running with this RuntimeClass
          during admission, effectively unioning the set of Nodes tolerated by the Pod and the RuntimeClass.
          Duplications in the list is treated as invalid.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.Toleration'
        type: array
        x-kab-description-zh: |-
          要追加到使用此 RuntimeClass 运行的 Pod 上的容忍度设置（追加时会去重）。
          在对 Pod 进行准入判断时，会检查此设置。
          本质上，系统会对 Pod 所能容忍的节点集合与 RuntimeClass 所能容忍的集合取并集。
          列表中不可以存在重复项。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 对支持某 RuntimeClass 的节点的调度约束。
  io.k8s.api.policy.v1.Eviction:
    description: |-
      Eviction evicts a Pod from its Node subject to certain policies and safety constraints.
      This is a subresource of Pod.
      A request to cause such an eviction is created by POSTing to `".../pods/<pod name>/evictions"`.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - policy/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      deleteOptions:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        description: DeleteOptions may be provided.
        x-kab-description-zh: 可以设置删除选项。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Eviction
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This is used to refer to the Pod.
        x-kab-description-zh: 标准的对象元数据。用来引用 Pod。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      Eviction 可以用来将一个 Pod 从当前所在节点驱逐出去。驱逐操作可能会收到一些策略或安全性限制影响。
      此结构是 Pod 的子资源。
      要发起对 Pod 的驱逐请求，可以向 `".../pods/<pod name>/evictions"` 发出 POST 操作携带此对象。
    x-kubernetes-group-version-kind:
      - group: policy
        kind: Eviction
        version: v1
  io.k8s.api.policy.v1.PodDisruptionBudget.CREATE:
    description: An object that defines the max disruption that can be caused to a
      collection of Pods.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - policy/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodDisruptionBudget
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object's metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec'
        description: Specification of the desired behavior of the PodDisruptionBudget.
        x-kab-description-zh: 对 PodDisruptionBudget 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: PodDisruptionBudget 用来定义一组 Pod 可接受的干扰上限。
    x-kubernetes-group-version-kind:
      - group: policy
        kind: PodDisruptionBudget
        version: v1
  io.k8s.api.policy.v1.PodDisruptionBudget.GET:
    description: An object that defines the max disruption that can be caused to a
      collection of Pods.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - policy/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodDisruptionBudget
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object's metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec'
        description: Specification of the desired behavior of the PodDisruptionBudget.
        x-kab-description-zh: 对 PodDisruptionBudget 预期行为的规约。
      status:
        $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetStatus'
        description: Most recently observed status of the PodDisruptionBudget.
        x-kab-description-zh: PodDisruptionBudget 的最近观测状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: PodDisruptionBudget 用来定义一组 Pod 可接受的干扰上限。
    x-kubernetes-group-version-kind:
      - group: policy
        kind: PodDisruptionBudget
        version: v1
  io.k8s.api.policy.v1.PodDisruptionBudget.UPDATE:
    description: An object that defines the max disruption that can be caused to a
      collection of Pods.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - policy/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodDisruptionBudget
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object's metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetSpec'
        description: Specification of the desired behavior of the PodDisruptionBudget.
        x-kab-description-zh: 对 PodDisruptionBudget 预期行为的规约。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: PodDisruptionBudget 用来定义一组 Pod 可接受的干扰上限。
    x-kubernetes-group-version-kind:
      - group: policy
        kind: PodDisruptionBudget
        version: v1
  io.k8s.api.policy.v1.PodDisruptionBudgetList:
    description: A list of PodDisruptionBudget objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - policy/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PodDisruptionBudget objects.
        items:
          $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
        type: array
        x-kab-description-zh: 包含 PodDisruptionBudget 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodDisruptionBudgetList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 PodDisruptionBudget 对象的列表。
    x-kubernetes-group-version-kind:
      - group: policy
        kind: PodDisruptionBudgetList
        version: v1
  io.k8s.api.policy.v1.PodDisruptionBudgetSpec:
    description: Specification for a PodDisruptionBudget.
    properties:
      maxUnavailable:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          An eviction is allowed if at most `maxUnavailable` Pods selected by `selector` are unavailable
          after the eviction, i.e. even in absence of the evicted Pod.
          The valid value is an integer or a percentage string. A percentage value can be no more than `"100%"`.
          One can prevent all voluntary evictions by specifying `0`.
          This is a mutually exclusive setting with `minAvailable`.
        x-kab-description-zh: |-
          如果驱逐 Pod 之后，`selector` 所选择的 Pod 中即使不再包含被驱逐的 Pod，最多会有 `maxUnavailable`
          个 Pod 不可用，则驱逐操作是被允许的。
          字段的合法取值是一个整数或者一个百分比值。所给的百分比值不可以超过 `"100%"`。
          通过将此字段设置为 `0`，可以完全禁止非自愿性质的 Pod 驱逐。
          此字段与 `minAvailable` 字段是互斥的。
      minAvailable:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.util.intstr.IntOrString'
        description: |-
          An eviction is allowed if at least `minAvailable` Pods selected by `selector` will still be available
          after the eviction, i.e. even in the absence of the evicted Pod.
          The valid value is an integer or a percentage string. A percentage can be no more than `"100%"`.
          You can prevent all voluntary evictions by specifying `"100%"`.
        x-kab-description-zh: |-
          如果驱逐 Pod 之后，`selector` 所选择的 Pod 中即使不再包含被驱逐的 Pod，至少会有 `minAvailable`
          个 Pod 可用，则驱逐操作是被允许的。
          字段的合法取值是一个整数或者一个百分比值。所给的百分比值不可以超过 `"100%"`。
          通过将此字段设置为 `"100%"`，可以完全禁止非自愿性质的 Pod 驱逐。
          此字段与 `maxUnavailable` 字段是互斥的。
      selector:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: |-
          Label query over Pods whose evictions are managed by the disruption budget.
          A null selector selects no Pods, while an empty (`{}`) selector will select all Pods
          within the namespace.
        x-kab-description-zh: |-
          字段为对 Pod 的标签查询，所选中的 Pod 的驱逐行为受此 PDB 对象管理。
          如果字段未设置，则意味着不会选择任何 Pod；如果设置为空的选择算符，则意味着选择所在名字空间中所有 Pod。
        x-kubernetes-patch-strategy: replace
      unhealthyPodEvictionPolicy:
        default: IfHealthyBudget
        description: |-
          This defines the criteria for when unhealthy Pods should be considered for eviction.
          Current implementation considers healthy Pods, as Pods that have `status.conditions` item
          with `type="Ready",status="True"`.

          Valid policies are `"IfHealthyBudget"` and `"AlwaysAllow"`.
          If no policy is specified, the default behavior will be used, which corresponds to the
          `"IfHealthyBudget"` policy.
          `"IfHealthyBudget"` policy means that running Pods (`status.phase="Running"`),
          but not yet healthy can be evicted only if the guarded application is not disrupted
          (`status.currentHealthy` is at least equal to `status.desiredHealthy`).
          Healthy Pods will be subject to the PDB for eviction.

          `"AlwaysAllow"` policy means that all running Pods (`status.phase="Running"`), but not yet healthy
          are considered disrupted and can be evicted regardless of whether the criteria in a PDB is met.
          This means perspective running Pods of a disrupted application might not get a chance to become healthy.
          Healthy Pods will be subject to the PDB for eviction.

          Additional policies may be added in the future.
          Clients making eviction decisions should disallow eviction of unhealthy Pods if they encounter
          an unrecognized policy in this field.

          This field is Beta-level.
          The eviction API uses this field when the feature gate `PDBUnhealthyPodEvictionPolicy`
          is enabled (enabled by default).
        enum:
          - AlwaysAllow
          - IfHealthyBudget
        type: string
        x-kab-description-zh: |-
          此字段定义选择不健康的 Pod 来驱逐时的判定条件。
          当前的实现中，对健康 Pod 的判定标准是指 `status.conditions` 中包含 `type="Ready",status="True"`
          状况的 Pod。

          此字段的合法设置值为：

          - `"IfHealthyBudget"`（默认值）：意味着只有对应的应用没有被干扰（`status.currentHealthy`
            大于等于 `status.desiredHealthy`）时，运行中的（`status.phase="Running"`）不健康的 Pod
            才可以被驱逐。是否要驱逐健康的 Pod，取决于 PDB 的约束条件。

          - `"AlwaysAllow"`：运行中的（`status.phase="Running"`）不健康的 Pod 会被视为已经收到干扰了，
            因此无论是否满足 PDB 中的约束，都可以被驱逐。
            这种策略可能会导致已经被干扰的应用很难有机会回到健康状态。
            PDB 的约束条件可以决定是有要驱逐健康的 Pod。

          将来的版本中可能会添加新的策略。负责驱逐决策的客户端如果在此字段中看到无法识别的策略设置，
          应该禁止驱逐不健康的 Pod。

          此字段处于 Beta 阶段。当启用了 `PDBUnhealthyPodEvictionPolicy` 特性门控之后，Eviction API
          会检查此字段的设置。
    type: object
    x-kab-description-zh: PodDisruptionBudget 的规约。
  io.k8s.api.policy.v1.PodDisruptionBudgetStatus:
    description: The status of a PodDisruptionBudget which may trail the actual state
      of a system.
    properties:
      conditions:
        description: |-
          This contains conditions for PDB. The disruption controller sets the DisruptionAllowed condition.
          The following are known values for the reason field (additional reasons could be added in the future):
          - `"SyncFailed"`: The controller encountered an error and wasn't able to compute the number
            of allowed disruptions. Therefore no disruptions are allowed and the `status` of the condition
            will be `"False"`.
          - `"InsufficientPods"`: The number of Pods are either at or below the number required by the
            PodDisruptionBudget. No disruptions are allowed and the `status` of the condition will be `"False"`.
          - `"SufficientPods"`: There are more Pods than required by the PodDisruptionBudget.
            The condition will be `"True"`, and the number of allowed disruptions are provided by the
            `disruptionsAllowed` property.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Condition'
        type: array
        x-kab-description-zh: |-
          此字段包含 PDB 的状况列表。PDB 的控制器会设置 `"DisruptionAllowed"` 状况。
          `reason` 字段的已知值如下（将来可能会添加新的 `reason` 值）：

          - `"SyncFailed"`：控制器遇到错误情况，无法计算准许的干扰数目。因此，干扰被禁止，并且状况的 `status`
            字段会被设置为 `"False"`。
          - `"InsufficientPods"`：Pod 个数可能达到或者低于 PDB 所需要的 Pod 副本数。不允许发生干扰，
            状况的 `status` 字段会被设置为 `"False"`。
          - `"SufficientPods"`：Pod 个数高出 PDB 所需要的副本数。此状况的 `status` 会被设置为 `"True"`。
            干扰是被允许的，但是干扰的数目要受 `disruptionsAllowed` 属性值约束。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      currentHealthy:
        description: The current number of healthy Pods.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 当前处于健康状态的 Pod 个数。
      desiredHealthy:
        description: The minimum desired number of healthy Pods.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 对期望处于健康状态的 Pod 个数的最低要求。
      disruptedPods:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          Information about Pods whose eviction was processed by the API server but has not yet been observed
          by the PodDisruptionBudget controller.
          A Pod will be in this map from the time when the API server processed the eviction request
          to the time when the Pod is seen by PDB controller as having been marked for deletion
          (or after a timeout).
          The key in the map is the name of the Pod and the value is the time when the API server processed
          the eviction request.
          If the deletion didn't occur and a Pod is still there it will be removed from the list automatically
          by PodDisruptionBudget controller after some time.
          If everything goes smooth this map should be empty for the most of the time.
          Large number of entries in the map may indicate problems with Pod deletions.
        type: object
        x-kab-description-zh: |-
          关于一些 Pod 的信息，所列的 Pod 的驱逐请求已被 API 服务器处理，但 PDB 控制器尚未观测到实际效果。
          当 API 服务器处理了驱逐请求之后，到 PDB 控制器实际监测到 Pod 已被标记为删除的时间里，Pod 会被列在这里。
          如果 PDB 控制器在一段时间内未能监测到 Pod 状态变化，Pod 也会被列在这里。

          此映射的主键是 Pod 的名称，值为 API 服务器处理驱逐请求的时间。
          如果经过一段时间后，Pod 仍然在这个列表中，也就是 Pod 没有被删除，则 PDB 会自动将其从列表中删除。
          如果一切正常，在绝大多数时候，这个映射应该是空的。
          如果此映射中包含很多条目，则意味着 kubelet 删除 Pod 遇到了问题。
      disruptionsAllowed:
        description: Number of Pod disruptions that are currently allowed.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: 当前允许发生的 Pod 干扰数目。
      expectedPods:
        description: Total number of Pods counted by this disruption budget.
        format: int32
        minimum: 0
        type: integer
        x-kab-description-zh: PDB 当前统计到的 Pod 个数。
      observedGeneration:
        description: |-
          Most recent generation observed when updating this status field.
          `disruptionsAllowed` and other status information is valid only if
          `observedGeneration` equals to PDB's object `generation`.
        format: int64
        type: integer
        x-kab-description-zh: |-
          在更新此状态字段时观测到的对象代数。
          只有 `observedGeneration` 的值与 PDB 的对象的 `generation` 相同时，
          `disruptionsAllowed` 以及其他一些状态信息才是合法的。
    required:
      - currentHealthy
      - disruptionsAllowed
      - desiredHealthy
      - expectedPods
    type: object
    x-kab-description-zh: PodDisruptionBudget 的当前状态，可能与系统中的实际状态之间存在一定的滞后。
  io.k8s.api.rbac.v1.AggregationRule:
    description: This describes how to locate ClusterRoles to aggregate into the ClusterRole
    properties:
      clusterRoleSelectors:
        description: |-
          A list of LabelSelectors used to find ClusterRoles and create the `rules`.
          If any of the selectors match, the ClusterRole's permissions will be added.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段为一个标签选择算符的列表，用来发现 ClusterRole 以创建当前 ClusterRole 的 `rules`。
          如果列表中任何一个算符匹配到了 ClusterRole，则被匹配的 ClusterRole 的访问权限会被添加到当前的
          ClusterRole 中。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: 此结构描述如何定位要聚集到当前 ClusterRole 的其他 ClusterRole 对象。
  io.k8s.api.rbac.v1.ClusterRole.CREATE:
    description: |-
      A cluster level group of policy rules that can be referenced as a unit by a RoleBinding
      or ClusterRoleBinding resource.
    properties:
      aggregationRule:
        $ref: '#/definitions/io.k8s.api.rbac.v1.AggregationRule'
        description: |-
          A field that describes how to build the `rules` for this ClusterRole.
          If `aggregationRule` is set, then the `rules` are controller managed and direct
          changes to `rules` will be stomped by the controller.
        x-kab-description-zh: |-
          用来描述如何为 ClusterRole 构造 `rules` 规则集的字段。
          如果设置了 `aggregationRule`，则 `rules` 是由控制器管理的，
          控制器不再允许直接操控 `rules` 字段。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRole
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid path segment
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      rules:
        description: All the policy rules for this ClusterRole.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
        x-kab-description-zh: 此 ClusterRole 的策略规则集合。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      集群层面的一组策略规则，可供 RoleBinding 资源或者 ClusterRoleBinding
      资源作为一个授权单元来引用。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
  io.k8s.api.rbac.v1.ClusterRole.GET:
    description: |-
      A cluster level group of policy rules that can be referenced as a unit by a RoleBinding
      or ClusterRoleBinding resource.
    properties:
      aggregationRule:
        $ref: '#/definitions/io.k8s.api.rbac.v1.AggregationRule'
        description: A field that describes how to build the `rules` for this ClusterRole.
        x-kab-description-zh: 用来描述如何为 ClusterRole 构造 `rules` 规则集的字段。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRole
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      rules:
        description: All the policy rules for this ClusterRole.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
        x-kab-description-zh: 此 ClusterRole 的策略规则集合。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - rules
    type: object
    x-kab-description-zh: |-
      集群层面的一组策略规则，可供 RoleBinding 资源或者 ClusterRoleBinding
      资源作为一个授权单元来引用。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
  io.k8s.api.rbac.v1.ClusterRole.UPDATE:
    description: |-
      A cluster level group of policy rules that can be referenced as a unit by a RoleBinding
      or ClusterRoleBinding resource.
    properties:
      aggregationRule:
        $ref: '#/definitions/io.k8s.api.rbac.v1.AggregationRule'
        description: |-
          A field that describes how to build the `rules` for this ClusterRole.
          If `aggregationRule` is set, then the `rules` are controller managed and direct
          changes to `rules` will be stomped by the controller.
        x-kab-description-zh: |-
          用来描述如何为 ClusterRole 构造 `rules` 规则集的字段。
          如果设置了 `aggregationRule`，则 `rules` 是由控制器管理的，
          控制器不再允许直接操控 `rules` 字段。
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRole
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      rules:
        description: All the policy rules for this ClusterRole.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
        x-kab-description-zh: 此 ClusterRole 的策略规则集合。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      集群层面的一组策略规则，可供 RoleBinding 资源或者 ClusterRoleBinding
      资源作为一个授权单元来引用。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
  io.k8s.api.rbac.v1.ClusterRoleBinding.CREATE:
    description: ClusterRoleBinding represents a binding between a ClusterRole and
      some subjects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRoleBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: |-
          The reference to a ClusterRole.
          If the `roleRef` cannot be resolved, the authorizer must return an error.
          This field cannot be updated. This field is immutable.
        x-kab-description-zh: |-
          字段为对某个 ClusterRole 的引用。
          如果鉴权组件无法解析 `roleRef` 所引用的资源，则必须返回错误。
          此字段不可变更。
      subjects:
        description: References to the subjects the ClusterRole applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
        x-kab-description-zh: 对此 ClusterRole 所适用的主体的引用。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - roleRef
    type: object
    x-kab-description-zh: ClusterRoleBinding 代表的是 ClusterRole 与某些主体之间的绑定关系。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
  io.k8s.api.rbac.v1.ClusterRoleBinding.GET:
    description: ClusterRoleBinding represents a binding between a ClusterRole and
      some subjects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRoleBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: |-
          The reference to a ClusterRole.
          This field cannot be updated. This field is immutable.
        x-kab-description-zh: |-
          字段为对某个 ClusterRole 的引用。
          此字段不可变更。
      subjects:
        description: References to the subjects the ClusterRole applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
        x-kab-description-zh: 对此 ClusterRole 所适用的主体的引用。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - roleRef
      - subjects
    type: object
    x-kab-description-zh: ClusterRoleBinding 代表的是 ClusterRole 与某些主体之间的绑定关系。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
  io.k8s.api.rbac.v1.ClusterRoleBinding.UPDATE:
    description: ClusterRoleBinding represents a binding between a ClusterRole and
      some subjects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRoleBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: |-
          The reference to a ClusterRole.
          If the `roleRef` cannot be resolved, the authorizer must return an error.
          This field cannot be updated. This field is immutable.
        x-kab-description-zh: |-
          字段为对某个 ClusterRole 的引用。
          如果鉴权组件无法解析 `roleRef` 所引用的资源，则必须返回错误。
          此字段不可变更。
      subjects:
        description: References to the subjects the ClusterRole applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
        x-kab-description-zh: 对此 ClusterRole 所适用的主体的引用。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - roleRef
    type: object
    x-kab-description-zh: ClusterRoleBinding 代表的是 ClusterRole 与某些主体之间的绑定关系。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
  io.k8s.api.rbac.v1.ClusterRoleBindingList:
    description: A list of ClusterRoleBinding objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ClusterRoleBinding objects.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
        type: array
        x-kab-description-zh: 包含 ClusterRoleBinding 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRoleBindingList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ClusterRoleBinding 对象的列表。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRoleBindingList
        version: v1
  io.k8s.api.rbac.v1.ClusterRoleList:
    description: A list of ClusterRole objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ClusterRole objects.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
        type: array
        x-kab-description-zh: 包含 ClusterRole 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ClusterRoleList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ClusterRole 对象的列表。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: ClusterRoleList
        version: v1
  io.k8s.api.rbac.v1.PolicyRule:
    description: |-
      Information that describes a policy rule. Rules can either apply to API resources
      (such as `"pods"` or `"secrets"`) or non-resource URL paths (such as '"/api"'),
      but not both.
    properties:
      apiGroups:
        description: |-
          The name of the API group that contains the resources.
          If multiple API groups are specified, any action requested against one of the enumerated
          resources in any API group will be allowed.
          This field is required when `nonResourceURLs` is empty.
          "" represents the core API group and "*" represents all API groups.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          包含资源的 API 组名。如果指定了多个 API 组，则针对列举的 API 组而言，
          在 `resources` 中枚举的所有资源类别都是可访问的。
          当 `nonResourceURLs` 字段为空时，需要设置此字段。
          `""` 表示核心 API 组，`"*"` 表示所有 API 组。
        x-kubernetes-list-type: atomic
      nonResourceURLs:
        description: |-
          A set of partial URLs that a user should have access to.
          Wildcards (`"*"`) are allowed, but only as the full, final step in the path.
          Since non-resource URLs are not namespaced, this field is only applicable for
          ClusterRoles referenced from a ClusterRoleBinding.
          If this field is not empty, other fields including `apiGroups`, `resources`,
          `resourceNames` must be empty.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          字段值是一组不完整的 URL，用户会被授权访问这些路径。
          可以使用通配符（`"*"`），但只能作为所给路径中的最后一步，并且是完整的一步。
          由于非资源 URL 路径是不受名字空间限制的，此字段值适用于从 ClusterRoleBinding 引用的
          ClusterRole 对象。
          当此列表不为空时，其他字段，包括 `apiGroups`、`resources`、`resourceNames` 都必须为空。
        x-kubernetes-list-type: atomic
      resourceNames:
        description: |-
          A list of resource names the rule applies to.
          An empty set means that everything is allowed.
        items:
          type: string
        type: array
        x-kab-description-zh: 一个字符串列表，包含了此规则所适用的资源名称。如果此集合为空，则意味着适用于所有对象。
        x-kubernetes-list-type: atomic
      resources:
        description: |-
          A list of resources this rule applies to. `"*"` represents all resources.
          This field cannot be empty when `nonResourceURLs` is empty.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此规则所适用的资源类别列表。`"*"` 表示适用于所有资源类别。
          当 `nonResourceURLs` 字段为空时，此字段必须设置，且不为空。
        x-kubernetes-list-type: atomic
      verbs:
        description: |-
          A list of verbs that apply to **ALL** the resource kinds contained in this rule.
          `"*"` means all verbs.
        items:
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          适用于此规则中所筛选的所有资源类别的一组动词。
          `"*"` 意味着所有动词。
        x-kubernetes-list-type: atomic
    required:
      - apiGroups
      - verbs
    type: object
    x-kab-description-zh: |-
      用来描述一条策略规则的信息。此规则可以应用到 API 资源（`"pods"` 或 `"secrets"`）
      或者非资源的 URL 路径（如 `"/api"`）上，但只能选择其一。
  io.k8s.api.rbac.v1.Role.CREATE:
    description: Role is a namespaced, logical group of policy rules.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Role
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      rules:
        description: All the policy rules for this Role.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
        x-kab-description-zh: 此 Role 的策略规则集合。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: Role 是特定名字空间内的一组策略规则。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: Role
        version: v1
  io.k8s.api.rbac.v1.Role.GET:
    description: Role is a namespaced, logical group of policy rules.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Role
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      rules:
        description: All the policy rules for this Role.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
        x-kab-description-zh: 此 Role 的策略规则集合。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - rules
    type: object
    x-kab-description-zh: Role 是特定名字空间内的一组策略规则。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: Role
        version: v1
  io.k8s.api.rbac.v1.Role.UPDATE:
    description: Role is a namespaced, logical group of policy rules.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - Role
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      rules:
        description: All the policy rules for this Role.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.PolicyRule'
        type: array
        x-kab-description-zh: 此 Role 的策略规则集合。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: Role 是特定名字空间内的一组策略规则。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: Role
        version: v1
  io.k8s.api.rbac.v1.RoleBinding.CREATE:
    description: |-
      RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace,
      and binds it to some subjects in the namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RoleBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: |-
          The reference to a Role in the current namespace or a ClusterRole.
          If the `roleRef` cannot be resolved, the authorizer must return an error.
          This field is immutable.
        x-kab-description-zh: |-
          字段为对当前名字空间中某个 Role 或者对某个 ClusterRole 的引用。
          如果鉴权组件无法解析 `roleRef` 所引用的资源，则必须返回错误。
          此字段不可变更。
      subjects:
        description: References to the subjects the Role applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
        x-kab-description-zh: 对此 Role 所适用的主体的引用。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - roleRef
      - subjects
    type: object
    x-kab-description-zh: |-
      RoleBinding 引用同一名字空间内的某个 Role 或者集群全局的某个 ClusterRule，
      并将其绑定到名字空间中的某些主体。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
  io.k8s.api.rbac.v1.RoleBinding.GET:
    description: |-
      RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace,
      and binds it to some subjects in the namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RoleBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: |-
          The reference to a Role in the current namespace or a ClusterRole.
          If the `roleRef` cannot be resolved, the authorizer must return an error.
          This field is immutable.
        x-kab-description-zh: |-
          字段为对当前名字空间中某个 Role 或者对某个 ClusterRole 的引用。
          如果鉴权组件无法解析 `roleRef` 所引用的资源，则必须返回错误。
          此字段不可变更。
      subjects:
        description: References to the subjects the Role applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
        x-kab-description-zh: 对此 Role 所适用的主体的引用。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - roleRef
      - subjects
    type: object
    x-kab-description-zh: |-
      RoleBinding 引用同一名字空间内的某个 Role 或者集群全局的某个 ClusterRule，
      并将其绑定到名字空间中的某些主体。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
  io.k8s.api.rbac.v1.RoleBinding.UPDATE:
    description: |-
      RoleBinding references a Role in the same namespace or a ClusterRole in the global namespace,
      and binds it to some subjects in the namespace.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RoleBinding
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的路径段名称。
      roleRef:
        $ref: '#/definitions/io.k8s.api.rbac.v1.RoleRef'
        description: |-
          The reference to a Role in the current namespace or a ClusterRole.
          If the `roleRef` cannot be resolved, the authorizer must return an error.
          This field is immutable.
        x-kab-description-zh: |-
          字段为对当前名字空间中某个 Role 或者对某个 ClusterRole 的引用。
          如果鉴权组件无法解析 `roleRef` 所引用的资源，则必须返回错误。
          此字段不可变更。
      subjects:
        description: References to the subjects the Role applies to.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Subject'
        type: array
        x-kab-description-zh: 对此 Role 所适用的主体的引用。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - roleRef
    type: object
    x-kab-description-zh: |-
      RoleBinding 引用同一名字空间内的某个 Role 或者集群全局的某个 ClusterRule，
      并将其绑定到名字空间中的某些主体。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
  io.k8s.api.rbac.v1.RoleBindingList:
    description: A list of RoleBinding objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of RoleBinding objects.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
        type: array
        x-kab-description-zh: 包含 RoleBinding 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RoleBindingList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 RoleBinding 对象的列表。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: RoleBindingList
        version: v1
  io.k8s.api.rbac.v1.RoleList:
    description: A list of Role objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - rbac.authorization.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of Role objects.
        items:
          $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
        type: array
        x-kab-description-zh: 包含 Role 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - RoleList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadta
    type: object
    x-kab-description-zh: 包含 Role 对象的列表。
    x-kubernetes-group-version-kind:
      - group: rbac.authorization.k8s.io
        kind: RoleList
        version: v1
  io.k8s.api.rbac.v1.RoleRef:
    description: Information for referencing a Role or a ClusteRole.
    properties:
      apiGroup:
        description: |-
          The API group for the referenced resource.
          Currently this must be `"rbac.authorization.k8s.io"`.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源所在的 API 组。目前此值必须是 `"rbac.authorization.k8s.io"`。
      kind:
        description: The kind of the target resource referenced.
        enum:
          - ClusterRole
          - Role
        minLength: 1
        type: string
        x-kab-description-zh: 所引用的目标资源的类别。
      name:
        description: The name of the referenced resource. This value must be a valid
          path segment name.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的名称。此字段值必须是一个合法的路径段落名。
    required:
      - apiGroup
      - kind
      - name
    type: object
    x-kab-description-zh: 用来引用某个 Role 或 ClusterRole 对象的信息。
    x-kubernetes-map-type: atomic
  io.k8s.api.rbac.v1.Subject:
    description: |-
      A reference to a subject or user identity.
      This can either hold a direct API object reference, or a value for non-objects
      such as user and group names.
    properties:
      apiGroup:
        description: |-
          The API group of the referenced subject.
          When `kind` is `"ServiceAccount"`, this field must be empty string (`""`) or nil.
          When `kind` is `"User"` or `"Group"`, this field must be `"rbac.authorization.k8s.io"`.
        type: string
        x-kab-description-zh: |-
          被引用对象的 API 组。
          如果 `kind` 是 `"ServiceAccount"`，此字段必须是空字符串或者不设置。
          如果 `kind` 是 `"User"` 或 `"Group"`，此字段必须是 `"rbac.authorization.k8s.io"`。
      kind:
        description: |-
          Kind of object being referenced.
          If the authorizer does not recognize the `kind` value, it should report an error.
        enum:
          - Group
          - ServiceAccount
          - User
        minLength: 1
        type: string
        x-kab-description-zh: |-
          被尹苏云的对象的类别。
          如果鉴权组件无法识别 `kind` 字段的值，应该报告错误。
      name:
        description: |-
          Name of the referenced object.
          If `kind` is `"ServiceAccount"`, the `name` must be a valid ServiceAccount name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          被引用对象的的名称。
          如果 `kind` 是 `"ServiceAccount"`，则 `name` 必须是一个合法的 ServiceAccount 名称。
      namespace:
        description: |-
          Namespace of the referenced object.
          If the object kind is `"User"` or `"Group"` which are not namespaced,
          this value must be empty.
        type: string
        x-kab-description-zh: |-
          被引用对象所在的名字空间。
          如果对象的 `kind` 是 `"User"` 或 `"Group"`，即不受名字空间限制，则此值必须为空。
    required:
      - kind
      - name
    type: object
    x-kab-description-zh: |-
      对某主体或用户标识的引用。此结构可以包含一个直接的 API 对象引用，
      也可以是用户名或者组名这种没有对应 API 对象的主体。
    x-kubernetes-map-type: atomic
  io.k8s.api.resource.v1alpha2.AllocationResult:
    description: AllocationResult contains attributes of an allocated resource.
    properties:
      availableOnNodes:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: |-
          This field will get set by the resource driver after it has allocated the resource
          to inform the scheduler where it can schedule Pods using the ResourceClaim.

          Setting this field is optional. If null, the resource is available everywhere.
        x-kab-description-zh: |-
          此字段由资源驱动完成资源分配之后设置，用来通知调度器将 Pod 调度到何处才能访问到 ResourceClaim。
          设置此字段的行为不是必须的。如果此字段没有被设置，则资源可以在所有节点上访问。
      resourceHandles:
        description: |-
          This contains the state associated with an allocation that should be maintained throughout the
          lifetime of a claim. Each ResourceHandle contains data that should be passed to a specific
          kubelet plugin once it lands on a node.
          This data is returned by the driver after a successful allocation and is opaque to Kubernetes.
          Driver documentation may explain to users how to interpret this data if needed.

          Setting this field is optional. If null (or empty), it is assumed this allocation will be processed
          by a single kubelet plugin with no ResourceHandle data attached.
          The name of the kubelet plugin invoked will match the `driverName` set in the ResourceClaimStatus
          this AllocationResult is embedded in.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceHandle'
        maxItems: 32
        minItems: 0
        type: array
        x-kab-description-zh: |-
          此字段包含与资源分配相关的状态信息，这些信息在 ResourceClaim 的整个生命周期内都要维护起来。
          每个 ResourceHandle 中都包含一些数据，这些数据在 Pod 被调度到某个节点时，要传递给某个 kubelet 插件。
          在成功分配了资源之后，资源驱动会返回这些数据。数据本身对 Kubernetes 是不透明的。
          驱动的文档可能会向用户解释在需要的时候如何解析这些数据。

          设置此字段的行为是可选的。如果此字段未设置或者列表为空，则可以认为资源分配会由同一个 kubelet
          插件来处理，并且该插件不需要 ResourceHandle 数据。
          要被调用的 kubelet 插件的名称与此 AllocationResult 所在的 ResourceClaimStatus 中设置的 `driverName`
          相同。
        x-kubernetes-list-type: atomic
      shareable:
        description: This determines whether the resource supports more than one consumer
          at a time.
        type: boolean
        x-kab-description-zh: 此字段确定资源是否支持同时被两个用户使用。
    type: object
    x-kab-description-zh: AllocationResult 包含所分配的资源的属性。
  io.k8s.api.resource.v1alpha2.DriverAllocationResult:
    description: DriverAllocationResult contains vendor parameters and the allocation
      result for one request.
    properties:
      namedResources:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesAllocationResult'
        description: The allocation result when using the named resources model.
        x-kab-description-zh: 使用给定资源模型时对应的分配结果。
      vendorRequestParameters:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: The per-request configuration parameters from the time that the
          claim was allocated.
        x-kab-description-zh: 申领被分配时的配置参数，按请求组织。
    type: object
    x-kab-description-zh: DriverAllocationResult 包含供应商参数以及资源请求的分配结果。
  io.k8s.api.resource.v1alpha2.DriverRequests:
    description: DriverRequests describes all resources that are needed from one particular
      driver.
    properties:
      driverName:
        description: The name used by the DRA driver kubelet plugin. The name must
          be unique in the enclosing list. The name must be a valid DNS subdomain
          name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: DRA 驱动 kubelet 插件所使用的名称。此字段名在上级列表中必须唯一。 字段值必须是合法的 DNS
          子域名。
      requests:
        description: This describes all resources that are needed from the driver.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceRequest'
        minItems: 1
        type: array
        x-kab-description-zh: 此字段描述针对指定驱动所需要的所有资源。
        x-kubernetes-list-type: atomic
      vendorParameters:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: This includes arbitrary setup parameters for all requests of
          the claim. They are ignored while allocating the claim.
        x-kab-description-zh: 此字段包含申领的所有请求所对应的部署参数。在分配申领时此字段值会被忽略。
    type: object
    x-kab-description-zh: DriverRequests 描述针对特定驱动所需要的所有资源。
  io.k8s.api.resource.v1alpha2.NamedResourcesAllocationResult:
    description: NamedResourcesAllocationResult is used in AllocationResultModel.
    properties:
      name:
        description: The name of the selected resource instance.
        type: string
        x-kab-description-zh: 所选资源实例的名称。
    required:
      - name
    type: object
    x-kab-description-zh: NamedResourcesAllocationResult 用于 AllocationResultModel
      中。
  io.k8s.api.resource.v1alpha2.NamedResourcesAttribute:
    description: NamedResourcesAttribute is a combination of an attribute name and
      its value.
    properties:
      bool:
        description: This is a true/false value.
        type: boolean
        x-kab-description-zh: 此字段取值为 true 或者 false。
      int:
        description: This is a 64-bit integer.
        format: int64
        type: integer
        x-kab-description-zh: 此字段为一个 64 位整数值。
      intSlice:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesIntSlice'
        description: This is an array of 64-bit integers.
        x-kab-description-zh: 此字段为一个 64 位整数所构成的数组。
      name:
        description: This is the unique identifier among all resource instances managed
          by the driver on the node. It must be a DNS subdomain.
        type: string
        x-kab-description-zh: 此字段为驱动在节点上所管理的所有资源实例之间的唯一标识。字段值必须是合法的 DNS 子域名。
      quantity:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: This is a quantity.
        x-kab-description-zh: 此字段为一个量纲值。
      string:
        description: This is a string.
        type: string
        x-kab-description: 此字段为一个字符串值。
      stringSlice:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesStringSlice'
        description: This is an array of strings.
        x-kab-description-zh: 此字段为字符串数组。
      version:
        description: This is a semantic version according to semver.org spec 2.0.0.
        type: string
        x-kab-description-zh: 此字段为符合 semver.org 2.0.0 规范的版本号字符串。
    required:
      - name
    type: object
    x-kab-description-zh: NamedResourcesAttribute 是属性名称与取值的组合。
  io.k8s.api.resource.v1alpha2.NamedResourcesFilter:
    description: NamedResourcesFilter is used in ResourceFilterModel.
    properties:
      selector:
        description: |-
          This is a CEL expression which must evaluate to true if a resource instance is suitable.
          The language is as defined in https://kubernetes.io/docs/reference/using-api/cel/.
          In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of
          the instance under evaluation. For example:

          ```
          attributes.quantity["a"].isGreaterThan(quantity("0")) &&
             attributes.stringslice["b"].isSorted()
          ```
        minLength: 1
        type: string
        x-kab-description: |-
          此字段是一个 CEL 表达式，当资源实例合适时，此表达式的取值必须为 true。
          所使用的表达式按[官方文档](https://kubernetes.io/docs/reference/using-api/cel/)定义。
          此外，对于属性值中的每个 `namedResources` 类型，都存在一个可以解析为对应实例取值的映射。
          例如：

          ```
          attributes.quantity["a"].isGreaterThan(quantity("0")) &&
             attributes.stringslice["b"].isSorted()
          ```
    required:
      - selector
    type: object
    x-kab-description-zh: NamedResourcesFilter 用于 ResourceFilterModel 中。
  io.k8s.api.resource.v1alpha2.NamedResourcesInstance:
    description: NamedResourcesInstance represents one individual hardware instance
      that can be selected based on its attributes.
    properties:
      attributes:
        description: |-
          This defines the attributes of this resource instance.
          The name of each attribute must be unique.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesAttribute'
        type: array
        x-kab-description-zh: 此字段定义此资源实例的属性。每个属性的名称必须是唯一的。
        x-kubernetes-list-type: atomic
      name:
        description: The unique identifier among all resource instances managed by
          the driver on the node. It must be a DNS subdomain.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          对于节点上指定驱动所管理的所有资源实例，可以使用此字段值作为各个实例的标识符。
          字段值必须是合法的 DNS 子域名。
    required:
      - name
    type: object
    x-kab-description-zh: NamedResourcesInstance 代表的是可以基于属性来完成选择的各个硬件实例。
  io.k8s.api.resource.v1alpha2.NamedResourcesIntSlice:
    description: NamedResourcesIntSlice contains a slice of 64-bit integers.
    properties:
      ints:
        description: A slice of 64-bit integers.
        items:
          format: int64
          type: integer
        type: array
        x-kab-description-zh: 由 64 位整数所构成的一个序列。
        x-kubernetes-list-type: atomic
    required:
      - ints
    type: object
    x-kab-description-zh: NamedResourcesIntSlice 包含一个由 64 位整数组成的数组。
  io.k8s.api.resource.v1alpha2.NamedResourcesRequest:
    description: NamedResourcesRequest is used in ResourceRequestModel.
    properties:
      selector:
        description: |-
          This is a CEL expression which must evaluate to true if a resource instance is suitable.
          The language is as defined in https://kubernetes.io/docs/reference/using-api/cel.
          In addition, for each type NamedResourcesin AttributeValue there is a map that resolves to the corresponding value of
          the instance under evaluation. For example:

          ```
          attributes.quantity["a"].isGreaterThan(quantity("0")) && \
             attributes.stringslice["b"].isSorted()"
          ```
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段是一个 CEL 表达式，如果某资源实例合适，则此表达式求值结果必须为 true。
          语言本身的定义可参考[官方文档](https://kubernetes.io/docs/reference/using-api/cel)。
          此外，对于资源模型中的每个类别的属性集合，都存在一个映射可以解析为当前评估的资源对应的属性值。
          例如：

          ```
          attributes.quantity["a"].isGreaterThan(quantity("0")) && \
             attributes.stringslice["b"].isSorted()"
          ```
    required:
      - selector
    type: object
    x-kab-description-zh: NamedResourcesRequest 用在 ResourceRequestModel 中。
  io.k8s.api.resource.v1alpha2.NamedResourcesResources:
    description: NamedResourcesResources is used in ResourceModel.
    properties:
      instances:
        description: The list of all individual resources instances currently available.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesInstance'
        type: array
        x-kab-description-zh: 此字段列举当前可用的各个资源实例。
        x-kubernetes-list-type: atomic
    required:
      - instances
    type: object
    x-kab-description: NamedResourcesResources 在资源模型中使用。
  io.k8s.api.resource.v1alpha2.NamedResourcesStringSlice:
    description: NamedResourcesStringSlice contains a slice of strings.
    properties:
      strings:
        description: The slice of strings.
        items:
          type: string
        type: array
        x-kab-description-zh: 字符串值数组。
        x-kubernetes-list-type: atomic
    required:
      - strings
    type: object
    x-kab-description-zh: NamedResourcesStringSlice 包含一个由字符串构成的数组。
  io.k8s.api.resource.v1alpha2.PodSchedulingContext.CREATE:
    description: |-
      PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims
      that use `"WaitForFirstConsumer"` allocation mode.
      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodSchedulingContext
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextSpec'
        description: This describes where resources for the Pod are needed.
        x-kab-description-zh: 此字段描述哪里需要 Pod 资源。
      status:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextStatus'
        description: This describes where resources for the Pod can be allocated.
        x-kab-description-zh: 此字段描述在哪里可分配 Pod 资源。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      PodSchedulingContext 对象中包含调度使用了 `"WaitForFirstConsumer"` 分配模式的 ResourceClaim
      的 Pod 时所需要的信息。
      此字段处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET:
    description: |-
      PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims
      that use `"WaitForFirstConsumer"` allocation mode.
      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodSchedulingContext
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextSpec'
        description: This describes where resources for the Pod are needed.
        x-kab-description-zh: 此字段描述哪里需要 Pod 资源。
      status:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextStatus'
        description: This describes where resources for the Pod can be allocated.
        x-kab-description-zh: 此字段描述在哪里可分配 Pod 资源。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      PodSchedulingContext 对象中包含调度使用了 `"WaitForFirstConsumer"` 分配模式的 ResourceClaim
      的 Pod 时所需要的信息。
      此字段处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.PodSchedulingContext.UPDATE:
    description: |-
      PodSchedulingContext objects hold information that is needed to schedule a Pod with ResourceClaims
      that use `"WaitForFirstConsumer"` allocation mode.
      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodSchedulingContext
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextSpec'
        description: This describes where resources for the Pod are needed.
        x-kab-description-zh: 此字段描述哪里需要 Pod 资源。
      status:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextStatus'
        description: This describes where resources for the Pod can be allocated.
        x-kab-description-zh: 此字段描述在哪里可分配 Pod 资源。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      PodSchedulingContext 对象中包含调度使用了 `"WaitForFirstConsumer"` 分配模式的 ResourceClaim
      的 Pod 时所需要的信息。
      此字段处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.PodSchedulingContextList:
    description: PodSchedulingContextList is a collection of Pod scheduling objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PodSchedulingContext objects.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
        type: array
        x-kab-description-zh: PodSchedulingContext 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PodSchedulingContextList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: PodSchedulingContextList 是 PodSchedulingContext 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: PodSchedulingContextList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.PodSchedulingContextSpec:
    description: PodSchedulingContextSpec describes where resources for the Pod are
      needed.
    properties:
      potentialNodes:
        description: |-
          This field lists nodes where the Pod might be able to run.
          This size of this field is limited to 128. This is large enough for many clusters.
          Larger clusters may need more attempts to find a node that suits all pending resources.
          This may get increased in the future, but not reduced.
        items:
          minLength: 1
          type: string
        maxItems: 128
        type: array
        x-kab-description-zh: |-
          此字段列举 Pod 可能可以运行的节点。
          此字段的大小限制为 128，对于很多集群而言，这个限制应该足够大。
          如果集群规模较大，寻找能够适合所有待定资源的节点可能会很耗时。

          列表的规模限制将来可能会增加，但不会降低。
        x-kubernetes-list-type: atomic
      selectedNode:
        description: |-
          This is the node for which allocation of ResourceClaims that are referenced by the Pod and
          that use `"WaitForFirstConsumer"` allocation is to be attempted.
        type: string
        x-kab-description-zh: |-
          此字段为选中的节点，Pod 所引用的、分配策略为 `"WaitForFirstConsumer"` 的 ResourceClaim
          都会在这个节点上尝试。
    type: object
    x-kab-description-zh: PodSchedulingContextSpec 描述在哪里需要 Pod 资源。
  io.k8s.api.resource.v1alpha2.PodSchedulingContextStatus:
    description: PodSchedulingContextStatus describes where resources for the Pod
      can be allocated.
    properties:
      resourceClaims:
        description: |-
          This describes resource availability for each `pod.spec.resourceClaim` entry where the corresponding
          ResourceClaim uses `"WaitForFirstConsumer"` allocation mode.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimSchedulingStatus'
        type: array
        x-kab-description-zh: |-
          此列表描述的是 `pod.spec.resourceClaim` 中每一项资源的可用性，
          所描述的 ResourceClaim 的分配模式都是 `"WaitForFirstConsumer"`。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
    type: object
    x-kab-description-zh: PodSchedulingContextStatus 描述在哪里可以分配到 Pod 资源。
  io.k8s.api.resource.v1alpha2.ResourceClaim.CREATE:
    description: |-
      ResourceClaim describes which resources are needed by a resource consumer.
      Its `status` tracks whether the resource has been allocated and what the resulting attributes are.

      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaim
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name of a ResourceClaim must be
          a valid DNS subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimSpec'
        description: |-
          This describes the desired attributes of a resource that then needs to be allocated.
          It can only be set once when creating the ResourceClaim.
        x-kab-description-zh: 此字段描述需要被分配的资源的预期属性。只能在创建 ResourceClaim 时一次性设置。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ResourceClaim 描述资源用户所需要的某种资源。
      其 `status` 部分会记录资源是否已经被分配，以及最终的资源属性信息。

      此类别处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaim.GET:
    description: |-
      ResourceClaim describes which resources are needed by a resource consumer.
      Its `status` tracks whether the resource has been allocated and what the resulting attributes are.

      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaim
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The name of a ResourceClaim must be
          a valid DNS subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimSpec'
        description: This describes the desired attributes of a resource that then
          needs to be allocated.
        x-kab-description-zh: 此字段描述需要被分配的资源的预期属性。
      status:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimStatus'
        description: This describes whether the resource is available and with which
          attributes.
        x-kab-description-zh: 此字段描述资源是否空闲可用，以及一些其他属性。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      ResourceClaim 描述资源用户所需要的某种资源。
      其 `status` 部分会记录资源是否已经被分配，以及最终的资源属性信息。

      此类别处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaim.UPDATE:
    description: |-
      ResourceClaim describes which resources are needed by a resource consumer.
      Its `status` tracks whether the resource has been allocated and what the resulting attributes are.

      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaim
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name of a ResourceClaim must be
          a valid DNS subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimSpec'
        description: |-
          This describes the desired attributes of a resource that then needs to be allocated.
          It can only be set once when creating the ResourceClaim.
        x-kab-description-zh: 此字段描述需要被分配的资源的预期属性。只能在创建 ResourceClaim 时一次性设置。
      status:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimStatus'
        description: This describes whether the resource is available and with which
          attributes.
        x-kab-description-zh: 此字段描述资源是否空闲可用，以及一些其他属性。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      ResourceClaim 描述资源用户所需要的某种资源。
      其 `status` 部分会记录资源是否已经被分配，以及最终的资源属性信息。

      此类别处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimConsumerReference:
    description: |-
      ResourceClaimConsumerReference contains enough information to let you locate the consumer of
      a ResourceClaim. The user must be a resource in the same namespace as the ResourceClaim.
    properties:
      apiGroup:
        description: |-
          The group for the resource being referenced. It is empty for the core API.
          This matches the group in the APIVersion that is used when creating the resources.
        type: string
        x-kab-description-zh: |-
          被引用的资源的 API 组。对于核心 API 组而言，此字段为空。
          此字段要与对应资源被创建时所设置的 `apiVersion` 一致。
      name:
        description: The name of resource being referenced.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源的名称。
      resource:
        description: The type of resource being referenced, for example "pods".
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源的类别。
      uid:
        description: This identifies exactly one incarnation of the resource.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源的唯一 ID。
    required:
      - name
      - resource
      - uid
    type: object
    x-kab-description-zh: |-
      ResourceClaimConsumerReference 包含用来定位 ResourceClaim 的用户时需要的信息。
      资源的用户一定是 ResourceClaim 所在名字空间的某个资源。
  io.k8s.api.resource.v1alpha2.ResourceClaimList:
    description: The list of ResourceClaim objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: The list of ResourceClaim objects.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
        type: array
        x-kab-description-zh: 包含 ResourceClaim 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ResourceClaim 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimParameters.CREATE:
    description: ResourceClaimParameters defines resource requests for a ResourceClaim
      in an in-tree format understood by Kubernetes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverRequests:
        description: |-
          This describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers.
          For each driver, this array has at most one entry. That means the `driverName` of an entry must be unique in the list.
          Each entry in the list may have one or more per-driver requests.

          May be empty, in which case the claim can always be allocated.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.DriverRequests'
        type: array
        x-kab-description-zh: |-
          此字段描述所分配的申领所需要的全部资源。同一个申领可以使用来自不同驱动的资源。
          每个驱动至多在此列表中对应一个表项，即其中的 `driverName` 在列表中要唯一。
          在该表项中可以包含一个或者多个与该驱动相关的请求。

          此列表可以为空，意味着对应的申领总是可以被分配。
        x-kubernetes-list-type: atomic
      generatedFrom:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParametersReference'
        description: |-
          If this object was created from some other resource, then this links back to that resource.
          This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to
          some unknown type.
        x-kab-description-zh: |-
          如果此对象被其他资源所创建，则 `generatedFrom` 字段给出指向这一资源的链接。
          在申领的参数引用信息引用了未知类别时，可以用此字段来查找申领参数的内部表示形式。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimParameters
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      shareable:
        description: This indicates whether the allocated claim is meant to be shareable
          by multiple consumers at the same time.
        type: boolean
        x-kab-description-zh: 此字段用来表明所分配的申领是否可以在同一时刻被多个用户共享。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceClaimParameters 用 Kubernetes 可以理解的一种内建形式为某个 ResourceClaim
      定义资源请求。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET:
    description: ResourceClaimParameters defines resource requests for a ResourceClaim
      in an in-tree format understood by Kubernetes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverRequests:
        description: |-
          This describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers.
          For each driver, this array has at most one entry. That means the `driverName` of an entry must be unique in the list.
          Each entry in the list may have one or more per-driver requests.

          May be empty, in which case the claim can always be allocated.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.DriverRequests'
        type: array
        x-kab-description-zh: |-
          此字段描述所分配的申领所需要的全部资源。同一个申领可以使用来自不同驱动的资源。
          每个驱动至多在此列表中对应一个表项，即其中的 `driverName` 在列表中要唯一。
          在该表项中可以包含一个或者多个与该驱动相关的请求。

          此列表可以为空，意味着对应的申领总是可以被分配。
        x-kubernetes-list-type: atomic
      generatedFrom:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParametersReference'
        description: |-
          If this object was created from some other resource, then this links back to that resource.
          This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to
          some unknown type.
        x-kab-description-zh: |-
          如果此对象被其他资源所创建，则 `generatedFrom` 字段给出指向这一资源的链接。
          在申领的参数引用信息引用了未知类别时，可以用此字段来查找申领参数的内部表示形式。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimParameters
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      shareable:
        description: This indicates whether the allocated claim is meant to be shareable
          by multiple consumers at the same time.
        type: boolean
        x-kab-description-zh: 此字段用来表明所分配的申领是否可以在同一时刻被多个用户共享。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceClaimParameters 用 Kubernetes 可以理解的一种内建形式为某个 ResourceClaim
      定义资源请求。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimParameters.UPDATE:
    description: ResourceClaimParameters defines resource requests for a ResourceClaim
      in an in-tree format understood by Kubernetes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverRequests:
        description: |-
          This describes all resources that are needed for the allocated claim. A single claim may use resources coming from different drivers.
          For each driver, this array has at most one entry. That means the `driverName` of an entry must be unique in the list.
          Each entry in the list may have one or more per-driver requests.

          May be empty, in which case the claim can always be allocated.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.DriverRequests'
        type: array
        x-kab-description-zh: |-
          此字段描述所分配的申领所需要的全部资源。同一个申领可以使用来自不同驱动的资源。
          每个驱动至多在此列表中对应一个表项，即其中的 `driverName` 在列表中要唯一。
          在该表项中可以包含一个或者多个与该驱动相关的请求。

          此列表可以为空，意味着对应的申领总是可以被分配。
        x-kubernetes-list-type: atomic
      generatedFrom:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParametersReference'
        description: |-
          If this object was created from some other resource, then this links back to that resource.
          This field is used to find the in-tree representation of the claim parameters when the parameter reference of the claim refers to
          some unknown type.
        x-kab-description-zh: |-
          如果此对象被其他资源所创建，则 `generatedFrom` 字段给出指向这一资源的链接。
          在申领的参数引用信息引用了未知类别时，可以用此字段来查找申领参数的内部表示形式。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimParameters
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      shareable:
        description: This indicates whether the allocated claim is meant to be shareable
          by multiple consumers at the same time.
        type: boolean
        x-kab-description-zh: 此字段用来表明所分配的申领是否可以在同一时刻被多个用户共享。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceClaimParameters 用 Kubernetes 可以理解的一种内建形式为某个 ResourceClaim
      定义资源请求。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimParametersList:
    description: ResourceClaimParametersList is a collection of ResourceClaimParameters.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of node resource capacity objects.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        type: array
        x-kab-description-zh: 节点资源容量（ResourceClaimParameters）对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimParametersList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceClaimParameters 对象的列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimParametersList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimParametersReference:
    description: |-
      ResourceClaimParametersReference contains enough information to let you locate the parameters
      for a ResourceClaim. The object must be in the same namespace as the ResourceClaim.
    properties:
      apiGroup:
        description: |-
          This is the group for the resource being referenced. It is empty for the core API.
          This matches the group in the `apiVersion` that is used when creating the resources.
        type: string
        x-kab-description-zh: |-
          此字段为所引用资源的 API 组。空字符串表示核心 API 组。
          字段值要与资源被创建时使用的 `apiVersion` 匹配。
      kind:
        description: |-
          This is the type of resource being referenced.
          This is the same value as in the parameter object's metadata, for example `"ConfigMap"`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段为被引用的资源的类别。
          字段取值要与参数对象的元数据中的 `kind` 相同。
      name:
        description: This is the name of resource being referenced.
        minLength: 1
        type: string
        x-kab-description-zh: 此字段为被引用的资源的名称。
    required:
      - kind
      - name
    type: object
    x-kab-description-zh: |-
      ResourceClaimParametersReference 包含的信息可用来定位 ResourceClaim 的参数。
      此对象必须位于 ResourceClaim 所在的同一名字空间中。
  io.k8s.api.resource.v1alpha2.ResourceClaimSchedulingStatus:
    description: |-
      ResourceClaimSchedulingStatus contains information about one particular
      ResourceClaim with "WaitForFirstConsumer" allocation mode.
    properties:
      name:
        description: Name matches the `pod.spec.resourceClaims[*].name` field.
        minLength: 1
        type: string
        x-kab-description-zh: 与 `pod.spec.resourceClaims[*].name` 字段取值相同的名称。
      unsuitableNodes:
        description: |-
          This lists nodes that the ResourceClaim cannot be allocated for.

          The size of this field is limited to 128, the same as for `PodSchedulingSpec.potentialNodes`.
          This may get increased in the future, but not reduced.
        items:
          description: The name of a Node, which must be a valid DNS subdomain name.
          minLength: 1
          type: string
          x-kab-description-zh: 某个 Node 的名称。字符串必须是合法的 DNS 子域名。
        maxItems: 128
        type: array
        x-kab-description-zh: |-
          此字段列举的是无法分配此 ResourceClaim 的节点。

          此字段的规模上限是 128，与 `PodSchedulingSpec.potentialNodes` 相同。
          在将来的版本中，规模限制可能会被提高，但不会被降低。
        x-kubernetes-list-type: atomic
    type: object
    x-kab-description-zh: |-
      ResourceClaimSchedulingStatus 包含分配模式为 `"WaitForFirstConsumer"` 的某个特定
      ResourceClaim 的信息。
  io.k8s.api.resource.v1alpha2.ResourceClaimSpec:
    description: ResourceClaimSpec defines how a resource is to be allocated.
    properties:
      allocationMode:
        default: WaitForFirstConsumer
        description: |-
          Allocation can start immediately or when a Pod wants to use the resource. Valid values are:

          - `"Immediate"`: allocation starts as soon as the ResourceClaim gets created.
            This is done without considering the needs of Pods that will use the ResourceClaim because
            those Pods are not known yet.
          - `"WaitForFirstConsumer"`: allocation is delayed until a Pod gets scheduled that needs the
            ResourceClaim. The scheduler will consider all resource requirements of that Pod and
            trigger allocation for a node that fits the Pod.

          Other modes may be added in the future.
        enum:
          - Immediate
          - WaitForFirstConsumer
        type: string
        x-kab-description-zh: |-
          资源分配可以马上开始，也可以等待出现一个需要使用该资源的 Pod 再分配。可接受的取值有：

          - `"Immediate"`：在创建 ResourceClaim 时即开始资源分配操作。
            这种分配策略不考虑使用此 ResourceClaim 的 Pod 的实际需求，因为哪些 Pod 要使用尚属未知。
          - `"WaitForFirstConsumer"`：资源分配操作会被推迟，直到某个需要此 ResourceClaim 的 Pod 被调度。
            调度器会考虑该 Pod 的所有资源需求，并在使用运行 Pod 的节点上触发资源分配操作。

          将来版本中可能会添加新的分配模式。
      parametersRef:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParametersReference'
        description: |-
          This references a separate object with arbitrary parameters that will be used by the driver
          when allocating a resource for the claim.

          The object must be in the same namespace as the ResourceClaim.
          When provided, the `kind` and the `name` attributes must be specified.
        x-kab-description-zh: |-
          此字段引用的是另一个独立的对象，其中包含了驱动程序为当前 ResourceClaim 分配资源时需要使用的任意参数。

          所引用的参数对象必须与 ResourceClaim 处于同一个名字空间之内。
          如果设置了此参数，则其中的 `kind` 和 `name` 属性是必须设置的。
      resourceClassName:
        description: |-
          This references the driver and the additional parameters via the name of a ResourceClass
          that was created as part of the driver deployment.
          This field value must be a valid DNS subdomain name.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此字段通过某 ResourceClass 的名称引用 ResourceClaim 的驱动及附加参数。
          ResourceClass 是在部署 ResourceClaim 驱动的时候创建的。
          字段值必须是一个合法的 DNS 子域名。
    required:
      - resourceClassName
    type: object
    x-kab-description-zh: ResourceClaimSpec 定义如何分配资源。
  io.k8s.api.resource.v1alpha2.ResourceClaimStatus:
    description: ResourceClaimStatus tracks whether the resource has been allocated
      and what the resulting attributes are.
    properties:
      allocation:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.AllocationResult'
        description: |-
          This field is set by the resource driver once a resource or set of resources has been allocated
          successfully. If this is not specified, the resource is not yet allocated.

          When this field is set, then `deallocationRequested` cannot be set to be false.
        x-kab-description-zh: |-
          当某个资源或某组资源被成功分配时，资源驱动会设置此字段。
          如果此字段未被设置，则表明资源尚未被分配。
          如果此字段被设置，则 `deallocationRequested` 字段不可以被设置为 `false`。
      deallocationRequested:
        description: |-
          This indicates that a ResourceClaim is to be deallocated.

          The driver then must deallocate this claim and reset the field together with clearing the
          `allocation` field.

          While `deallocationRequested` is set, no new consumers may be added to `reservedFor`.
          When `reservedFor` is set, `deallocationRequested` cannot be set to `true`.

          When this field is set to `true`, then `allocation` must be specified as well.
        type: boolean
        x-kab-description-zh: |-
          此字段表明当前 ResourceClaim 即将被去配（释放）。
          驱动必须执行资源去配操作，对此字段复位，同时清除 `allocation` 字段。

          当 `deallocationRequested` 字段被设置时，不可以向 `reservedFor` 字段中添加新的使用者。
          如果 `reservedFor` 被设置了，则 `deallocationRequested` 不可以被设置为 `true`。

          此字段被设置为 `true` 时，`allocation` 字段也必须被设置。
      driverName:
        description: |-
          This is a copy of the driver name from the ResourceClass at the time when allocation started.
          The driver name must be a valid DNS subdomain name.
          When `allocation` is set, the `driverName` must be specified.
        type: string
        x-kab-description-zh: |-
          在开始资源分配时，从 ResourceClass 中复制而来的驱动程序名称。
          此名称必须是一个合法的 DNS 子域名。
          如果 `allocation` 被设置，则 `driverName` 必须被设置。
      reservedFor:
        description: |-
          This indicates which entities are currently allowed to use the claim.
          A Pod which references a ResourceClaim which is not reserved for that Pod will not be started.

          There can be at most 32 such reservations. This may get increased in the future, but not reduced.
          This field cannot be specified when `allocation` is not set.
          The number of items in this array cannot be more than one if `allocation.shareable` is not set to `true`.
          When this array is updated, no new entries can be added while `deallocationRequested` or
          `deletionTimestamp` on the ResourceClaim is set.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimConsumerReference'
        maxItems: 32
        type: array
        x-kab-description-zh: |-
          此字段用来表明哪些实体可以使用此 ResourceClaim。
          如果一个 Pod 引用了某个 ResourceClaim，而该 ResourceClaim 不是为此 Pod 预订的，则此 Pod 不会启动。

          最多可以存在 32 个预订。在将来版本中，这个数目限制可能会增加，但不会被减少。
          当没有设置 `allocation` 时，不可以设置此字段。
          当 `allocation.shareable` 没有设置为 `true` 时，此数组中的元素最多只能有一个。
          如果 `deallocationRequested` 或者 `deletionTimestamp` 字段已被设置，
          则此数组被更新时不可以添加新的元素。
        x-kubernetes-list-map-keys:
          - uid
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: ResourceClaimStatus 跟踪记录资源是否已经被分配，及资源的当前属性。
  io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.CREATE:
    description: ResourceClaimTemplate is used to produce ResourceClaim objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimTemplate
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplateSpec'
        description: |-
          This describes the ResourceClaim that is to be generated.
          This field is immutable. A ResourceClaim will get created by the control plane for
          a Pod when needed and then not get updated anymore.
        x-kab-description-zh: |-
          此字段描述要被生成的 ResourceClaim 对象。字段是不可变更的。
          控制面会在需要的时候为某个 Pod 生成 ResourceClaim，但该 ResourceClaim 之后不可被变更。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceClaimTemplate 用来构造 ResourceClaim 对象。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET:
    description: ResourceClaimTemplate is used to produce ResourceClaim objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimTemplate
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplateSpec'
        description: |-
          This describes the ResourceClaim that is to be generated.
          This field is immutable. A ResourceClaim will get created by the control plane for
          a Pod when needed and then not get updated anymore.
        x-kab-description-zh: |-
          此字段描述要被生成的 ResourceClaim 对象。字段是不可变更的。
          控制面会在需要的时候为某个 Pod 生成 ResourceClaim，但该 ResourceClaim 之后不可被变更。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceClaimTemplate 用来构造 ResourceClaim 对象。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.UPDATE:
    description: ResourceClaimTemplate is used to produce ResourceClaim objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimTemplate
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplateSpec'
        description: |-
          This describes the ResourceClaim that is to be generated.
          This field is immutable. A ResourceClaim will get created by the control plane for
          a Pod when needed and then not get updated anymore.
        x-kab-description-zh: |-
          此字段描述要被生成的 ResourceClaim 对象。字段是不可变更的。
          控制面会在需要的时候为某个 Pod 生成 ResourceClaim，但该 ResourceClaim 之后不可被变更。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceClaimTemplate 用来构造 ResourceClaim 对象。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimTemplateList:
    description: ResourceClaimTemplateList is a collection of claim templates.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: The list of resource claim templates.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
        type: array
        x-kab-description-zh: ResourceClaimTemplateList 是包含 ResourceClaimTemplate
          对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClaimTemplateList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceClaimTemplateList 是包含 ResourceClaimTemplate 对象的列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClaimTemplateList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClaimTemplateSpec:
    description: ResourceClaimTemplateSpec contains the metadata and fields for a
      ResourceClaim.
    properties:
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          This may contain labels and annotations that will be copied into the ResourceClaim when creating it.
          No other fields are allowed and will be rejected during validation.
        x-kab-description-zh: |-
          此字段可以包含一些标签和注解数据，在创建 ResourceClaim 时直接复制。
          结构中不能包含其他字段，否则可能会无法通过合法性检查。
      spec:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimSpec'
        description: |-
          The `spec` for the ResourceClaim.
          The entire content is copied unchanged into the ResourceClaim that gets created from this template.
          The same fields as in a ResourceClaim are also valid here.
        x-kab-description-zh: |-
          ResourceClaim 的 `spec` 部分。这里给出的整个规约都会被复制到基于此模板创建的 ResourceClaim 中。
          ResourceClaim 中能够接受的字段在这里也都是合法的。
    required:
      - spec
    type: object
    x-kab-description-zh: ResourceClaimTemplateSpec 包含 ResourceClaim 对象将具有的 `metadata`
      和字段。
  io.k8s.api.resource.v1alpha2.ResourceClass.CREATE:
    description: |-
      ResourceClass is used by administrators to influence how resources are allocated.

      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: |-
          The name of the dynamic resource driver that is used for allocation of a ResourceClaim that
          uses this class.
          Resource drivers have a unique name in forward domain order (e.g. `"acme.example.com"`).
          The driver name must be a valid DNS subdomain name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          动态资源的驱动程序的名称，分配使用此资源类的 ResourceClaim 时要调用对应的驱动。
          每个资源驱动的名称都是唯一的，格式为前向的域名顺序（例如，`"acme.example.com"`）。
          驱动程序的名称必须是合法的 DNS 子域名。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The object name must be a valid DNS
          subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      parametersRef:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersReference'
        description: |-
          This references an arbitrary separate object that may hold parameters that will be used
          by the driver when allocating a resource that uses this class.
          A dynamic resource driver can distinguish between parameters stored here and and those stored
          in ResourceClaimSpec. The `kind` and `name` fields must be specified.
        x-kab-description-zh: |-
          此字段用来引用一个特别的、独立的对象，驱动程序分配使用此资源类 ResourceClaim 时，
          可以使用其中保存的参数数据。
          动态资源的驱动程序可以对所引用的对象中存放的参数与存放于 `ResourceClaimSpec` 中的参数进行区分。
          设置此字段时，必须给定 `kind` 和 `name` 字段值。
      structuredParameters:
        description: If and only if allocation of claims using this class is handled
          via structured parameters, then `structuredParameters` must be set to true.
        type: boolean
        x-kab-description-zh: 当且仅当此基于资源类来分配申领时是通过结构化参数来进行的，需要将此字段设置为 true。
      suitableNodes:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: |-
          Only nodes matching the selector will be considered by the scheduler when trying to find a Node
          that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.

          Setting this field is optional. If null, all nodes are candidates.
        x-kab-description-zh: |-
          如果某个 Pod 使用了目前尚未被分配的 ResourceClaim，调度器在寻找适合于该 Pod 的节点时，
          只会考虑与此选择算符匹配的节点。

          此字段不是必须设置的。如果未设置，则可认为所有节点都是候选节点。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
      - parametersRef
    type: object
    x-kab-description-zh: |-
      ResourceClass 由管理员使用，用来影响资源分配的方式。

      此类型处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClass.GET:
    description: |-
      ResourceClass is used by administrators to influence how resources are allocated.

      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: |-
          The name of the dynamic resource driver that is used for allocation of a ResourceClaim that
          uses this class.
          Resource drivers have a unique name in forward domain order (e.g. `"acme.example.com"`).
          The driver name must be a valid DNS subdomain name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          动态资源的驱动程序的名称，分配使用此资源类的 ResourceClaim 时要调用对应的驱动。
          每个资源驱动的名称都是唯一的，格式为前向的域名顺序（例如，`"acme.example.com"`）。
          驱动程序的名称必须是合法的 DNS 子域名。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      parametersRef:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersReference'
        description: |-
          This references an arbitrary separate object that may hold parameters that will be used
          by the driver when allocating a resource that uses this class.
          A dynamic resource driver can distinguish between parameters stored here and and those stored
          in ResourceClaimSpec.
        x-kab-description-zh: |-
          此字段用来引用一个特别的、独立的对象，驱动程序分配使用此资源类 ResourceClaim 时，
          可以使用其中保存的参数数据。
          动态资源的驱动程序可以对所引用的对象中存放的参数与存放于 `ResourceClaimSpec` 中的参数进行区分。
      structuredParameters:
        description: If and only if allocation of claims using this class is handled
          via structured parameters, then `structuredParameters` must be set to true.
        type: boolean
        x-kab-description-zh: 当且仅当此基于资源类来分配申领时是通过结构化参数来进行的，需要将此字段设置为 true。
      suitableNodes:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: |-
          Only nodes matching the selector will be considered by the scheduler when trying to find a Node
          that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.
        x-kab-description-zh: |-
          如果某个 Pod 使用了目前尚未被分配的 ResourceClaim，调度器在寻找适合于该 Pod 的节点时，
          只会考虑与此选择算符匹配的节点。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
      - parametersRef
    type: object
    x-kab-description-zh: |-
      ResourceClass 由管理员使用，用来影响资源分配的方式。

      此类型处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClass.UPDATE:
    description: |-
      ResourceClass is used by administrators to influence how resources are allocated.

      This is an Alpha type and requires enabling the `DynamicResourceAllocation` feature gate.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: |-
          The name of the dynamic resource driver that is used for allocation of a ResourceClaim that
          uses this class.
          Resource drivers have a unique name in forward domain order (e.g. `"acme.example.com"`).
          The driver name must be a valid DNS subdomain name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          动态资源的驱动程序的名称，分配使用此资源类的 ResourceClaim 时要调用对应的驱动。
          每个资源驱动的名称都是唯一的，格式为前向的域名顺序（例如，`"acme.example.com"`）。
          驱动程序的名称必须是合法的 DNS 子域名。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The object name must be a valid DNS
          subdomain name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      parametersRef:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersReference'
        description: |-
          This references an arbitrary separate object that may hold parameters that will be used
          by the driver when allocating a resource that uses this class.
          A dynamic resource driver can distinguish between parameters stored here and and those stored
          in ResourceClaimSpec. The `kind` and `name` fields must be specified.
        x-kab-description-zh: |-
          此字段用来引用一个特别的、独立的对象，驱动程序分配使用此资源类 ResourceClaim 时，
          可以使用其中保存的参数数据。
          动态资源的驱动程序可以对所引用的对象中存放的参数与存放于 `ResourceClaimSpec` 中的参数进行区分。
          设置此字段时，必须给定 `kind` 和 `name` 字段值。
      structuredParameters:
        description: If and only if allocation of claims using this class is handled
          via structured parameters, then `structuredParameters` must be set to true.
        type: boolean
        x-kab-description-zh: 当且仅当此基于资源类来分配申领时是通过结构化参数来进行的，需要将此字段设置为 true。
      suitableNodes:
        $ref: '#/definitions/io.k8s.api.core.v1.NodeSelector'
        description: |-
          Only nodes matching the selector will be considered by the scheduler when trying to find a Node
          that fits a Pod when that Pod uses a ResourceClaim that has not been allocated yet.

          Setting this field is optional. If null, all nodes are candidates.
        x-kab-description-zh: |-
          如果某个 Pod 使用了目前尚未被分配的 ResourceClaim，调度器在寻找适合于该 Pod 的节点时，
          只会考虑与此选择算符匹配的节点。

          此字段不是必须设置的。如果未设置，则可认为所有节点都是候选节点。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
      - parametersRef
    type: object
    x-kab-description-zh: |-
      ResourceClass 由管理员使用，用来影响资源分配的方式。

      此类型处于 Alpha 阶段，需要启用 `DynamicResourceAllocation` 特性门控。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClassList:
    description: ResourceClassList is a collection of classes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: The list of resource classes.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
        type: array
        x-kab-description-zh: 包含 ResourceClass 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClassList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 ResourceClass 对象的列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClassList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClassParameters.CREATE:
    description: ResourceClassParameters defines resource requests for a ResourceClass
      in an in-tree format understood by Kubernetes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      filters:
        description: Additional contraints that must be met when using the class.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceFilter'
        type: array
        x-kab-description-zh: 使用此资源类时需要满足的一些额外约束。
        x-kubernetes-list-type: atomic
      generatedFrom:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersReference'
        description: |-
          If this object was created from some other resource, then this links back to that resource.
          This field is used to find the in-tree representation of the class parameters when
          the parameter reference of the class refers to some unknown type.
        x-kab-description-zh: |-
          如果此对象经由其他资源创建，则 `generatedFrom` 字段会链接到对应的资源。
          当资源类的参数引用指向某未知类型时，可以使用此字段来寻找对应的类参数的树内表示形式。
      kind:
        description: A string value representing the REST resource
        enum:
          - ResourceClassParameters
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      vendorParameters:
        description: This includes arbitrary setup parameters for all claims using
          this class. They are ignored while allocating the claim. There must not
          be more than one entry per driver.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.VendorParameters'
        type: array
        x-kab-description-zh: |-
          此字段向使用此资源类的所有资源申领提供形式不确定的参数。
          在分配资源申领时，此字段会被忽略。每个资源驱动所对应的表项至多为一个。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceClassParameters 以内联的形式为 ResourceClass 的资源请求， 所给的形式是
      Kubernetes 能够理解的。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET:
    description: ResourceClassParameters defines resource requests for a ResourceClass
      in an in-tree format understood by Kubernetes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      filters:
        description: Additional contraints that must be met when using the class.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceFilter'
        type: array
        x-kab-description-zh: 使用此资源类时需要满足的一些额外约束。
        x-kubernetes-list-type: atomic
      generatedFrom:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersReference'
        description: |-
          If this object was created from some other resource, then this links back to that resource.
          This field is used to find the in-tree representation of the class parameters when
          the parameter reference of the class refers to some unknown type.
        x-kab-description-zh: |-
          如果此对象经由其他资源创建，则 `generatedFrom` 字段会链接到对应的资源。
          当资源类的参数引用指向某未知类型时，可以使用此字段来寻找对应的类参数的树内表示形式。
      kind:
        description: A string value representing the REST resource
        enum:
          - ResourceClassParameters
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      vendorParameters:
        description: This includes arbitrary setup parameters for all claims using
          this class. They are ignored while allocating the claim. There must not
          be more than one entry per driver.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.VendorParameters'
        type: array
        x-kab-description-zh: |-
          此字段向使用此资源类的所有资源申领提供形式不确定的参数。
          在分配资源申领时，此字段会被忽略。每个资源驱动所对应的表项至多为一个。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceClassParameters 以内联的形式为 ResourceClass 的资源请求， 所给的形式是
      Kubernetes 能够理解的。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClassParameters.UPDATE:
    description: ResourceClassParameters defines resource requests for a ResourceClass
      in an in-tree format understood by Kubernetes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      filters:
        description: Additional contraints that must be met when using the class.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceFilter'
        type: array
        x-kab-description-zh: 使用此资源类时需要满足的一些额外约束。
        x-kubernetes-list-type: atomic
      generatedFrom:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersReference'
        description: |-
          If this object was created from some other resource, then this links back to that resource.
          This field is used to find the in-tree representation of the class parameters when
          the parameter reference of the class refers to some unknown type.
        x-kab-description-zh: |-
          如果此对象经由其他资源创建，则 `generatedFrom` 字段会链接到对应的资源。
          当资源类的参数引用指向某未知类型时，可以使用此字段来寻找对应的类参数的树内表示形式。
      kind:
        description: A string value representing the REST resource
        enum:
          - ResourceClassParameters
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      vendorParameters:
        description: This includes arbitrary setup parameters for all claims using
          this class. They are ignored while allocating the claim. There must not
          be more than one entry per driver.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.VendorParameters'
        type: array
        x-kab-description-zh: |-
          此字段向使用此资源类的所有资源申领提供形式不确定的参数。
          在分配资源申领时，此字段会被忽略。每个资源驱动所对应的表项至多为一个。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: ResourceClassParameters 以内联的形式为 ResourceClass 的资源请求， 所给的形式是
      Kubernetes 能够理解的。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClassParametersList:
    description: ResourceClassParametersList is a collection of ResourceClassParameters.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of node resource capacity objects.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        type: array
        x-kab-description-zh: 节点容量资源对象（ResourceClassParameters）的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceClassParametersList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceClassParameters 对象的列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceClassParametersList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceClassParametersReference:
    description: |-
      ResourceClassParametersReference contains enough information to let you
      locate the parameters for a ResourceClass.
    properties:
      apiGroup:
        description: |-
          This is the group for the resource being referenced. It is empty for the core API.
          This matches the group in the `apiVersion` that is used when creating the resources.
        type: string
        x-kab-description-zh: |-
          此字段为被引用的资源所述的 API 组。对于核心组 API 而言为空字符串。
          此字段值要与创建资源时所设置的 `apiVersion` 一致。
      kind:
        description: |-
          This is the type of resource being referenced.
          This is the same value as in the parameter object's metadata.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源的类别。字段值要与参数对象的元数据中的 `kind` 相同。
      name:
        description: This is the name of resource being referenced.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用的资源的名称。
      namespace:
        description: |-
          Namespace that contains the referenced resource.
          Must be empty for cluster-scoped resources and non-empty for namespaced resources.
        type: string
        x-kab-description-zh: |-
          包含被引用资源的名字空间。
          对于集群作用域的资源必须为空字符串；对于名字空间作用域的对象则不能为空。
    required:
      - kind
      - name
    type: object
    x-kab-description-zh: ResourceClassParametersReference 包含用来定位某 ResourceClass 的参数所需要的信息。
  io.k8s.api.resource.v1alpha2.ResourceFilter:
    description: ResourceFilter is a filter for resources from one particular driver.
    properties:
      driverName:
        description: The name used by the DRA driver kubelet plugin. The name must
          be a valid DNS subdomain name. The name must be unique in the enclosing
          list.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: DRA 驱动 kubelet 插件所使用的名称。所给名称必须是合法的 DNS 子域名。 在上层的列表中，此字段取值必须唯一。
      namedResources:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesFilter'
        description: |-
          A resource filter using the named resources model.
          For the same resource model, there could be exactly one `namedResources` entry.
        x-kab-description-zh: |-
          使用所给名称资源模型时要执行的一个过滤器。
          对于同一个资源模型而言，只允许存在一个 `namedResources` 条目。
    required:
      - driverName
    type: object
    x-kab-description-zh: ResourceFilter 是针对某特定驱动的资源过滤器。
  io.k8s.api.resource.v1alpha2.ResourceHandle:
    description: ResourceHandle holds opaque resource data for processing by a specific
      kubelet plugin.
    properties:
      data:
        description: |-
          This contains the opaque data associated with this ResourceHandle.
          It is set by the controller component of the resource driver whose name matches the `driverName`
          set in the ResourceClaimStatus this ResourceHandle is embedded in.
          It is set at allocation time and is intended for processing by the kubelet plugin whose name
          matches the `driverName` set in this ResourceHandle.

          The maximum size of this field is 16KiB. This may get increased in the future, but not reduced.
        maxLength: 16384
        type: string
        x-kab-description-zh: |-
          此字段包含与 ResourceHandle 关联的不透明数据。
          字段由某资源驱动程序的控制器组件设置，该驱动的名字与此 ResourceHandle 所在的 ResourceClaimStatus
          中的 `driverName` 相同。
          字段是在资源分配时设置的，意在提供给名字为本 ResourceHandle 中 `driverName` 的 kubelet 插件处理。

          此字段的最大尺寸为 16KiB。在将来版本中，这一尺寸限制之后增加，不会被减少。
      driverName:
        description: |-
          This specifies the name of the resource driver whose kubelet plugin should be invoked to process
          this ResourceHandle's `data` once it lands on a node.
          This may differ from the `driverName` set in ResourceClaimStatus this ResourceHandle is embedded in.
        type: string
        x-kab-description-zh: |-
          此字段设置的是一个资源驱动程序的名称，该驱动的 kubelet 插件会被调用，以处理此 ResourceHandle
          中的 `data` 数据。
          此字段的值可能与 ResourceHandle 所在的 ResourceClaimStatus 中的 `driverName` 不同。
      structuredData:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.StructuredResourceHandle'
        description: If `structuredData` is set, then it needs to be used instead
          of `data`.
        x-kab-description-zh: 如果设置了 `structuredData`，则应该使用该字段而不是 `data` 的内容。
    type: object
    x-kab-description-zh: ResourceHandle 保存的是一些供特定的 kubelet 插件来处理的不透明的数据。
  io.k8s.api.resource.v1alpha2.ResourceRequest:
    description: ResourceRequest is a request for resources from one particular driver.
    properties:
      namedResources:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesRequest'
        description: This describes a request for resources with the named resources
          model.
        x-kab-description-zh: 此字段描述对通过名字所引用的资源模型的资源的请求。
      vendorParameters:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: This contains arbitrary setup parameters for the requested resource.
          They are ignored while allocating a claim.
        x-kab-description-zh: 此字段包含针对所请求资源的任意安装参数。在分配申领时，这些信息会被忽略。
    type: object
    x-kab-description-zh: ResourceRequest 是对某特定驱动所提供的资源的请求。
  io.k8s.api.resource.v1alpha2.ResourceSlice.CREATE:
    description: ResourceSlice provides information about available resources on individual
      nodes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: |-
          This field identifies the DRA driver providing the capacity information.
          A field selector can be used to list only ResourceSlice objects with a certain driver name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: 此字段用来辨识提供容量信息的 DRA 驱动。可以使用字段选择算符来列举给定驱动名称下的 ResourceSlice
          对象。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceSlice
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      namedResources:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesResources'
        description: This describes available resources using the named resources
          model.
        x-kab-description-zh: 此字段描述给定资源模型下可用的资源。每个资源模型下只能包含一套参数。
      nodeName:
        description: |-
          The node which provides the resources if they are local to a node.
          A field selector can be used to list only ResourceSlice objects with a certain node name.
          The value, when provided, must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          对于节点本地的资源，此字段给出包含此资源的节点。
          用户可以使用节点选择算符来过滤与指定节点名称相关联的 ResourceSlice 对象。
          当设置了此字段时，其取值必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceSlice 提供各个节点上可用的资源的信息。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceSlice.GET:
    description: ResourceSlice provides information about available resources on individual
      nodes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: |-
          This field identifies the DRA driver providing the capacity information.
          A field selector can be used to list only ResourceSlice objects with a certain driver name.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: 此字段用来辨识提供容量信息的 DRA 驱动。可以使用字段选择算符来列举给定驱动名称下的 ResourceSlice
          对象。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceSlice
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      namedResources:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesResources'
        description: This describes available resources using the named resources
          model.
        x-kab-description-zh: 此字段描述给定资源模型下可用的资源。每个资源模型下只能包含一套参数。
      nodeName:
        description: |-
          The node which provides the resources if they are local to a node.
          A field selector can be used to list only ResourceSlice objects with a certain node name.
          The value, when provided, must be a valid DNS subdomain name.
        type: string
        x-kab-description-zh: |-
          对于节点本地的资源，此字段给出包含此资源的节点。
          用户可以使用节点选择算符来过滤与指定节点名称相关联的 ResourceSlice 对象。
          当设置了此字段时，其取值必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceSlice 提供各个节点上可用的资源的信息。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceSlice.UPDATE:
    description: ResourceSlice provides information about available resources on individual
      nodes.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceSlice
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      namedResources:
        $ref: '#/definitions/io.k8s.api.resource.v1alpha2.NamedResourcesResources'
        description: This describes available resources using the named resources
          model.
        x-kab-description-zh: 此字段描述给定资源模型下可用的资源。每个资源模型下只能包含一套参数。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceSlice 提供各个节点上可用的资源的信息。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.ResourceSliceList:
    description: ResourceSliceList is a collection of ResourceSlices.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - resource.k8s.io/v1alpha2
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of ResourceSlice objects.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        type: array
        x-kab-description-zh: ResourceSlice 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - ResourceSliceList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: ResourceSlice 对象的列表。
    x-kubernetes-group-version-kind:
      - group: resource.k8s.io
        kind: ResourceSliceList
        version: v1alpha2
  io.k8s.api.resource.v1alpha2.StructuredResourceHandle:
    description: StructuredResourceHandle is the in-tree representation of the allocation
      result.
    properties:
      nodeName:
        description: NodeName is the name of the node providing the necessary resources
          if the resources are local to a node.
        type: string
        x-kab-description-zh: 对于节点本地资源而言，此字段为提供必要资源的节点的名称。
      results:
        description: This lists all allocated driver resources.
        items:
          $ref: '#/definitions/io.k8s.api.resource.v1alpha2.DriverAllocationResult'
        type: array
        x-kab-description-zh: 此字段雷剧所有已分配驱动资源。
        x-kubernetes-list-type: atomic
      vendorClaimParameters:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: The per-claim configuration parameters from the resource claim
          parameters at the time that the claim was allocated.
        x-kab-description-zh: 此字段包含申领被分配时，基于资源申领参数构造的配置参数，配置数据按不同申领组织。
      vendorClassParameters:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: The per-claim configuration parameters from the resource class
          at the time that the claim was allocated.
        x-kab-description-zh: 此字段包含申领被分配时，基于资源类构造的配置参数，配置数据按不同申领组织。
    required:
      - results
    type: object
    x-kab-description-zh: StructuredResourceHandle 是资源分配结果的表示。
  io.k8s.api.resource.v1alpha2.VendorParameters:
    description: VendorParameters are opaque parameters for one particular driver.
    properties:
      driverName:
        description: DriverName is the name used by the DRA driver kubelet plugin.
        type: string
        x-kab-description-zh: DRA 驱动 kubelet 插件所使用的名称。
      parameters:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: Parameters can be arbitrary setup parameters. They are ignored
          while allocating a claim.
        x-kab-description-zh: 此字段包含任意配置参数。在分配申领时会被忽略。
    type: object
    x-kab-description-zh: 针对某特定驱动的不透明参数。
  io.k8s.api.scheduling.v1.PriorityClass.CREATE:
    description: |-
      PriorityClass defines mapping from a priority class name to the priority integer value.
      The value can be any valid integer.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - scheduling.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      description:
        description: An arbitrary string that usually provides guidelines on using
          this priority class.
        type: string
        x-kab-description-zh: 一个用来指导如何使用此优先级类的字符串。
      globalDefault:
        description: |-
          Flag indicating whether this PriorityClass should be considered as the default priority for Pods.
          Only one PriorityClass can be marked as `globalDefault`.
          However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`,
          the smallest value of such global default PriorityClasses will be used as the default one.
        type: boolean
        x-kab-description-zh: |-
          用来标识此 PriorityClass 是否应被视为 Pod 的默认优先级。
          集群中只能有一个 PriorityClass 被标记为 `globalDefault`。
          不过，如果存在多个 PriorityClass 的 `globalDefault` 被设置为 `true`，
          系统会选择其中最小的优先级数值作为默认值。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The name must be a valid DNS subdomain.
          Name prefixed with `"system-"` are reserved for predefined system priority classes, i.e.

          - `"system-cluster-critical"` (2000000000): used for system critical Pods that must run
            in the cluster, but can be moved to another node if necessary.
          - `"system-node-critical"` (2000001000): used for system critical Pods that must not
            be moved from their current node.
        x-kab-description-zh: |-
          标准的对象元数据。对象名称必须是合法的 DNS 子域名。
          带 `"system-"` 前缀的名称是预留给一些预定义的系统优先级类的。包括：

          - `"system-cluster-critical"`（2000000000）：用于系统中一些比较关键的 Pod，
            这些 Pod 在必要时可以被移动到别的节点。
          - `"system-node-critical"`（2000001000）：用于系统中比较关键的、必须在其当前所在节点上运行的 Pod。
      preemptionPolicy:
        default: PreemptLowerPriority
        description: |-
          The policy for preempting Pods with lower priority.

          - `"Never"`: Pod never preempts other Pods with lower priority.
          - `"PreemptLowerPriority"`: Pod can preempt other Pods with lower priority.
        enum:
          - Never
          - PreemptLowerPriority
        type: string
        x-kab-description-zh: |-
          关于抢占较低优先级的 Pod 的策略。

          - `"Never"`：Pod 不会抢占其他低优先级 Pod；
          - `"PreemptLowerPriority"`：Pod 可以抢占其他较低优先级的 Pod。
      value:
        description: |-
          The value of this priority class.
          This is the actual priority that Pods receive when they have the name of this class in their Pod spec.
          Other than the system predefined priority classes, user defined priority classes cannot have
          `value` greater than 1000000000.  The value cannot be changed in an update operation.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此优先级类的优先级值。
          此字段是在规约中引用了此优先级类名称的 Pod 实际会获得的优先级值。
          除了系统预定义的优先级类，用户定义的优先级类不可以设置 `value` 大于 1000000000。
          在更新 PriorityClass 时，此字段不可变更。
    required:
      - apiVersion
      - kind
      - metadata
      - value
    type: object
    x-kab-description-zh: PriorityClass 定义优先级类名与优先级整数值之间的映射关系。优先级数值可以是任何整数。
    x-kubernetes-group-version-kind:
      - group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
  io.k8s.api.scheduling.v1.PriorityClass.GET:
    description: |-
      PriorityClass defines mapping from a priority class name to the priority integer value.
      The value can be any valid integer.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - scheduling.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      description:
        description: An arbitrary string that usually provides guidelines on using
          this priority class.
        type: string
        x-kab-description-zh: 一个用来指导如何使用此优先级类的字符串。
      globalDefault:
        description: |-
          Flag indicating whether this PriorityClass should be considered as the default priority for Pods.
          Only one PriorityClass can be marked as `globalDefault`.
          However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`,
          the smallest value of such global default PriorityClasses will be used as the default one.
        type: boolean
        x-kab-description-zh: |-
          用来标识此 PriorityClass 是否应被视为 Pod 的默认优先级。
          集群中只能有一个 PriorityClass 被标记为 `globalDefault`。
          不过，如果存在多个 PriorityClass 的 `globalDefault` 被设置为 `true`，
          系统会选择其中最小的优先级数值作为默认值。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      preemptionPolicy:
        default: PreemptLowerPriority
        description: |-
          The policy for preempting Pods with lower priority.

          - `"Never"`: Pod never preempts other Pods with lower priority.
          - `"PreemptLowerPriority"`: Pod can preempt other Pods with lower priority.
        enum:
          - Never
          - PreemptLowerPriority
        type: string
        x-kab-description-zh: |-
          关于抢占较低优先级的 Pod 的策略。

          - `"Never"`：Pod 不会抢占其他低优先级 Pod；
          - `"PreemptLowerPriority"`：Pod 可以抢占其他较低优先级的 Pod。
      value:
        description: |-
          The value of this priority class.
          This is the actual priority that Pods receive when they have the name of this class in their Pod spec.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此优先级类的优先级值。
          此字段是在规约中引用了此优先级类名称的 Pod 实际会获得的优先级值。
    required:
      - apiVersion
      - kind
      - metadata
      - value
    type: object
    x-kab-description-zh: PriorityClass 定义优先级类名与优先级整数值之间的映射关系。优先级数值可以是任何整数。
    x-kubernetes-group-version-kind:
      - group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
  io.k8s.api.scheduling.v1.PriorityClass.UPDATE:
    description: |-
      PriorityClass defines mapping from a priority class name to the priority integer value.
      The value can be any valid integer.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - scheduling.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      description:
        description: An arbitrary string that usually provides guidelines on using
          this priority class.
        type: string
        x-kab-description-zh: 一个用来指导如何使用此优先级类的字符串。
      globalDefault:
        description: |-
          Flag indicating whether this PriorityClass should be considered as the default priority for Pods.
          Only one PriorityClass can be marked as `globalDefault`.
          However, if more than one PriorityClasses exists with their `globalDefault` field set to `true`,
          the smallest value of such global default PriorityClasses will be used as the default one.
        type: boolean
        x-kab-description-zh: |-
          用来标识此 PriorityClass 是否应被视为 Pod 的默认优先级。
          集群中只能有一个 PriorityClass 被标记为 `globalDefault`。
          不过，如果存在多个 PriorityClass 的 `globalDefault` 被设置为 `true`，
          系统会选择其中最小的优先级数值作为默认值。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The name must be a valid DNS subdomain.
          Name prefixed with `"system-"` are reserved for predefined system priority classes, i.e.

          - `"system-cluster-critical"` (2000000000): used for system critical Pods that must run
            in the cluster, but can be moved to another node if necessary.
          - `"system-node-critical"` (2000001000): used for system critical Pods that must not
            be moved from their current node.
        x-kab-description-zh: |-
          标准的对象元数据。对象名称必须是合法的 DNS 子域名。
          带 `"system-"` 前缀的名称是预留给一些预定义的系统优先级类的。包括：

          - `"system-cluster-critical"`（2000000000）：用于系统中一些比较关键的 Pod，
            这些 Pod 在必要时可以被移动到别的节点。
          - `"system-node-critical"`（2000001000）：用于系统中比较关键的、必须在其当前所在节点上运行的 Pod。
      preemptionPolicy:
        default: PreemptLowerPriority
        description: |-
          The policy for preempting Pods with lower priority.

          - `"Never"`: Pod never preempts other Pods with lower priority.
          - `"PreemptLowerPriority"`: Pod can preempt other Pods with lower priority.
        enum:
          - Never
          - PreemptLowerPriority
        type: string
        x-kab-description-zh: |-
          关于抢占较低优先级的 Pod 的策略。

          - `"Never"`：Pod 不会抢占其他低优先级 Pod；
          - `"PreemptLowerPriority"`：Pod 可以抢占其他较低优先级的 Pod。
      value:
        description: |-
          The value of this priority class.
          This is the actual priority that Pods receive when they have the name of this class in their Pod spec.
          Other than the system predefined priority classes, user defined priority classes cannot have
          `value` greater than 1000000000.  The value cannot be changed in an update operation.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此优先级类的优先级值。
          此字段是在规约中引用了此优先级类名称的 Pod 实际会获得的优先级值。
          除了系统预定义的优先级类，用户定义的优先级类不可以设置 `value` 大于 1000000000。
          在更新 PriorityClass 时，此字段不可变更。
    required:
      - apiVersion
      - kind
      - metadata
      - value
    type: object
    x-kab-description-zh: PriorityClass 定义优先级类名与优先级整数值之间的映射关系。优先级数值可以是任何整数。
    x-kubernetes-group-version-kind:
      - group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
  io.k8s.api.scheduling.v1.PriorityClassList:
    description: A list of PriorityClass objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - scheduling.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of PriorityClass objects.
        items:
          $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
        type: array
        x-kab-description-zh: A list of PriorityClass objects.
      kind:
        description: A string value representing the REST resource.
        enum:
          - PriorityClassList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: A list of PriorityClass objects.
    x-kubernetes-group-version-kind:
      - group: scheduling.k8s.io
        kind: PriorityClassList
        version: v1
  io.k8s.api.storage.v1.CSIDriver.CREATE:
    description: |-
      CSIDriver captures information about a Container Storage Interface (CSI) volume driver.
      CSI drivers do not need to create the CSIDriver object directly.
      Instead they may use the "cluster-driver-registrar" sidecar container.
      When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver.
      Kubernetes attach/detach controller uses this object to determine whether attach is required.
      Kubelet uses this object to determine whether Pod information needs to be passed on mount.
      CSIDriver objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIDriver
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata.
          The `name` indicates the name of the CSI driver that this object refers to.
          It **must** be the same name returned by the CSI `GetPluginName()` call for that driver.
          The driver name must be 63 characters or less, beginning and ending with an alphanumeric
          character (`"[a-z0-9A-Z]"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 给出此对象所引用的 CSI 驱动的名称。
          `name` 值必须是 CSI 驱动的 `GetPluginName()` 调用返回的名称。
          驱动的名称必须不多于 63 字符，以字母或数字开头并结尾、中间可以包含连字符（`'-'`）
          和句点（`'.'`）。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriverSpec'
        description: Specification of the CSI Driver.
        x-kab-description-zh: CSI 驱动的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CSIDriver 中包含关于某个容器存储接口（CSI）卷驱动相关的信息。
      CSI 驱动不需要直接创建 CSIDriver 对象，它们可能会使用 `"cluster-driver-registrar"` 这类边车容器。
      和 CSI 驱动一起部署这类边车容器时，该容器会自动创建一个代表驱动的 CSIDriver 对象。
      Kubernetes 的 attach/detach 控制器会使用此 CSIDriver 对象来确定是否需要执行挂接（attach）操作。
      Kubelet 使用此对象来决定是否需要在挂载存储卷时需要向其传递 Pod 信息。
      CSIDriver 对象的作用域是整个集群。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIDriver
        version: v1
  io.k8s.api.storage.v1.CSIDriver.GET:
    description: |-
      CSIDriver captures information about a Container Storage Interface (CSI) volume driver.
      CSI drivers do not need to create the CSIDriver object directly.
      Instead they may use the "cluster-driver-registrar" sidecar container.
      When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver.
      Kubernetes attach/detach controller uses this object to determine whether attach is required.
      Kubelet uses this object to determine whether Pod information needs to be passed on mount.
      CSIDriver objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIDriver
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: |-
          Standard object metadata.
          The `name` indicates the name of the CSI driver that this object refers to.
        x-kab-description-zh: 标准的对象元数据。`name` 给出此对象所引用的 CSI 驱动的名称。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriverSpec'
        description: Specification of the CSI Driver.
        x-kab-description-zh: CSI 驱动的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CSIDriver 中包含关于某个容器存储接口（CSI）卷驱动相关的信息。
      CSI 驱动不需要直接创建 CSIDriver 对象，它们可能会使用 `"cluster-driver-registrar"` 这类边车容器。
      和 CSI 驱动一起部署这类边车容器时，该容器会自动创建一个代表驱动的 CSIDriver 对象。
      Kubernetes 的 attach/detach 控制器会使用此 CSIDriver 对象来确定是否需要执行挂接（attach）操作。
      Kubelet 使用此对象来决定是否需要在挂载存储卷时需要向其传递 Pod 信息。
      CSIDriver 对象的作用域是整个集群。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIDriver
        version: v1
  io.k8s.api.storage.v1.CSIDriver.UPDATE:
    description: |-
      CSIDriver captures information about a Container Storage Interface (CSI) volume driver.
      CSI drivers do not need to create the CSIDriver object directly.
      Instead they may use the "cluster-driver-registrar" sidecar container.
      When deployed with a CSI driver it automatically creates a CSIDriver object representing the driver.
      Kubernetes attach/detach controller uses this object to determine whether attach is required.
      Kubelet uses this object to determine whether Pod information needs to be passed on mount.
      CSIDriver objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIDriver
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata.
          The `name` indicates the name of the CSI driver that this object refers to.
          It **must** be the same name returned by the CSI `GetPluginName()` call for that driver.
          The driver name must be 63 characters or less, beginning and ending with an alphanumeric
          character (`"[a-z0-9A-Z]"`) with dashes (`'-'`), dots (`'.'`), and alphanumerics between.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 给出此对象所引用的 CSI 驱动的名称。
          `name` 值必须是 CSI 驱动的 `GetPluginName()` 调用返回的名称。
          驱动的名称必须不多于 63 字符，以字母或数字开头并结尾、中间可以包含连字符（`'-'`）和句点（`'.'`）。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriverSpec'
        description: Specification of the CSI Driver.
        x-kab-description-zh: CSI 驱动的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CSIDriver 中包含关于某个容器存储接口（CSI）卷驱动相关的信息。
      CSI 驱动不需要直接创建 CSIDriver 对象，它们可能会使用 `"cluster-driver-registrar"` 这类边车容器。
      和 CSI 驱动一起部署这类边车容器时，该容器会自动创建一个代表驱动的 CSIDriver 对象。
      Kubernetes 的 attach/detach 控制器会使用此 CSIDriver 对象来确定是否需要执行挂接（attach）操作。
      Kubelet 使用此对象来决定是否需要在挂载存储卷时需要向其传递 Pod 信息。
      CSIDriver 对象的作用域是整个集群。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIDriver
        version: v1
  io.k8s.api.storage.v1.CSIDriverList:
    description: A list of CSIDriver objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of CSIDriver objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
        type: array
        x-kab-description-zh: 包含 CSIDriver 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIDriverList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 CSIDriver 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIDriverList
        version: v1
  io.k8s.api.storage.v1.CSIDriverSpec:
    description: The specification of a CSIDriver. The whole spec is immutable.
    properties:
      attachRequired:
        default: true
        description: |-
          Flag indicating this CSI volume driver requires an `attach` operation because it implements
          the CSI `ControllerPublishVolume()` method.
          The Kubernetes attach/detach controller should call the `attach` volume interface which checks the
          `volumeattachment` status and waits until the volume is attached before proceeding to mounting.
          The CSI `"external-attacher"` coordinates with CSI volume driver and updates the
          `volumeattachment` status when the `attach` operation is complete.
          If the `CSIDriverRegistry` feature gate is enabled and the value is specified to `false`,
          the `attach` operation will be skipped. Otherwise the `attach` operation will be called.

          This field is immutable.
        type: boolean
        x-kab-description-zh: |-
          此标志标明对应的 CSI 卷驱动需要 `attach` 操作，因为它实现了 CSI `ControllerPublishVolume()` 方法。
          Kubernetes attach/detach 控制器应该调用 `attach` 卷接口，检查 `volumeattachment` 的状态，
          并等待卷被挂接之后才继续执行挂载操作。
          CSI `"external-attacher"` 组件会与 CSI 卷驱动一起，在 `attach` 操作完成之后更新 `volumeattachment`
          的状态。
          如果启用了 `CSIDriverRegistry` 特性门控，并且此字段值被设置为 `false`，则会略过 `attach` 操作。
          否则会调用 `attach` 操作。

          此字段是不可变更的。
      fsGroupPolicy:
        default: ReadWriteOnceWithFSType
        description: |-
          Defines if the underlying volume supports changing ownership and permission of the volume
          before being mounted.
          - `"File"`: the CSI driver supports volume ownership and permission change via `fsGroup`,
            and Kubernetes may use `fsGroup` to change permissions and ownership of the volume to match
            user requested `fsGroup` in the PodSecurityPolicy regardless of fstype or access mode.
            This mode should be defined if the `fsGroup` is expected to always change on mount.
          - `"None"`: Volumes will be mounted without performing any ownership or permission modifications,
            as the CSIDriver does not support these operations.
            This mode should be selected if the CSIDriver does not support `fsGroup` modifications.
            For example, when Kubernetes cannot change ownership and permission on a volume due to
            root-squash settings on a NFS volume.
          - `"ReadWriteOnceWithFSType"`: Each volume will be examined to determine if the volume ownership
            and permissions should be modified. If a fstype is defined and the volume's access mode contains
            `"ReadWriteOnce"`, then the defined `fsGroup` will be applied.
            This mode should be defined if it's expected that the `fsGroup` may need to be modified
            depending on the Pod's security policy. This is the default behavior if no other policy
            is defined.

          This field was immutable in Kubernetes < 1.29 and now is mutable.
          With the default policy the defined fsGroup will only be applied if a fstype is defined and
          the volume's access mode contains ReadWriteOnce.
        enum:
          - File
          - None
          - ReadWriteOnceWithFSType
        type: string
        x-kab-description-zh: |-
          此字段表明下层的存储卷是否支持在被挂载之前变更属主和访问权限。

          - `"File"`：CSI 驱动通过 `fsGroup` 来支持卷属主和访问权限变更。Kubernetes 可以使用 `fsGroup`
            来更改存储卷的属主和访问权限设置，以便匹配 PodSecurityPolicy 中请求的 `fsGroup`，
            无论存储卷的文件系统类型或者访问模式是如何设置的。
            如果在每次挂载的时候 `fsGroup` 都可能发生变更，则应定义为这种模式。
          - `"None"`：挂载存储卷时不会执行任何与属主和访问权限相关的变更，CSIDriver 不支持这类操作。
            如果 CSIDriver 不支持变更 `fsGroup` 时应该选择这种模式。
            例如，某个 NFS 卷上设置了 root-squash 选项，则 Kubernetes 无法变更该卷的属主和访问权限设置。
          - `"ReadWriteOnceWithFSType"`：每个存储卷都会被独立检查是否应该变更其属主和访问权限设置。
            如果存储卷设置了文件系统类型，并且其访问模式中包含了 `"ReadWriteOnce"`，则会应用所定义的
            `fsGroup`。如果需要根据 Pod 的安全策略来决定是否要修改 `fsGroup` 设置，应该选择这种模式。
            如果没有定义其他策略，则这个选项是默认的行为。

          此字段在 v1.29 之前是不可变更的，从 v1.30 开始可以变更。如果使用了默认的策略，则只有设置了 `fstype`
          并且卷的访问模式中包含 `ReadWriteOnce` 时，才会应用 `fsGroup` 设置。
      podInfoOnMount:
        default: false
        description: |-
          If set to `true`, `podInfoOnMount` indicates this CSI volume driver requires additional Pod
          information (like `"podName"`, `"podUID"`, etc.) during `mount` operations.
          If set to `false`, Pod information will not be passed on `mount`.
          The CSI driver specifies `podInfoOnMount` as part of the driver deployment.
          If `true`, Kubelet will pass Pod information as `VolumeContext` in the CSI `NodePublishVolume()`
          calls. The CSI driver is responsible for parsing and validating the information passed in as
          `VolumeContext`. The following `VolumeConext` will be passed if `podInfoOnMount` is set to `true`.
          This list might grow, but the prefix will be used.

          - `"csi.storage.k8s.io/pod.name"`: `pod.Name`
          - `"csi.storage.k8s.io/pod.namespace"`: `pod.Namespace`
          - `"csi.storage.k8s.io/pod.uid"`: `string(pod.UID)`
          - `"csi.storage.k8s.io/ephemeral"`: `true` iff the volume is an ephemeral inline volume
            defined by a `CSIVolumeSource`, otherwise `false`.
          - `"csi.storage.k8s.io/ephemeral"`: A new feature in Kubernetes 1.16. It is only required
            for drivers which support both the `"Persistent"` and `"Ephemeral"` `volumeLifecycleMode`.
            Other drivers can leave Pod info disabled and/or ignore this field.

          This field was immutable in Kubernetes < 1.29 and now is mutable.
        type: boolean
        x-kab-description-zh: |-
          此字段设置为 `true` 表示 CSI 卷驱动程序在执行 `mount` 操作时需要一些额外的 Pod 信息
          （`"podName"`、`"podUID"` 等）。 若设置为 `false`，则不会在 `mount` 操作时传递 Pod 信息。
          CSI 卷驱动在被部署时设置 `podInfoOnMount` 的取值。

          此字段为 `true` 时，kubelet 会将 Pod 信息封装到 CSI `NodePublishVolume()` 调用所接受的
          `VolumeContext` 结构中。CSI 驱动负责对 `VolumeContext` 结构中的信息进行解析和合法性检查。
          `VolumeContext` 中传递的信息如下（列表可能会增长，但前缀会一直保留）：

          - `"csi.storage.k8s.io/pod.name"`：`pod.Name`
          - `"csi.storage.k8s.io/pod.namespace"`：`pod.Namespace`
          - `"csi.storage.k8s.io/pod.uid"`：`string(pod.UID)`
          - `"csi.storage.k8s.io/ephemeral"`：若卷是使用 `CSIVolumeSource` 定义的临时卷，则为 `true`，
            否则为 `false`。`"csi.storage.k8s.io/ephemeral"` 是 v1.16 引入的特性。
            只有同时支持 `"Persistent"` 和 `"Ephemeral"` 两种 `volumeLifecycleMode` 的驱动才需要处理。
            其他驱动可以禁止 Pod 信息，同时忽略此字段。

          此字段在 v1.29 之前是不可变更的，从 v1.30 开始支持变更。
      requiresRepublish:
        description: |-
          This indicates the CSI driver wants `NodePublishVolume()` being periodically called to
          reflect any possible change in the mounted volume. This field defaults to `false`.
          **Note**: After a successful initial `NodePublishVolume()` call, subsequent calls to
          `NodePublishVolume()` should only update the contents of the volume.
          New mount points will not be seen by a running container.
        type: boolean
        x-kab-description-zh: |-
          此字段标明 CSI 驱动希望其 `NodePublishVolume()` 接口能够被周期性地调用以反映所挂载卷的变化。
          此字段默认取值为 `false`。

          **注意**： 在成功地执行了最初的 `NodePublishVolume()` 调用之后，对 `NodePublishVolume()`
          的后续调用应该仅更新卷的内容。运行中的容器无法检测到新的挂载点。
      seLinuxMount:
        default: false
        description: |-
          This specifies if the CSI driver supports `-o context` mount option.

          When `true`, the CSI driver must ensure that all volumes provided by this CSI driver can be
          mounted separately with different `"-o context"` options.
          This is typical for storage backends that provide volumes as filesystems on block devices or
          as independent shared volumes.
          Kubernetes will call `NodeStage`/`NodePublish` with `-o context=xyz` mount option when mounting
          a ReadWriteOncePod volume used in Pod that has explicitly set SELinux context.
          In the future, it may be expanded to other volume AccessModes.
          In any case, Kubernetes will ensure that the volume is mounted only with a single SELinux context.

          When `false`, Kubernetes won't pass any special SELinux mount options to the driver.
          This is typical for volumes that represent subdirectories of a bigger shared filesystem.
        type: boolean
        x-kab-description-zh: |-
          此字段用来设置是否 CSI 驱动支持 `"-o context"` 挂载选项。

          字段为 `true` 时，CSI 驱动必须确保该驱动所制备的所有卷都可以用不同的 `"-o context"` 选项分别挂载。
          某些存储后端会使用块设备上的文件系统来提供存储卷，或者使用独立的共享卷提供存储卷，
          对于这类存储后端，支持 `"-o context"` 挂载选项是一种典型需求。

          对于显式设置了 SELinux 上下文的 Pod，Kubernetes 在为其挂载 `"ReadWriteOncePod"` 卷时，
          要调用 `NodeStage()`/`NodePublish()` 接口，这时会提供 `"-o context=xyz"` 这类挂载选项，
          在将来的版本中，这种行为也可能被扩展到其他的卷访问模式。
          无论如何，Kubernetes 会确保只使用一个 SELinux 上下文来挂载卷。

          字段设置为 `false` 时，Kubernetes 不会向驱动传递任何特殊的 SELinux 上下文挂载选项。
          某些存储卷所代表的是较大规模共享文件系统的一部分，对于这些卷，字段设置为 `false` 是比较常见的。
      storageCapacity:
        default: false
        description: |-
          If set to `true`, `storageCapacity` indicates that the CSI volume driver wants Pod scheduling to
          consider the storage capacity that the driver deployment will report by creating
          `CSIStorageCapacity` objects with capacity information.

          The check can be enabled immediately when deploying a driver.
          In that case, provisioning new volumes with late binding will pause until the driver deployment
          has published some suitable `CSIStorageCapacity` object.

          Alternatively, the driver can be deployed with the field unset or `false` and it can be flipped
          later when storage capacity information has been published.

          This field was immutable in Kubernetes before 1.22 and now is mutable.
        type: boolean
        x-kab-description-zh: |-
          此字段设置为 `true` 时，表明 CSI 卷驱动希望 Pod 调度时会考虑存储容量信息。
          这些存储容量信息包含在驱动部署时创建的 `CSIStorageCapacity` 结构中。

          在部署 CSI 驱动时，可以立即启用容量检查。如果是这样，制备延迟绑定的新卷的操作会被暂停，
          直到所部署的驱动公布了一些合适的 `CSIStorageCapacity` 对象为止。

          另一种使用方式是，在部署 CSI 驱动时不设置此字段，或者将其设置为 `false`，
          当后期存储容量信息可用时，在改变字段设置值。

          此字段在 v1.22 之前是只读的；在其后的版本中是可变更的。
      tokenRequests:
        description: |-
          This indicates the CSI driver needs Pods' service account tokens it is mounting volume for
          to do necessary authentication.
          Kubelet will pass the tokens in `VolumeContext` in the CSI `NodePublishVolume()` calls.
          The CSI driver should parse and validate the following `VolumeContext`:

          ```
          "csi.storage.k8s.io/serviceAccount.tokens": {
            "<audience>": {
              "token": "<token>",
              "expirationTimestamp": "<expiration timestamp in RFC3339>"
              ,
            },
            ...
          }
          ```

          **Note**: `audience` in each TokenRequest should be different and at most one token is empty string.
          To receive a new token after expiry, `requiresRepublish` can be used to trigger
          `NodePublishVolume()` periodically.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.TokenRequest'
        type: array
        x-kab-description-zh: |-
          此字段表明 CSI 驱动需要 Pod 的服务账号令牌信息，以便在挂载卷的时候完成必要的身份认证操作。
          kubelet 会将令牌放入 `VolumeContext` 结构中，传递给 CSI `NodePublishVolume()` 调用。
          CSI 驱动需要对 `VolumeContext` 中的数据进行解析和合法性检查。

          ```
          "csi.storage.k8s.io/serviceAccount.tokens": {
            "<audience>": {
              "token": "<token>",
              "expirationTimestamp": "<expiration timestamp in RFC3339>"
              ,
            },
            ...
          }
          ```

          **注意**： 每个 TokenRequest 中的 `audience` 都应该是不同的，最多只能有一个令牌是空字符串。
          如果想在令牌过期之后重新收到新令牌，可以通过 `requiresRepublish` 来触发周期性的
          `NodePublishVolume()` 调用。
        x-kubernetes-list-type: atomic
      volumeLifecycleModes:
        default:
          - Persistent
        description: |-
          This defines what kind of volumes this CSI volume driver supports.
          The default if the list is empty is `["Persistent"]`, which is the usage defined
          by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism.
          The other mode is `"Ephemeral"`. In this mode, volumes are defined inline inside the Pod spec
          with CSIVolumeSource and their lifecycle is tied to the lifecycle of that Pod.
          A driver has to be aware of this because it is only going to get a `NodePublishVolume()` call
          for such a volume.
          For more information about implementing this mode, see
          [CSI doc](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html).
          A driver can support one or more of these modes and more modes may be added in the future.

          This field is immutable.
        items:
          enum:
            - Ephemeral
            - Persistent
          type: string
        type: array
        x-kab-description-zh: |-
          此字段定义当前 CSI 卷驱动所支持的卷类型。
          如果列表为空，默认值为 `["Persistent"]`，也就是 CSI 规范中定义的用法，在 Kubernetes
          中通过 PV/PVC 机制来实现。
          另外一种模式是 `"Ephemeral"`。在这种模式下，存储卷实在 Pod 的规约中以内联方式通过
          CSIVolumeSource 定义的，存储卷的生命周期与 Pod 的生命周期绑定。

          CSI 驱动必须知道合法的配置选项是什么，因为对这类存储卷它只有一次调用 `NodePublishVolume()`
          的机会。关于如何实现这种模式的更多信息，可以参阅
          [CSI 文档](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html)。
          每个 CSI 驱动可以实现这里的一种或者多种模式，并且将来的版本中可能还会添加新的模式。

          此字段是不可变更的。
        x-kubernetes-list-type: set
    required:
      - attachRequired
      - podInfoOnMount
    type: object
    x-kab-description-zh: CSIDriver 的规约。整个规约是不可变更的。
  io.k8s.api.storage.v1.CSINode.CREATE:
    description: |-
      CSINode holds information about all CSI drivers installed on a Node.
      CSI drivers do not need to create the CSINode object directly.
      As long as they use the `"node-driver-registrar"` sidecar container, the kubelet will automatically
      populate the CSINode object for the CSI driver as part of kubelet plugin registration.
      CSINode has the same name as a Node. If the object is missing, it means either there are no CSI
      Drivers available on the Node, or the kubelet version is too low to create this object.
      CSINode has an `ownerReference` pointing to the corresponding Node object.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSINode
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be the Kubernetes Node
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是 Kubernetes Node 名称。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.CSINodeSpec'
        description: The specification of CSINode.
        x-kab-description-zh: CSINode 的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CSINode 用来保存节点上保存的所有 CSI 驱动的信息。CSI 驱动不需要直接创建 CSINode 对象。
      只要 CSI 驱动使用 `"node-driver-registrar"` 边车容器，kubelet 会在注册 kubelet
      插件的时候自动为 CSI 驱动填充 CSINode 对象。CSINode 的名称与对应 Node 的名称相同。
      如果节点上没有 CSINode 对象，则要么节点上没有安装 CSI 驱动，要么 kubelet 的版本太低，
      不支持创建 CSINode 对象。
      CSINode 对象中包含一个 `ownerReference` 字段，指向对应的 Node 对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSINode
        version: v1
  io.k8s.api.storage.v1.CSINode.GET:
    description: |-
      CSINode holds information about all CSI drivers installed on a Node.
      CSI drivers do not need to create the CSINode object directly.
      As long as they use the `"node-driver-registrar"` sidecar container, the kubelet will automatically
      populate the CSINode object for the CSI driver as part of kubelet plugin registration.
      CSINode has the same name as a Node. If the object is missing, it means either there are no CSI
      Drivers available on the Node, or the kubelet version is too low to create this object.
      CSINode has an `ownerReference` pointing to the corresponding Node object.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSINode
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.CSINodeSpec'
        description: The specification of CSINode.
        x-kab-description-zh: CSINode 的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CSINode 用来保存节点上保存的所有 CSI 驱动的信息。CSI 驱动不需要直接创建 CSINode 对象。
      只要 CSI 驱动使用 `"node-driver-registrar"` 边车容器，kubelet 会在注册 kubelet
      插件的时候自动为 CSI 驱动填充 CSINode 对象。CSINode 的名称与对应 Node 的名称相同。
      如果节点上没有 CSINode 对象，则要么节点上没有安装 CSI 驱动，要么 kubelet 的版本太低，
      不支持创建 CSINode 对象。
      CSINode 对象中包含一个 `ownerReference` 字段，指向对应的 Node 对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSINode
        version: v1
  io.k8s.api.storage.v1.CSINode.UPDATE:
    description: |-
      CSINode holds information about all CSI drivers installed on a Node.
      CSI drivers do not need to create the CSINode object directly.
      As long as they use the `"node-driver-registrar"` sidecar container, the kubelet will automatically
      populate the CSINode object for the CSI driver as part of kubelet plugin registration.
      CSINode has the same name as a Node. If the object is missing, it means either there are no CSI
      Drivers available on the Node, or the kubelet version is too low to create this object.
      CSINode has an `ownerReference` pointing to the corresponding Node object.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSINode
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be the Kubernetes Node
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是 Kubernetes Node 名称。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.CSINodeSpec'
        description: The specification of CSINode.
        x-kab-description-zh: CSINode 的规约。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      CSINode 用来保存节点上保存的所有 CSI 驱动的信息。CSI 驱动不需要直接创建 CSINode 对象。
      只要 CSI 驱动使用 `"node-driver-registrar"` 边车容器，kubelet 会在注册 kubelet
      插件的时候自动为 CSI 驱动填充 CSINode 对象。CSINode 的名称与对应 Node 的名称相同。
      如果节点上没有 CSINode 对象，则要么节点上没有安装 CSI 驱动，要么 kubelet 的版本太低，
      不支持创建 CSINode 对象。
      CSINode 对象中包含一个 `ownerReference` 字段，指向对应的 Node 对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSINode
        version: v1beta1
  io.k8s.api.storage.v1.CSINodeDriver:
    description: Information about the specification of one CSI driver installed on
      a Node.
    properties:
      allocatable:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeNodeResources'
        description: |-
          The volume resources of a Node that are available for scheduling.
          This field is Beta-level.
        x-kab-description-zh: 节点上可供调度使用的卷资源。此字段为 Beta 阶段。
      name:
        description: |-
          The name of the CSI driver that this object refers to.
          This **MUST** be the same name returned by the CSI `GetPluginName()` call for that driver.
          The value must be a valid DNS subdomain. The name must be unique in the same CSINode.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此对象所引用的 CSI 驱动的名称。
          此字段*必须是**调用驱动的 CSI 接口 `GetPluginName()` 所返回的名称。
          字段值必须是合法的 DNS 子域名。在同一 CSINode 内，要唯一。
      nodeID:
        description: |-
          ID of the Node from the driver point of view.
          This field enables Kubernetes to communicate with storage systems that do not share
          the same nomenclature for Nodes.
          For example, Kubernetes may refer to a given Node as `"node1"`, but the storage system may
          refer to the same node as `"nodeA"`.
          When Kubernetes issues a command to the storage system to attach a volume to a specific Node,
          it can use this field to refer to the Node name using the ID that the storage system will
          understand, e.g. `"nodeA"` instead of `"node1"`.
        maxLength: 128
        minLength: 1
        type: string
        x-kab-description-zh: |-
          从驱动角度看到的 Node ID。
          此字段让 Kubernetes 能够与一些特别的外部存储通信，即便这些系统与 Kubernetes 对节点的定义不同。

          例如，Kubernetes 可能将某个节点视为 `"node1"`，而存储系统可能将其视为 `"nodeA"`。
          当 Kubernetes 向存储系统发出指令将存储卷挂接到给定节点时，它可以使用此字段作为节点名称，
          以便存储系统能够理解所指代的节点。
      topologyKeys:
        description: |-
          The list of keys supported by the driver.
          When a driver is initialized on a cluster, it provides a set of topology keys that it
          understands (e.g. `"company.com/zone"`, `"company.com/region"`).
          When a driver is initialized on a Node, it provides the same topology keys along with values.
          Kubelet will expose these topology keys as labels on its own Node object.
          When Kubernetes does topology aware provisioning, it can use this list to determine
          which labels it should retrieve from the Node object and pass back to the driver.
          It is possible for different Nodes to use different topology keys.
          This can be empty if driver does not support topology.
        items:
          description: 拓扑主键必须是一个限定名称。
          minLength: 1
          type: string
        type: array
        uniqueItems: true
        x-kab-description-zh: |-
          此字段包含存储驱动所支持的主键。
          当在集群中初始化某个驱动时，可使用此字段提供一些它能够理解的拓扑主键（例如，
          `"company.com/zone"`、`"company.com/region"`）。
          当在具体的一个节点上初始化驱动时，驱动会提供相同的拓扑主键，并且每个主键都有取值。
          kubelet 会将这些拓扑主键作为所管理的 Node 对象上的标签，将其公布出去。
          Kubernetes 在执行拓扑感知的存储制备时，可以使用此列表来确定需要从 Node 上读取哪些标签，
          并将这些标签传递给驱动。
          不同的节点使用相同的拓扑主键是可能的。
          如果 CSI 驱动不支持拓扑分布，此字段可能为空。
        x-kubernetes-list-type: atomic
    required:
      - name
      - nodeID
    type: object
    x-kab-description-zh: 关于在节点上安装的 CSI 驱动的规约的信息。
  io.k8s.api.storage.v1.CSINodeList:
    description: A list of CSINode objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of CSINode objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
        type: array
        x-kab-description-zh: 包含 CSINode 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSINodeList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 CSINode 对象的列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSINodeList
        version: v1
  io.k8s.api.storage.v1.CSINodeSpec:
    description: Information about the specification of all CSI drivers installed
      on a Node.
    properties:
      drivers:
        description: |-
          A list of information of all CSI Drivers existing on a Node.
          If all drivers in the list are uninstalled, this can become empty.
          Items in the list must have unique names.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.CSINodeDriver'
        type: array
        x-kab-description-zh: |-
          关于节点上所有 CSI 驱动的信息列表。
          如果列表中的所有驱动都被卸载，则此列表会变为空表。
          列表中的每个元素要有唯一的名称。
        x-kubernetes-list-map-keys:
          - name
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: name
        x-kubernetes-patch-strategy: merge
    required:
      - drivers
    type: object
    x-kab-description-zh: 关于节点上所安装的全部 CSI 驱动的规约信息。
  io.k8s.api.storage.v1.CSIStorageCapacity.CREATE:
    description: |-
      CSIStorageCapacity stores the result of one CSI `GetCapacity()` call.
      For a given StorageClass, this describes the available capacity in a particular topology segment.
      This can be used when considering where to instantiate new PersistentVolumes.

      For example this can express things like:

      - StorageClass `"standard"` has `"1234 GiB"` available in `"topology.kubernetes.io/zone=us-east1"`
      - StorageClass `"localssd"` has `"10 GiB"` available in `"kubernetes.io/hostname=knode-abc123"`

      The following three cases all imply that no capacity is available for a certain combination:

      - no object exists with suitable topology and storage class name
      - such an object exists, but the capacity is unset
      - such an object exists, but the capacity is zero

      The producer of these objects can decide which approach is more suitable.

      They are consumed by the kube-scheduler if the `CSIStorageCapacity` beta feature gate is enabled
      there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
      The scheduler compares the `maximumVolumeSize` against the requested size of pending volumes to
      filter out unsuitable nodes.
      If `maximumVolumeSize` is unset, it falls back to a comparison against the less precise `capacity`.
      If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      capacity:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The value reported by the CSI driver in its `GetCapacityResponse` for a `GetCapacityRequest`
          with topology and parameters that match the previous fields.

          The semantic is currently (CSI spec 1.2) defined as:
          The available capacity, in bytes, of the storage that can be used to provision volumes.
          If not set, that information is currently unavailable.
        x-kab-description-zh: |-
          此字段是 CSI 驱动在 `GetCapacityRequest` 调用所返回的 `GetCapacityResponse` 中报告的值,
          所报告的值是针对请求中所给的拓扑区段等参数的。

          按照 CSI Spec v1.2 的规定，这一信息的语义是：
          可用的存储容量按字节计，是存储上可用来制备存储卷的容量。
          如果没有设置此字段，则这一信息是未知的。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIStorageCapacity
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      maximumVolumeSize:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          This is the value reported by the CSI driver in its `GetCapacityResponse` for a
          `GetCapacityRequest` with topology and parameters that match the previous fields.

          This is defined since CSI spec 1.4.0 as the largest size that may be used in a
          `CreateVolumeRequest.capacity_range.required_bytes` field to create a volume with
          the same parameters as those in `GetCapacityRequest`.
          The corresponding value in the Kubernetes API is `resources.requests` in a volume claim.
        x-kab-description-zh: |-
          此字段是 CSI 驱动在 `GetCapacityRequest` 调用所返回的 `GetCapacityResponse` 中报告的值,
          所报告的值是针对请求中所给的拓扑区段等参数的。

          在 CSI Spec v1.4.0 中，这一信息的定义是使用 `GetCapacityRequest` 中所给的各个参数来创建存储卷时，
          可以在 `CreateVolumeRequest.capacity_range.required_bytes` 字段中设置的最大数值。
          Kubernetes API 中与此对应的值是 PVC 中的 `resources.requests`。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata. The `name` has no particular meaning.
          It must be be a DNS subdomain (dots allowed, 253 characters).
          To ensure that there are no conflicts with other CSI drivers on the cluster,
          the recommendation is to use `"csisc-<uuid>"`, a generated name, or a reverse-domain name
          which ends with the unique CSI driver name.
          Objects are namespaced.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 字段没有特别的含义，但形式上必须是合法的 DNS 子域名
          （可以包含句点 `'.'`，最长 253 字符）。
          为了确保与集群中的其他 CSI 驱动之间不存在冲突，建议使用 `"csisc-<uuid>"` 这种生成式的名称，
          或者逆序的、以唯一的 CSI 驱动名称结尾的域名。

          此对象是名字空间作用域的。
      nodeTopology:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: This defines which nodes have access to the storage for which
          capacity was reported. If not set, the storage is not accessible from any
          node in the cluster. If empty, the storage is accessible from all nodes.
          This field is immutable.
        x-kab-description-zh: |-
          此字段定义哪些节点能够访问这些报告了容量信息的存储。 如果未设置此字段，集群中任何节点都无法访问此存储。 如果此字段为空选择算符，则意味着集群中所有节点都可以访问此存储。
          此字段不可变更。
      storageClassName:
        description: The name of the StorageClass that the reported capacity applies
          to. It must meet the same requirements as the name of a StorageClass object
          (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity
          object is obsolete and should be removed by its creator. This field is immutable.
        minLength: 1
        type: string
        x-kab-description-zh: 所报告的容量信息适用的 StorageClass 名称。 字段名必须满足 StorageClass 对象的名称要求（非空、合法的
          DNS 子域名）。 如果所指定的 StorageClass 对象不再存在，则此 CSIStorageCapacity 对象也过时，应该由其创建者删除。
          此字段不可变更。
    required:
      - apiVersion
      - kind
      - metadata
      - storageClassName
    type: object
    x-kab-description-zh: |-
      CSIStorageCapacity 中保存的是某次 CSI `GetCapacity()` 调用的返回结果。
      对于一个给定的 StorageClass，此结构描述的是特定拓扑区段内可用的存储容量。
      这一信息可以用来帮助决定在哪里实例化新的 PersistentVolume 对象。
      例如，此结构可以表达以下内容：

      - StorageClass `"standard"` 在 `"topology.kubernetes.io/zone=us-east1"` 有 `"1234 GiB"` 可用；
      - StorageClass `"localssd"` 在 `"kubernetes.io/hostname=knode-abc123"` 有 `"10 GiB"` 可用；

      以下三种情况都意味着在某种组合下没有存储可用：

      - 不存在带有合适的拓扑信息和存储类名的对象；
      - 存在这类对象，但是其容量信息未设置；
      - 存在这类对象，但其容量信息为零。

      生成 CSIStorageCapacity 对象的组件可以决定使用那种方式更合适。

      如果启用了 `CSIStorageCapacity` 特性门控并且 CSI 驱动支持基于 `CSIDriver.storageCapacity`
      来执行容量感知的调度，`kube-scheduler` 就能够使用这些信息。
      调度器会检查这里的 `maximumVolumeSize` 信息，查看是否满足待定存储卷所请求的存储空间需求，
      进而过滤掉不合适的节点。
      如果没有设置 `maximumVolumeSize`，调度器会退回到使用不那么精确的 `capacity` 字段值。
      如果 `capacity` 也没有设置，则调度器会认为此节点容量不足，转而尝试其他节点。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
  io.k8s.api.storage.v1.CSIStorageCapacity.GET:
    description: |-
      CSIStorageCapacity stores the result of one CSI `GetCapacity()` call.
      For a given StorageClass, this describes the available capacity in a particular topology segment.
      This can be used when considering where to instantiate new PersistentVolumes.

      For example this can express things like:

      - StorageClass `"standard"` has `"1234 GiB"` available in `"topology.kubernetes.io/zone=us-east1"`
      - StorageClass `"localssd"` has `"10 GiB"` available in `"kubernetes.io/hostname=knode-abc123"`

      The following three cases all imply that no capacity is available for a certain combination:

      - no object exists with suitable topology and storage class name
      - such an object exists, but the capacity is unset
      - such an object exists, but the capacity is zero

      The producer of these objects can decide which approach is more suitable.

      They are consumed by the kube-scheduler if the `CSIStorageCapacity` beta feature gate is enabled
      there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
      The scheduler compares the `maximumVolumeSize` against the requested size of pending volumes to
      filter out unsuitable nodes.
      If `maximumVolumeSize` is unset, it falls back to a comparison against the less precise `capacity`.
      If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      capacity:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The value reported by the CSI driver in its `GetCapacityResponse` for a `GetCapacityRequest`
          with topology and parameters that match the previous fields.

          The semantic is currently (CSI spec 1.2) defined as:
          The available capacity, in bytes, of the storage that can be used to provision volumes.
          If not set, that information is currently unavailable.
        x-kab-description-zh: |-
          此字段是 CSI 驱动在 `GetCapacityRequest` 调用所返回的 `GetCapacityResponse` 中报告的值,
          所报告的值是针对请求中所给的拓扑区段等参数的。

          按照 CSI Spec v1.2 的规定，这一信息的语义是：
          可用的存储容量按字节计，是存储上可用来制备存储卷的容量。
          如果没有设置此字段，则这一信息是未知的。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIStorageCapacity
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      maximumVolumeSize:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          This is the value reported by the CSI driver in its `GetCapacityResponse` for a
          `GetCapacityRequest` with topology and parameters that match the previous fields.

          This is defined since CSI spec 1.4.0 as the largest size that may be used in a
          `CreateVolumeRequest.capacity_range.required_bytes` field to create a volume with
          the same parameters as those in `GetCapacityRequest`.
          The corresponding value in the Kubernetes API is `resources.requests` in a volume claim.
        x-kab-description-zh: |-
          此字段是 CSI 驱动在 `GetCapacityRequest` 调用所返回的 `GetCapacityResponse` 中报告的值,
          所报告的值是针对请求中所给的拓扑区段等参数的。

          在 CSI Spec v1.4.0 中，这一信息的定义是使用 `GetCapacityRequest` 中所给的各个参数来创建存储卷时，
          可以在 `CreateVolumeRequest.capacity_range.required_bytes` 字段中设置的最大数值。
          Kubernetes API 中与此对应的值是 PVC 中的 `resources.requests`。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: |-
          Standard object metadata. The `name` has no particular meaning.
          It must be be a DNS subdomain (dots allowed, 253 characters).
          To ensure that there are no conflicts with other CSI drivers on the cluster,
          the recommendation is to use `"csisc-<uuid>"`, a generated name, or a reverse-domain name
          which ends with the unique CSI driver name.
          Objects are namespaced.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 字段没有特别的含义，但形式上必须是合法的 DNS 子域名
          （可以包含句点 `'.'`，最长 253 字符）。
          为了确保与集群中的其他 CSI 驱动之间不存在冲突，建议使用 `"csisc-<uuid>"` 这种生成式的名称，
          或者逆序的、以唯一的 CSI 驱动名称结尾的域名。

          此对象是名字空间作用域的。
      nodeTopology:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: This defines which nodes have access to the storage for which
          capacity was reported. If not set, the storage is not accessible from any
          node in the cluster. If empty, the storage is accessible from all nodes.
          This field is immutable.
        x-kab-description-zh: |-
          此字段定义哪些节点能够访问这些报告了容量信息的存储。 如果未设置此字段，集群中任何节点都无法访问此存储。 如果此字段为空选择算符，则意味着集群中所有节点都可以访问此存储。
          此字段不可变更。
      storageClassName:
        description: The name of the StorageClass that the reported capacity applies
          to. It must meet the same requirements as the name of a StorageClass object
          (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity
          object is obsolete and should be removed by its creator. This field is immutable.
        minLength: 1
        type: string
        x-kab-description-zh: 所报告的容量信息适用的 StorageClass 名称。 字段名必须满足 StorageClass 对象的名称要求（非空、合法的
          DNS 子域名）。 如果所指定的 StorageClass 对象不再存在，则此 CSIStorageCapacity 对象也过时，应该由其创建者删除。
          此字段不可变更。
    required:
      - apiVersion
      - capacity
      - kind
      - metadata
      - nodeTopology
      - storageClassName
    type: object
    x-kab-description-zh: |-
      CSIStorageCapacity 中保存的是某次 CSI `GetCapacity()` 调用的返回结果。
      对于一个给定的 StorageClass，此结构描述的是特定拓扑区段内可用的存储容量。
      这一信息可以用来帮助决定在哪里实例化新的 PersistentVolume 对象。
      例如，此结构可以表达以下内容：

      - StorageClass `"standard"` 在 `"topology.kubernetes.io/zone=us-east1"` 有 `"1234 GiB"` 可用；
      - StorageClass `"localssd"` 在 `"kubernetes.io/hostname=knode-abc123"` 有 `"10 GiB"` 可用；

      以下三种情况都意味着在某种组合下没有存储可用：

      - 不存在带有合适的拓扑信息和存储类名的对象；
      - 存在这类对象，但是其容量信息未设置；
      - 存在这类对象，但其容量信息为零。

      生成 CSIStorageCapacity 对象的组件可以决定使用那种方式更合适。

      如果启用了 `CSIStorageCapacity` 特性门控并且 CSI 驱动支持基于 `CSIDriver.storageCapacity`
      来执行容量感知的调度，`kube-scheduler` 就能够使用这些信息。
      调度器会检查这里的 `maximumVolumeSize` 信息，查看是否满足待定存储卷所请求的存储空间需求，
      进而过滤掉不合适的节点。
      如果没有设置 `maximumVolumeSize`，调度器会退回到使用不那么精确的 `capacity` 字段值。
      如果 `capacity` 也没有设置，则调度器会认为此节点容量不足，转而尝试其他节点。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
  io.k8s.api.storage.v1.CSIStorageCapacity.UPDATE:
    description: |-
      CSIStorageCapacity stores the result of one CSI `GetCapacity()` call.
      For a given StorageClass, this describes the available capacity in a particular topology segment.
      This can be used when considering where to instantiate new PersistentVolumes.

      For example this can express things like:

      - StorageClass `"standard"` has `"1234 GiB"` available in `"topology.kubernetes.io/zone=us-east1"`
      - StorageClass `"localssd"` has `"10 GiB"` available in `"kubernetes.io/hostname=knode-abc123"`

      The following three cases all imply that no capacity is available for a certain combination:

      - no object exists with suitable topology and storage class name
      - such an object exists, but the capacity is unset
      - such an object exists, but the capacity is zero

      The producer of these objects can decide which approach is more suitable.

      They are consumed by the kube-scheduler if the `CSIStorageCapacity` beta feature gate is enabled
      there and a CSI driver opts into capacity-aware scheduling with CSIDriver.StorageCapacity.
      The scheduler compares the `maximumVolumeSize` against the requested size of pending volumes to
      filter out unsuitable nodes.
      If `maximumVolumeSize` is unset, it falls back to a comparison against the less precise `capacity`.
      If that is also unset, the scheduler assumes that capacity is insufficient and tries some other node.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      capacity:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          The value reported by the CSI driver in its `GetCapacityResponse` for a `GetCapacityRequest`
          with topology and parameters that match the previous fields.

          The semantic is currently (CSI spec 1.2) defined as:
          The available capacity, in bytes, of the storage that can be used to provision volumes.
          If not set, that information is currently unavailable.
        x-kab-description-zh: |-
          此字段是 CSI 驱动在 `GetCapacityRequest` 调用所返回的 `GetCapacityResponse` 中报告的值,
          所报告的值是针对请求中所给的拓扑区段等参数的。

          按照 CSI Spec v1.2 的规定，这一信息的语义是：
          可用的存储容量按字节计，是存储上可用来制备存储卷的容量。
          如果没有设置此字段，则这一信息是未知的。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIStorageCapacity
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      maximumVolumeSize:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity'
        description: |-
          This is the value reported by the CSI driver in its `GetCapacityResponse` for a
          `GetCapacityRequest` with topology and parameters that match the previous fields.

          This is defined since CSI spec 1.4.0 as the largest size that may be used in a
          `CreateVolumeRequest.capacity_range.required_bytes` field to create a volume with
          the same parameters as those in `GetCapacityRequest`.
          The corresponding value in the Kubernetes API is `resources.requests` in a volume claim.
        x-kab-description-zh: |-
          此字段是 CSI 驱动在 `GetCapacityRequest` 调用所返回的 `GetCapacityResponse` 中报告的值,
          所报告的值是针对请求中所给的拓扑区段等参数的。

          在 CSI Spec v1.4.0 中，这一信息的定义是使用 `GetCapacityRequest` 中所给的各个参数来创建存储卷时，
          可以在 `CreateVolumeRequest.capacity_range.required_bytes` 字段中设置的最大数值。
          Kubernetes API 中与此对应的值是 PVC 中的 `resources.requests`。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata. The `name` has no particular meaning.
          It must be be a DNS subdomain (dots allowed, 253 characters).
          To ensure that there are no conflicts with other CSI drivers on the cluster,
          the recommendation is to use `"csisc-<uuid>"`, a generated name, or a reverse-domain name
          which ends with the unique CSI driver name.
          Objects are namespaced.
        x-kab-description-zh: |-
          标准的对象元数据。`name` 字段没有特别的含义，但形式上必须是合法的 DNS 子域名
          （可以包含句点 `'.'`，最长 253 字符）。
          为了确保与集群中的其他 CSI 驱动之间不存在冲突，建议使用 `"csisc-<uuid>"` 这种生成式的名称，
          或者逆序的、以唯一的 CSI 驱动名称结尾的域名。

          此对象是名字空间作用域的。
      nodeTopology:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector'
        description: This defines which nodes have access to the storage for which
          capacity was reported. If not set, the storage is not accessible from any
          node in the cluster. If empty, the storage is accessible from all nodes.
          This field is immutable.
        x-kab-description-zh: |-
          此字段定义哪些节点能够访问这些报告了容量信息的存储。 如果未设置此字段，集群中任何节点都无法访问此存储。 如果此字段为空选择算符，则意味着集群中所有节点都可以访问此存储。
          此字段不可变更。
      storageClassName:
        description: The name of the StorageClass that the reported capacity applies
          to. It must meet the same requirements as the name of a StorageClass object
          (non-empty, DNS subdomain). If that object no longer exists, the CSIStorageCapacity
          object is obsolete and should be removed by its creator. This field is immutable.
        minLength: 1
        type: string
        x-kab-description-zh: 所报告的容量信息适用的 StorageClass 名称。 字段名必须满足 StorageClass 对象的名称要求（非空、合法的
          DNS 子域名）。 如果所指定的 StorageClass 对象不再存在，则此 CSIStorageCapacity 对象也过时，应该由其创建者删除。
          此字段不可变更。
    required:
      - apiVersion
      - kind
      - metadata
      - storageClassName
    type: object
    x-kab-description-zh: |-
      CSIStorageCapacity 中保存的是某次 CSI `GetCapacity()` 调用的返回结果。
      对于一个给定的 StorageClass，此结构描述的是特定拓扑区段内可用的存储容量。
      这一信息可以用来帮助决定在哪里实例化新的 PersistentVolume 对象。
      例如，此结构可以表达以下内容：

      - StorageClass `"standard"` 在 `"topology.kubernetes.io/zone=us-east1"` 有 `"1234 GiB"` 可用；
      - StorageClass `"localssd"` 在 `"kubernetes.io/hostname=knode-abc123"` 有 `"10 GiB"` 可用；

      以下三种情况都意味着在某种组合下没有存储可用：

      - 不存在带有合适的拓扑信息和存储类名的对象；
      - 存在这类对象，但是其容量信息未设置；
      - 存在这类对象，但其容量信息为零。

      生成 CSIStorageCapacity 对象的组件可以决定使用那种方式更合适。

      如果启用了 `CSIStorageCapacity` 特性门控并且 CSI 驱动支持基于 `CSIDriver.storageCapacity`
      来执行容量感知的调度，`kube-scheduler` 就能够使用这些信息。
      调度器会检查这里的 `maximumVolumeSize` 信息，查看是否满足待定存储卷所请求的存储空间需求，
      进而过滤掉不合适的节点。
      如果没有设置 `maximumVolumeSize`，调度器会退回到使用不那么精确的 `capacity` 字段值。
      如果 `capacity` 也没有设置，则调度器会认为此节点容量不足，转而尝试其他节点。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
  io.k8s.api.storage.v1.CSIStorageCapacityList:
    description: A list of CSIStorageCapacity objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of CSIStorageCapacity objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
        type: array
        x-kab-description-zh: 包含 CSIStorageCapacity 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CSIStorageCapacityList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 CSIStorageCapacity 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: CSIStorageCapacityList
        version: v1
  io.k8s.api.storage.v1.StorageClass.CREATE:
    description: |-
      The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
      StorageClasses are non-namespaced; the name of the storage class according to etcd is in
      `matadata.name`.
    properties:
      allowVolumeExpansion:
        description: Flag indicating whether the storage class allows volume expand.
        type: boolean
        x-kab-description-zh: 表明此存储类是否支持卷扩容的标记。
      allowedTopologies:
        description: |-
          Restrict the Node topologies where volumes can be dynamically provisioned.
          Each volume plugin defines its own supported topology specifications.
          An empty list means there is no topology restriction.
          This field is only honored by servers that enable the `VolumeScheduling` feature.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySelectorTerm'
        type: array
        x-kab-description-zh: |-
          限制可以基于此存储类动态制备存储卷的节点拓扑。每个卷插件可以定义自己支持的拓扑规约。
          如果此列表为空，则意味着没有拓扑方面的约束。
          只有启用了 `VolumeScheduling` 特性门控的服务器才会处理此字段。
        x-kubernetes-list-type: atomic
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      mountOptions:
        description: |-
          Dynamically provisioned PersistentVolumes of this storage class are created with
          these mount options, e.g. `["ro", "soft"]`.
          Not validated - mount of the PVs will simply fail if an option is invalid.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          基于此存储类动态制备的 PersistentVolume 卷都会使用这里给出的挂载选项，例如 `["ro", "soft"]`。
          系统不检查选项本身的合法性，如果某个选项是非法的，PV 卷的挂载操作会直接失败。
        x-kubernetes-list-type: atomic
      parameters:
        additionalProperties:
          type: string
        description: |-
          The parameters for the provisioner that creates volumes of this StorageClass.
          Keys cannot be empty. The total length including keys and values must not exceed 256 KB.
          This field cannot be updated.
        maxItems: 512
        type: object
        x-kab-description-zh: |-
          为基于此 StorageClass 来制备存储卷的制备组件提供的参数。
          映射中的主键不可以为空字符串。包括所有主键、取值在内的整个映射长度不可超过 256 KB。
          此字段一旦设置不可变更。
      provisioner:
        description: |-
          The type of the provisioner. The value must be a qualified name.
          This field cannot be updated.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          制备组件的类型。此值必须是一个限定名。
          一旦设置，不可变更。
      reclaimPolicy:
        default: Delete
        description: |-
          Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy.
          It is up to the volume plugin to reject provisioning for StorageClasses with impossible
          reclaim policies. This field cannot be updated.
        enum:
          - Delete
          - Retain
        type: string
        x-kab-description-zh: |-
          基于此 StorageClass 制备的 PersistentVolume 卷会使用此字段所给的回收策略。
          卷插件在遇到不支持的回收策略时，要拒绝制备此 StorageClasses 的 PV 卷。
          此字段不支持变更。
      volumeBindingMode:
        default: Immediate
        description: |-
          How PersistentVolumeClaims should be provisioned and bound.

          - `"Immediate"`: this indicates that PersistentVolumeClaims should be immediately provisioned
            and bound;
          - `"WaitForFirstConsumer"`: this indicates that PersistentVolumeClaims should not be provisioned
            and bound until the first Pod is created that references the PersistentVolumeClaim.
            The volume provisioning and binding will occur during Pod scheduling.

          This field is only honored by servers that enable the `VolumeScheduling` feature.
          This field cannot be updated.
        enum:
          - Immediate
          - WaitForFirstConsumer
        type: string
        x-kab-description-zh: |-
          字段设置如何制备和绑定 PersistentVolumeClaim。

          - `"Immediate"`：PersistentVolumeClaim 会被立即制备并绑定；
          - `"WaitForFirstConsumer"`：在第一个引用相关 PVC 的 Pod 被创建之前，不要制备 PVC 或者执行绑定。
            卷的制备与绑定操作会在 Pod 调度时完成。

          只有启用了 `VolumeScheduling` 特性门控的服务器才会支持此字段。
          此字段一经设置不可变更。
    required:
      - apiVersion
      - kind
      - metadata
      - provisioner
    type: object
    x-kab-description-zh: |-
      StorageClass 定义某一类存储的参数。给定 StorageClass 可以动态制备 PersistentVolume 卷。
      StorageClasses 是集群作用域的。
      根据 etcd 的规范，存储类的名称用 `matadata.name` 来设置。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: StorageClass
        version: v1
  io.k8s.api.storage.v1.StorageClass.GET:
    description: |-
      The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
      StorageClasses are non-namespaced; the name of the storage class according to etcd is in
      `matadata.name`.
    properties:
      allowVolumeExpansion:
        description: Flag indicating whether the storage class allows volume expand.
        type: boolean
        x-kab-description-zh: 表明此存储类是否支持卷扩容的标记。
      allowedTopologies:
        description: |-
          Restrict the Node topologies where volumes can be dynamically provisioned.
          Each volume plugin defines its own supported topology specifications.
          An empty list means there is no topology restriction.
          This field is only honored by servers that enable the `VolumeScheduling` feature.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySelectorTerm'
        type: array
        x-kab-description-zh: |-
          限制可以基于此存储类动态制备存储卷的节点拓扑。每个卷插件可以定义自己支持的拓扑规约。
          如果此列表为空，则意味着没有拓扑方面的约束。
          只有启用了 `VolumeScheduling` 特性门控的服务器才会处理此字段。
        x-kubernetes-list-type: atomic
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      mountOptions:
        description: |-
          Dynamically provisioned PersistentVolumes of this storage class are created with
          these mount options, e.g. `["ro", "soft"]`.
          Not validated - mount of the PVs will simply fail if an option is invalid.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          基于此存储类动态制备的 PersistentVolume 卷都会使用这里给出的挂载选项，例如 `["ro", "soft"]`。
          系统不检查选项本身的合法性，如果某个选项是非法的，PV 卷的挂载操作会直接失败。
        x-kubernetes-list-type: atomic
      parameters:
        additionalProperties:
          type: string
        description: |-
          The parameters for the provisioner that creates volumes of this StorageClass.
          Keys cannot be empty. The total length including keys and values must not exceed 256 KB.
          This field cannot be updated.
        maxItems: 512
        type: object
        x-kab-description-zh: |-
          为基于此 StorageClass 来制备存储卷的制备组件提供的参数。
          映射中的主键不可以为空字符串。包括所有主键、取值在内的整个映射长度不可超过 256 KB。
          此字段一旦设置不可变更。
      provisioner:
        description: |-
          The type of the provisioner. The value must be a qualified name.
          This field cannot be updated.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          制备组件的类型。此值必须是一个限定名。
          一旦设置，不可变更。
      reclaimPolicy:
        default: Delete
        description: |-
          Dynamically provisioned PersistentVolumes of this StorageClass are created with this reclaim policy.
          It is up to the volume plugin to reject provisioning for StorageClasses with impossible
          reclaim policies. This field cannot be updated.
        enum:
          - Delete
          - Retain
        type: string
        x-kab-description-zh: |-
          基于此 StorageClass 制备的 PersistentVolume 卷会使用此字段所给的回收策略。
          卷插件在遇到不支持的回收策略时，要拒绝制备此 StorageClasses 的 PV 卷。
          此字段不支持变更。
      volumeBindingMode:
        default: Immediate
        description: |-
          How PersistentVolumeClaims should be provisioned and bound.

          - `"Immediate"`: this indicates that PersistentVolumeClaims should be immediately provisioned
            and bound;
          - `"WaitForFirstConsumer"`: this indicates that PersistentVolumeClaims should not be provisioned
            and bound until the first Pod is created that references the PersistentVolumeClaim.
            The volume provisioning and binding will occur during Pod scheduling.

          This field is only honored by servers that enable the `VolumeScheduling` feature.
          This field cannot be updated.
        enum:
          - Immediate
          - WaitForFirstConsumer
        type: string
        x-kab-description-zh: |-
          字段设置如何制备和绑定 PersistentVolumeClaim。

          - `"Immediate"`：PersistentVolumeClaim 会被立即制备并绑定；
          - `"WaitForFirstConsumer"`：在第一个引用相关 PVC 的 Pod 被创建之前，不要制备 PVC 或者执行绑定。
            卷的制备与绑定操作会在 Pod 调度时完成。

          只有启用了 `VolumeScheduling` 特性门控的服务器才会支持此字段。
          此字段一经设置不可变更。
    required:
      - apiVersion
      - kind
      - provisioner
    type: object
    x-kab-description-zh: |-
      StorageClass 定义某一类存储的参数。给定 StorageClass 可以动态制备 PersistentVolume 卷。
      StorageClasses 是集群作用域的。
      根据 etcd 的规范，存储类的名称用 `matadata.name` 来设置。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: StorageClass
        version: v1
  io.k8s.api.storage.v1.StorageClass.UPDATE:
    description: |-
      The parameters for a class of storage for which PersistentVolumes can be dynamically provisioned.
      StorageClasses are non-namespaced; the name of the storage class according to etcd is in
      `matadata.name`.
    properties:
      allowVolumeExpansion:
        description: Flag indicating whether the storage class allows volume expand.
        type: boolean
        x-kab-description-zh: 表明此存储类是否支持卷扩容的标记。
      allowedTopologies:
        description: |-
          Restrict the Node topologies where volumes can be dynamically provisioned.
          Each volume plugin defines its own supported topology specifications.
          An empty list means there is no topology restriction.
          This field is only honored by servers that enable the `VolumeScheduling` feature.
        items:
          $ref: '#/definitions/io.k8s.api.core.v1.TopologySelectorTerm'
        type: array
        x-kab-description-zh: |-
          限制可以基于此存储类动态制备存储卷的节点拓扑。每个卷插件可以定义自己支持的拓扑规约。
          如果此列表为空，则意味着没有拓扑方面的约束。
          只有启用了 `VolumeScheduling` 特性门控的服务器才会处理此字段。
        x-kubernetes-list-type: atomic
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      mountOptions:
        description: |-
          Dynamically provisioned PersistentVolumes of this storage class are created with
          these mount options, e.g. `["ro", "soft"]`.
          Not validated - mount of the PVs will simply fail if an option is invalid.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          基于此存储类动态制备的 PersistentVolume 卷都会使用这里给出的挂载选项，例如 `["ro", "soft"]`。
          系统不检查选项本身的合法性，如果某个选项是非法的，PV 卷的挂载操作会直接失败。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      StorageClass 定义某一类存储的参数。给定 StorageClass 可以动态制备 PersistentVolume 卷。
      StorageClasses 是集群作用域的。
      根据 etcd 的规范，存储类的名称用 `matadata.name` 来设置。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: StorageClass
        version: v1
  io.k8s.api.storage.v1.StorageClassList:
    description: A list of StorageClass objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of StorageClass objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
        type: array
        x-kab-description-zh: 包含 StorageClass 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageClassList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 StorageClass 对象的列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: StorageClassList
        version: v1
  io.k8s.api.storage.v1.TokenRequest:
    description: TokenRequest contains parameters of a ServiceAccount token.
    properties:
      audience:
        description: |-
          The intended audience of the token in `TokenRequestSpec`.
          It will default to the audiences of kube apiserver.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          令牌在 `TokenRequestSpec` 中给出的目标受众。
          此字段的默认值是 API 服务器的受众。
      expirationSeconds:
        description: |-
          The duration of validity of the token in `TokenRequestSpec`.
          It has the same default value of `expirationSeconds` in `TokenRequestSpec`.
          The minimum is 600 seconds and the maximum is 2^32 seconds.
        format: int64
        minimum: 600
        type: integer
        x-kab-description-zh: |-
          令牌在 `TokenRequestSpec` 中给出的有效期长度。
          其默认值为 `TokenRequestSpec` 中的 `expirationSeconds` 的默认值。
          此值最小为 600，最大为 2^32 秒。
    required:
      - audience
    type: object
    x-kab-description-zh: TokenRequest 包含 ServiceAccount 令牌的参数。
  io.k8s.api.storage.v1.VolumeAttachment.CREATE:
    description: |-
      The intent to attach or detach the specified volume to/from the specified Node.
      VolumeAttachment objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec'
        description: |-
          Specification of the desired attach/detach volume behavior.
          Populated by the Kubernetes system. This field cannot be updated.
        x-kab-description-zh: |-
          与挂接和解除挂接存储卷的预期行为有关的规约。
          此字段由 Kubernetes 系统来填充。
          字段不支持变更操作。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      此资源用来表达要将指定卷挂接（Attach）到指定节点或者将其与指定节点解除挂接（Detach）的意图。
      VolumeAttachment 是集群作用域的对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
  io.k8s.api.storage.v1.VolumeAttachment.GET:
    description: |-
      The intent to attach or detach the specified volume to/from the specified Node.
      VolumeAttachment objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSpec'
        description: |-
          Specification of the desired attach/detach volume behavior.
          Populated by the Kubernetes system. This field cannot be updated.
        x-kab-description-zh: |-
          与挂接和解除挂接存储卷的预期行为有关的规约。
          此字段由 Kubernetes 系统来填充。
          字段不支持变更操作。
      status:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachmentStatus'
        description: |-
          Status of the VolumeAttachment request.
          Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
        x-kab-description-zh: VolumeAttachment 请求的状态。由完成挂接/解除挂接操作的实体（如 `external-attacher`）来填充。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      此资源用来表达要将指定卷挂接（Attach）到指定节点或者将其与指定节点解除挂接（Detach）的意图。
      VolumeAttachment 是集群作用域的对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
  io.k8s.api.storage.v1.VolumeAttachment.UPDATE:
    description: |-
      The intent to attach or detach the specified volume to/from the specified Node.
      VolumeAttachment objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      此资源用来表达要将指定卷挂接（Attach）到指定节点或者将其与指定节点解除挂接（Detach）的意图。
      VolumeAttachment 是集群作用域的对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
  io.k8s.api.storage.v1.VolumeAttachmentList:
    description: A list of VolumeAttachment objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of VolumeAttachment objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
        type: array
        x-kab-description-zh: 包含 VolumeAttachment 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachmentList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 VolumeAttachment 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachmentList
        version: v1
  io.k8s.api.storage.v1.VolumeAttachmentSource:
    description: |-
      A volume that should be attached. Only PersistenVolumes can be attached via external attacher.
      Exactly one member can be set.
    properties:
      inlineVolumeSpec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec'
        description: |-
          Information for attaching a persistent volume defined by a Pod's inline VolumeSource.
          This field is populated only for the `CSIMigration` feature.
          It contains translated fields from a Pod's inline VolumeSource to a PersistentVolumeSpec.
          This field is Beta level and is only honored by servers that enabled the `CSIMigration` feature.
        x-kab-description-zh: |-
          关于挂接通过 Pod 内联的 VolumeSource 所定义的持久卷的信息。
          字段中包含从 Pod 内联 VolumeSource 所翻译而来的 PersistentVolumeSpec 配置。
          只有 `CSIMigration` 特性被启用时会填充和处理此字段。
      persistentVolumeName:
        description: |-
          Name of the persistent volume to attach. The name must be a valid DNS subdomain.
          This must be specified when the `CSIMigration` feature gate is not enabled.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要挂接的持久卷的名称。此名称必须是合法的 DNS 子域名。
          当未启用 `CSIMigration` 特性时，必须设置此字段。
    required:
      - persistentVolumeName
    type: object
    x-kab-description-zh: |-
      要挂载的一个存储卷。只有 PersistenVolume 存储卷可以通过外部挂接装置（External Attacher）挂接。
      结构中字段只能设置其一。
  io.k8s.api.storage.v1.VolumeAttachmentSpec:
    description: The specification of a VolumeAttachment request.
    properties:
      attacher:
        description: |-
          The name of the volume driver that must handle this request.
          This is the name returned by `GetPluginName()`. The value must be a valid DNS subdomain.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          必须处理此请求的卷驱动的名称。
          此名称由 `GetPluginName()` 调用返回，字符串必须是合法的 DNS 子域名。
      nodeName:
        description: The node that the volume should be attached to. The value must
          be a valid DNS subdomain.
        minLength: 1
        type: string
        x-kab-description-zh: 此卷要挂接到的节点的名称。字符串必须是合法的 DNS 子域名。
      source:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachmentSource'
        description: The volume that should be attached.
        x-kab-description-zh: 要被挂接的卷。
    required:
      - attacher
      - nodeName
      - source
    type: object
    x-kab-description-zh: VolumeAttachment 请求的规约。
  io.k8s.api.storage.v1.VolumeAttachmentStatus:
    description: The status of a VolumeAttachment request.
    properties:
      attachError:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeError'
        description: |-
          The last error encountered during attach operation, if any.
          This field must only be set by the entity completing the attach operation, i.e.
          the external-attacher.
        x-kab-description-zh: |-
          在执行挂接操作时遇到的最后一个错误，如果有的话。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
      attached:
        description: |-
          Indicates the volume is successfully attached.
          This field must only be set by the entity completing the attach operation, i.e.
          the external-attacher.
        type: boolean
        x-kab-description-zh: |-
          表明卷已被成功挂接。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
      attachmentMetadata:
        additionalProperties:
          type: string
        description: |-
          Upon successful attach operation, this field is populated with information returned by the
          `attach` operation that must be passed into subsequent `WaitForAttach` or `Mount` calls.
          This field must only be set by the entity completing the attach operation, i.e.
          the external-attacher. The maximum size of the map is 256 KB.
        type: object
        x-kab-description-zh: |-
          在成功完成挂接操作之后，此字段中会被填充 `attach` 操作所返回的信息。
          这些信息必须被传递给后续的 `WaitForAttach()` 或者 `Mount()` 调用。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
          此映射的最大长度是 256 KB。
      detachError:
        $ref: '#/definitions/io.k8s.api.storage.v1.VolumeError'
        description: |-
          The last error encountered during detach operation, if any.
          This field must only be set by the entity completing the detach operation, i.e.
          the external-attacher.
        x-kab-description-zh: |-
          在执行解除挂接操作时遇到的最后一个错误，如果有的话。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
    required:
      - attached
    type: object
    x-kab-description-zh: VolumeAttachment 请求的状态。
  io.k8s.api.storage.v1.VolumeError:
    description: An error encountered during a volume operation.
    properties:
      message:
        description: |-
          String detailing the error encountered during `attach` or `detach` operation.
          This string may be logged, so it should not contain sensitive information.
        maxLength: 1024
        type: string
        x-kab-description-zh: |-
          字符串字段，给出 `attach` 或 `detach` 操作时遇到的错误。
          此字符串可能会被记录到日志中，所以其中不应该包含敏感信息。
      time:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time the error was encountered.
        x-kab-description-zh: 错误发生的时间。
    type: object
    x-kab-description-zh: 在执行卷操作时遇到的错误。
  io.k8s.api.storage.v1.VolumeNodeResources:
    description: A set of resource limits for the scheduling of volumes.
    properties:
      count:
        description: |-
          Maximum number of unique volumes managed by the CSI driver that can be used on a Node.
          A volume that is both attached and mounted on a Node is considered to be used once, not twice.
          The same rule applies for a unique volume that is shared among multiple Pods on the same Node.
          If this field is not specified, then the supported number of volumes on this Node is unbounded.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此 CSI 驱动所管理的各不相同的存储卷中，能够在同一节点上使用的最大个数。
          被挂接到节点上并且已被挂载的卷被视为使用了一次，而不是两次。
          对于被同一个节点上多个 Pod 共享的卷而言，适用同样的规则。
          如果此字段没有设置，则对在此节点上可以支持的卷数没有限制。
    type: object
    x-kab-description-zh: 调度存储卷时要满足的一组资源约束。
  io.k8s.api.storage.v1alpha1.VolumeAttributesClass.CREATE:
    description: |-
      VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver.
      The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the
      PersistentVolumeClaim spec after provisioning.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: Name of the CSI driver. This field is immutable. The value must
          be a valid qualified name.
        minLength: 1
        type: string
        x-kab-description-zh: CSI 驱动的名称。此字段不可变更。字段值必须是合法的限定名。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttributesClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      parameters:
        additionalProperties:
          type: string
        description: |-
          `parameters` hold volume attributes defined by the CSI driver.
          These values are opaque to the Kubernetes and are passed directly to the CSI driver.
          The underlying storage provider supports changing these attributes on an existing volume,
          however the parameters field itself is immutable.
          To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and
          the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.

          This field is required and must contain at least one key/value pair.
          The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K.
          If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an `"Infeasible"`
          state in the `modifyVolumeStatus` field.
        maxProperties: 512
        minProperties: 1
        type: object
        x-kab-description-zh: |-
          `parameters` 保存由 CSI 驱动所定义的卷属性。
          所定义的值对于 Kubernetes 而言是不透明的，会被直接传递给 CSI 驱动。
          下层的存储驱动允许更改已有卷上的这些属性设置值，但是 `parameters` 字段本身是不可变更的。
          如果要触发存储卷更新，应该创建包含新的参数的 VolumeAttributesClass，并更新 PersistentVolumeClaim
          令其引用新的 VolumeAttributesClass 对象。

          此字段是必须设置的，并且至少包含一个键值对。
          键名部分不可以为空，参数的最大个数为 512 个，总体尺寸不可超过 256 KB。
          如果 CSI 拒绝了非法的参数设置，则目标 PersistentVolumeClaim 的 `modifyVolumeStatus` 状态字段会被设置为 `"Infeasible"`。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
      - parameters
    type: object
    x-kab-description-zh: |-
      VolumeAttributesClass 代表的是 CSI 驱动所定义的、可变更的存储卷属性规约。
      此信息可以在动态制备 PersistentVolumeClaim 对象时指定，并可以在制备之后更改 PersistentVolumeClaim 规约时变更。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
  io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET:
    description: |-
      VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver.
      The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the
      PersistentVolumeClaim spec after provisioning.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      driverName:
        description: Name of the CSI driver. This field is immutable. The value must
          be a valid qualified name.
        minLength: 1
        type: string
        x-kab-description-zh: CSI 驱动的名称。此字段不可变更。字段值必须是合法的限定名。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttributesClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      parameters:
        additionalProperties:
          type: string
        description: |-
          `parameters` hold volume attributes defined by the CSI driver.
          These values are opaque to the Kubernetes and are passed directly to the CSI driver.
          The underlying storage provider supports changing these attributes on an existing volume,
          however the parameters field itself is immutable.
          To invoke a volume update, a new VolumeAttributesClass should be created with new parameters, and
          the PersistentVolumeClaim should be updated to reference the new VolumeAttributesClass.

          This field is required and must contain at least one key/value pair.
          The keys cannot be empty, and the maximum number of parameters is 512, with a cumulative max size of 256K.
          If the CSI driver rejects invalid parameters, the target PersistentVolumeClaim will be set to an `"Infeasible"`
          state in the `modifyVolumeStatus` field.
        maxProperties: 512
        minProperties: 1
        type: object
        x-kab-description-zh: |-
          `parameters` 保存由 CSI 驱动所定义的卷属性。
          所定义的值对于 Kubernetes 而言是不透明的，会被直接传递给 CSI 驱动。
          下层的存储驱动允许更改已有卷上的这些属性设置值，但是 `parameters` 字段本身是不可变更的。
          如果要触发存储卷更新，应该创建包含新的参数的 VolumeAttributesClass，并更新 PersistentVolumeClaim
          令其引用新的 VolumeAttributesClass 对象。

          此字段是必须设置的，并且至少包含一个键值对。
          键名部分不可以为空，参数的最大个数为 512 个，总体尺寸不可超过 256 KB。
          如果 CSI 拒绝了非法的参数设置，则目标 PersistentVolumeClaim 的 `modifyVolumeStatus` 状态字段会被设置为 `"Infeasible"`。
    required:
      - apiVersion
      - driverName
      - kind
      - metadata
      - parameters
    type: object
    x-kab-description-zh: |-
      VolumeAttributesClass 代表的是 CSI 驱动所定义的、可变更的存储卷属性规约。
      此信息可以在动态制备 PersistentVolumeClaim 对象时指定，并可以在制备之后更改 PersistentVolumeClaim 规约时变更。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
  io.k8s.api.storage.v1alpha1.VolumeAttributesClass.UPDATE:
    description: |-
      VolumeAttributesClass represents a specification of mutable volume attributes defined by the CSI driver.
      The class can be specified during dynamic provisioning of PersistentVolumeClaims, and changed in the
      PersistentVolumeClaim spec after provisioning.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttributesClass
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      VolumeAttributesClass 代表的是 CSI 驱动所定义的、可变更的存储卷属性规约。
      此信息可以在动态制备 PersistentVolumeClaim 对象时指定，并可以在制备之后更改 PersistentVolumeClaim 规约时变更。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
  io.k8s.api.storage.v1alpha1.VolumeAttributesClassList:
    description: VolumeAttributesClassList is a collection of VolumeAttributesClass
      objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of VolumeAttributesClass objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
        type: array
        x-kab-description-zh: VolumeAttributesClass 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttributesClassList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: VolumeAttributesClassList 是一个 VolumeAttributesClass 对象的列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttributesClassList
        version: v1alpha1
  io.k8s.api.storage.v1beta1.VolumeAttachment.CREATE:
    description: |-
      The intent to attach or detach the specified volume to/from the specified Node.
      VolumeAttachment objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。对象名称必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec'
        description: |-
          Specification of the desired attach/detach volume behavior.
          Populated by the Kubernetes system. This field cannot be updated.
        x-kab-description-zh: |-
          与挂接和解除挂接存储卷的预期行为有关的规约。
          此字段由 Kubernetes 系统来填充。
          字段不支持变更操作。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: |-
      此资源用来表达要将指定卷挂接（Attach）到指定节点或者将其与指定节点解除挂接（Detach）的意图。
      VolumeAttachment 是集群作用域的对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachment
        version: v1beta1
  io.k8s.api.storage.v1beta1.VolumeAttachment.GET:
    description: |-
      The intent to attach or detach the specified volume to/from the specified Node.
      VolumeAttachment objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSpec'
        description: |-
          Specification of the desired attach/detach volume behavior.
          Populated by the Kubernetes system. This field cannot be updated.
        x-kab-description-zh: |-
          与挂接和解除挂接存储卷的预期行为有关的规约。
          此字段由 Kubernetes 系统来填充。
          字段不支持变更操作。
      status:
        $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentStatus'
        description: |-
          Status of the VolumeAttachment request.
          Populated by the entity completing the attach or detach operation, i.e. the external-attacher.
        x-kab-description-zh: VolumeAttachment 请求的状态。由完成挂接/解除挂接操作的实体（如 `external-attacher`）来填充。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: |-
      此资源用来表达要将指定卷挂接（Attach）到指定节点或者将其与指定节点解除挂接（Detach）的意图。
      VolumeAttachment 是集群作用域的对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachment
        version: v1beta1
  io.k8s.api.storage.v1beta1.VolumeAttachment.UPDATE:
    description: |-
      The intent to attach or detach the specified volume to/from the specified Node.
      VolumeAttachment objects are non-namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachment
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        x-kab-description-zh: 标准的对象元数据。
    required:
      - apiVersion
      - kind
      - metadata
    type: object
    x-kab-description-zh: |-
      此资源用来表达要将指定卷挂接（Attach）到指定节点或者将其与指定节点解除挂接（Detach）的意图。
      VolumeAttachment 是集群作用域的对象。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachment
        version: v1beta1
  io.k8s.api.storage.v1beta1.VolumeAttachmentList:
    description: A list of VolumeAttachment objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storage.k8s.io/v1beta1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of VolumeAttachment objects.
        items:
          $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachment.GET'
        type: array
        x-kab-description-zh: 包含 VolumeAttachment 对象的一个列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - VolumeAttachmentList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 VolumeAttachment 对象的一个列表。
    x-kubernetes-group-version-kind:
      - group: storage.k8s.io
        kind: VolumeAttachmentList
        version: v1beta1
  io.k8s.api.storage.v1beta1.VolumeAttachmentSource:
    description: |-
      A volume that should be attached. Only PersistenVolumes can be attached via external attacher.
      Exactly one member can be set.
    properties:
      inlineVolumeSpec:
        $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeSpec'
        description: |-
          Information for attaching a persistent volume defined by a Pod's inline VolumeSource.
          This field is populated only for the `CSIMigration` feature.
          It contains translated fields from a Pod's inline VolumeSource to a PersistentVolumeSpec.
          This field is Beta level and is only honored by servers that enabled the `CSIMigration` feature.
        x-kab-description-zh: |-
          关于挂接通过 Pod 内联的 VolumeSource 所定义的持久卷的信息。
          字段中包含从 Pod 内联 VolumeSource 所翻译而来的 PersistentVolumeSpec 配置。
          只有 `CSIMigration` 特性被启用时会填充和处理此字段。
      persistentVolumeName:
        description: |-
          Name of the persistent volume to attach. The name must be a valid DNS subdomain.
          This must be specified when the `CSIMigration` feature gate is not enabled.
        type: string
        x-kab-description-zh: |-
          要挂接的持久卷的名称。此名称必须是合法的 DNS 子域名。
          当未启用 `CSIMigration` 特性时，必须设置此字段。
    required:
      - persistentVolumeName
    type: object
    x-kab-description-zh: |-
      要挂载的一个存储卷。只有 PersistenVolume 存储卷可以通过外部挂接装置（External Attacher）挂接。
      结构中字段只能设置其一。
  io.k8s.api.storage.v1beta1.VolumeAttachmentSpec:
    description: The specification of a VolumeAttachment request.
    properties:
      attacher:
        description: |-
          The name of the volume driver that must handle this request.
          This is the name returned by `GetPluginName()`. The value must be a valid DNS subdomain.
        maxLength: 63
        minLength: 1
        type: string
        x-kab-description-zh: |-
          必须处理此请求的卷驱动的名称。
          此名称由 `GetPluginName()` 调用返回，字符串必须是合法的 DNS 子域名。
      nodeName:
        description: The node that the volume should be attached to. The value must
          be a valid DNS subdomain.
        minLength: 1
        type: string
        x-kab-description-zh: 此卷要挂接到的节点的名称。字符串必须是合法的 DNS 子域名。
      source:
        $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeAttachmentSource'
        description: The volume that should be attached.
        x-kab-description-zh: 要被挂接的卷。
    required:
      - attacher
      - nodeName
      - source
    type: object
    x-kab-description-zh: VolumeAttachment 请求的规约。
  io.k8s.api.storage.v1beta1.VolumeAttachmentStatus:
    description: The status of a VolumeAttachment request.
    properties:
      attachError:
        $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeError'
        description: |-
          The last error encountered during attach operation, if any.
          This field must only be set by the entity completing the attach operation, i.e.
          the external-attacher.
        x-kab-description-zh: |-
          在执行挂接操作时遇到的最后一个错误，如果有的话。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
      attached:
        description: |-
          Indicates the volume is successfully attached.
          This field must only be set by the entity completing the attach operation, i.e.
          the external-attacher.
        type: boolean
        x-kab-description-zh: |-
          表明卷已被成功挂接。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
      attachmentMetadata:
        additionalProperties:
          type: string
        description: |-
          Upon successful attach operation, this field is populated with information returned by the
          `attach` operation that must be passed into subsequent `WaitForAttach` or `Mount` calls.
          This field must only be set by the entity completing the attach operation, i.e.
          the external-attacher. The maximum size of the map is 256 KB.
        type: object
        x-kab-description-zh: |-
          在成功完成挂接操作之后，此字段中会被填充 `attach` 操作所返回的信息。
          这些信息必须被传递给后续的 `WaitForAttach()` 或者 `Mount()` 调用。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
          此映射的最大长度是 256 KB。
      detachError:
        $ref: '#/definitions/io.k8s.api.storage.v1beta1.VolumeError'
        description: |-
          The last error encountered during detach operation, if any.
          This field must only be set by the entity completing the detach operation, i.e. the
          external-attacher.
        x-kab-description-zh: |-
          在执行解除挂接操作时遇到的最后一个错误，如果有的话。
          此字段必须只能由扶着完成挂接操作的实体来设置，也就是 `external-attacher` 组件。
    required:
      - attached
    type: object
    x-kab-description-zh: VolumeAttachment 请求的状态。
  io.k8s.api.storage.v1beta1.VolumeError:
    description: An error encountered during a volume operation.
    properties:
      message:
        description: |-
          String detailing the error encountered during `attach` or `detach` operation.
          This string may be logged, so it should not contain sensitive information.
        maxLength: 1024
        type: string
        x-kab-description-zh: |-
          字符串字段，给出 `attach` 或 `detach` 操作时遇到的错误。
          此字符串可能会被记录到日志中，所以其中不应该包含敏感信息。
      time:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Time the error was encountered.
        x-kab-description-zh: 错误发生的时间。
    type: object
    x-kab-description-zh: 在执行卷操作时遇到的错误。
  io.k8s.api.storage.v1beta1.VolumeNodeResources:
    description: A set of resource limits for the scheduling of volumes.
    properties:
      count:
        description: |-
          Maximum number of unique volumes managed by the CSI driver that can be used on a Node.
          A volume that is both attached and mounted on a Node is considered to be used once, not twice.
          The same rule applies for a unique volume that is shared among multiple Pods on the same Node.
          If this field is not specified, then the supported number of volumes on this Node is unbounded.
        format: int32
        type: integer
        x-kab-description-zh: |-
          此 CSI 驱动所管理的各不相同的存储卷中，能够在同一节点上使用的最大个数。
          被挂接到节点上并且已被挂载的卷被视为使用了一次，而不是两次。
          对于被同一个节点上多个 Pod 共享的卷而言，适用同样的规则。
          如果此字段没有设置，则对在此节点上可以支持的卷数没有限制。
    type: object
    x-kab-description-zh: 调度存储卷时要满足的一组资源约束。
  io.k8s.api.storagemigration.v1alpha1.GroupVersionResource:
    description: The names of the group, the version, and the resource.
    properties:
      group:
        description: The name of the group.
        type: string
        x-kab-description-zh: 组名称。
      resource:
        description: The name of the resource.
        type: string
        x-kab-description-zh: 资源名称。
      version:
        description: The name of the version.
        type: string
        x-kab-description-zh: 版本名称。
    type: object
    x-kab-description: 组名、版本号以及资源名。
  io.k8s.api.storagemigration.v1alpha1.MigrationCondition:
    description: Describes the state of a migration at a certain point.
    properties:
      lastUpdateTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: The last time this condition was updated.
        x-kab-description-zh: 状况上次被变更的时间。
      message:
        description: A human readable message indicating details about the transition.
        type: string
        x-kab-description-zh: 一条供人类阅读的消息，给出状况变化的详细信息。
      reason:
        description: The reason for the condition's last transition.
        type: string
        x-kab-description-zh: 关于状况最近一次变更的原因。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of the condition.
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - type
      - status
    type: object
    x-kab-description: 此结构描述迁移在某个时间点的状态。
  io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.CREATE:
    description: StorageVersionMigration represents a migration of stored data to
      the latest storage version.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storagemigration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageVersionMigration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec'
        description: Specification of the migration.
        x-kab-description-zh: 迁移的规约部分。
      status:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus'
        description: Status of the migration.
        x-kab-description-zh: 迁移的状态部分。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: StorageVersionMigration 代表的是已存储的数据向最新存储版本的一次迁移。
    x-kubernetes-group-version-kind:
      - group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
  io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET:
    description: StorageVersionMigration represents a migration of stored data to
      the latest storage version.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storagemigration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageVersionMigration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec'
        description: Specification of the migration.
        x-kab-description-zh: 迁移的规约部分。
      status:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus'
        description: Status of the migration.
        x-kab-description-zh: 迁移的状态部分。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: StorageVersionMigration 代表的是已存储的数据向最新存储版本的一次迁移。
    x-kubernetes-group-version-kind:
      - group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
  io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.UPDATE:
    description: StorageVersionMigration represents a migration of stored data to
      the latest storage version.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storagemigration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageVersionMigration
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. This name must be a valid DNS subdomain
          name.
        x-kab-description-zh: 标准的对象元数据。`name` 必须是合法的 DNS 子域名。
      spec:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec'
        description: Specification of the migration.
        x-kab-description-zh: 迁移的规约部分。
      status:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus'
        description: Status of the migration.
        x-kab-description-zh: 迁移的状态部分。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: StorageVersionMigration 代表的是已存储的数据向最新存储版本的一次迁移。
    x-kubernetes-group-version-kind:
      - group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
  io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationList:
    description: StorageVersionMigrationList is a collection of storage version migrations.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - storagemigration.k8s.io/v1alpha1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of StorageVersionMigration
        items:
          $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        type: array
        x-kab-description: StorageVersionMigration 对象的列表。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      kind:
        description: A string value representing the REST resource.
        enum:
          - StorageVersionMigrationList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: StorageVersionMigrationList 包含一组存储版本迁移记录。
    x-kubernetes-group-version-kind:
      - group: storagemigration.k8s.io
        kind: StorageVersionMigrationList
        version: v1alpha1
  io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationSpec:
    description: Spec of the storage version migration.
    properties:
      continueToken:
        description: |-
          The token used in the list options to get the next chunk of objects to migrate.
          When the `.status.conditions` indicates the migration is "Running", users can use this token to check the progress of the migration.
        type: string
        x-kab-description-zh: |-
          list 选项中所使用的令牌，用来读取要迁移的下一批次对象。
          当 `.status.conditions` 表明迁移处于 "Running" 状态时，用户可以使用此令牌来检视迁移的进度。
      resource:
        $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.GroupVersionResource'
        description: The resource that is being migrated. The migrator sends requests
          to the endpoint serving the resource. Immutable.
        x-kab-description-zh: 正在被迁移的资源。迁移组件将请求发送到提供此资源的端点。此字段不可被变更。
    required:
      - resource
    type: object
    x-kab-description-zh: 存储版本迁移的规约。
  io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationStatus:
    description: Status of the storage version migration.
    properties:
      conditions:
        description: The latest available observations of the migration's current
          state.
        items:
          $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.MigrationCondition'
        type: array
        x-kab-description-zh: 对当前迁移状态的最近一次观测结果。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
      resourceVersion:
        description: |-
          ResourceVersion to compare with the GC cache for performing the migration.
          This is the current resource version of given group, version and resource when kube-controller-manager first observes
          this StorageVersionMigration resource.
        type: string
        x-kab-description-zh: |-
          执行迁移期间用来与 GC 缓存进行比较用的资源版本信息。
          字段值为 kube-controller-manager 第一次监测到此 StorageVersionMigration 资源时给定组、版本和资源当时的资源版本。
    type: object
    x-kab-description-zh: 存储版本迁移的状态。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition:
    description: A column for server side printing.
    properties:
      description:
        description: A human readable description of the column.
        type: string
        x-kab-description-zh: 关于列的描述，内容是人类可读的字符串。
      format:
        description: |-
          An OpenAPI type definition for this column. The `"name"` format is applied to the primary
          identifier column to assist in clients identifying column for the resource name.
        enum:
          - byte
          - date
          - date-time
          - double
          - float
          - int32
          - int64
          - password
        type: string
        x-kab-description-zh: |-
          此列对应的 OpenAPI 数据类型定义。对于资源的主标识符字段，会使用 `"name"` 格式，
          以便客户端能够识别哪个列对应资源名称。
      jsonPath:
        description: |-
          A simple JSON path (i.e. with array notation) which is evaluated against each custom resource
          to produce the value for this column. A valid JSON path always starts with `'.'`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          一个简单的 JSON 路径（即，带有数组符号）字符串。应用到各个自定义资源后，得到对应此列的值。
          合法的 JSON 字符串总是以 `'.'` 开头。
      name:
        description: A human readable name for the column.
        minLength: 1
        type: string
        x-kab-description-zh: 字段的人类可读的名称。
      priority:
        description: |-
          An integer defining the relative importance of this column compared to others.
          Lower numbers are considered higher priority. Columns that may be omitted in limited space
          scenarios should be given a priority greater than 0.
        format: int32
        type: integer
        x-kab-description-zh: |-
          定义此列与其他列相比较时相对重要性的一个整数。
          数字较小意味着优先级较高。对输出区域有限时可以忽略的列，此字段值可以设置为大于 0 的整数。
      type:
        description: An OpenAPI type definition for this column.
        enum:
          - boolean
          - date
          - integer
          - number
          - string
        minLength: 1
        type: string
        x-kab-description-zh: 此字段对应的 OpenAPI 数据类型定义。
    required:
      - jsonPath
      - name
      - type
    type: object
    x-kab-description-zh: 服务器端打印输出的一列。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion:
    description: This describes how to convert different versions of a CustomResource.
    properties:
      strategy:
        description: |-
          The conversion strategy.

          - `"None"` means the converter only change the `"apiVersion"` and would not touch
            any other fields in the CustomResource;
          - `"Webhook"` means that the API server will call an external webhook to do the conversion.
            Additional information is specified in `webhook`.
            This requires `preserveUnknownFields` to be `false` and `spec.conversion.webhook` to be set.

            If `spec.preserveUnknownFields` is `true`, this must be `"None"`.
        enum:
          - None
          - Webhook
        minLength: 1
        type: string
        x-kab-description-zh: |-
          转换策略设置：

          - `"None"`：转换器只改变 `"apiVersion"`，不会触碰 CustomResource 的其它任何字段；
          - `"Webhook"`：API 会调用外部的 Webhook 来完成转换。额外所需的信息通过 `webhook` 设置。
            使用此值时要求自定义资源的 `preserveUnknownFields` 为 `false` 并且要设置
            `spec.conversion.webhook` 字段。

          如果 `spec.preserveUnknownFields` 为 `true`，字段只能设置为 `"None"`.
      webhook:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion'
        description: |-
          This describes how to call the conversion webhook.
          Required when `strategy` is set to `"Webhook"`.
        x-kab-description-zh: 此字段描述如何调用转换用的 Webhook。当 `strategy` 被设置为 `"Webhook"`
          时必须设置。
    required:
      - strategy
    type: object
    x-kab-description-zh: 此字段描述如何转换不同版本的 CustomResource。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.CREATE:
    description: A resource that should be exposed on the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiextensions.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CustomResourceDefinition
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: |-
          Standard object metadata.
          The name MUST be in the format `"<.spec.names.plural>.<.spec.group>"`.
          The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label.
        x-kab-description-zh: |-
          标准的对象元数据。
          `name` 字段的格式必须是 `"<.spec.names.plural>.<.spec.group>"`。
          `namespace` 也是必须设置的。如果设置了 `clusterName`，则所给的值必须是合法的 DNS 标签。
      spec:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec'
        description: How the user wants the resources to appear.
        x-kab-description-zh: 用户期望资源的呈现状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 一个要在 API 服务器上公开的资源类型。
    x-kubernetes-group-version-kind:
      - group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET:
    description: A resource that should be exposed on the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiextensions.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CustomResourceDefinition
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata.
        x-kab-description-zh: 标准的对象元数据。
      spec:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec'
        description: How the user wants the resources to appear.
        x-kab-description-zh: 用户期望资源的呈现状态。
      status:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus'
        description: The actual state of the CustomResourceDefinition.
        x-kab-description-zh: CustomResourceDefinition 的实际状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: 一个要在 API 服务器上公开的资源类型。
    x-kubernetes-group-version-kind:
      - group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE:
    description: A resource that should be exposed on the API server.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiextensions.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CustomResourceDefinition
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: |-
          Standard object metadata.
          The name MUST be in the format `"<.spec.names.plural>.<.spec.group>"`.
          The `namespace` must be specified. The `clusterName`, if specified, must be a valid DNS label.
        x-kab-description-zh: |-
          标准的对象元数据。
          `name` 字段的格式必须是 `"<.spec.names.plural>.<.spec.group>"`。
          `namespace` 也是必须设置的。如果设置了 `clusterName`，则所给的值必须是合法的 DNS 标签。
      spec:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec'
        description: How the user wants the resources to appear
        x-kab-description-zh: 用户期望资源的呈现状态。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: 一个要在 API 服务器上公开的资源类型。
    x-kubernetes-group-version-kind:
      - group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition:
    description: Details for the current condition of a resource.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: Human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: Unique, one-word, CamelCase reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因，采用唯一的、驼峰拼写单个单词的形式。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          The type of the condition.

          - `"Established"`: The resource has become active.
            A resource is established when all names are accepted without a conflict for the first time.
            A resource stays established until deleted, even during a later `"NamesAccepted"`
            due to changed names. Note that not all names can be changed.
          - `"NamesAccepted"`: The names chosen for this CustomResourceDefinition do not conflict with
            others in the group and are therefore accepted.
          - `"NoStructuralSchema"`: This means that one or more OpenAPI schema is not structural.
            A schema is structural if it specifies types for all values, with the only exceptions of
            those with `"x-kubernetes-int-or-string: true"`
            (for fields which can be either integer or string),
            or `"x-kubernetes-preserve-unknown-fields: true"` (for raw, unspecified JSON values).
            In a structural schema, there is no `type`, `additionalProperties`, `nullable` or
            `x-kubernetes-*` vendor extensions specified under `allOf`, `anyOf`, `oneOf` or `not`.
            In the v1 API version, non-structural schemas are not allowed.
          - `"Terminating"`: This means the CustomResourceDefinition has been deleted and is cleaning up.
          - `"KubernetesAPIApprovalPolicyConformant"`: This indicates that an API in `"*.k8s.io"` or
            `"*.kubernetes.io"` is or is not approved.
            For CRDs outside tohse groups, this condition will not be set.
            For CRDs inside those groups, the condition will be true if
            `.metadata.annotations["api-approved.kubernetes.io"]` is set to a URL, othersise it will be false.
        enum:
          - Established
          - KubernetesAPIApprovalPolicyConformant
          - NamesAccepted
          - NoStructuralSchema
          - Terminating
        minLength: 1
        type: string
        x-kab-description-zh: |-
          状况的类型。

          - `"Established"`：资源已被启用。当所有的名字都被接受并且没有发生冲突时，资源进入此状况。
            此状况会一直保持，直到被删除位置，甚至在后续因为更改名称而发生 `"NamesAccepted"` 也如此。
            注意并不是所有的名字都可以变更。
          - `"NamesAccepted"`：为此 CustomResourceDefinition 所选择的名称与 API 组中其他资源没有冲突，
            因而被接受。
          - `"NoStructuralSchema"`：资源的 OpenAPI 模式定义中至少有一个是非结构化的。
            如果模式定义中为所有的取值都指定了数据类型，则认为模式定义是结构化的。
            唯一的例外是 `"x-kubernetes-int-or-string: true"`（用于表达既可是整数也可是字符串的字段）或者
            `"x-kubernetes-preserve-unknown-fields: true"`（用于原生的、未作规约的 JSON 值）。
            在结构化的模式定义中，在 `allOf`、`anyOf`、`oneOf` 或者 `not` 之下没有 `type`、
            `additionalProperties`、`nullable` 或者 `x-kubernetes-*` 这类厂商扩展。
            API 的 v1 版本中，不允许使用非结构化的模式定义。
          - `"Terminating"`：表示此 CustomResourceDefinition 已经被删除，处于清理过程中。
          - `"KubernetesAPIApprovalPolicyConformant"`：表明位于 `"*.k8s.io"` 或 `"*.kubernetes.io"`
            组的定义是否已经被批准。对于不在这类 API 组中的 CRD，不会设置此状况。
            若 CRD 位于这些 API 组中，如果 `.metadata.annotations["api-approved.kubernetes.io"]`
            被设置为一个 URL 值，则此状况为 `"True"`，否则此状况的状态为 `"False"`。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: 资源当前状况的详细信息。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList:
    description: A list of CustomResourceDefinition objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiextensions.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of CustomResourceDefinition objects.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
        type: array
        x-kab-description-zh: 包含 CustomResourceDefinition 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - CustomResourceDefinitionList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 CustomResourceDefinition 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apiextensions.k8s.io
        kind: CustomResourceDefinitionList
        version: v1
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames:
    description: The names to serve this CustomResourceDefinition.
    properties:
      categories:
        description: |-
          A list of grouped resources this custom resource belongs to (e.g. `"all"`).
          This is published in API discovery documents, and used by clients to support invocations like
          `kubectl get all`. Each entry must be a valid DNS label.
        items:
          minLength: 1
          type: string
        type: array
        x-kab-description-zh: |-
          此自定义组员所述的资源组（例如，`"all"`）。
          此信息会被发布在 API 发现文档之中，便于客户端执行 `kubectl get all` 这类操作。
          此列表字段中的每个元素都必须是一个合法的 DNS 标签。
        x-kubernetes-list-type: atomic
      kind:
        description: |-
          A string value representing the REST resource.
          The string can be mixed case, but should other wise be a valid DNS label.
          The value must be different from `listKind`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          代表 REST 资源的字符串值。此字符串可以混用大小写字母。如果全是小写字母，则必须是一个合法的 DNS 标签。
          字段值必须与 `listKind` 值不同。
      listKind:
        description: |-
          The serialized `kind` of the list for this resource.
          The string can be mixed case, but should otherwise be a valid DNS label.
          The value must be different from `kind`.
          Defaults to "`kind`List".
        minLength: 1
        type: string
        x-kab-description-zh: |-
          此资源的列表被序列化时对应的 `kind`。
          此字符串可以混用大小写字母。如果全是小写字母，则必须是一个合法的 DNS 标签。
          字段值必须与 `kind` 值不同。默认为 `"<kind>List"`。
      plural:
        description: |-
          The plural name of the resource to serve.
          The custom resources are served under `"/apis/<group>/<version>/.../<plural>"`.
          It must match the name of the CustomResourceDefinition (in the form `"<names.plural>.<group>"`).
          Must be all lowercase. The value must be a valid DNS label.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          要提供的资源的复数形式名称。
          自定义资源会在 `"/apis/<group>/<version>/.../<plural>"` 下提供出来。
          字段的值必须与 CustomResourceDefinition 的名字匹配（格式为 `"<names.plural>.<group>"`）。.
          字符串必须全小写，并且是合法的 DNS 标签。
      shortNames:
        description: |-
          资源的短名称。所给的名称会通过 API 发现文档公开出来，并且客户端用来支持类似
          `kubectl get <shortname>` 这种调用。数组中每个元素都必须是全小写字母的字符串，
          并且都是合法的 DNS 标签。
        items:
          type: string
        type: array
        x-kubernetes-list-type: atomic
      singular:
        description: |-
          The singular name of the resource. It must be all lowercase and valid DNS label.
          Defaults to lowercased `kind`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          资源的单数名称。字段值必须是全小写字母，并且是合法的 DNS 标签。
          默认为 `kind` 取值的小写字母形式。
    required:
      - kind
      - listKind
      - plural
      - singular
    type: object
    x-kab-description-zh: 提供此 CustomResourceDefinition 类资源时要使用的名称。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionSpec:
    description: This describes how a user wants their resource to appear.
    properties:
      conversion:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion'
        description: The conversion settings for the CRD.
        x-kab-description-zh: CRD 的版本转换设置。
      group:
        description: |-
          The API group of the defined custom resource.
          The custom resources are served under `"/apis/<group>/..."`.
          Must match the name of the CustomResourceDefinition (in the form `"<names.plural>.<group>"`).
          The value must be a valid DNS subdomain and it must contain at least one dot.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          所定义的自定义资源的 API 组名称。
          自定义资源会在 `"/apis/<group>/..."` 路径下向用户提供。
          必须与 CustomResourceDefinition 的名称相符（格式为 `"<names.plural>.<group>"`）。
          字符串值必须是合法的 DNS 子域名，并且至少包含一个句点 `'.'`。
      names:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames'
        description: The resource and kind names for the custom resource.
        x-kab-description-zh: 自定义资源的资源与类别名称。
      preserveUnknownFields:
        default: false
        description: |-
          This indicates that object fields which are not specified in the OpenAPI schema should be
          preserved when persisting to storage.
          `apiVersion`, `kind`, `metadata` and known fields inside `metadata` are always preserved.
          This field is *DEPRECATED* in favor of setting `x-preserve-unknown-fields` to `true`
          in `spec.versions[*].schema.openAPIV3Schema`.
          If this field is set to `true`, the OpenAPI schema is mandatory.
          If this field is nil or `false`, the OpenAPI schema is required for the served versions,
          or else all fields may get pruned.
          This field must be `false` in order to use defaults in the OpenAPI schema.
        type: boolean
        x-kab-description-zh: |-
          此字段用来表明对象被写入持久性存储时，需要保留其未在 OpenAPI 模式定义中给出规约的对象字段。
          `apiVersion`、`kind`、`metadata` 以及 `metadata` 中已知的字段都总是会被保留。

          此字段已**被弃用**，建议的做法是在 `spec.versions[*].schema.openAPIV3Schema` 中将
          `x-preserve-unknown-fields` 设置为 `true`。
          如果此字段被设置为 `true`，则 OpenAPI 模式定义是必需的。
          如果此字段未设置或者为 `false`，则需要为服务支持的版本提供 OpenAPI 模式定义，
          否则所有字段都会被裁剪掉。
          此字段必须为 `false` 才能使用 OpenAPI 模式定义中给出的默认值。
      scope:
        description: This indicates whether the defined custom resource is cluster-
          or namespace-scoped.
        enum:
          - Cluster
          - Namespaced
        type: string
        x-kab-description-zh: 此字段表明所定义的自定义资源是集群作用域的还是名字空间作用域的。
      versions:
        description: |-
          The list of all supported versions for this resource.
          Version names are used to compute the order in which served versions are listed in API discovery.
          If the version string is 'kube-like', it will sort above non 'kube-like' version strings,
          which are ordered lexicographically.
          A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version),
          then optionally the string '`alpha`' or '`beta`' and another number (the minor version).
          These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as
          '`beta`' or '`alpha`'), and then by comparing major version, then minor version.
          An example sorted list of versions:
          `"v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10"`.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          字段列举的是此自定义资源的所有被支持的版本。
          版本名称用来决定在 API 发现时列举支持的版本时的顺序。
          如果版本字符串与 Kubernetes 版本号形式类似，则对应的版本会被排在其他类型版本字符串之前。
          其他字符串形式的版本号会按字典序排序。

          Kubernetes 版本号形式以字母 `'v'` 开头，紧接一个数字（主版本号），后面可以根据选择接上字符串
          `"alpha"` 或 `"beta"` 以及另一个数字（次版本号）。
          这类版本号的排序首先按 `GA > beta > alpha` 的规则排序（其中 `GA` 是一个没有 `"alpha"` 或
          `"beta"` 后缀的版本），之后再根据主版本和此版本编号排序。
          版本列表的一个例子：
          `"v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10"`。
        x-kubernetes-list-type: atomic
    required:
      - group
      - names
      - scope
      - versions
    type: object
    x-kab-description-zh: 此结构描述用户期望其资源呈现出来的样子。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionStatus:
    description: The state of the CustomResourceDefinition.
    properties:
      acceptedNames:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames'
        description: |-
          The names that are actually used to serve discovery.
          They may be different than the `names` in the `spec`.
        x-kab-description-zh: |-
          支持 API 发现时实际使用的名称。
          此字段值可能与 `spec` 中给出的 `names` 不同。
      conditions:
        description: The state for particular aspect of the CustomResourceDefinition.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionCondition'
        type: array
        x-kab-description-zh: CustomResourceDefinition 的某一方面的状态。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
      storedVersions:
        description: |-
          A list of all versions of CustomResources that were ever persisted.
          Tracking these versions allows a migration path for stored versions in etcd.
          The field is mutable so a migration controller can finish a migration to another version
          (ensuring no old objects are left in the storage), and then remove the rest of the versions
          from this list.
          Versions may not be removed from `spec.versions` while they exist in this list.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          持久保存资源时使用过的自定义资源的版本。
          对这些版本进行跟踪有助于为 etcd 中存储的各个版本构建迁移路径。
          此字段是可变更的，所以迁移控制器可以将资源迁移到其他版本后（确保存储中没有老的对象），
          去掉此列表中的其余版本。
          如果某一版本仍然存在于此列表中，那么该版本就不可以从 `spec.versions` 中去除。
        x-kubernetes-list-type: atomic
    required:
      - acceptedNames
      - storedVersions
    type: object
    x-kab-description-zh: CustomResourceDefinition 的状态。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion:
    description: A version for CustomResourceDefinition.
    properties:
      additionalPrinterColumns:
        description: |-
          Additional columns returned in table output.
          If no columns are specified, a single column displaying the age of the custom resource is used.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceColumnDefinition'
        type: array
        x-kab-description-zh: |-
          在表格形式输出时，要打印的列（字段）。
          如果没有指定任何列（字段），则只会打印一列，给出自定义资源的存在时长。
        x-kubernetes-list-type: atomic
      deprecated:
        default: false
        description: |-
          This indicates this version of the custom resource API is deprecated.
          When set to `true`, API requests to this version receive a warning header in the server response.
        type: boolean
        x-kab-description-zh: |-
          此字段表明自定义资源 API 的这个版本已被弃用。
          字段设置为 `true` 时，针对此版本的 API 请求会在其服务器响应中收到 `"warning"` HTTP 头部。
      deprecationWarning:
        description: |-
          This overrides the default warning returned to API clients.
          May only be set when `deprecated` is `true`.
          The default warning indicates this version is deprecated and recommends use of
          the newest served version of equal or greater stability, if one exists.
          This string may only contain printable UTF-8 characters.
        maxLength: 256
        minLenght: 1
        type: string
        x-kab-description-zh: |-
          此字段会重载返回给 API 客户端的警告信息。
          只有 `deprecated` 字段取值为 `true` 时才可以设置此字段。
          默认的警告信息会表明此版本已被启用，建议使用稳定性相近或更好的更新版本。
          此字段只能包含可打印的 UTF-8 字符。
      name:
        description: |-
          The version name, e.g. `"v1"`, `"v2beta1"`, etc.
          The custom resources are served under this version at `"/apis/<group>/<version>/..."`
          if `served` is `true`.
          The value must be a valid DNS label and it must be unique among all versions.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          版本名称。例如 `"v1"`、`"v2beta1"` 等。
          如果 `served` 为 `true`，此版本的自定义资源可以在 `"/apis/<group>/<version>/..."` 处访问。
          版本名称字段的内容必须是合法的 DNS 标签，并且在所有版本中唯一。
      schema:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation'
        description: The schema used for validation, pruning, and defaulting of this
          version of the custom resource.
        x-kab-description-zh: 针对此版本的自定义资源，用来执行合法性检查、属性裁剪和默认值设置的模式定义。
      selectableFields:
        description: '`selectableFields` specifies paths to fields that may be used
          as field selectors. A maximum of 8 selectable fields are allowed.'
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField'
        maxItems: 8
        type: array
        x-kab-description-zh: '`selectableFields` 设置的是一些字段的路径，这些路径可以用来作为字段选择符使用。'
        x-kubernetes-list-type": atomic
      served:
        description: A flag enabling/disabling this version to be served via REST
          APIs.
        type: boolean
        x-kab-description-zh: 布尔值字段，用来允许或者禁止通过 REST API 来提供此版本的资源。
      storage:
        description: |-
          This flag indicates that this version should be used when persisting custom resources to storage.
          There must be exactly one version with `storage` set to `true`.
        type: boolean
        x-kab-description-zh: |-
          此布尔值字段用来表明在将自定义资源写入持久存储时，要使用此版本。
          `storage` 设置为 `true` 的版本有且只能有一个。
      subresources:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources'
        description: What subresources this version of the defined custom resource
          have.
        x-kab-description-zh: 所定义的自定义资源的这个版本有哪些子资源。
    required:
      - name
      - served
      - storage
    type: object
    x-kab-description-zh: CustomResourceDefinition 的一个版本。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale:
    description: This defines how to serve the `scale` subresource for CustomResources.
    properties:
      labelSelectorPath:
        description: |-
          The JSON path inside a custom resource that corresponds to `scale.status.selector`.
          Only JSON paths without the array notation are allowed.
          Must be a JSON Path under `.status` or `.spec`.
          Must be set to work with HorizontalPodAutoscaler.
          The field pointed by this JSON path must be a string field (not a complex selector struct)
          which contains a serialized label selector in string form.
          If there is no value under the given path in the custom resource, the `status.selector`
          value in the `/scale` subresource will default to an empty string.
        type: string
        x-kab-description-zh: |-
          字段值为自定义资源内的 JSON 路径，对应于 `scale.status.selector`。
          只有不带数组符号的 JSON 路径才是合法的。所给的 JSON 路径必须位于 `.status` 或者 `.spec` 之下。
          如果希望此自定义资源能够与 HorizontalPodAutoscaler 协同工作，则必须设置此字段。
          JSON 路径所指向的字段必须是一个字符串字段（不可以是复杂的选择算符结构），
          其中包含标签选择算符的序列化字符串。
          如果自定义资源中给定的路径下面没有值，则 `/scale` 子资源中的 `status.selector`
          会默认为空字符串。
      specReplicasPath:
        description: |-
          The JSON path inside a custom resource that corresponds to Scale `spec.replicas`.
          Only JSON paths without the array notation are allowed. Must be a JSON Path under `.spec`.
          If there is no value under the given path in the custom resource, the `/scale` subresource
          will return an error on GET.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          字段值为自定义资源内的 JSON 路径，对应于 Scale 的 `spec.replicas`。
          只有不带数组符号的 JSON 路径才是合法的。所给的 JSON 路径必须位于 `.spec` 之下。
          如果自定义资源中给定的路径下面没有值，则 `/scale` 子资源在被 GET 读取时会出错。
      statusReplicasPath:
        description: |-
          The JSON path inside a custom resource that corresponds to Scale `status.replicas`.
          Only JSON paths without the array notation are allowed. Must be a JSON Path under `.status`.
          If there is no value under the given path in the custom resource, the `status.replicas` value
          in the `/scale` subresource will default to 0.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          字段值为自定义资源内的 JSON 路径，对应于 Scale 的 `status.replicas`。
          只有不带数组符号的 JSON 路径才是合法的。所给的 JSON 路径必须位于 `.status` 之下。
          如果自定义资源中给定的路径下面没有值，则 `/scale` 子资源的 `status.replicas`
          默认为 0。
    required:
      - specReplicasPath
      - statusReplicasPath
    type: object
    x-kab-description-zh: 此结构定义如何为自定义资源提供 `scale` 子资源。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus:
    description: |-
      This defines how to serve the `status` subresource for CustomResources.
      Status is represented by the `.status` JSON path inside a CustomResource.
      When set, the server exposes a `/status` subresource for the custom resource.
      PUT requests to the `/status` subresource take a custom resource object,
      and ignore changes to anything except the status stanza.
      PUT/POST/PATCH requests to the custom resource ignore changes to the `status` stanza
    type: object
    x-kab-description-zh: |-
      此结构定义如何为 CustomResource 提供 `status` 子资源。
      状态通过 CustomResource 内 `.status` JSON 路径来呈现。
      设置了此结构时，服务器会为自定义资源公开 `/status` 子资源。
      对 `/status` 子资源的 PUT 请求需要携带自定义资源对象本身，但对 `status` 之外的变更都会被忽略。
      对自定义资源的 PUT、POST、PATCH 请求会忽略对 `status` 部分的变更。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresources:
    description: The `status` and `scale` subresources for CustomResources.
    properties:
      scale:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceScale'
        description: |-
          This indicates that the custom resource should serve a `/scale` subresource
          that returns an `"autoscaling/v1"` Scale object.
        x-kab-description-zh: 此字段表示此自定义资源会提供 `/scale` 子资源，返回一个 `"autoscaling/v1"`
          的 Scale 对象。
      status:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceSubresourceStatus'
        description: |-
          This indicates the custom resource should serve a `/status` subresource.
          When enabled, requests to the custom resource primary endpoint ignore changes to the `status`
          stanza of the object, requests to the custom resource `/status` subresource ignore changes
          to anything other than the `status` stanza of the object.
        x-kab-description-zh: |-
          此字段表明这个自定义资源要提供 `/status` 子资源服务。
          启用了 `/status` 子资源之后，对自定义资源主端点的请求会忽略其 `status` 部分的内容变化，
          对自定义资源的 `/status` 子资源的请求会忽略 `status` 部分之外的变化。
    type: object
    x-kab-description-zh: 自定义资源的 `status` 和 `scale` 子资源。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceValidation:
    description: A list of validation methods for CustomResources.
    properties:
      openAPIV3Schema:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        description: |-
          The OpenAPI v3 schema to use for validation and pruning.
          If the `status` subresource is enabled, the root of the schema must be a `"object"` and it can
          only contain fields like `"description"`, `"type"`, `"format"`, `"title"`, `"maximum"`,
          `"exclusiveMaximum"`, `"minimum"`, `"exclusiveMinimum"`, `"maxLength"`, `"minLength"`,
          `"pattern"`, `"maxItems"`, `"minItems"`, `"uniqueItems"`, `"multipleOf"`, `"required"`,
          `"items"`, `"properties"`, `"externalDocs"`, `"example"`, `"x-preserve-unknown-fields"`.

          The root element cannot be nullable.
        x-kab-description-zh: |-
          用来执行合法性检查和属性裁剪的 OpenAPI v3 模式定义。
          如果启用了 `status` 子资源，模式定义的跟必须是一个 `"object"`，并且其中只能包含
          `"description"`、`"type"`、`"format"`、`"title"`、`"maximum"`、`"exclusiveMaximum"`、
          `"minimum"`、`"exclusiveMinimum"`、`"maxLength"`、`"minLength"`、`"pattern"`、
          `"maxItems"`、`"minItems"`、`"uniqueItems"`、`"multipleOf"`、`"required"`、
          `"items"`、`"properties"`、`"externalDocs"`、`"example"`、`"x-preserve-unknown-fields"`
          这类字段。
    type: object
    x-kab-description-zh: 对自定义资源进行合法性检查的方法。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation:
    description: Reference to an external resource for extended documentation.
    properties:
      description:
        description: |-
          A short description of the target documentation.
          CommonMark syntax MAY be used for rich text representation.
        type: string
        x-kab-description-zh: |-
          对目标文档的简单描述。
          如果要提供富文本表示，可以使用 CommonMark 语法。
      url:
        description: The URL for the target documentation. Value MUST be in the format
          of a URL.
        type: string
        x-kab-description-zh: 目标文档的 URL。取值必须是 URL 的格式。
    required:
      - url
    type: object
    x-kab-description-zh: 对外部资源的引用，目的是提供更为详细的文档。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON:
    description: |-
      This represents any valid JSON value. These types are supported: `bool`,
      `int64`, `float64`, `string`, `array`, `object` and `none`.'
    x-kab-description-zh: |-
      此字段可以是任何合法的 JSON 值。支持的数据类型包括：`bool`、
      `int64`、`float64`、`string`、`array`、`object` 和 `none`。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps:
    description: A JSON-Schema following Specification Draft 4 (http://json-schema.org/).
    properties:
      $ref:
        description: Reference to another definition in the specification.
        type: string
        x-kab-description-zh: 对规范中其它定义的引用。
      $schema:
        description: Inlined schema for a property.
        type: string
        x-kab-description-zh: 某个属性的内联模式定义。
      additionalItems:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool'
        description: A struct for additional items or a boolean indicating whether
          additional items are allowed.
        x-kab-description-zh: 用来存放额外条目的结构，或者是一个表明是否允许额外的条目的布尔值。
      additionalProperties:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool'
        description: |-
          The map definition of a property or a boolean indicating whether additional properties are allowed.
          This is mutual exclusive to `properties` because otherwise they contradict
          Kubernetes's API convention to ignore unknown fields.
        x-kab-description-zh: |-
          此映射给出一个属性的定义，或者是一个布尔值，表明是否允许额外的属性。
          此字段与 `properties` 是互斥的，因为如果这两个字段都存在，就不符合 Kubernetes API
          忽略未知字段的惯例。
      allOf:
        description: A key indicating the union of all items listed are part of the
          definition.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        type: array
        x-kab-description-zh: 此主键表明所列举的所有条目都是定义的一部分。
      anyOf:
        description: A key indicating the subset of provided items are part of the
          definition.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        type: array
        x-kab-description-zh: 此主键表明所列举的所有条目的子集是定义的一部分。
      default:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
        description: |-
          A default value for undefined object fields. Defaulting is a Beta feature under the
          `CustomResourceDefaulting` feature gate.
          Defaulting requires `spec.preserveUnknownFields` to be false.
        x-kab-description-zh: |-
          为未定义的对象字段提供的默认值。设置默认值的能力是一种 Beta 阶段特性，需要启用
          `CustomResourceDefaulting` 特性门控。
          如果启用此门控，则要求 `spec.preserveUnknownFields` 为 `false`。
      definitions:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        description: A map containing definitions for the current definition.
        type: object
        x-kab-description-zh: JSON 模式给出的定义列表。
      dependencies:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray'
        description: A map containing dependencies on other fields.
        type: object
        x-kab-description-zh: 包含对其他字段的以来的映射。
      description:
        description: Description for current definition.
        type: string
        x-kab-description-zh: 当前定义的文字性说明。
      enum:
        description: An enumeration for the current definition.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
        type: array
        x-kab-description-zh: 当前定义的枚举值。
      example:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSON'
        description: An example for the current definition, in JSON.
        x-kab-description-zh: 以 JSON 格式给出的当前定义的示例。
      exclusiveMaximum:
        description: Whether the `maximum` should include the limit value.
        type: boolean
        x-kab-description-zh: 标示 `maximum` 字段所给的值自身是否合法。
      exclusiveMinimum:
        description: Whether the `minimum` should include the limit value.
        type: boolean
        x-kab-description-zh: 标示 `minimum` 字段所给的值自身是否合法。
      externalDocs:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ExternalDocumentation'
        description: A reference to an external documentation.
        x-kab-description-zh: 对外部文档的引用。
      format:
        description: |-
          `format` is an OpenAPI v3 format string. Unknown formats are ignored.
          The following formats are validated:
          - `bsonobjectid`: a bson object ID, i.e.  a 24 characters hex string
          - `uri`: an URI as parsed by Golang net/url.ParseRequestURI
          - `email`: an email address as parsed by Golang net/mail.ParseAddress
          - `hostname`: a valid representation for an Internet host name, as defined by RFC 1034,
            section 3.1 [RFC1034]
          - `ipv4`: an IPv4 IP as parsed by Golang net.ParseIP
          - `ipv6`: an IPv6 IP as parsed by Golang net.ParseIP
          - `cidr`: a CIDR as parsed by Golang net.ParseCIDR
          - `mac`: a MAC address as parsed by Golang net.ParseMAC
          - `uuid`: an UUID that allows uppercase defined by the regex
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$"`
          - `uuid3`: an UUID3 that allows uppercase defined by the regex
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$"`
          - `uuid4`: an UUID4 that allows uppercase defined by the regex
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$"`
          - `uuid5`: an UUID5 that allows uppercase defined by the regex
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$"`
          - `isbn`: an ISBN10 or ISBN13 number string like `"0321751043"` or `"978-0321751041"`
          - `isbn10`: an ISBN10 number string like `"0321751043"`
          - `isbn13`: an ISBN13 number string like `"978-0321751041"`
          - `creditcard`: a credit card number defined by the regex
            `"^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35d{3})d{11})$"`
            with any non digit characters mixed in
          - `ssn`: a U.S. social security number following the regex `^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$`
          - `hexcolor`: an hexadecimal color code like `"#FFFFFF"`: following the regex
            `^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$`.
          - `rgbcolor`: an RGB color code like rgb like `"rgb(255,255,2559)"`
          - `byte`: base64 encoded binary data
          - `password`: any kind of string
          - `date`: a date string like `"2006-01-02"` as defined by full-date in RFC3339
          - `duration`: a duration string like `"22 ns"` as parsed by Golang `time.ParseDuration`
            or compatible with Scala duration format
          - `datetime`: a date time string like `"2014-12-15T19:30:20.000Z"` as defined by
            `date-time` in RFC3339.
        type: string
        x-kab-description-zh: |-
          `format` 是一个 OpenAPI v3 的 `format` 字符串。无法识别的格式字符串会被忽略。
          以下 `format` 值的字符串会被执行正确性检查：

          - `bsonobjectid`：一个 bson 对象 ID，即一个 24 字符组成的 16 进制字符串
          - `uri`：Golang `net/url.ParseRequestURI` 所能解析的 URI 地址
          - `email`：Golang `net/mail.ParseAddress` 所能解析的 email 地址
          - `hostname`：英特网上主机名的合法呈现形式，如 RFC 1034, section 3.1 所定义
          - `ipv4`：Golang `net.ParseIP` 所能解析的 IPv4 地址
          - `ipv6`：Golang `net.ParseIP` 所能解析的 IPv6 地址
          - `cidr`：Golang `net.ParseCIDR` 所能解析的 CIDR 网段
          - `mac`：Golang `net.ParseMAC` 所能解析的 MAC 地址
          - `uuid`：允许包含大写字母的 UUID 字符串，正则表达式为
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{4}-?[0-9a-f]{12}$"`
          - `uuid3`：允许使用大写字母的 UUID3 字符串，正则表达式为
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?3[0-9a-f]{3}-?[0-9a-f]{4}-?[0-9a-f]{12}$"`
          - `uuid4`：允许使用大写字母的 UUID4 字符串，正则表达式为
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?4[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$"`
          - `uuid5`：允许大写字母的 UUID5 字符串，正则表达式为
            `"(?i)^[0-9a-f]{8}-?[0-9a-f]{4}-?5[0-9a-f]{3}-?[89ab][0-9a-f]{3}-?[0-9a-f]{12}$"`
          - `isbn`： 一个 ISBN10 或 ISBN13 号码字符串，例如 `"0321751043"` 或 `"978-0321751041"`
          - `isbn10`：一个 ISBN10 书号字符串，例如 `"0321751043"`
          - `isbn13`：一个 ISBN13 书号字符串，例如 `"978-0321751041"`
          - `creditcard`：一个信用卡号码字符串，正则表达式为
            `"^(?:4[0-9]{12}(?:[0-9]{3})?|5[1-5][0-9]{14}|6(?:011|5[0-9][0-9])[0-9]{12}|3[47][0-9]{13}|3(?:0[0-5]|[68][0-9])[0-9]{11}|(?:2131|1800|35d{3})d{11})$"`，
            其中可能包含一些非数字字符
          - `ssn`：一个每个社会保险号码字符串，正则表达式为 `^\\d{3}[- ]?\\d{2}[- ]?\\d{4}$`
          - `hexcolor`：一个十六进制表示的颜色代码，如 `"#FFFFFF"`，正则表达式为
            `^#?([0-9a-fA-F]{3}|[0-9a-fA-F]{6})$`.
          - `rgbcolor`：一个 RGB 编码的颜色代码，例如 `"rgb(255,255,2559)"`
          - `byte`：base64 编码的二进制数据
          - `password`：任何形式的字符串
          - `date`：一个类似于 `"2006-01-02"` 的日期字符串，按 RFC3339 `full-date` 标准检查
          - `duration`：一个时长字符串，例如 `"22 ns"`，可由Golang `time.ParseDuration` 解析，
            或者与 Scala 的 duration 格式兼容
          - `datetime`：一个类似于 `"2014-12-15T19:30:20.000Z"` 的日期时间字符串，按 RFC3339
            中的 `date-time` 格式解析检查
      id:
        description: The ID of the current entity.
        type: string
        x-kab-description-zh: 当前实体的 ID。
      items:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray'
      maxItems:
        description: The maximum items in an array.
        format: int64
        type: integer
        x-kab-description-zh: 数组中元素个数上限。
      maxLength:
        description: The maximum length of a string.
        format: int64
        type: integer
        x-kab-description-zh: 字符串的最大长度。
      maxProperties:
        description: The maximum number of properties.
        format: int64
        type: integer
        x-kab-description-zh: 属性个数的上限。
      maximum:
        description: The maximum value of the field.
        format: double
        type: number
        x-kab-description-zh: 字段可取的最大值。
      minItems:
        description: The minimum items in an array.
        format: int64
        type: integer
        x-kab-description-zh: 数组中元素个数下限。
      minLength:
        description: The minimum length of a string.
        format: int64
        type: integer
        x-kab-description-zh: 字符串的最小长度。
      minProperties:
        description: The minimum number of properties.
        format: int64
        type: integer
        x-kab-description-zh: 属性个数的下限。
      minimum:
        description: The minimum value of the field.
        format: double
        type: number
        x-kab-description-zh: 字段可取的最小值。
      multipleOf:
        description: The value should be the multiple of the specified value.
        format: double
        type: number
        x-kab-description-zh: 字段需要能被所给的数字整除。
      not:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        description: Exclude the specified definition.
        x-kab-description-zh: 排除所给的模式定义。
      nullable:
        description: Whether the field can be null value.
        type: boolean
        x-kab-description-zh: 字段是否可以为空。
      oneOf:
        description: A list of schemas to choose from.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        type: array
        x-kab-description-zh: 定义可以选择使用的模式定义之一。
      pattern:
        description: The regular pattern of a field.
        type: string
        x-kab-description-zh: 字段要符合的正则表达式形式。
      patternProperties:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        description: The patterned properties of an object.
        type: object
        x-kab-description-zh: 带正则表达式约束的结构。
      properties:
        additionalProperties:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaProps'
        description: The properties of an object.
        type: object
        x-kab-description-zh: 带属性的映射对象结构。
      required:
        description: List of properties that are required.
        items:
          type: string
        type: array
        x-kab-description-zh: 需要设置的属性的列表。
      title:
        description: A human readable description for the property.
        type: string
        x-kab-description-zh: 对属性的一种人类可读的描述。
      type:
        description: The type of the property.
        type: string
        x-kab-description-zh: 属性的类型。
      uniqueItems:
        description: |-
          A flag indicating whether items are treated as unique in a map.
          This cannot be `true` because the runtime doesn't support it.
        type: boolean
        x-kab-description-zh: |-
          表明是否映射中的元素可以视为唯一。
          此字段不可为 `true`，因为运行时无法提供支持。
      x-kubernetes-embedded-resource:
        description: |-
          This flag indicates that the value is an embedded Kubernetes `runtime.Object`,
          with `TypeMeta` and `ObjectMeta`. The type must be `"object"`.
          It is allowed to further restrict the embedded object.
          `kind`, `apiVersion` and `metadata` are validated automatically.
          `x-kubernetes-preserve-unknown-fields` is allowed to be true, but does not have to be
          if the object is fully specified (up to `kind`, `apiVersion`, `metadata`).
        type: boolean
        x-kab-description-zh: |-
          此扩展属性表明属性值是一个嵌套的 Kubernetes `runtime.Object` 对象，包含 `TypeMeta` 和 `ObjectMeta`。
          字段的类型一定是 `"object"`。进一步对嵌套对象进行约束也是可以的。
          `kind`、`apiVersion` 和 `metadata` 的合法性检查都是自动进行的。
          `x-kubernetes-preserve-unknown-fields` 可以为 `true`，但如果对象不是完全规约的
          （规约中只包含 `kind`、`apiVersion` 和 `metadata`），也可以不是 `true`。
      x-kubernetes-int-or-string:
        description: |-
          This flag indicates that this value is either an integer or a string.
          If this is true, an empty type is allowed and type as child of `"anyOf"` is permitted
          if following one of the following patterns:
          1. `"anyOf": [{"type": "integer"}, {"type": "string"}]`
          1. `"allOf": [{"anyOf": [{"type": "integer"}, {"type": "string"} ...]}]`
        type: boolean
        x-kab-description-zh: |-
          此标志表明字段的值可以是一个整数或者字符串。
          如果设置为 `true`，则可以不直接设置 `type` 属性而直接通过 `"anyOf"` 的下层模式定义设置数据类型。
          前提是字段定义符合以下模式之一：

          1. `"anyOf": [{"type": "integer"}, {"type": "string"}]`
          1. `"allOf": [{"anyOf": [{"type": "integer"}, {"type": "string"} ...]}]`
      x-kubernetes-list-map-keys:
        description: |-
          This annotates an array with the `x-kubernetes-list-type: map` by specifying the keys used
          as the index of the map. This tag MUST only be used on lists that have the
          `"x-kubernetes-list-type`" extension set to `"map"`.
          Also, the values specified for this attribute must be a scalar typed field of the child structure
          (no nesting is supported).
          The properties specified must either be required or have a default value, to ensure
          those properties are present for all list items.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          此标志用来为带有 `x-kubernetes-list-type: map` 属性的数组提供注解，给出可以用来作为映射索引的主键。
          此标志只能用在带有 `"x-kubernetes-list-type"` 扩展，且扩展值为`"map"` 的数组之上。
          此外，此属性的取值列表必须是子级结构的一个标量类型的字段（不支持嵌套结构）。
          所列举的属性还必须是子级结构中必需的或者带有默认值的字段，
          以确保列表的所有条目都带有所列举的属性。
      x-kubernetes-list-type:
        description: |-
          This annotates an array to further describe its topology.
          This extension must only be used on lists and may have 3 possible values:

          1. `"atomic"`(Default): the list is treated as a single entity, like a scalar.
             Atomic lists will be entirely replaced when updated.
             This extension may be used on any type of list (struct, scalar, ...).
          1. `"set"`: Sets are lists that must not have multiple items with the same value.
             Each value must be a scalar, an object with `x-kubernetes-map-type: atomic`
             or an array with `x-kubernetes-list-type: atomic`.
          1. `"map"`: These lists are like maps in that their elements have a non-index key used to
             identify them. Order is preserved upon merge.
             The map tag must only be used on a list with elements of type `"object"`.
        enum:
          - atomic
          - map
          - set
        type: string
        x-kab-description-zh: |-
          此标志用来为数组结构提供注解，用来进一步描述数组的拓扑结构。
          此扩展只能用于数组（列表）数据；标志的取值有三种可能：

          1. `"atomic"`（默认）：整个数组应该视为一个整体，就像一个标量数据一样。
             执行更新操作时，这类数组都会被整体替换。
             此扩展类型可以用在任何类型的列表，包括对象列表、标量列表等。
          1. `"set"`：这是一种不允许重复值存在的列表，可以想象成一个集合。
             每个元素都必须是一个标量值、一个带有 `x-kubernetes-map-type: atomic` 设置的对象，
             或者带有 `x-kubernetes-list-type: atomic` 的数组。
          1. `"map"`：这类列表类似于映射，其中的每个约束都有一个非索引的主键用于标识自身。
             两个列表合并时，元素的顺序不会发生变化。`"map"` 这中设置仅适用于元素为 `"object"`
             类型的列表。
      x-kubernetes-map-type:
        description: |-
          This annotates an object to further describe its topology.
          This extension must only be used when type is `"object"` and may have 2 possible values:

          1. `"granular"`: These maps are actual maps (key-value pairs) and each fields are independent
             from each other (they can each be manipulated by separate actors).
             This is the default behaviour for all maps.
          1. `"atomic"`: the list is treated as a single entity, like a scalar.
             Atomic maps will be entirely replaced when updated.
        enum:
          - atomic
          - granular
        type: string
        x-kab-description-zh: |-
          此标志用来为对象提供注解，进一步描述其拓扑结构。
          只有类型为 `"object"` 时才能使用此扩展。此扩展标志支持两种取值：

          1. `"granular"`：所标注的映射是真实的映射（键值对），各个字段是相互独立的
             （字段可以由不同的主体来操控）。这时所有映射的默认行为。
          1. `"atomic"`：整个映射应被视为一个整体，像一个标量一样。
             这种类型的映射在被更新时要整体替换掉。
      x-kubernetes-preserve-unknown-fields:
        description: |-
          This flag stops the API server decoding step from pruning fields which are not specified
          in the validation schema. This affects fields recursively, but switches back to normal
          pruning behaviour if nested `properties` or `additionalProperties` are specified in the schema.
          This can either be true or undefined. False means forbidden.
        type: boolean
        x-kab-description-zh: |-
          此字段会让 API 服务器在解码阶段不再裁剪未在合法性验证模式定义中给出的字段。
          这一设置会递归地影响下级字段。
          当下级字段的模式定义中包含了 `properties` 或者 `additionalProperties` 时会切回默认的裁剪行为。
          此字段值可以是 `true` 或者未定义。`false` 意味着禁止无法识别的字段。
      x-kubernetes-validations:
        description: |-
          This describes a list of validation rules written in the CEL expression language.
          This field is Alpha-level. Using this field requires the feature gate
          `CustomResourceValidationExpressions` to be enabled.
        items:
          $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule'
        type: array
        x-kab-description-zh: |-
          此标志描述的是一组使用 CEL 表达式语言编写的合法性检查规则。
          此字段处于 Alpha 阶段。使用此字段需要启用 `CustomResourceValidationExpressions` 特性门控。
        x-kubernetes-list-map-keys:
          - rule
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: rule
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: 遵从 [JSON Specification v4](http://json-schema.org/) 规范的
      JSON 模式定义。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrArray:
    description: |-
      A value that can either be a JSONSchemaProps or an array of JSONSchemaProps.
      Mainly here for serialization purposes.
    x-kab-description-zh: |-
      一个可以是 JSONSchemaProps 或者JSONSchemaProps 数组的值。
      定义此类型的目的主要是服务于序列化。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrBool:
    description: A JSONSchemaProps or a boolean value. Defaults to `true` for the
      boolean property.
    x-kab-description-zh: JSONSchemaProps 或者布尔值。布尔值的默认值为 `true`。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.JSONSchemaPropsOrStringArray:
    description: A JSONSchemaProps or a string array.
    x-kab-description-zh: 一个 JSONSchemaProps 或者字符串数组值。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.SelectableField:
    description: SelectableField specifies the JSON path of a field that may be used
      with field selectors.
    properties:
      jsonPath:
        description: |-
          `jsonPath` is a simple JSON path which is evaluated against each custom resource to produce a field selector value.
          Only JSON paths without the array notation are allowed. Must point to a field of type string, boolean or integer.
          Types with enum values and strings with formats are allowed.
          If `jsonPath` refers to absent field in a resource, the jsonPath evaluates to an empty string.
          Must not point to metadata fields.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          `jsonPath` 是一个简单的 JSON 路径字符串，可以针对每个自定义资源求值，进而得到一个字段选择算符值。
          只允许不带数组符号的 JSON 路径。路径必须指向类型为 string、boolean 或者 integer 的字段。
          具有 enum 值的类型以及带有 format 约束的字符串也是可接受的。
          如果 `jsonPath` 引用的是资源中不存在的字段，则 `jsonPath` 的求值结果为空字符串。
          `jsonPath` 不允许指向 `metadata` 下面的字段。
    required:
      - jsonPath
    type: object
    x-kab-description-zh: SelectableField 给出一些字段的 JSON 路径，所选字段可用作字段选择算符。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference:
    description: A reference to a Service.
    properties:
      name:
        description: The name of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 对象的名称。
      namespace:
        description: The namespace of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 对象所在的名字空间。
      path:
        description: |-
          An URL path at which the webhook will be contacted.
          The path must start with a `'/'` and it cannot be `"//"`.
        type: string
        x-kab-description-zh: |-
          指向 Webhook 的 URL 路径。
          此路径必须以 `'/'` 开头，但不可以是 `"//"`。
      port:
        default: 443
        description: An optional service port at which the webhook will be contacted.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 可选字段，用来给出 Webhook 的服务端口。
    required:
      - name
      - namespace
    type: object
    x-kab-description-zh: 对某 Service 的引用。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ValidationRule:
    description: ValidationRule describes a validation rule written in the CEL expression
      language.
    properties:
      fieldPath:
        description: |-
          `fieldPath` represents the field path returned when the validation fails.
          It must be a relative JSON path (i.e. with array notation) scoped to the location of
          this `x-kubernetes-validations` extension in the schema and refer to an existing field.
          e.g. when validation checks if a specific attribute `foo` under a map `testMap`,
          the `fieldPath` could be set to `.testMap.foo`.
          If the validation checks two lists must have unique attributes, the `fieldPath` could be set to
          either of the list: e.g. `.testList`. It does not support list numeric index.
          It supports child operation to refer to an existing field currently.
          Refer to [JSONPath support in Kubernetes](https://kubernetes.io/docs/reference/kubectl/jsonpath/)
          for more info. Numeric index of array is not supported.
          For field name which contains special characters, use `['specialName']` to refer the field name.
          e.g. for attribute `foo.34$` appears in a list `testList`, the fieldPath could be set to
          `.testList['foo.34$']`.
        type: string
        x-kab-description-zh: |-
          `fieldPath` 代表检查失败时返回的字段路径。
          字段值必须是相对的 JSON 路径（支持数组表示），作用域是此 `x-kubernetes-validation`
          在模式定义中的位置，并且要求路径指向一个现有字段。
          例如，如果合法性验证要检查某个映射 `testMap` 下的属性 `foo`，则 `fieldPath` 应该为 `.testMap.foo`。
          如果合法性验证要检查的是两个列表必须拥有互不相同的属性，则 `fieldPath` 可以设置为两个列表之一，
          例如，`.testList`。路径不支持列表的数字型下标。
          `fieldPath` 目前支持子结构操作，以便引用现有的字段。
          参阅 [Kubernetes 中的 JSONPath 支持](https://kubernetes.io/zh-cn/docs/reference/kubectl/jsonpath/)。
          对于字段名中包含特殊字符的情形，可以使用 `['specialName']` 来引用字段名。
          例如，对于在列表 `testList` 中出现的属性 `foo.34$`，`fieldPath` 可以设置为 `.testList['foo.34$']`。
      message:
        description: |-
          `message` represents the message displayed when validation fails.
          The message is required if the `rule` contains line breaks.
          The message must not contain line breaks.
          If unset, the message is `"failed rule: {Rule}"`.
          e.g. `"must be a URL with the host matching spec.host"`.
        type: string
        x-kab-description-zh: |-
          `message` 代表的是合法性验证失败时要显示的消息。如果 `rule` 中包含换行符时，需要设置此消息字段。
          此消息字符串中不可包含换行符。
          此字段未设置时，默认的消息为 `"failed rule: {Rule}"`。
          例如，`"must be a URL with the host matching spec.host"`。
      messageExpression:
        description: |-
          This declares a CEL expression that evaluates to the validation failure message that is returned
          when this rule fails.
          Since `messageExpression` is used as a failure message, it must evaluate to a string.
          If both `message` and `messageExpression` are present on a rule, then `messageExpression` will
          be used if validation fails.
          If `messageExpression` results in a runtime error, the runtime error is logged, and the validation
          failure message is produced as if the `messageExpression` field were unset.
          If `messageExpression` evaluates to an empty string, a string with only spaces, or a string that
          contains line breaks, then the validation failure message will also be produced as if the
          `messageExpression` field were unset, and the fact that `messageExpression` produced an empty
          string/string with only spaces/string with line breaks will be logged.
          `messageExpression` has access to all the same variables as the rule;
          the only difference is the return type.
          Example, `"x must be less than max ("+string(self.max)+")"`。
        type: string
        x-kab-description-zh: |-
          此字段声明一个 CEL 表达式，经过处理可以得到规则失败后返回的验证失败消息。
          由于 `messageExpression` 的内容要用作失败消息，其处理结果必须是一个字符串。
          如果规则中同时设置了 `message` 和 `messageExpression`，则在验证失败时会使用 `messageExpression`。
          如果处理 `messageExpression` 的过程中发生运行时错误，运行时错误会被记录到日志中，
          而生成验证失败消息时会像 `messageExpression` 字段没有设置一样。
          如果 `messageExpression` 的处理结构是一个空字符串、只包含空格的字符串或者包含换行符的字符串，
          则生成验证失败消息时也会像 `messageExpression` 字段没有设置一样，只是 `messageExpression`
          的处理结果是空字符串、只包含空格或者包含换行符的事实会被记录到日志中。
          `messageExpression` 能访问当前规则可访问的所有变量，唯一的不同在于返回的类型。
          例如，`"x must be less than max ("+string(self.max)+")"`。
      optionalOldSelf:
        description: |-
          `optionalOldSelf` is used to opt a transition rule into evaluation even when the object is first created,
          or if the old object is missing the value.

          When enabled, `oldSelf` will be a CEL optional whose value will be `"None"` if there is no old value,
          or when the object is initially created.

          You may check for presence of `oldSelf` using `oldSelf.hasValue()` and unwrap it after checking using `oldSelf.value()`.
          Check the [CEL documentation](https://pkg.go.dev/github.com/google/cel-go/cel#OptionalTypes)
          for Optional types for more information.

          May not be set unless `oldSelf` is used in `rule`.
        type: boolean
        x-kab-description-zh: |-
          `optionalOldSelf` 用来支持对转换规则进行处理，即便对象是第一次创建或者老的对象中不包含所需的字段值。

          如果此字段为 `true`，`oldSelf` 会是一个 CEL 可选值，当不存在老值或者对象第一次创建时取 `"None"`，

          你可以使用 `oldSelf.hasValue()` 的方式来检查是否 `oldSelf` 是存在的，并且在检查之后可以使用`oldSelf.value()` 取出其中的值。
          参阅 [CEL 文档（英文）](https://pkg.go.dev/github.com/google/cel-go/cel#OptionalTypes)
          了解关于 Optional 值的更多信息。

          除非在 `rule` 中使用了 `oldSelf`，否则不应设置。
      reason:
        default: FieldValueInvalid
        description: |-
          This provides a machine-readable validation failure reason that is returned to the caller
          when a request fails this validation rule.
          The HTTP status code returned to the caller will match the reason of the reason of the first
          failed validation rule.
          All future added reasons must be accepted by clients when reading this value and unknown reasons
          should be treated as `"FieldValueInvalid"`.
        enum:
          - FieldValueDuplicate
          - FieldValueForbidden
          - FieldValueInvalid
          - FieldValueRequired
        type: string
        x-kab-description-zh: |-
          此字段提供一个机器可读的验证失败原因描述，当请求无法通过合法性检查时返回给调用者。
          返回给调用者的 HTTP 状态码会与未通过的第一条验证规则的原因对应。
          将来有可能添加新的原因字符串，客户端在读取此值时要保证能够接受无法识别的原因字符串，
          并将其视为 `"FieldValueInvalid"` 处理。
      rule:
        description: |-
          `rule` represents the expression which will be evaluated by
          [CEL](https://github.com/google/cel-spec).
          The `rule` is scoped to the location of the `x-kubernetes-validations` extension in the schema.
          The `self` variable in the CEL expression is bound to the scoped value.
          Example:
          - Rule scoped to the root of a resource with a status subresource:

            ```
            {"rule": "self.status.actual <= self.spec.maxDesired"}
            ```

          If the `rule` is scoped to an object with properties, the accessible properties of the object
          are field selectable via `self.field` and field presence can be checked via `has(self.field)`.
          Null valued fields are treated as absent fields in CEL expressions.
          If the `rule` is scoped to an object with `additionalProperties` (i.e. a map), the value of
          the map are accessible via `self[mapKey]`, map containment can be checked via `mapKey in self`
          and all entries of the map are accessible via CEL macros and functions such as `self.all(...)`.

          If the `rule` is scoped to an array, the elements of the array are accessible via `self[i]`
          and also by macros and functions.

          If the `rule` is scoped to a scalar, `self` is bound to the scalar value. Examples:
          - Rule scoped to a map of objects:
            ```
            {"rule": "self.components['Widget'].priority < 10"}
            ```
          - Rule scoped to a list of integers:
            ```
            {"rule": "self.values.all(value, value >= 0 && value < 100)"}
            ```
          - Rule scoped to a string value:
            ```
            {"rule": "self.startsWith('kube')"}
            ```
          The `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible
          from the root of the object and from any `x-kubernetes-embedded-resource` annotated objects.
          No other metadata properties are accessible.

          Unknown data preserved in custom resources via `x-kubernetes-preserve-unknown-fields`
          is not accessible in CEL expressions.  This includes:

          - Unknown field values that are preserved by object schemas with
            `x-kubernetes-preserve-unknown-fields`.
          - Object properties where the property schema is of an _unknown type_.
            An _unknown type_ is recursively defined as:

            - A schema with no type and `x-kubernetes-preserve-unknown-fields` set to true
            - An array where the items schema is of an _unknown type_
            - An object where the `additionalProperties` schema is of an _unknown type_

          Only property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible.
          Accessible property names are escaped according to the following rules when accessed in the
          expression:

          - `"__"` escapes to `"__underscores__"`
          - `"."` escapes to `"__dot__"`
          - `"-"` escapes to `"__dash__"`
          - `"/"` escapes to `"__slash__"`
          - Property names that exactly match a CEL RESERVED keyword escape to `"__{keyword}__"`.

          The keywords are:

          ```
          true, false, null, in, as, break, const, continue, else,
          for, function, if, import, let, loop, package, namespace, return
          ```

          Examples:
          - Rule accessing a property named `"namespace"`:
            `{"rule": "self.__namespace__ > 0"}`
          - Rule accessing a property named `"x-prop"`:
            `{"rule": "self.x__dash__prop > 0"}`
          - Rule accessing a property named "redact__d":
            `{"rule": "self.redact__underscores__d > 0"}`

          Equality on arrays with `x-kubernetes-list-type` of 'set' or 'map' ignores element order,
          i.e. `[1, 2] == [2, 1]`.
          Concatenation on arrays with `x-kubernetes-list-type` use the semantics of the list type:

          - `set`: `X + Y` performs a union where the array positions of all elements in `X` are preserved
            and non-intersecting elements in `Y` are appended, retaining their partial order.
          - `map`: `X + Y` performs a merge where the array positions of all keys in `X` are preserved but
            the values are overwritten by values in `Y` when the key sets of `X` and `Y` intersect.
            Elements in `Y` with non-intersecting keys are appended, retaining their partial order.

          If `rule` makes use of the `oldSelf` variable it is implicitly a `transition rule`.
          By default, the `oldSelf` variable is the same type as `self`.
          When `optionalOldSelf` is true, the `oldSelf` variable is a CEL optional variable whose value() is the same type as `self`.
          See the documentation for the `optionalOldSelf` field for details.
          Transition rules by default are applied only on UPDATE requests and are skipped if an old value could not be found.
          You can opt a transition rule into unconditional evaluation by setting `optionalOldSelf` to true.
        type: string
        x-kab-description-zh: |-
          `rule` 代表的是将采用 [CEL](https://github.com/google/cel-spec) 来处理的一个表达式。
          `rule` 的作用域是模式定义中此 `x-kubernetes-validations` 所在的位置。
          CEL 表达式中的 `self` 变量会绑定为这个作用域被限定的值。
          例如，下面是一条合法性检查规则，其作用域为带有 `status` 子资源的某资源的根：

          ```
          {"rule": "self.status.actual <= self.spec.maxDesired"}
          ```

          如果 `rule` 的作用域是一个带有属性的对象，可访问的对象属性可以通过 `self.field` 来选择，
          字段存在与否可以通过 `has(self.field)` 来测试。
          在 CEL 表达式中，Null 值的字段会被当作缺失字段处理。
          如果 `rule` 的作用域是一个带有 `additionalProperties` 属性的对象（即一个映射），可以使用
          `self[mapKey]` 来访问映射的值域，也可以使用 `mapKey in self` 来检查主键是否存在，
          还可以使用类似于 `self.all(...)` 这种 CEL 宏或者函数来访问映射的所有条目。
          如果 `rule` 的作用域是一个数组，数组中的元素可以用 `self[i]` 的形式来访问，也可以用宏或者函数访问。
          如果 `rule` 的作用域是一个标量，则 `self` 自身会被赋予标量的值。

          例如：

          - 作用域为一个对象映射的规则：
            ```
            {"rule": "self.components['Widget'].priority < 10"}
            ```
          - 作用域为一个整数列表的规则：
            ```
            {"rule": "self.values.all(value, value >= 0 && value < 100)"}
            ```
          - 作用域为一个字符串的规则：
            ```
            {"rule": "self.startsWith('kube')"}
            ```

          属性 `apiVersion`、`kind`、`metadata.name` 和 `metadata.generateName` 总是可以在对象的根上访问，
          也可以在任何带有 `x-kubernetes-embedded-resource` 注解的对象上访问。
          除此以外的其他元数据属性都是无法访问的。

          CEL 表达式中无法访问自定义资源中通过 `x-kubernetes-preserve-unknown-fields` 扩展保留下来的数据。
          具体包括：

          - 标注了 `x-kubernetes-preserve-unknown-fields` 的对象模式定义所保留下来的未知字段值；
          - 对象的属性模式定义是一种_未知类型_时，对象的属性无法访问。

          这里的_未知类型_包含以下情况（可递归）：

          - 未给出 `type` 但 `x-kubernetes-preserve-unknown-fields` 被设置为 true 的模式定义；
          - 数组类型的字段，其元素的模式定义是_未知类型_；
          - 对象类型的字段，其 `additionalProperties` 模式定义是_未知类型_。

          只有形式为 `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` 的属性是可访问的。
          在表达式中访问可访问的属性名称时，可能存在以下字符转义规则：

          - `"__"` 被转义为 `"__underscores__"`
          - `"."` 被转义为 `"__dot__"`
          - `"-"` 被转义为 `"__dash__"`
          - `"/"` 被转义为 `"__slash__"`
          - 与某 CEL 保留字完全相同的属性名被转义为 `"__{keyword}__"`

          CEL 保留字包括：

          ```
          true, false, null, in, as, break, const, continue, else, for,
          function, if, import, let, loop, package, namespace, return
          ```

          示例：

          - 访问名为 `"namespace"` 的属性的规则：`{"rule": "self.__namespace__ > 0"}`
          - 访问名为 `"x-prop"` 的属性的规则：`{"rule": "self.x__dash__prop > 0"}`
          - 访问名为 `"redact__d"` 的属性的规则：`{"rule": "self.redact__underscores__d > 0"}`

          如果数组带有 `x-kubernetes-list-type` 扩展属性且属性值为 `"set"` 或者 `"map"`，
          对这类数组做等值判断时会忽略元素的顺序，即 `[1, 2] == [2, 1]`。
          对带有 `x-kubernetes-list-type` 扩展属性的数组进行串接时，处理方式根据列表类型有所不同：

          - `"set"`：`X + Y` 操作会对两个数组取并集，`X` 中数组元素的初始顺序会被保留，`Y`
            中的非重复元素会被追加到后面，且保留其原来的顺序。
          - `"map"`：`X + Y` 执行的是两个数组的合并操作，`X` 中所有主键的顺序会被保留，但当 `X`
            与 `Y` 中存在主键集合重叠的情况时，`X` 中主键对应的取值会被 `Y` 中的取值覆盖。
            `Y` 中原来不在 `X` 内的元素会被追加到末尾，并且保留其原来的顺序。

          如果 `rule` 中使用了  `oldSelf` 变量，则此规则被视为转换规则（Transition Rule）。
          默认情况下，`oldSelf` 变量与 `self` 的类型相同。
          当 `optionalOldSelf` 被设置为 `true` 时，`oldSelf` 变量是一个 CEL 可选变量，其 `value()` 返回的值与 `self` 类型相同。
          参阅 `optionalOldSelf` 字段的文档了解详细信息。

          转换规则默认仅适用于 UPDATE 请求，并且在无法获得老值时会被忽略掉。
          你可以通过将 `optionalOldSelf` 设置为 `true` 来选择无条件地处理转换规则。
    required:
      - rule
    type: object
    x-kab-description-zh: ValidationRule 描述采用 CEL 表达式语言编写的一条合法性检查规则。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig:
    description: |-
      Information to make a TLS connection with a webhook. Either `service` or `url` must be specified.
      If the webhook is running within the cluster, then you should use `service`.
    properties:
      caBundle:
        description: |-
          A PEM encoded CA bundle which will be used to validate the webhook's server certificate.
          If unspecified, system trust roots on the apiserver are used.
        format: byte
        type: string
        x-kab-description-zh: |-
          PEM 编码的 CA 证书包，用来对 Webhook 的服务器整数作合法性检查。
          如果没有设置此字段，则使用 API 服务器上的系统信任根。
      service:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.ServiceReference'
        description: A reference to the Service for this webhook.
        x-kab-description-zh: 指向此 Webhook 的 Service 的引用。
      url:
        description: |-
          The location of the webhook, in standard URL form (`"scheme://host:port/path"`).
          The `host` should not refer to a Service running in the cluster; use the `service` field instead.
          The `host` might be resolved via external DNS in some apiservers
          (e.g., `kube-apiserver` cannot resolve in-cluster DNS as that would be a layering violation).
          `host` may also be an IP address. Please note that using `"localhost"` or `"127.0.0.1"` as a `host`
          is risky unless you take great care to run this webhook on all hosts which run an apiserver
          which might need to make calls to this webhook.
          Such installs are likely to be non-portable, i.e., not easy to turn up in a new cluster.
          The scheme must be `"https"`.
          A path is optional, and if present may be any string permissible in a URL.
          You may use the path to pass an arbitrary string to the webhook, for example, a cluster identifier.
          Attempting to use a user or basic auth e.g. `"user:password@"` is not allowed.
          Fragments (`"#..."`) and query parameters (`"?..."`) are not allowed, either.
        type: string
        x-kab-description-zh: |-
          Webhook 的位置，格式为标准的 URL（`"scheme://host:port/path"`）。
          其中的 `host` 部分不能引用集群中运行的某个 Service；如果需要引用 Service，则要使用 `service` 字段。
          `host` 值必须能够通过 API 服务器上配置的外部 DNS 解析（`kube-apiserver` 不能解析集群内的 DNS，
          因为那样会破坏系统设计的分层原则）。`host` 也可以是一个 IP 地址。
          需要注意的是，使用 `"localhost"` 或者 `"127.0.0.1"` 作为 `host` 是风险很高的做法，
          除非你精心布局，让此 Webhook 在 API 服务器所在的所有主机上都存在，毕竟这些 API
          服务器都可能需要调用此 Webhook。这种配置很可能是不可移植的，在新集群中很难顺利部署起来。

          连接所使用的 `schem` 必须是 `"https"`。`path` 部分是可选的。
          如果提供了 `path` 部分，则其内容必须是允许处在 URL 中的字符串。
          你可以使用 `path` 来向 Webhook 传递任意字符串（例如，集群的标识符）。
          设置用户或者基本身份认证（例如，`"user:password@"`）是不允许的。
          同样，`path` 中不允许使用片段（`"#..."`）和查询参数（`"?..."`）。
    type: object
    x-kab-description-zh: |-
      用于和 Webhook 建立 TLS 连接所需要的信息。`service` 和 `url` 必须设定其一。
      如果 Webhook 运行在集群内，则应该使用 `service`。
  io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookConversion:
    description: This describes how to call a conversion webhook.
    properties:
      clientConfig:
        $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.WebhookClientConfig'
        description: |-
          The instructions for calling the webhook if strategy is `"Webhook"`.
          This cannot be set if the conversion strategy is not `"Webhook"`.
        x-kab-description-zh: |-
          当转换策略是 `"Webhook"` 时调用 Webhook 相关的参数配置。
          当转换策略不是 `"Webhook"` 时不能设置。
      conversionReviewVersions:
        description: |-
          An ordered list of preferred `ConversionReview` versions the Webhook expects.
          The API server will use the first version in the list which it supports.
          If none of the versions specified in this list are supported by API server,
          conversion will fail for the custom resource.
          If a persisted webhook configuration specifies allowed versions and does not include any versions
          known to the API Server, calls to the webhook will fail.
          The acceptable versions are [`"v1"`, `"v1beta1"`].
        items:
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此字段是一个有序的列表，包含 Webhook 可接受的 `ConversionReview` 对象版本。
          API 服务器会使用列表中自己所支持的第一个版本。
          如果列表岁的所有版本都是 API 服务器所不支持的，对自定义资源的转换会失败。
          如果某个已经写入持久存储的 Webhook 配置中设置了所允许的版本，但其中不包含 API 服务器所能理解的版本，
          则对 Webhook 的调用会失败。
          可以接受的版本目前为 [`"v1"`, `"v1beta1"`]。
        x-kubernetes-list-type: atomic
    required:
      - conversionReviewVersions
    type: object
    x-kab-description-zh: 此结构描述如何调用一个转换 Webhook。
  io.k8s.apimachinery.pkg.api.resource.Quantity:
    description: |-
      Quantity is a fixed-point representation of a number.
      It provides convenient marshaling/unmarshaling in JSON and YAML, in addition to `String()` and
      `AsInt64()` accessors.

      The serialization format is:

      ```
      <quantity> ::= <signedNumber><suffix>
      (Note that <suffix> may be empty, from the "" case in <decimalSI>.)
      <digit> ::= 0 | 1 | ... | 9
      <digits> ::= <digit> | <digit><digits>
      <number> ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
      <sign> ::= "+" | "-"
      <signedNumber> ::= <number> | <sign><number>
      <suffix> ::= <binarySI> | <decimalExponent> | <decimalSI>
      <binarySI> ::= Ki | Mi | Gi | Ti | Pi | Ei
      (International System of units; See: http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI> ::= m | "" | k | M | G | T | P | E
      (Note that 1024 = 1Ki but 1000 = 1k; I didn't choose the capitalization.)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
      ```

      No matter which of the three exponent forms is used, no quantity may represent a number
      greater than 2^63-1 in magnitude, nor may it have more than 3 decimal places.
      Numbers larger or more precise will be capped or rounded up. (E.g. `"0.1m"` will rounded up to `"1m"`.)
      This may be extended in the future if we require larger or smaller quantities.

      When a Quantity is parsed from a string, it will remember the type of suffix it had, and will use
      the same type again when it is serialized.

      Before serializing, Quantity will be put in **canonical form**. This means that exponent/suffix
      will be adjusted up or down (with a corresponding increase or decrease in Mantissa) such that

      - No precision is lost
      - No fractional digits will be emitted
      - The exponent (or suffix) is as large as possible.

      The sign will be omitted unless the number is negative.

      Examples:

      - `1.5` will be serialized as `"1500m"`
      - `"1.5Gi"` will be serialized as `"1536Mi"`

      Note that the quantity will **NEVER** be internally represented by a floating point number.
      That is the whole point of this exercise.
      Non-canonical values will still parse as long as they are well formed, but will be re-emitted
      in their canonical form. (So always use canonical form, or don't diff.)

      This format is intended to make it difficult to use these numbers without writing some sort of
      special handling code in the hopes that that will cause implementors to also use a fixed point
      implementation.
    type: string
    x-kab-description-zh: |-
      Quantity 数字的一种定点表示形式，为 JSON 和 YAML 提供一种方便的编码、解码方式，同时还提供
      `String()` 和 `AsInt64()` 等访问函数。

      Quantity 的序列化格式如下：

      ```
      <quantity> ::= <signedNumber><suffix>    (注意 <suffix> 可以为空)
      <digit> ::= 0 | 1 | ... | 9
      <digits> ::= <digit> | <digit><digits>
      <number> ::= <digits> | <digits>.<digits> | <digits>. | .<digits>
      <sign> ::= "+" | "-"
      <signedNumber> ::= <number> | <sign><number>
      <suffix> ::= <binarySI> | <decimalExponent> | <decimalSI>
      <binarySI> ::= Ki | Mi | Gi | Ti | Pi | Ei
      (国际单位系统，参见 http://physics.nist.gov/cuu/Units/binary.html)
      <decimalSI> ::= m | "" | k | M | G | T | P | E     (注意 1024 = 1Ki 但是 1000 = 1k)
      <decimalExponent> ::= "e" <signedNumber> | "E" <signedNumber>
      ```

      无论采用的是三种指数形式的哪一种，Quantity 所表达的数字不会超出 2^63-1，小数位数也不能超过3。
      更大的数字或者精度更高的数字都要被截断或者进位（例如，`"0.1m"` 会被进位为 `"1m"`）。
      未来如果需要更大的或者更小的数量值时，这一限制可能会被放宽。

      从字符串中解析 Quantity 时，Quantity 会记得其原来的后缀类型，当其再次被序列化时，会使用相同的类型。
      在进行序列化之前，Quantity 对象会先被转换为一种 **典型格式（Canonical Form）**。
      这也意味着，指数和后缀部分可能会被向上或向下调整（对应的尾数增加或减少），从而满足

      - 没有精度上的损失
      - 不需要输出小数部分
      - 指数部分（或者后缀）已经尽可能大

      除非数字为负数，否则正负号会被忽略。例如：

      - `"1.5"` 会被序列化为 `"1500m"`
      - `"1.5Gi"` 会被序列化为 `"1536Mi"`

      注意，Quantity 的内部表现方式不是浮点数，而这也正是设计 Quantity 的初衷。
      非典型的数值仍然会被解析，前提是数值格式上没有问题。所有数值都通过典型格式输出。
      这种数值格式的设计目的之一是使得用户必须编写一些转换代码来使用其中存放的数字，
      进而强迫实现者也使用定点的实现方式。
  io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup:
    description: The information about an API group.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - APIGroup
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      name:
        description: The name of the group.
        minLength: 1
        type: string
        x-kab-description-zh: API 组的名称。
      preferredVersion:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
        description: The version preferred by the API server, which probably is the
          storage version.
        x-kab-description-zh: API 服务器偏好的版本，该版本可能是存储版本。
      serverAddressByClientCIDRs:
        description: |-
          A map of client CIDR to server address that is serving this group.
          This is to help clients reach servers in the most network-efficient way possible.
          Clients can use the appropriate server address as per the CIDR that they match.
          In case of multiple matches, clients should use the longest matching CIDR.
          The server returns only those CIDRs that it thinks that the client can match.
          For example, the master will return an internal IP CIDR only, if the client reaches the server
          using an internal IP.
          Server looks at `X-Forwarded-For` header or `X-Real-Ip` header or `request.RemoteAddr`
          (in that order) to get the client IP.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          客户 CIDR 网段与服务器地址之间的映射，列举的是提供此 API 组的服务器。
          提供这一信息是为了让客户端能够以最优的网络方式来访问服务器。
          客户端可以根据自己匹配到的 CIDR 网段来使用最合适的服务器地址。
          如果匹配的网段不止一个，则客户端应该选择匹配度最高的 CIDR 网段。
          服务器只会返回它认为客户端可能匹配到的 CIDR 网段。
          例如，如果客户端使用内部 IP 地址来访问服务器，服务器将只返回一个内部 IP 的 CIDR。
          服务器会依次查看 `"X-Forwarded-For"` 头部、`"X-Real-IP"` 头部或者 `request.RemoteAddr`
          字段，以获得客户端的 IP 地址。
        x-kubernetes-list-type: atomic
      versions:
        description: The versions supported in this API group.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery'
        minItems: 1
        type: array
        x-kab-description-zh: 此 API 组中支持的版本列表。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - name
      - versions
    type: object
    x-kab-description-zh: 关于某个 API 组的信息。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: APIGroup
        version: v1
  io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList:
    description: A list of APIGroup objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      groups:
        description: A list of APIGroup objects.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
        minItems: 1
        type: array
        x-kab-description-zh: 包含 APIGroup 对象的列表。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - APIGroupList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
    required:
      - apiVersion
      - groups
      - kind
    type: object
    x-kab-description-zh: 包含 APIGroup 对象的列表。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: APIGroupList
        version: v1
  io.k8s.apimachinery.pkg.apis.meta.v1.APIResource:
    description: The name of a resource and whether it is namespaced.
    properties:
      categories:
        description: A list of the grouped resources this resource belongs to. E.g.
          `"all"`.
        items:
          type: string
        type: array
        x-kab-description-zh: 此资源所属的资源分组列表。例如 `"all"`。
        x-kubernetes-list-type: atomic
      group:
        description: |-
          The preferred group of the resource. Empty implies the group of the containing resource list.
          For subresources, this may have a different value. For example, `"Scale"`.
        type: string
        x-kab-description-zh: |-
          资源的优选组。如果字段为空，则表示包含资源列表的组。
          对于子资源而言，此字段可能取值会不同。例如 `"Scale"`。
      kind:
        description: The kind of the resource. E.g. `"Foo"` is the kind for a resource
          `foo`.
        minLength: 1
        type: string
        x-kab-description-zh: 资源的类别。例如资源 `"foo"` 的类别是 `"Foo"`。
      name:
        description: The plural name of the resource.
        minLength: 1
        type: string
        x-kab-description-zh: 资源的复数名称。
      namespaced:
        description: This indicates if the resource is namespaced or not.
        type: boolean
        x-kab-description-zh: 此字段表明资源是否是名字空间作用域的。
      shortNames:
        description: A list of suggested short names of the resource.
        items:
          type: string
        type: array
        x-kab-description-zh: 资源对应的一组建议使用的短名称。
        x-kubernetes-list-type: atomic
      singularName:
        description: |-
          The singular name of the resource. This allows clients to handle plural and singular opaquely.
          The `singularName` is more correct for reporting status on a single item and both singular and
          plural are allowed by the kubectl CLI interface
        minLength: 1
        type: string
        x-kab-description-zh: |-
          资源的单数名称。提供此字段有助于客户端用不透明的方式处理单数和复数两种情况。
          `singularName` 更适合于报告单个元素的状态。kubectl 命令行既接受单数也接受复数。
      storageVersionHash:
        description: |-
          存储版本的哈希值，当资源被写入数据存储中时会被先转化为这个版本。客户端必须视此字段为不透明的值。
          此字段只能进行等值比较。
          目前此字段是 Beta 阶段特性，只有启用了 `StorageVersionHash` 门控的 API 服务器会填充此字段。
          在该特性进阶为 GA 特性之前，此字段会是可选的。
        type: string
      verbs:
        description: A list of supported kube verbs
        items:
          enum:
            - create
            - delete
            - deletecollection
            - get
            - list
            - patch
            - proxy
            - update
            - watch
          minLength: 1
          type: string
        minItems: 1
        type: array
        x-kab-description-zh: 所支持的 Kubernestes 动词列表。
        x-kubernetes-list-type: atomic
      version:
        description: |-
          The preferred version of the resource. Empty implies the version of the containing resource list.
          For subresources, this may have a different value.
        type: string
        x-kab-description-zh: |-
          资源的优选版本。空值意味着使用上层资源列表的版本。
          对于子资源而言，此字段可能会取不同的值。
    required:
      - name
      - singularName
      - namespaced
      - kind
      - verbs
    type: object
    x-kab-description-zh: 资源的名称以及资源是否是名字空间作用域的。
  io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList:
    description: |-
      A list of APIResource objects. It is used to expose the name of the resources
      supported in a specific group and version, and if the resource is namespaced.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      groupVersion:
        description: The group and version this APIResourceList is for.
        minLength: 1
        type: string
        x-kab-description-zh: 此 APIResourceList 所针对的组和版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - APIResourceList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      resources:
        description: A list of APIResource objects and if they are namespaced.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResource'
        minItems: 1
        type: array
        x-kab-description-zh: APIResource 对象列表，且给出各个对象是否是名字空间作用域的。
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - groupVersion
      - kind
      - resources
    type: object
    x-kab-description-zh: |-
      包含 APIResource 对象的列表。此列表用来公布特定组和版本所支持的资源的名称，
      以及资源是否是名字空间作用域的。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: APIResourceList
        version: v1
  io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions:
    description: |-
      APIVersions lists the versions that are available, to allow clients to discover the API at `"/api"`,
      which is the root path of the legacy `v1` API.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource
        enum:
          - APIVersions
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      serverAddressByClientCIDRs:
        description: |-
          A map of client CIDR to server address that is serving this group.
          This is to help clients reach servers in the most network-efficient way possible.
          Clients can use the appropriate server address as per the CIDR that they match.
          In case of multiple matches, clients should use the longest matching CIDR.
          The server returns only those CIDRs that it thinks that the client can match.
          For example, the master will return an internal IP CIDR only, if the client reaches the server
          using an internal IP.
          Server looks at `X-Forwarded-For` header or `X-Real-Ip` header or `request.RemoteAddr`
          (in that order) to get the client IP.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          客户 CIDR 网段与服务器地址之间的映射，列举的是提供此 API 组的服务器。
          提供这一信息是为了让客户端能够以最优的网络方式来访问服务器。
          客户端可以根据自己匹配到的 CIDR 网段来使用最合适的服务器地址。
          如果匹配的网段不止一个，则客户端应该选择匹配度最高的 CIDR 网段。
          服务器只会返回它认为客户端可能匹配到的 CIDR 网段。
          例如，如果客户端使用内部 IP 地址来访问服务器，服务器将只返回一个内部 IP 的 CIDR。
          服务器会依次查看 `"X-Forwarded-For"` 头部、`"X-Real-IP"` 头部或者 `request.RemoteAddr`
          字段，以获得客户端的 IP 地址。
        x-kubernetes-list-type: atomic
      versions:
        description: 可用的 API 版本。
        items:
          type: string
        minItems: 1
        type: array
        x-kubernetes-list-type: atomic
    required:
      - apiVersion
      - kind
      - serverAddressByClientCIDRs
      - versions
    type: object
    x-kab-description-zh: |-
      APIVersions 列举可用的版本，方便客户端在 `"/api"` 端点发现 API。
      端点 `"/api"` 是原来的 `"v1"` API 的根路径。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: APIVersions
        version: v1
  io.k8s.apimachinery.pkg.apis.meta.v1.Condition:
    description: |-
      This contains the details for one aspect of the current state of this API Resource.
      This struct is intended for direct use as an array at the field path `.status.conditions`.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          The last time the condition transitioned from one status to another.
          This should be the time when the underlying condition changed.
          If that is not known, then using the time when the API field changed is acceptable.
        x-kab-description-zh: |-
          状况上次从一种状态转换为另一种状态的时间。
          此字段应该是下层状况发生变化的时间。
          如果发生变化的时间点未知，则使用 API 字段发生变化的时间也是可接受的。
      message:
        description: |-
          A human readable message indicating details about the transition.
          This may be an empty string.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。此字段可以是一个空字符串。
      observedGeneration:
        description: |-
          The `.metadata.generation` that the condition was set based upon.
          For instance, if `.metadata.generation` is currently 12, but the
          `.status.conditions[x].observedGeneration` is 9, the condition is out of date
          with respect to the current state of the instance.
        format: int64
        type: integer
        x-kab-description-zh: |-
          设置此状况时所针对的对象 `.metadata.generation` 值。
          例如，如果对象的 `.metadata.generation` 的当前值为 12，而 `.status.conditions[x].observedGeneration`
          值为 9，则意味着就对象实例的当前状态而言，所记录的状况已经过时。
      reason:
        description: |-
          A programmatic identifier indicating the reason for the condition's last transition.
          Producers of specific condition types may define expected values and meanings for this field,
          and whether the values are considered a guaranteed API.
          The value should be a CamelCase string. This field may not be empty.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          一个可用程序识别的标识符，用来给出最近一次状况转换的原因。
          生成特定类型的状况的可以设置此字段的取值并赋予其含义，包括决定哪些值是 API 层面可保障的。
          此字段值应该是驼峰形式的字符串。字段不可为空。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type of condition in CamelCase or in `"foo.example.com/CamelCase"`.
        type: string
        x-kab-description-zh: 用驼峰拼写（可带域名前缀）给出的状况的类型。
    required:
      - lastTransitionTime
      - message
      - reason
      - status
      - type
    type: object
    x-kab-description-zh: |-
      此结构包含此 APIResource 的当前状态的某个侧面的细节。
      用户要将 `.status.conditions` 下的数组作为一个整体来处理。
  io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions:
    description: DeleteOptions may be provided when deleting an API object.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      dryRun:
        description: |-
          When present, indicates that modifications should not be persisted.
          An invalid or unrecognized dryRun directive will result in an error response and no further
          processing of the request. Valid values are:
          - `"All"`: all dry run stages will be processed.
        items:
          enum:
            - All
          type: string
        type: array
        x-kab-description-zh: |-
          设置了此字段时，表示所发起的变更不要写入到持久性存储中。
          如果发现了非法的或无法识别的 `dryRun` 指令，则系统会给出出错反馈，并停止进一步处理 API 请求。
          目前支持的值有：

          - `"All"`：处理排练的所有阶段。
        x-kubernetes-list-type: atomic
      gracePeriodSeconds:
        description: |-
          The duration in seconds before the object should be deleted.
          The value zero indicates delete immediately.
          If this value is nil, the default grace period for the specified type will be used.
          Defaults to a per object value if not specified.
        format: int64
        minimum: 0
        type: integer
        x-kab-description-zh: |-
          在对象被删除之前要等待的时长秒数。此值为零时意味着要马上删除。
          如果未设置此值，则使用对应类别所设置的宽限期限。默认情况下，宽限期限是按对象设置的。
      kind:
        description: A string value representing the REST resource.
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      orphanDependents:
        description: |-
          Should the dependent objects be orphaned.
          If true/false, the `"orphan"` finalizer will be added to/removed from the object's `finalizers` list.
          Either this field or `propagationPolicy` may be set, but not both.
          **DEPRECATED**: please use the `propagationPolicy`.
        type: boolean
        x-kab-description-zh: |-
          是否要保留依赖对象，使其成为孤儿对象。
          如果设置为 `true`，则会向对象的 `finalizers` 列表中添加 `"orphan"` 终结器，
          反之则会从对象的 `finalizers` 列表中去除 `"orphan"` 终结器。
          此字段与 `propagationPolicy` 二者不可同时设置。

          **已弃用**： 建议使用 `propagationPolicy`。
      preconditions:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions'
        description: |-
          Must be fulfilled before a deletion is carried out.
          If not possible, a `"409 Conflict"` status will be returned.
        x-kab-description-zh: |-
          在执行删除动作之前必须满足的条件。
          如果条件无法满足，则会返回 `"409 Conflict"` 状态。
      propagationPolicy:
        description: |-
          Whether and how garbage collection will be performed.
          Either this field or `orphanDependents` may be set, but not both.
          The default policy is decided by the existing finalizer set in the `metadata.finalizers` and
          the resource-specific default policy. Acceptable values are:
          - `"Orphan"` - orphan the dependents;
          - `"Background"` - allow the garbage collector to delete the dependents in the background;
          - `"Foreground"` - a cascading policy that deletes all dependents in the foreground.
        enum:
          - Background
          - Foreground
          - Orphan
        type: string
        x-kab-description-zh: |-
          关于是否以及如何执行垃圾收集的设置。此字段和 `orphanDependents` 不可同时设置。
          默认的策略取决于 `metadata.finalizers` 中已有的终结器，以及特定于资源的默认策略。
          可接受的值包括：

          - `"Orphan"` - 让依赖对象成为孤儿对象；
          - `"Background"` - 允许垃圾收集器在后台删除依赖对象；
          - `"Foreground"` - 一种级联的策略，在前台删除所有依赖对象。
    type: object
    x-kab-description-zh: DeleteOptions 可以作为输入提供给删除 API 对象的请求。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: DeleteOptions
        version: v1
      - group: admission.k8s.io
        kind: DeleteOptions
        version: v1
      - group: admission.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: admissionregistration.k8s.io
        kind: DeleteOptions
        version: v1
      - group: admissionregistration.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: admissionregistration.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apiextensions.k8s.io
        kind: DeleteOptions
        version: v1
      - group: apiextensions.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apiregistration.k8s.io
        kind: DeleteOptions
        version: v1
      - group: apiregistration.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: apps
        kind: DeleteOptions
        version: v1
      - group: apps
        kind: DeleteOptions
        version: v1beta1
      - group: apps
        kind: DeleteOptions
        version: v1beta2
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: authentication.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: authorization.k8s.io
        kind: DeleteOptions
        version: v1
      - group: authorization.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: autoscaling
        kind: DeleteOptions
        version: v1
      - group: autoscaling
        kind: DeleteOptions
        version: v2
      - group: autoscaling
        kind: DeleteOptions
        version: v2beta1
      - group: autoscaling
        kind: DeleteOptions
        version: v2beta2
      - group: batch
        kind: DeleteOptions
        version: v1
      - group: batch
        kind: DeleteOptions
        version: v1beta1
      - group: certificates.k8s.io
        kind: DeleteOptions
        version: v1
      - group: certificates.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: certificates.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: coordination.k8s.io
        kind: DeleteOptions
        version: v1
      - group: coordination.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: discovery.k8s.io
        kind: DeleteOptions
        version: v1
      - group: discovery.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: events.k8s.io
        kind: DeleteOptions
        version: v1
      - group: events.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: extensions
        kind: DeleteOptions
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1beta2
      - group: flowcontrol.apiserver.k8s.io
        kind: DeleteOptions
        version: v1beta3
      - group: imagepolicy.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: internal.apiserver.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: networking.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: node.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: policy
        kind: DeleteOptions
        version: v1
      - group: policy
        kind: DeleteOptions
        version: v1beta1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: rbac.authorization.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: resource.k8s.io
        kind: DeleteOptions
        version: v1alpha2
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: scheduling.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1alpha1
      - group: storage.k8s.io
        kind: DeleteOptions
        version: v1beta1
      - group: storagemigration.k8s.io
        kind: DeleteOptions
        version: v1alpha1
  io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1:
    description: |-
      FieldsV1 stores a set of fields in a data structure like a Trie, in JSON format.
      Each key is either a `"."` representing the field itself, and will always map to an empty set,
      or a string representing a sub-field or item. The string will follow one of these four formats:

      - `"f:<name>"`, where `<name>` is the name of a field in a struct, or key in a map;
      - `"v:<value>"`, where `<value>` is the exact JSON formatted value of a list item;
      - `"i:<index>"`, where `<index>` is position of an item in a list;
      - `"k:<keys>"`, where `<keys>` is a map of a list item's key fields to their unique values.

      If a key maps to an empty fields value, the field that key represents is part of the set.
      The exact format is defined in `"sigs.k8s.io/structured-merge-diff"`.
    type: object
    x-kab-description-zh: |-
      FieldsV1 将一组字段保存到一个像单词查找树（Trie）的数据结构中，格式为 JSON。
      每个字段可以是代表字段自身的 `"."` （总是映射到空集合），也可以是代表某子字段或条目的字符串。
      字符串会遵从以下四种格式之一：

      - `"f:<name>"`，其中 `<name>` 是一个结构的字段或一个映射中的主键；
      - `"v:<value>"`，其中 `<value>` 是某个列表条目的取值（JSON 格式）；
      - `"i:<index>"`，其中 `<index>` 是元素在列表中的位置；
      - `"k:<keys>"`，其中 `<keys>` 是从某列表条目的主键到其唯一取值之间的映射。

      如果某个主键映射到的是一个空的字段值，该主键所代表的字段是集合的一部分。
      确切的格式定义在 `"sigs.k8s.io/structured-merge-diff"` 仓库中。
  io.k8s.apimachinery.pkg.apis.meta.v1.GroupVersionForDiscovery:
    description: |-
      The `"group/version"` and `"version"` string of a version.
      It is made a struct to keep extensibility.
    properties:
      groupVersion:
        description: The API group and version in the form `"group/version"`.
        minLength: 1
        type: string
        x-kab-description-zh: 用 `"group/version"` 形式给出的 API 组和版本。
      version:
        description: The version in the form of `"version"`.
        minLength: 1
        type: string
        x-kab-description-zh: 用 `"version"` 形式给出的 API 版本。
    required:
      - groupVersion
      - version
    type: object
    x-kab-description-zh: |-
      某个版本的 `"group/version"` 和 `"version"` 字符串。
      定义此结构的目的是确保其扩展性。
  io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector:
    description: |-
      A label selector is a label query over a set of resources.
      The result of `matchLabels` and `matchExpressions` are ANDed.
      An empty label selector matches all objects.
      A null label selector matches no objects.
      Note that there are two different styles of label selectors used in versioned types:

      - an older style which is represented as just a string in versioned types;
      - a newer style that is structured.

      LabelSelector is an internal representation for the latter (newer) style.
    properties:
      matchExpressions:
        description: A list of label selector requirements. The requirements are ANDed.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement'
        type: array
        x-kab-description-zh: 标签选择算符条件的列表。所有条件最终会按逻辑 AND 操作组合起来。
        x-kubernetes-list-type: atomic
      matchLabels:
        additionalProperties:
          type: string
        description: |-
          A map of `<key, value>` pairs.
          A single `<key,value>` in the `matchLabels` map is equivalent to an element of `matchExpressions`,
          whose `key` field is `"key"`, the `operator` is `"In"`, and the `values` array contains only `["value"]`.
          The requirements are ANDed.
        type: object
        x-kab-description-zh: |-
          包含 `<key, value>` 偶对的映射。
          `matchLabels` 中的每个 `<key,value>` 相当于 `matchExpressions` 中的一个元素：
          `key` 即为 `"key"`，`operator` 为 `"In"`，而 `values` 数组中只包含唯一元素 `["value"]`。
          此映射中的各个需求条件最终会按逻辑 AND 操作组合起来。
    type: object
    x-kab-description-zh: |-
      标签选择算符是对一组资源执行的标签查询。
      返回的结果是 `matchLabels` 和 `matchExpressions` 结果的 AND 组合。
      空的选择算符可以匹配所有对象。
      标签选择算符为 null（未设置）时，不选择任何对象。
      在带版本的类型中，主要存在两种风格的标签选择算符：

      - 比较老的风格，在带版本的类型定义中表现为一个字符串；
      - 较新的的风格，带结构的算符。

      LabelSelector 是新的风格的内部表示形式。
    x-kubernetes-map-type: atomic
  io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelectorRequirement:
    description: |-
      A label selector requirement is a selector that contains `values`, a `key`,
      and an `operator` that relates the `key` and `values`.
    properties:
      key:
        description: The label key that the selector applies to.
        type: string
        x-kab-description-zh: 选择算符所适用的标签主键。
      operator:
        description: This represents the key's relationship to a set of values.
        enum:
          - DoesNotExist
          - Exists
          - In
          - NotIn
        minLength: 1
        type: string
        x-kab-description-zh: 此字段表示主键 `key` 与值集 `values` 之间的关系。
      values:
        description: |-
          An array of string values.
          If the `operator` is `"In"` or `"NotIn"`, the `values` array must be non-empty.
          If the `operator` is `"Exists"` or `"DoesNotExist"`, the `values` array must be empty.
          This array is replaced during a strategic merge patch.
        items:
          type: string
        type: array
        x-kab-description-zh: |-
          字符串值所构成的一个数组。
          如果 `operator` 是 `"In"` 或者 `"NotIn"`，则 `values` 数组不能为空。
          如果 `operator` 是 `"Exists"` 或 `"DoesNotExist"`， `values` 数组必须为空。
          在执行策略性合并补丁操作时，此字段会被整体替换掉。
        x-kubernetes-list-type: atomic
    required:
      - key
      - operator
    type: object
    x-kab-description-zh: 每个标签选择算符条件自身是一个选择算符，包含 `values`、`key` 和将 `values` 与 `key`
      关联在一起的 `operator`。
  io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta:
    description: |-
      ListMeta describes metadata that synthetic resources must have, including lists and various status objects.
      A resource may have only one of ObjectMeta and ListMeta.
    properties:
      continue:
        description: |-
          `continue` may be set if the user set a `limit` on the number of items returned, and indicates that
          the server has more data available.
          The value is opaque and may be used to issue another request to the endpoint that served this list
          to retrieve the next set of available objects.
          Continuing a consistent list may not be possible if the server configuration has changed or more than
          a few minutes have passed.
          The `resourceVersion` field returned when using this `continue` value will be identical to
          the value in the first response, unless you have received this token from an error message.
        type: string
        x-kab-description-zh: |-
          如果用户设置了 `limit` 来限制返回的条目个数，`continue` 字段可能会被设置以表示服务器上还有更多的数据。
          字段值是不透明的，可以用来向返回当前列表的端点发出另一个请求，以检索下一组可用对象。
          如果服务器侧配置发生的变化，或者后续请求是在几分钟之后才发出的，
          有可能无法通过继续前一次查询来获得一个一致的列表。
          使用此 `continue` 值继续查询时返回的 `resourceVersion` 字段应该与第一个响应中的 `resourceVersion` 相同，
          除非你是从出错消息中获得的此令牌。
      remainingItemCount:
        description: |-
          The number of subsequent items in the list which are not included in this response.
          If the list request contained label or field selectors, then the number of remaining items
          is unknown and the field will be left unset and omitted during serialization.
          If the list is complete (either because it is not chunking or because this is the last chunk),
          then there are no more remaining items and this field will be left unset and omitted during
          serialization. Clients should not rely on the `remainingItemCount` to be set or to be exact.
        format: int64
        type: integer
        x-kab-description-zh: |-
          属于列表但未包含在当前响应中的后续元素的个数。
          如果列表请求本身包含了标签或者字段选择算符，则剩余元素的个数是未知的，此字段也就不会被设置，
          在对响应进行序列化操作的时候会被忽略掉。
          如果列表是完整的（原因可能是列表操作没有分批分块，或者当前响应是最后一批元素），
          则没有剩余的元素待取回，此字段也不会被设置，并且在序列化时同样会被忽略。
          客户端不能假定 `remainingItemCount` 总是被设置，也不能假定其值是准确的。
      resourceVersion:
        description: |-
          String that identifies the server's internal version of this object that can be used by clients
          to determine when objects have changed.
          Value must be treated as opaque by clients and passed unmodified back to the server.
          Populated by the system. Read-only.
        type: string
        x-kab-description-zh: |-
          标示此对象的服务器内部版本号，可被客户端用来确定对象是否已被变更。
          客户端必须视此字段值为不透明的，原封不动地传回到服务器端。
          字段值是系统填写的。只读。
      selfLink:
        description: '**DEPRECATED**: `selfLink` is a legacy read-only field that
          is no longer populated by the system.'
        type: string
        x-kab-description-zh: '**已弃用**： `selfLink` 是一个历史遗留的只读字段，系统已经不再填写此字段。'
    type: object
    x-kab-description-zh: |-
      ListMeta 描述合成的资源必须具备的元数据，包括列表及各种状态对象。
      每个资源只能包含 ObjectMeta 和 ListMeta 之一。
  io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry:
    description: A workflow-id, a field set and the group version of the resource
      that the field set applies to.
    properties:
      apiVersion:
        description: |-
          The version of the resource that this field set applies to.
          The format is `"group/version"` just like the top-level of `apiVersion` field.
          It is necessary to track the version of a field set because it cannot be automatically converted.
        type: string
        x-kab-description-zh: |-
          此字段集合所适用的资源版本。
          字段的格式为 `"group/version"`，与顶层的 `apiVersion` 相同。
          跟踪字段集合的版本是有必要的，因为字段集合的内容无法被自动转换。
      fieldsType:
        description: |-
          The discriminator for the different fields format and version.
          There is currently only one possible value, i.e., `"FieldsV1"`.
        type: string
        x-kab-description-zh: 用来区分不同字段格式和版本的符号。目前仅支持 `"FieldsV1"`。
      fieldsV1:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.FieldsV1'
        description: The first JSON version format as described in the `"FieldsV1"`
          type.
        x-kab-description-zh: 如 `FieldsV1` 类型所定义的，此字段给出的是第一个JSON 版本格式。
      manager:
        description: An identifier of the workflow managing these fields.
        type: string
        x-kab-description-zh: 管理这些字段的工作流的标识符。
      operation:
        description: The type of operation which lead to the creation of this object.
        enum:
          - Apply
          - Update
        minLength: 1
        type: string
        x-kab-description-zh: 导致此字段被设置的操作的类型。
      subresource:
        description: |-
          The name of the subresource used to update that object, or empty string if the object was updated
          through the main resource.
          The value of this field is used to distinguish between managers, even if they share the same name.
          For example, a status update will be distinct from a regular update using the same manager name.
          Note that the `apiVersion` field is not related to the `subresource` field and
          it always corresponds to the version of the main resource.
        type: string
        x-kab-description-zh: |-
          用来更新对象时的子资源名称，如果对象是通过主资源更新的，则字段为空字符串。
          此字段的取值被用来区分不同的管理者，即使这些管理者的名字相同。
          例如，对于 `status` 的更新与使用相同管理者名称进行的常规更新是不同的。
          注意，`apiVersion` 字段与 `subresource` 字段无关，总是对应到主资源的版本。
      time:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          The timestamp of when the `managedFields` entry was added.
          The timestamp will also be updated if a field is added, the manager changes any of the owned
          fields value or removes a field.
          The timestamp does not update when a field is removed from the entry because another manager
          took it over.
        x-kab-description-zh: |-
          `managedFields` 被添加时的时间戳。
          当添加了新字段、管理器更改了所管理字段的取值，或者字段被删除时，此时间戳都会被更新。
          如果某字段被移除的原因是被另一个管理器接手，时间戳的值不会变。
    type: object
    x-kab-description-zh: 此结构包含工作流 ID、一个字段集合以及字段集合所适用的资源的组版本。
  io.k8s.apimachinery.pkg.apis.meta.v1.MicroTime:
    description: MicroTime is version of Time with microsecond level precision.
    format: date-time
    type: string
    x-kab-description-zh: MicroTime 是带有微秒级精度的 Time。
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE:
    description: Metadata that all persisted resources must have, which includes all
      objects users create.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          An unstructured key value map stored with a resource that may be set by external tools to store
          and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
          The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with
          an alphanumeric character. The key must be less than 63 characters.
          The total size of the keys and values cannot exceed 256 KB.
        type: object
        x-kab-description-zh: |-
          一个非结构化的键值映射，和资源一起被保存到持久性存储。
          此字段可以被外部工具来设置，保存或者检索任意的元数据。
          `annotations` 字段是不可查询的，在更改对象时要予以保留。
          映射中的键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，必须以字母或数字字符开头并结尾。
          映射中的键长度不能超过 63 个字符。
          整个键、值集合的总体尺寸不能超过 256 KB。
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed.
          Finalizers may be processed and removed in any order. Order is NOT enforced because
          it introduces significant risk of stuck finalizers.
          `finalizers` is a shared field, any actor with permission can reorder it.
        items:
          description: |-
            The name of the finalizer must is either a standard finalizer name
            (e.g. `"kubernetes"`, `"orphan"`, `"foregroundDeletion"`), or it contains at least one slash (`'/'`).
          type: string
          x-kab-description-zh: |-
            某个终结器（Finalizer）的名称。字符串可以是标准的终结器名称
            （如，`"kubernetes"`、`"orphan"`、`"foregroundDeletion"`），
            也可以包含最多一个斜线（`'/'`），即带域名的限定名称。
        type: array
        x-kab-description-zh: |-
          在从后端存储中删除对象之前，此列表字段必须被清空。
          列表中的每一项是一个标识符，对应的是一个要负责将该表项从列表中删除的组件。
          如果对象的 `deletionTimestamp` 字段非空，此列表中的项目只可以被删除，不能再添加。
          列表中的元素可以按任意顺序添加和删除。没有引入排序约束是因为可能造成管理组件之间的互锁。
          `finalizers` 是一个共享的字段，所有具备相应权限的主体都可以对其进行重排序。
        x-kubernetes-list-type: set
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          An optional prefix, used by the server, to generate a unique name **only if** the `name` field
          has not been provided.
          If this field is used, the `name` returned to the client will be different than the `name` passed.
          This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the `name` field, and may be truncated by
          the length of the suffix required to make the value unique on the server.
          If this field is specified and the generated name exists, the server will return a `409`.

          Applied only if `name` is not specified.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个供服务器使用的前缀，服务器在对象没有设置 `name`
          字段时会使用此前缀生成一个唯一的对象名称。
          如果使用了此字段，则返回给客户端的 `name` 值会与请求中包含的 `name` 值不同。
          所给的前缀字符串最终会被加上唯一的后缀字符串。
          对所给的前缀字符串，其合法性检查规则与 `name` 字段相同，可能会因为后缀长度（要保证名字在服务器上唯一）
          的原因而被截断。
          如果使用了此字段的时候，遇到所生成的名字已经存在的情况，服务器会返回 `409`。

          此字段只有在没有设置 `name` 属性的时候才起作用。
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects.
          Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and
          must start and end with an alphanumeric character.
          The key must be between 1 and 63 characters.
          The key can have `'/'` in it thus referred to as **qualified name**.
          The prefix part of a qualified name must be a valid DNS subdomain name.
          The value must be less than 64 characters with empty string allowed.
        type: object
        x-kab-description-zh: |-
          由字符格式的键和值组成的映射，可以用来对对象进行组织和分类（设定范围、执行过滤选择等）。
          键和值字符串都只能由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，并且以字母或数字字符开头并结尾。
          标签键必须介于 1 到 63 字符之间，其中可以包含 `'/'` 进而形成**限定名称（Qualified Name）**。
          限定名称的前缀部分必须是合法的 DNS 子域名。
          标签值不能超过 64 个字符，允许空字符。
      managedFields:
        description: |-
          This maps workflow-id and version to the set of fields that are managed by that workflow.
          This is mostly for internal housekeeping, and users typically shouldn't need to set or
          understand this field.
          A workflow can be the user's name, a controller's name, or the name of a specific apply path
          like 'ci-cd'.
          The set of fields is always in the version that the workflow used when modifying the object.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        type: array
        x-kab-description-zh: |-
          此字段是将工作流 ID 及版本映射到由该工作流所管理的字段集合。
          这一机制主要用来服务于内部状态维护，用户通常不需要设置或者理解这一字段的内容。
          所谓的工作流，可以是用户的名称、控制器的名称或者像 `"ci-cd"` 这样的某个特定的 apply 路径。
          字段的集合总是对应于工作流在更改对象时使用的版本。
        x-kubernetes-list-type: atomic
      name:
        description: |-
          Name must be unique within a namespace.
          Is required when creating resources, although some resources may allow a client to request
          the generation of an appropriate name automatically.
          Name is primarily intended for creation idempotence and configuration definition.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          对象的名称在名字空间内必须唯一。
          在创建资源时，通常需要为其指定名称，尽管某些资源允许客户端请求服务器端自动为其生成合适的名称。
          名称的用途主要是确保创建操作的幂等性，以及配置的定义。
          字段值不可变更。
      namespace:
        default: default
        description: |-
          The space within which each `name` must be unique.
          An empty `namespace` is equivalent to the `"default"` namespace.
          Not all objects are required to be scoped to a namespace - the value of this field for those
          objects will be empty.
          Must be a DNS_LABEL.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          某个名字空间的名称，`name` 属性值在其中必须唯一。
          如果 `namespace` 为空，则等价于指定的是 `"default"` 名字空间。
          并非所有对象都只能在名字空间范围内其定义，对于集群作用域的对象而言，此字段应该为空。
          字段值必须是合法的 DNS_LABEL。一经设置不可变更。
    required:
      - name
    type: object
    x-kab-description-zh: |-
      所有要被持久化存储的资源都必须关联的元数据部分。这些资源包括用户创建的资源。
      此结构是官方 ObjectMeta 的变种，主要关注创建对象时要指定的字段。
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET:
    description: Metadata that all persisted resources must have, which includes all
      objects users create.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          An unstructured key value map stored with a resource that may be set by external tools to store
          and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
          The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with
          an alphanumeric character. The key must be less than 63 characters.
          The total size of the keys and values cannot exceed 256 KB.
        type: object
        x-kab-description-zh: |-
          一个非结构化的键值映射，和资源一起被保存到持久性存储。
          此字段可以被外部工具来设置，保存或者检索任意的元数据。
          `annotations` 字段是不可查询的，在更改对象时要予以保留。
          映射中的键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，必须以字母或数字字符开头并结尾。
          映射中的键长度不能超过 63 个字符。
          整个键、值集合的总体尺寸不能超过 256 KB。
      creationTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          A timestamp representing the server time when this object was created.
          It is not guaranteed to be set in "happens-before" order across separate operations.
          It is represented in RFC3339 form and is in UTC. It is populated by the system,
          read-only. Null for lists.
        x-kab-description-zh: |-
          一个用来标示对象被创建时的服务器时间的时间戳。
          在存在多个对象操作时，这个字段的设置时机是不确定的。
          字段值是 RFC3339 格式的字符串，使用 UTC 时区。
          系统负责填写此字段。字段内容只能读取。
          对于列表性质的对象，此字段为 null。
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before it will be removed
          from the system. Only set when `deletionTimestamp` is also set.
          May only be shortened. Read-only.
        format: int64
        type: integer
        x-kab-description-zh: |-
          在将对象从系统中删除之前，允许对象执行体面终止操作的时长。
          只有设置了 `deletionTimestamp` 的时候才会设置。
          字段是只读的。
      deletionTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          A RFC 3339 date and time at which this resource will be deleted.
          This field is set by the server when a graceful deletion is requested by the user,
          and is not directly settable by a client.
          The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name)
          after the time in this field, once the `finalizers` list is empty.
          As long as the `finalizers` list contains items, deletion is blocked.
          Once the `deletionTimestamp` is set, this value may not be unset or be set further into the future,
          although it may be shortened or the resource may be deleted prior to this time.

          For example, a user may request that a Pod is deleted in 30 seconds.
          The kubelet will react by sending a graceful termination signal to the Containers in the Pod.
          After that 30 seconds, the kubelet will send a hard termination signal (`SIGKILL`) to the Container
          and after cleanup, remove the Pod from the API.
          In the presence of network partitions, this object may still exist after this timestamp,
          until an administrator or automated process can determine the resource is fully terminated.

          If not set, graceful deletion of the object has not been requested.
          Populated by the system when a graceful deletion is requested.
          Read-only.
        x-kab-description-zh: |-
          一个 RFC3339 格式的日期时间字符串，给出的是资源的预期删除时间。
          当用户为资源设置了体面终止宽限期限时，服务器会设置此字段，客户端不可以直接设置此字段。
          在经过此字段所设置的时间（秒数）之后，一旦 `finalizers` 列表为空，
          该资源应该被删除（在资源列表中消失，无法通过名字访问）。
          只要 `finalizers` 列表中包含表项，则删除操作就会被阻塞。
          一旦设置了 `deletionTimestamp`，则不可以取消该设置，也不可以将其改为将来的别的时间点。
          这个字段值可以被缩短，而且资源有可能在所给的期限之前已经被删除。

          例如，一个用户可能希望某个 Pod 在 30 秒后被删除。kubelet 会借此作出响应，向 Pod 中的容器发出体面终止信号。
          30 秒钟之后，kubelet 会向 Pod 中的容器发送硬性的终止信号（`SIGKILL`），并且在完成清理操作之后，
          从 API 服务器上删除 Pod 对象。
          如果出现了网络分区的情况，则超过了所设置的时间戳时对象仍然存在，
          知道管理员或者某个自动化的过程可以确定该资源被完全删除位置。

          如果没有设置此字段，则意味着对象没有请求体面删除处理。
          字段是由系统在请求了对象体面删除处理的时候设置的。
          字段值是只读的。
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed.
          Finalizers may be processed and removed in any order. Order is NOT enforced because
          it introduces significant risk of stuck finalizers.
          `finalizers` is a shared field, any actor with permission can reorder it.
        items:
          description: |-
            The name of the finalizer must is either a standard finalizer name
            (e.g. `"kubernetes"`, `"orphan"`, `"foregroundDeletion"`), or it contains at least one slash (`'/'`).
          type: string
          x-kab-description-zh: |-
            某个终结器（Finalizer）的名称。字符串可以是标准的终结器名称
            （如，`"kubernetes"`、`"orphan"`、`"foregroundDeletion"`），
            也可以包含最多一个斜线（`'/'`），即带域名的限定名称。
        type: array
        x-kab-description-zh: |-
          在从后端存储中删除对象之前，此列表字段必须被清空。
          列表中的每一项是一个标识符，对应的是一个要负责将该表项从列表中删除的组件。
          如果对象的 `deletionTimestamp` 字段非空，此列表中的项目只可以被删除，不能再添加。
          列表中的元素可以按任意顺序添加和删除。没有引入排序约束是因为可能造成管理组件之间的互锁。
          `finalizers` 是一个共享的字段，所有具备相应权限的主体都可以对其进行重排序。
        x-kubernetes-list-type: set
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          An optional prefix, used by the server, to generate a unique name **only if** the `name` field
          has not been provided.
          If this field is used, the `name` returned to the client will be different than the `name` passed.
          This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the `name` field, and may be truncated by
          the length of the suffix required to make the value unique on the server.
          If this field is specified and the generated name exists, the server will return a `409`.

          Applied only if `name` is not specified.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个供服务器使用的前缀，服务器在对象没有设置 `name`
          字段时会使用此前缀生成一个唯一的对象名称。
          如果使用了此字段，则返回给客户端的 `name` 值会与请求中包含的 `name` 值不同。
          所给的前缀字符串最终会被加上唯一的后缀字符串。
          对所给的前缀字符串，其合法性检查规则与 `name` 字段相同，可能会因为后缀长度（要保证名字在服务器上唯一）
          的原因而被截断。
          如果使用了此字段的时候，遇到所生成的名字已经存在的情况，服务器会返回 `409`。

          此字段只有在没有设置 `name` 属性的时候才起作用。
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
        format: int64
        type: integer
        x-kab-description-zh: |-
          代表对象期望状态的特定世代的序列数字。
          由系统填写。字段只读。
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects.
          Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and
          must start and end with an alphanumeric character.
          The key must be between 1 and 63 characters.
          The key can have `'/'` in it thus referred to as **qualified name**.
          The prefix part of a qualified name must be a valid DNS subdomain name.
          The value must be less than 64 characters with empty string allowed.
        type: object
        x-kab-description-zh: |-
          由字符格式的键和值组成的映射，可以用来对对象进行组织和分类（设定范围、执行过滤选择等）。
          键和值字符串都只能由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，并且以字母或数字字符开头并结尾。
          标签键必须介于 1 到 63 字符之间，其中可以包含 `'/'` 进而形成**限定名称（Qualified Name）**。
          限定名称的前缀部分必须是合法的 DNS 子域名。
          标签值不能超过 64 个字符，允许空字符。
      managedFields:
        description: |-
          This maps workflow-id and version to the set of fields that are managed by that workflow.
          This is mostly for internal housekeeping, and users typically shouldn't need to set or
          understand this field.
          A workflow can be the user's name, a controller's name, or the name of a specific apply path
          like 'ci-cd'.
          The set of fields is always in the version that the workflow used when modifying the object.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        type: array
        x-kab-description-zh: |-
          此字段是将工作流 ID 及版本映射到由该工作流所管理的字段集合。
          这一机制主要用来服务于内部状态维护，用户通常不需要设置或者理解这一字段的内容。
          所谓的工作流，可以是用户的名称、控制器的名称或者像 `"ci-cd"` 这样的某个特定的 apply 路径。
          字段的集合总是对应于工作流在更改对象时使用的版本。
        x-kubernetes-list-type: atomic
      name:
        description: |-
          Name must be unique within a namespace.
          Is required when creating resources, although some resources may allow a client to request
          the generation of an appropriate name automatically.
          Name is primarily intended for creation idempotence and configuration definition.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          对象的名称在名字空间内必须唯一。
          在创建资源时，通常需要为其指定名称，尽管某些资源允许客户端请求服务器端自动为其生成合适的名称。
          名称的用途主要是确保创建操作的幂等性，以及配置的定义。
          字段值不可变更。
      namespace:
        default: default
        description: |-
          The space within which each `name` must be unique.
          An empty `namespace` is equivalent to the `"default"` namespace.
          Not all objects are required to be scoped to a namespace - the value of this field for those
          objects will be empty.
          Must be a DNS_LABEL.
          Cannot be updated.
        type: string
        x-kab-description-zh: |-
          某个名字空间的名称，`name` 属性值在其中必须唯一。
          如果 `namespace` 为空，则等价于指定的是 `"default"` 名字空间。
          并非所有对象都只能在名字空间范围内其定义，对于集群作用域的对象而言，此字段应该为空。
          字段值必须是合法的 DNS_LABEL。一经设置不可变更。
      ownerReferences:
        description: |-
          List of objects depended by this object.
          If **all** objects in the list have been deleted, this object will be garbage collected.
          If this object is managed by a controller, an entry in this list will point to the controller,
          with the `controller` field set to `true`.
          There cannot be more than one managing controller.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        type: array
        x-kab-description-zh: |-
          此对象所依赖的对象的列表。
          如果列表中的所有对象都已被删除，则此对象也会被删除。
          如果此对象由某个控制器负责管理，此列表中会有一项指向该控制器，且其 `controller` 字段被设置为 `true`。
          同一个对象在同一时刻只能由一个负责管理的控制器。
        x-kubernetes-list-map-keys:
          - uid
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can be used by clients
          to determine when objects have changed.
          May be used for optimistic concurrency, change detection, and the watch operation on a resource
          or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.
          Populated by the system. Read-only.
        type: string
        x-kab-description-zh: |-
          一个不透明的字符串值，用来标示对象的内部版本号。客户端可以使用它来判断对象是否发生了变更。
          客户端可以使用此字段来实现乐观并发控制、变更检测以及对一个或一组资源的监视（watch）操作。
          客户端必须视字段值为不透明数据，将其原封不动地传回给服务器端。
          字段值可能只对一个或者一组资源而言是合法的。
          系统负责填写此字段。客户端只能读取。
      selfLink:
        description: '**DEPRECATED**: `selfLink` is a legacy read-only field that
          is no longer populated by the system.'
        type: string
        x-kab-description-zh: '**已弃用**： `selfLink` 是一个历史遗留的只读字段，系统不再填写此字段。'
      uid:
        description: |-
          A value unique in time and space for this object.
          It is typically generated by the server on successful creation of a resource and is not allowed
          to change on `PUT` operations. Populated by the system. Read-only.
        type: string
        x-kab-description-zh: |-
          为此对象生成的一个从时间维度空间维度都保证唯一性的值。
          通常由服务器端在成功创建完资源之后生成，在 `PUT` 等操作时不可更改。
          字段值由系统填写。客户端只能读取。
    required:
      - creationTimestamp
      - generation
      - name
      - resourceVersion
      - selfLink
      - uid
    type: object
    x-kab-description-zh: |-
      所有要被持久化存储的资源都必须关联的元数据部分。这些资源包括用户创建的资源。
      此结构是官方 ObjectMeta 的变种，主要关注读取对象时可能或一定存在的字段。
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERCREATE:
    description: Metadata for nested Pod template.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          An unstructured key value map stored with a resource that may be set by external tools to store
          and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
          The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with
          an alphanumeric character. The key must be less than 63 characters.
          The total size of the keys and values cannot exceed 256 KB.
        type: object
        x-kab-description-zh: |-
          一个非结构化的键值映射，和资源一起被保存到持久性存储。
          此字段可以被外部工具来设置，保存或者检索任意的元数据。
          `annotations` 字段是不可查询的，在更改对象时要予以保留。
          映射中的键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，必须以字母或数字字符开头并结尾。
          映射中的键长度不能超过 63 个字符。
          整个键、值集合的总体尺寸不能超过 256 KB。
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed.
          Finalizers may be processed and removed in any order.  Order is NOT enforced because
          it introduces significant risk of stuck finalizers.
          `finalizers` is a shared field, any actor with permission can reorder it.
        items:
          description: |-
            The name of the finalizer must is either a standard finalizer name
            (e.g. `"kubernetes"`, `"orphan"`, `"foregroundDeletion"`), or it contains at least one slash (`'/'`).
          type: string
          x-kab-description-zh: |-
            某个终结器（Finalizer）的名称。字符串可以是标准的终结器名称
            （如，`"kubernetes"`、`"orphan"`、`"foregroundDeletion"`），
            也可以包含最多一个斜线（`'/'`），即带域名的限定名称。
        type: array
        x-kab-description-zh: |-
          在从后端存储中删除对象之前，此列表字段必须被清空。
          列表中的每一项是一个标识符，对应的是一个要负责将该表项从列表中删除的组件。
          如果对象的 `deletionTimestamp` 字段非空，此列表中的项目只可以被删除，不能再添加。
          列表中的元素可以按任意顺序添加和删除。没有引入排序约束是因为可能造成管理组件之间的互锁。
          `finalizers` 是一个共享的字段，所有具备相应权限的主体都可以对其进行重排序。
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          An optional prefix, used by the server, to generate a unique name **only if** the `name` field
          has not been provided. For embedded Pod templates, this field is ignored.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个供服务器使用的前缀，服务器在对象没有设置 `name`
          字段时会使用此前缀生成一个唯一的对象名称。
          对于嵌套的 Pod 模板，此字段是被忽略的。
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects.
          Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and
          must start and end with an alphanumeric character.
          The key must be between 1 and 63 characters.
          The key can have `'/'` in it thus referred to as *qualified name*.
          The prefix part of a qualified name must be a valid DNS subdomain name.
          The value must be less than 64 characters with empty string allowed.
        type: object
        x-kab-description-zh: |-
          由字符格式的键和值组成的映射，可以用来对对象进行组织和分类（设定范围、执行过滤选择等）。
          键和值字符串都只能由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，并且以字母或数字字符开头并结尾。
          标签键必须介于 1 到 63 字符之间，其中可以包含 `'/'` 进而形成**限定名称（Qualified Name）**。
          限定名称的前缀部分必须是合法的 DNS 子域名。
          标签值不能超过 64 个字符，允许空字符。
      name:
        description: The name can be specified, but it will be overwritten by the
          workload controller anyway.
        type: string
        x-kab-description-zh: 名字可以设定，但是这里的名字会被负载的控制器重载。
      namespace:
        description: The namespace for the Pod. This can be specified, but its value
          is ignored.
        type: string
        x-kab-description-zh: Pod 的名字空间。可以设定，但是所设置的值会被忽略。
    required:
      - labels
    type: object
    x-kab-description-zh: 用于嵌套的 Pod 模板的对象元数据。
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERGET:
    description: Metadata for nested Pod template.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          An unstructured key value map stored with a resource that may be set by external tools to store
          and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
          The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with
          an alphanumeric character. The key must be less than 63 characters.
          The total size of the keys and values cannot exceed 256 KB.
        type: object
        x-kab-description-zh: |-
          一个非结构化的键值映射，和资源一起被保存到持久性存储。
          此字段可以被外部工具来设置，保存或者检索任意的元数据。
          `annotations` 字段是不可查询的，在更改对象时要予以保留。
          映射中的键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，必须以字母或数字字符开头并结尾。
          映射中的键长度不能超过 63 个字符。
          整个键、值集合的总体尺寸不能超过 256 KB。
      creationTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          A timestamp representing the server time when this object was created.
          It is not guaranteed to be set in "happens-before" order across separate operations.
          It is represented in RFC3339 form and is in UTC. It is populated by the system,
          read-only. Null for lists.
        x-kab-description-zh: |-
          一个用来标示对象被创建时的服务器时间的时间戳。
          在存在多个对象操作时，这个字段的设置时机是不确定的。
          字段值是 RFC3339 格式的字符串，使用 UTC 时区。
          系统负责填写此字段。字段内容只能读取。
          对于列表性质的对象，此字段为 null。
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before it will be removed
          from the system. Only set when `deletionTimestamp` is also set.
          May only be shortened. Read-only.
        format: int64
        type: integer
        x-kab-description-zh: |-
          在将对象从系统中删除之前，允许对象执行体面终止操作的时长。
          只有设置了 `deletionTimestamp` 的时候才会设置。
          字段是只读的。
      deletionTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          A RFC 3339 date and time at which this resource will be deleted.
          This field is set by the server when a graceful deletion is requested by the user,
          and is not directly settable by a client.
          The resource is expected to be deleted (no longer visible from resource lists, and not reachable by name)
          after the time in this field, once the `finalizers` list is empty.
          As long as the `finalizers` list contains items, deletion is blocked.
          Once the `deletionTimestamp` is set, this value may not be unset or be set further into the future,
          although it may be shortened or the resource may be deleted prior to this time.

          For example, a user may request that a Pod is deleted in 30 seconds.
          The kubelet will react by sending a graceful termination signal to the Containers in the Pod.
          After that 30 seconds, the kubelet will send a hard termination signal (`SIGKILL`) to the Container
          and after cleanup, remove the Pod from the API.
          In the presence of network partitions, this object may still exist after this timestamp,
          until an administrator or automated process can determine the resource is fully terminated.

          If not set, graceful deletion of the object has not been requested.
          Populated by the system when a graceful deletion is requested.
          Read-only.
        x-kab-description-zh: |-
          一个 RFC3339 格式的日期时间字符串，给出的是资源的预期删除时间。
          当用户为资源设置了体面终止宽限期限时，服务器会设置此字段，客户端不可以直接设置此字段。
          在经过此字段所设置的时间（秒数）之后，一旦 `finalizers` 列表为空，
          该资源应该被删除（在资源列表中消失，无法通过名字访问）。
          只要 `finalizers` 列表中包含表项，则删除操作就会被阻塞。
          一旦设置了 `deletionTimestamp`，则不可以取消该设置，也不可以将其改为将来的别的时间点。
          这个字段值可以被缩短，而且资源有可能在所给的期限之前已经被删除。

          例如，一个用户可能希望某个 Pod 在 30 秒后被删除。kubelet 会借此作出响应，向 Pod 中的容器发出体面终止信号。
          30 秒钟之后，kubelet 会向 Pod 中的容器发送硬性的终止信号（`SIGKILL`），并且在完成清理操作之后，
          从 API 服务器上删除 Pod 对象。
          如果出现了网络分区的情况，则超过了所设置的时间戳时对象仍然存在，
          知道管理员或者某个自动化的过程可以确定该资源被完全删除位置。

          如果没有设置此字段，则意味着对象没有请求体面删除处理。
          字段是由系统在请求了对象体面删除处理的时候设置的。
          字段值是只读的。
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed.
          Finalizers may be processed and removed in any order. Order is NOT enforced because
          it introduces significant risk of stuck finalizers.
          `finalizers` is a shared field, any actor with permission can reorder it.
        items:
          description: The name of the finalizer must is either a standard finalizer
            name (e.g. `"kubernetes"`, `"orphan"`, `"foregroundDeletion"`), or it
            contains at least one slash (`'/'`).
          type: string
        type: array
        x-kab-description-zh: |-
          在从后端存储中删除对象之前，此列表字段必须被清空。
          列表中的每一项是一个标识符，对应的是一个要负责将该表项从列表中删除的组件。
          如果对象的 `deletionTimestamp` 字段非空，此列表中的项目只可以被删除，不能再添加。
          列表中的元素可以按任意顺序添加和删除。没有引入排序约束是因为可能造成管理组件之间的互锁。
          `finalizers` 是一个共享的字段，所有具备相应权限的主体都可以对其进行重排序。
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          An optional prefix, used by the server, to generate a unique name **only if** the `name` field
          has not been provided. For embedded Pod templates, this field is ignored.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个供服务器使用的前缀，服务器在对象没有设置 `name`
          字段时会使用此前缀生成一个唯一的对象名称。
          对于嵌套的 Pod 模板，此字段会被忽略。
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects.
          Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and
          must start and end with an alphanumeric character.
          The key must be between 1 and 63 characters.
          The key can have `'/'` in it thus referred to as *qualified name*.
          The prefix part of a qualified name must be a valid DNS subdomain name.
          The value must be less than 64 characters with empty string allowed.
        type: object
        x-kab-description-zh: |-
          由字符格式的键和值组成的映射，可以用来对对象进行组织和分类（设定范围、执行过滤选择等）。
          键和值字符串都只能由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，并且以字母或数字字符开头并结尾。
          标签键必须介于 1 到 63 字符之间，其中可以包含 `'/'` 进而形成**限定名称（Qualified Name）**。
          限定名称的前缀部分必须是合法的 DNS 子域名。
          标签值不能超过 64 个字符，允许空字符。
      name:
        description: The name can be specified, but it will be overwritten by the
          workload controller anyway.
        type: string
        x-kab-description-zh: 名字可以设定，但是这里的名字会被负载的控制器重载。
      namespace:
        description: The namespace for the Pod. This can be specified, but its value
          is ignored.
        type: string
        x-kab-description-zh: Pod 的名字空间。可以设定，但是所设置的值会被忽略。
      ownerReferences:
        description: |-
          List of objects depended by this object.
          If **all** objects in the list have been deleted, this object will be garbage collected.
          If this object is managed by a controller, an entry in this list will point to the controller,
          with the `controller` field set to `true`.
          There cannot be more than one managing controller.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        type: array
        x-kab-description-zh: |-
          此对象所依赖的对象的列表。
          如果列表中的所有对象都已被删除，则此对象也会被删除。
          如果此对象由某个控制器负责管理，此列表中会有一项指向该控制器，且其 `controller` 字段被设置为 `true`。
          同一个对象在同一时刻只能由一个负责管理的控制器。
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
      resourceVersion:
        description: |-
          An opaque value that represents the internal version of this object that can be used by clients
          to determine when objects have changed.
          May be used for optimistic concurrency, change detection, and the watch operation on a resource
          or set of resources.
          Clients must treat these values as opaque and passed unmodified back to the server.
          They may only be valid for a particular resource or set of resources.
          Populated by the system. Read-only.
        type: string
        x-kab-description-zh: |-
          一个不透明的字符串值，用来标示对象的内部版本号。客户端可以使用它来判断对象是否发生了变更。
          客户端可以使用此字段来实现乐观并发控制、变更检测以及对一个或一组资源的监视（watch）操作。
          客户端必须视字段值为不透明数据，将其原封不动地传回给服务器端。
          字段值可能只对一个或者一组资源而言是合法的。
          系统负责填写此字段。客户端只能读取。
      uid:
        description: |-
          A value unique in time and space for this object.
          It is typically generated by the server on successful creation of a resource and is not allowed
          to change on `PUT` operations. Populated by the system. Read-only.
        type: string
        x-kab-description-zh: |-
          为此对象生成的一个从时间维度空间维度都保证唯一性的值。
          通常由服务器端在成功创建完资源之后生成，在 `PUT` 等操作时不可更改。
          字段值由系统填写。客户端只能读取。
    required:
      - creationTimestamp
      - generateName
      - labels
      - name
      - namespace
      - ownerReferences
      - resourceVersion
      - uid
    type: object
    x-kab-description-zh: 用于嵌套的 Pod 模板的对象元数据。
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.INNERUPDATE:
    description: Metadata for nested Pod template.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          An unstructured key value map stored with a resource that may be set by external tools to store
          and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
          The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with
          an alphanumeric character. The key must be less than 63 characters.
          The total size of the keys and values cannot exceed 256 KB.
        type: object
        x-kab-description-zh: |-
          一个非结构化的键值映射，和资源一起被保存到持久性存储。
          此字段可以被外部工具来设置，保存或者检索任意的元数据。
          `annotations` 字段是不可查询的，在更改对象时要予以保留。
          映射中的键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，必须以字母或数字字符开头并结尾。
          映射中的键长度不能超过 63 个字符。
          整个键、值集合的总体尺寸不能超过 256 KB。
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before it will be removed
          from the system. Only set when `deletionTimestamp` is also set.
          May only be shortened.
        format: int64
        type: integer
        x-kab-description-zh: |-
          在将对象从系统中删除之前，允许对象执行体面终止操作的时长。
          只有设置了 `deletionTimestamp` 的时候才会设置。
          更新时只能缩短。
      deletionTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          A RFC 3339 date and time at which this resource will be deleted.
          This field is set by the server when a graceful deletion is requested by the user,
          and is not directly settable by a client.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the future,
          although it may be shortened or the resource may be deleted prior to this time.
        x-kab-description-zh: |-
          一个 RFC3339 格式的日期时间字符串，给出的是资源的预期删除时间。
          当用户为资源设置了体面终止宽限期限时，服务器会设置此字段，客户端不可以直接设置此字段。
          一旦设置了 `deletionTimestamp`，则不可以取消该设置，也不可以将其改为将来的别的时间点。
          这个字段值可以被缩短，而且资源有可能在所给的期限之前已经被删除。
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed.
          Finalizers may be processed and removed in any order. Order is NOT enforced because
          it introduces significant risk of stuck finalizers.
          `finalizers` is a shared field, any actor with permission can reorder it.
        items:
          description: The name of the finalizer must is either a standard finalizer
            name (e.g. `"kubernetes"`, `"orphan"`, `"foregroundDeletion"`), or it
            contains at least one slash (`'/'`).
          type: string
        type: array
        x-kab-description-zh: |-
          在从后端存储中删除对象之前，此列表字段必须被清空。
          列表中的每一项是一个标识符，对应的是一个要负责将该表项从列表中删除的组件。
          如果对象的 `deletionTimestamp` 字段非空，此列表中的项目只可以被删除，不能再添加。
          列表中的元素可以按任意顺序添加和删除。没有引入排序约束是因为可能造成管理组件之间的互锁。
          `finalizers` 是一个共享的字段，所有具备相应权限的主体都可以对其进行重排序。
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          An optional prefix, used by the server, to generate a unique name **only if** the `name` field
          has not been provided. For embedded Pod templates, this field is ignored.
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个供服务器使用的前缀，服务器在对象没有设置 `name`
          字段时会使用此前缀生成一个唯一的对象名称。
          对于嵌套的 Pod 模板，此字段会被忽略。
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects.
          Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and
          must start and end with an alphanumeric character.
          The key must be between 1 and 63 characters.
          The key can have `'/'` in it thus referred to as *qualified name*.
          The prefix part of a qualified name must be a valid DNS subdomain name.
          The value must be less than 64 characters with empty string allowed.
        type: object
        x-kab-description-zh: |-
          由字符格式的键和值组成的映射，可以用来对对象进行组织和分类（设定范围、执行过滤选择等）。
          键和值字符串都只能由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，并且以字母或数字字符开头并结尾。
          标签键必须介于 1 到 63 字符之间，其中可以包含 `'/'` 进而形成**限定名称（Qualified Name）**。
          限定名称的前缀部分必须是合法的 DNS 子域名。
          标签值不能超过 64 个字符，允许空字符。
      name:
        description: The name can be specified, but it will be overwritten by the
          workload controller anyway.
        type: string
        x-kab-description-zh: 名字可以设定，但是这里的名字会被负载的控制器重载。
      namespace:
        description: The namespace for the Pod. This can be specified, but its value
          is ignored.
        type: string
        x-kab-description-zh: Pod 的名字空间。可以设定，但是所设置的值会被忽略。
      ownerReferences:
        description: |-
          List of objects depended by this object.
          If **all** objects in the list have been deleted, this object will be garbage collected.
          If this object is managed by a controller, an entry in this list will point to the controller,
          with the `controller` field set to `true`.
          There cannot be more than one managing controller.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        type: array
        x-kab-description-zh: |-
          此对象所依赖的对象的列表。
          如果列表中的所有对象都已被删除，则此对象也会被删除。
          如果此对象由某个控制器负责管理，此列表中会有一项指向该控制器，且其 `controller` 字段被设置为 `true`。
          同一个对象在同一时刻只能由一个负责管理的控制器。
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
      uid:
        description: |-
          A value unique in time and space for this object.
          It is typically generated by the server on successful creation of a resource and is not allowed
          to change on PUT operations. Populated by the system. Read-only.
          When updating an existing object, its value must match the current value.
        type: string
        x-kab-description-zh: |-
          为此对象生成的一个从时间维度空间维度都保证唯一性的值。
          通常由服务器端在成功创建完资源之后生成，在 `PUT` 等操作时不可更改。
          字段值由系统填写。客户端只能读取。
          更新现有对象时，此字段的设置值必须与当前值相同。
    type: object
    x-kab-description-zh: 用于嵌套的 Pod 模板的对象元数据。
  io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE:
    description: Metadata that all persisted resources must have, which includes all
      objects users create.
    properties:
      annotations:
        additionalProperties:
          type: string
        description: |-
          An unstructured key value map stored with a resource that may be set by external tools to store
          and retrieve arbitrary metadata.
          They are not queryable and should be preserved when modifying objects.
          The key must consist of alphanumeric characters, '`-`', '`_`' or '`.`', and must start and end with
          an alphanumeric character. The key must be less than 63 characters.
          The total size of the keys and values cannot exceed 256 KB.
        type: object
        x-kab-description-zh: |-
          一个非结构化的键值映射，和资源一起被保存到持久性存储。
          此字段可以被外部工具来设置，保存或者检索任意的元数据。
          `annotations` 字段是不可查询的，在更改对象时要予以保留。
          映射中的键必须由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，必须以字母或数字字符开头并结尾。
          映射中的键长度不能超过 63 个字符。
          整个键、值集合的总体尺寸不能超过 256 KB。
      deletionGracePeriodSeconds:
        description: |-
          Number of seconds allowed for this object to gracefully terminate before it will be removed
          from the system. Only set when `deletionTimestamp` is also set.
          May only be shortened. Read-only.
        format: int64
        type: integer
        x-kab-description-zh: |-
          在将对象从系统中删除之前，允许对象执行体面终止操作的时长。
          只有设置了 `deletionTimestamp` 的时候才会设置。
          官方文档讲字段是只读的，但是其取值可以被减少。
      deletionTimestamp:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: |-
          A RFC 3339 date and time at which this resource will be deleted.
          This field is set by the server when a graceful deletion is requested by the use,
          and is not directly settable by a client.
          Once the deletionTimestamp is set, this value may not be unset or be set further into the future,
          although it may be shortened or the resource may be deleted prior to this time.
        x-kab-description-zh: |-
          一个 RFC3339 格式的日期时间字符串，给出的是资源的预期删除时间。
          当用户为资源设置了体面终止宽限期限时，服务器会设置此字段，客户端不可以直接设置此字段。
          一旦设置了 `deletionTimestamp`，则不可以取消该设置，也不可以将其改为将来的别的时间点。
          这个字段值可以被缩短，而且资源有可能在所给的期限之前已经被删除。
      finalizers:
        description: |-
          Must be empty before the object is deleted from the registry.
          Each entry is an identifier for the responsible component that will remove the entry from the list.
          If the `deletionTimestamp` of the object is non-nil, entries in this list can only be removed.
          Finalizers may be processed and removed in any order. Order is NOT enforced because
          it introduces significant risk of stuck finalizers.
          `finalizers` is a shared field, any actor with permission can reorder it.
        items:
          description: The name of the finalizer must is either a standard finalizer
            name (e.g. "`kubernetes`", "`orphan`", "`foregroundDeletion`"), or it
            contains at least one slash ("`/`").
          type: string
          x-kab-description-zh: |-
            某个终结器（Finalizer）的名称。字符串可以是标准的终结器名称
            （如，`"kubernetes"`、`"orphan"`、`"foregroundDeletion"`），
            也可以包含最多一个斜线（`'/'`），即带域名的限定名称。
        type: array
        x-kab-description-zh: |-
          在从后端存储中删除对象之前，此列表字段必须被清空。
          列表中的每一项是一个标识符，对应的是一个要负责将该表项从列表中删除的组件。
          如果对象的 `deletionTimestamp` 字段非空，此列表中的项目只可以被删除，不能再添加。
          列表中的元素可以按任意顺序添加和删除。没有引入排序约束是因为可能造成管理组件之间的互锁。
          `finalizers` 是一个共享的字段，所有具备相应权限的主体都可以对其进行重排序。
        x-kubernetes-list-type: set
        x-kubernetes-patch-strategy: merge
      generateName:
        description: |-
          An optional prefix, used by the server, to generate a unique name **only if** the `name` field
          has not been provided.
          If this field is used, the `name` returned to the client will be different than the `name` passed.
          This value will also be combined with a unique suffix.
          The provided value has the same validation rules as the `name` field, and may be truncated by
          the length of the suffix required to make the value unique on the server.
          If this field is specified and the generated name exists, the server will **NOT** return a `"409"`.
          Instead, it will either return `"201 Created"` or `"500"` with reason `"ServerTimeout"`
          indicating a unique name could not be found in the time allotted,
          and the client should retry (optionally after the time indicated in the `"Retry-After"` header).
        type: string
        x-kab-description-zh: |-
          此字段给出的是一个供服务器使用的前缀，服务器在对象没有设置 `name`
          字段时会使用此前缀生成一个唯一的对象名称。
          如果使用了此字段，则返回给客户端的 `name` 值会与请求中包含的 `name` 值不同。
          所给的前缀字符串最终会被加上唯一的后缀字符串。
          对所给的前缀字符串，其合法性检查规则与 `name` 字段相同，可能会因为后缀长度（要保证名字在服务器上唯一）
          的原因而被截断。

          如果使用了此字段的时候，遇到所生成的名字已经存在的情况，服务器不会会返回 `"409"`。
          相反，服务器或者会返回 `"201 Created"` 或者 `"500"`，原因为 `"ServerTimeout"`，
          表明服务器无法在有限的时间内找到一个唯一的名称，客户端这时应该重试。
          重试时可以参考 `"Retry-After"` 头部所给的时间长度。
      generation:
        description: |-
          A sequence number representing a specific generation of the desired state.
          Populated by the system. Read-only.
        format: int64
        type: integer
        x-kab-description-zh: |-
          代表对象期望状态的特定世代的序列数字。
          由系统填写。字段只读。
      labels:
        additionalProperties:
          type: string
        description: |-
          Map of string keys and values that can be used to organize and categorize (scope and select) objects.
          Both the key and the value must consist of alphanumeric characters, `'-'`, `'_'` or `'.'`, and
          must start and end with an alphanumeric character.
          The key must be between 1 and 63 characters.
          The key can have `'/'` in it thus referred to as **qualified name**.
          The prefix part of a qualified name must be a valid DNS subdomain name.
          The value must be less than 64 characters with empty string allowed.
        type: object
        x-kab-description-zh: |-
          由字符格式的键和值组成的映射，可以用来对对象进行组织和分类（设定范围、执行过滤选择等）。
          键和值字符串都只能由字母、数字、`'-'`、`'_'` 或 `'.'` 组成，并且以字母或数字字符开头并结尾。
          标签键必须介于 1 到 63 字符之间，其中可以包含 `'/'` 进而形成**限定名称（Qualified Name）**。
          限定名称的前缀部分必须是合法的 DNS 子域名。
          标签值不能超过 64 个字符，允许空字符。
      managedFields:
        description: |-
          This maps workflow-id and version to the set of fields that are managed by that workflow.
          This is mostly for internal housekeeping, and users typically shouldn't need to set or
          understand this field.
          A workflow can be the user's name, a controller's name, or the name of a specific apply path
          like 'ci-cd'.
          The set of fields is always in the version that the workflow used when modifying the object.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ManagedFieldsEntry'
        type: array
        x-kab-description-zh: |-
          此字段是将工作流 ID 及版本映射到由该工作流所管理的字段集合。
          这一机制主要用来服务于内部状态维护，用户通常不需要设置或者理解这一字段的内容。
          所谓的工作流，可以是用户的名称、控制器的名称或者像 `"ci-cd"` 这样的某个特定的 apply 路径。
          字段的集合总是对应于工作流在更改对象时使用的版本。
        x-kubernetes-list-type: atomic
      name:
        description: The name cannot be updated so the value (if provided) must match
          the current name.
        type: string
        x-kab-description-zh: 对象名称不可变更，如果提供了此字段，必须与当前名称相同。
      namespace:
        description: The namespace cannot be updated so the value (if provided) must
          match the current namespace.
        type: string
        x-kab-description-zh: 对象的名字空间不可变更，如果提供了此字段，必须与当前名字空间相同。
      ownerReferences:
        description: |-
          List of objects depended by this object.
          If **all** objects in the list have been deleted, this object will be garbage collected.
          If this object is managed by a controller, an entry in this list will point to the controller,
          with the `controller` field set to `true`.
          There cannot be more than one managing controller.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference'
        type: array
        x-kab-description-zh: |-
          此对象所依赖的对象的列表。
          如果列表中的所有对象都已被删除，则此对象也会被删除。
          如果此对象由某个控制器负责管理，此列表中会有一项指向该控制器，且其 `controller` 字段被设置为 `true`。
          同一个对象在同一时刻只能由一个负责管理的控制器。
        x-kubernetes-list-map-keys:
          - uid
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: uid
        x-kubernetes-patch-strategy: merge
      uid:
        description: |-
          A value unique in time and space for this object.
          It is typically generated by the server on successful creation of a resource and is not allowed
          to change on `PUT` operations. Populated by the system. Read-only.
          When updating an existing object, its value must match the current value.
        type: string
        x-kab-description-zh: |-
          为此对象生成的一个从时间维度空间维度都保证唯一性的值。
          通常由服务器端在成功创建完资源之后生成，在 `PUT` 等操作时不可更改。
          字段值由系统填写。客户端只能读取。
          更新现有对象时，此字段的取值必须与当前值相同。
    type: object
    x-kab-description-zh: |-
      所有要被持久化存储的资源都必须关联的元数据部分。这些资源包括用户创建的资源。
      此结构是官方 ObjectMeta 的变种，主要关注更新对象时可以指定的字段。
  io.k8s.apimachinery.pkg.apis.meta.v1.OwnerReference:
    description: |-
      OwnerReference contains enough information to let you identify an owning object.
      An owning object must be in the same namespace as the dependent, or be cluster-scoped,
      so there is no `namespace` field.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        minLength: 1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      blockOwnerDeletion:
        default: false
        description: |-
          If `true`, AND if the owner has the `"foregroundDeletion"` finalizer, then the owner cannot
          be deleted from the key-value store until this reference is removed.
          To set this field, a user needs *delete* permission of the owner,
          otherwise `"422 Unprocessable Entity"` will be returned.
        type: boolean
        x-kab-description-zh: |-
          字段为 `true` 并且此属主上设置了 `"foregroundDeletion"` 终结器时，属主对象不可从后端存储中删除，
          要等到此引用被去除之后才能删除。
          要设置此字段，用户需要对属主对象具有 **delete** 操作的权限，
          否则服务器会返回 `"422 Unprocessable Entity"`。
      controller:
        description: If `true`, this reference points to the managing controller.
        type: boolean
        x-kab-description-zh: 如果为 `true`，则此引用指向管理控制器。
      kind:
        description: Kind of the referenced resource.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的类别。
      name:
        description: Name of the referenced resource.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的名称。
      uid:
        description: UID of the referenced resource.
        minLength: 1
        type: string
        x-kab-description-zh: 被引用资源的 UID。
    required:
      - apiVersion
      - kind
      - name
      - uid
    type: object
    x-kab-description-zh: |-
      OwnerReference 包含足够的信息便于用户识别属主对象。
      属主对象必须与依赖对象处于相同的名字空间，或者是集群作用域的，因而没有 `namespace` 字段。
    x-kubernetes-map-type: atomic
  io.k8s.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata:
    description: |-
      PartialObjectMetadata is a generic representation of any object with ObjectMeta.
      It allows clients to get access to a particular ObjectMeta schema without knowing the details of the version.
      This data is currently used in the response of a table request.
    properties:
      apiVersion:
        description: The version of the schema for the object representation
        enum:
          - meta.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PartialObjectMetadata
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata
        x-kab-description-zh: 标准的对象元数据。
    type: object
    x-kab-description-zh: |-
      PartialObjectMetadata 是所有带有 ObjectMeta 的对象的一种泛化表示形式。
      此结构使得客户能够访问特定的 ObjectMeta 模式定义而不必知道版本细节。
      此数据目前被用于表格式数据请求的响应中。
  io.k8s.apimachinery.pkg.apis.meta.v1.PartialObjectMetadataList:
    description: PartialObjectMetadataList 包含一组对象，每个对象仅包含其元数据内容。
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - meta.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of partial object metadata.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.PartialObjectMetadata'
        type: array
        x-kab-description-zh: PartialObjectMetadata 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - PartialObjectMetadataList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.Patch:
    description: |-
      Patch is provided to give a concrete name and type to the Kubernetes PATCH request body.
      The actual content in the body depends on the patch type.

      - For `"application/merge-patch+json"`, `"application/strategic-merge-patch+json"` and
        `"application/apply-patch+yaml"`, please check the GET variant of the target resource for the schema.
      - For `"application/json-patch+json"`, the schema is different.
        However, you can still check the CREATE variant of the target resource for references.
    x-kab-description-zh: |-
      Patch 是被用来为 Kubernetes PATCH 请求的主体提供具体的名字和类别信息的。
      此结构中的具体定义取决于 PATCH 操作的类型。

      - 对于 `"application/merge-patch+json"`、`"application/strategic-merge-patch+json"` 和
        `"application/apply-patch+yaml"`，可以查阅目标资源的 GET 模式定义。
      - 对于 `"application/json-patch+json"`，模式定义会有所不同。
        不过，仍可以查看目标资源的 CREATE 模式定义。
  io.k8s.apimachinery.pkg.apis.meta.v1.Preconditions:
    description: Preconditions must be fulfilled before an operation (*update*, *delete*,
      etc.) is carried out.
    properties:
      resourceVersion:
        description: The target `resourceVersion`.
        type: string
        x-kab-description-zh: 目标对象的 `resourceVersion` 必须与此相同。
      uid:
        description: The target UID.
        type: string
        x-kab-description-zh: 目标对象的 UID 必须与此相同。
    type: object
    x-kab-description-zh: Preconditions 是执行某项操作（`update`、`delete` 等）之前必须满足的条件。
  io.k8s.apimachinery.pkg.apis.meta.v1.ServerAddressByClientCIDR:
    description: A map between the server address and client IP ranges.
    properties:
      clientCIDR:
        description: The CIDR with which clients can match their IP to figure out
          the server address that they should use.
        minLength: 1
        type: string
        x-kab-description-zh: 字段为客户端的一个 CIDR 网段，客户 IP 地址与此网段匹配时，可以使用 `serverAddress`
          所给的服务器地址。
      serverAddress:
        description: |-
          Address of this server, suitable for a client that matches the above CIDR.
          This can be a `<hostname>`, `<hostname>:<port>`, `<ip>` or `<ip>:<port>`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          服务器的地址，适合于与 `clientCIDR` 匹配的客户端调用。
          此字段值可以是 `<主机名>`、`<主机名>:<端口>`、`<IP 地址>` 或者 `<IP 地址>:<端口>`。
    required:
      - clientCIDR
      - serverAddress
    type: object
    x-kab-description-zh: 服务器地址与客户端 IP 段之间的映射。
  io.k8s.apimachinery.pkg.apis.meta.v1.Status:
    description: |-
      Status is a return value for calls that don't return other objects.
      This object is returned by the API in two cases:

      - When an operation is not successful;
      - When a HTTP `DELETE` call is successful.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      code:
        description: Suggested HTTP return code for this status, 0 if not set.
        format: int32
        type: integer
        x-kab-description-zh: 针对此状态的建议 HTTP 返回代码，如果未设置，默认为 0。
      details:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails'
        description: |-
          Extended data associated with the `reason`. Each `reason` may define its own extended details.
          This field is optional and the data returned is not guaranteed to conform to any schema except that
          defined by the reason type.
        x-kab-description-zh: |-
          与 `reason` 关联的扩展数据。每个 `reason` 可以定义自己的扩展细节。
          此字段是可选的，所返回的数据也不保证会符合任何模式定义，除非对应的 `reason` 类型有额外的约定。
        x-kubernetes-list-type: atomic
      kind:
        description: A string value representing the REST resource.
        enum:
          - Status
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      message:
        description: A human-readable description of the status of this operation.
        type: string
        x-kab-description-zh: 关于此操作状态的、人类可读的描述信息。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
      reason:
        description: |-
          A machine-readable description of why this operation is in the `"Failure"` status.
          If this value is empty there is no information available.
          A reason clarifies an HTTP status code but does not override it. The reasons defined are:

          - `""`: The server has declined to indicate a specific reason.
            The `details` field may contain other information about this error.
            Status code: 500.
          - `"Unauthorized"`: The server can be reached and understood the request, but requires the user
            to present appropriate authorization credentials (identified by the `"WWW-Authenticate"` header)
            in order for the action to be completed.
            If the user has specified credentials on the request, the server considers them insufficient.
            Status code: 401.
          - `"Forbidden"`: The server can be reached and understood the request, but refuses to take
            any further action. It is the result of the server being configured to deny access for some reason
            to the requested resource by the client.
            In the `details`, you can check the `kind` field for a string representing the `kind` of
            the forbidden resource. On some operations, this may differ from the requested resource.
            The `id` field in the `details` may contain the identifier of the forbidden resource.
            Status code: 403.
          - `"Not Found"`: One or more resources required for the operation cannot be found.
            In the `details`, you can check the `kind` string which is the `kind` of the missing resource.
            On some operations, this may differ from the requested resource.
            The `details.id` may have the identifier of the missing resource.
            Status code: 404.
          - `"AlreadyExists"`: The resource you are creating already exists.
            The `details.kind` has the `kind` of the conflicting resource, and the `details.id` may have
            the identifier of the conflicting resource.
            Status code: 409.
          - `"Conflict"`: The requested operation cannot be completed due to a conflict in the operation.
            The client may need to alter the request. Each resource may define custom `details` that indicate
            the nature of the conflict.
            Status code: 409.
          - `"Gone"`: This means the item is no longer available at the server and no forwarding address is known.
            Status code: 410.
          - `"Invalid"`: The requested create or update operation cannot be completed due to invalid data
            provided as part of the request. The client may need to alter the request.
            When set, the client may use the `details.message` field as a summary of the issues encountered.
            The `details.kind` field contains the `kind` of the invalid resource; the `details.id` field
            contains the identifer of the invalid resource; and the `details.causes` may contain one or more
            entires indicating the data in the provided resource that was invalid.
            Status code: 422.
          - `"ServerTimeout"`: The server can be reached and understood the request, but cannot complete
            the action in a reasonable time. The client should retry the request.
            This is may be due to temporary server load or a transient communication issue with another server.
            Status code 500 is used because the HTTP spec provides no suitable server-requested client retry and
            the 5xx class represents actionable errors.
            The `details.kind` provides the `kind` of the resource being acted on.
            The `details.id` string has the operation that is being attempted.
            The `details.retryAfterSeconds` contains the number of seconds before the operation should be retried.
            Status code: 500.
          - `"Timeout"`: The request could not be completed within the given time.
            Clients can get this response only when they specified a `timeout` param in the request, or
            if the server cannot complete the operation within a reasonable amount of time.
            The request might succeed with an increased value of `timeout` param. The client *should* wait
            at least the number of seconds specified by the `details.retryAfterSeconds` field.
            Status code: 504.
          - `"TooManyRequests"`: The server experienced too many requests within a given window and that the
            client must wait to perform the action again.
            A client may always retry the request that led to this error, although the client should wait
            at least the number of seconds specified by the `details.retryAfterSeconds` field.
            Status code: 429.
          - `"BadRequest"`: The request itself was invalid, because the request doesn't make any sense,
            for example deleting a read-only object. This is different than `"Invalid"` above which indicates
            that the API call could possibly succeed, but the data was invalid.
            API calls that return `"BadRequest"` can never succeed.
            Status code: 400.
          - `"MethodNotAllowed"`: The action the client attempted to perform on the resource was not supported
            by the code - for instance, attempting to delete a resource that can only be created.
            API calls that return `"MethodNotAllowed"` can never succeed.
            Status code: 405.
          - `"NotAcceptable"`: The `accept` types indicated by the client were not acceptable to the server.
            For instance, attempting to receive `"protobuf"` for a resource that supports only JSON and YAML.
            API calls that return `"NotAcceptable"` can never succeed.
            Status code: 406.
          - `"RequestEntityTooLarge"`: The request entity is too large.
            Status code: 413.
          - `"UnsupportedMediaType"`: The `"content-type"` sent by the client is not acceptable to the server
            For instance, attempting to send `"protobuf"` for a resource that supports only JSON and YAML.
            API calls that return `"UnsupportedMediaType"` can never succeed.
            Status code: 415.
          - `"InternalError"`: An internal error occurred, it is unexpected and the outcome of the call is unknown.
            The `details.causes` field has the original error. Status code: 500
          - `"Expired"`: The request is invalid because the content you are requesting has expired and
            is no longer available. It is typically associated with watches that can't be serviced.
            Status code: 410.
          - `"ServiceUnavailable"`: The request itself was valid, but the requested service is unavailable at
            this time. Retrying the request after some time might succeed.
            Status code: 503.
        enum:
          - ''
          - Unauthorized
          - Forbidden
          - NotFound
          - AlreadyExists
          - Conflict
          - Gone
          - Invalid
          - ServerTimeout
          - Timeout
          - TooManyRequests
          - BadRequest
          - MethodNotAllowed
          - NotAcceptable
          - RequestEntityTooLarge
          - UnsupportedMediaType
          - InternalError
          - Expired
          - ServiceUnavailable
        type: string
        x-kab-description-zh: |-
          关于此操作为何处于 `"Failure"` 状态的描述，机器可读。若此值为空，则意味着没有其他可参考信息。
          `reason` 可以用来进一步说明 HTTP 状态码，但不是用来替代 HTTP 状态码的。
          目前已经定义了的原因有：

          - `""`：服务器拒绝提供原因说明。`details` 字段中可能包含一些与此错误相关的信息。

            **状态码**：500

          - `"Unauthorized"`：服务器可达且服务器能够理解请求的意图，但它要求用户提供合适的鉴权凭据
            （通过 `"WWW-Authenticate"` 头部给出）才能完成所请求的动作。
            如果用户已经为请求提供了凭据数据，那就意味着服务器认为所提供的信息不充分。

            **状态码**：401

          - `"Forbidden"`：服务器可达且能够理解请求的意图，但是拒绝进一步的操作。
            通常是因为服务器因为某种原因拒绝客户访问所请求的资源。用户可以在 `detail` 字段中查看 `kind`
            字段内容，了解被拒绝的资源的类别。对于某些其他操作，`kind` 值可能与所请求的资源不同。
            `details` 中的 `id` 字段可能包含了被拒绝访问的资源的 UID。

            **状态码**：403

          - `"Not Found"`：操作所需要的一个或者多个资源无法找到。用户可以检查 `details` 字段中的 `kind`
            字符串，该字符串是无法找到的资源的类别。对于某些其他操作，`kind` 值可能与所请求的资源不同。
            `details` 中的 `id` 字段可能包含了被拒绝访问的资源的 UID。

            **状态码**：404

          - `"AlreadyExists"`：用户请求创建的资源已经存在。`details.kind` 中具有发生冲突的资源的 `kind` 值，
            `details.id` 中可能包含冲突的资源的标识符。

            **状态码**：409

          - `"Conflict"`：所请求的操作无法完成，因为操作自身存在冲突。客户可能需要更改需求。
            每种资源可能会定义不同的 `details` 信息，给出发生冲突的本质。

            **状态码**：409

          - `"Gone"`：所请求的资源在服务器上不可用，并且服务器不掌握转发请求所需要的信息。

            **状态码**：410

          - `"Invalid"`：所请求的 CREATE 或者 UPDATE 操作无法完成，因为请求中提供的数据非法。
            客户端可能需要更改请求。用户可以查看 `details.message` 字段，了解发生的问题的概要。
            `details.kind` 字段包含非法资源的 `kind` 类别，`details.id` 字段包含非法资源的标识符，
            `details.causes` 字段可能中可能包含一个或者多个条目，表明所提供的资源中非法的数据项。

            **状态码**：422

          - `"ServerTimeout"`：服务器可达且能够理解请求的意图，但是无法在合理的时间内完成操作。
            客户端应该重新尝试请求。发生这一问题的原因可能是服务器临时负载过高，
            或者与另一服务器之间出现临时性的通信错误。
            状态码使用 500 是因为 HTTP 规约中没有提供合适的 '5xx' 代码来表达服务器要求客户端重试的情况。
            `details.kind` 字段中包含被操作的资源的 `kind` 类别；
            `details.id` 字符串包含尝试执行的操作；
            `details.retryAfterSeconds` 包含重试之前要等待的秒数。

            **状态码**：500

          - `"Timeout"`：请求无法在给定时间内完成。只有客户端在请求中设置了 `timeout` 参数时才会收到此状态。
            状态表明服务器无法在合理的时间内完成所请求的操作。
            提升 `timeout` 参数的设置或许会让请求能够成功。客户端应该至少等待 `details.retryAfterSeconds`
            所给的时长秒数之后才发起重试操作。

            **状态码**：504

          - `"TooManyRequests"`：服务器在一给定时间窗口内收到了过多的请求，客户端必须等待一段时间后再发起请求。
            客户端可以反复重试导致此错误状态的请求，尽管客户端应该至少等待 `details.retryAfterSeconds`
            所给的时长秒数之后才发起重试操作。

            **状态码**：429

          - `"BadRequest"`：请求本身是非法的，因为所发起的请求本身有问题，例如，请求删除一个只读的对象。
            这个状态与前面的 `"Invalid"` 有所不同，`"Invalid"` 表达的是 API 调用有可能成功，但数据是非法的。
            返回 `"BadRequest"` 的 API 调用永远不会成功。

            **状态码**：400

          - `"MethodNotAllowed"`：客户端尝试在资源上执行的操作是代码所不支持的。例如，尝试删除一个只能被创建的资源。
            返回 `"MethodNotAllowed"` 的 API 调用永远不会成功。

            **状态码**：405

          - `"NotAcceptable"`：客户端所给的 `Accept` 类型是服务器端无法接受的。例如针对一个仅支持 JSON 和 YAML
            的资源请求返回 `"protobuf"` 响应。
            返回 `"NotAcceptable"` 的 API 调用永远不会成功。

            **状态码**：406

          - `"RequestEntityTooLarge"`：请求的实体过大。

            **状态码**：413

          - `"UnsupportedMediaType"`：客户端所提供的 `"Content-Type"` 是服务器所无法接受的。
            例如针对一个仅支持 JSON 和 YAML 的资源请求发送 `"protobuf"` 请求数据。
            返回 `"UnsupportedMediaType"` 的 API 调用永远不会成功。

            **状态码**：415

          - `"InternalError"`：发生了内部错误，出现的状况是未预期的，调用的产出是未知的。
            `details.causes` 字段中包含有原始的错误信息。

            **状态码**：500

          - `"Expired"`：请求非法，因为所请求的内容已经过期并且无法访问。通常与无法服务的 watch 请求有关。

            **状态码**：410

          - `"ServiceUnavailable"`：请求本身是合法的，但是所请求的服务现在不可用。
            过一段时间再重试有可能成功。

            **状态码**：503
      status:
        description: Status of the operation.
        enum:
          - Failure
          - Success
        type: string
        x-kab-description-zh: 操作的状态。
    required:
      - apiVersion
      - kind
    type: object
    x-kab-description-zh: |-
      Status 是不返回其他对象的 API 调用的返回值。API 服务器在以下两种情况返回此对象：

      - 某项操作不成功；
      - HTTP `DELETE` 操作成功。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: Status
        version: v1
      - group: resource.k8s.io
        kind: Status
        version: v1alpha2
  io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause:
    description: |-
      StatusCause provides more information about a failure Status,
      including cases when multiple errors are encountered.
    properties:
      field:
        description: |-
          The field of the resource that has caused this error, as named by its JSON serialization.
          May include dot and postfix notation for nested attributes. Arrays are zero-indexed.
          Fields may appear more than once in an array of causes due to fields having multiple errors.
          Optional.  Examples:

          - `"name" ` - the field `name` on the current resource
          - `"items[0].name"` - the field `name` on the first array entry in `"items"`.
        type: string
        x-kab-description-zh: |-
          导致错误的资源字段，字段名与其在 JSON 序列化中的名称一致。
          可能包含句点（`'.'`）和后缀表示法来访问嵌套的属性。数组的下标从 0 开始。
          同一字段可能在 `causes` 数组中出现多次，原因是同一字段可能涉及多项错误。
          此字段是可选的。示例：

          - `"name"`：当前资源的 `name` 字段；
          - `"items[0].name"`：`"items"` 数组中第一个成员的 `name` 字段。
      message:
        description: A human-readable description of the cause of the error. This
          field may be presented as-is to a reader.
        type: string
        x-kab-description-zh: 对错误原因的一种人类可读的描述信息。此字段可能会按原样输出给读者。
      reason:
        description: |-
          A machine-readable description of the cause of the error.
          If this value is empty there is no information available.
        enum:
          - FieldManagerConflict
          - FieldValueDuplicate
          - FieldValueInvalid
          - FieldValueNotFound
          - FieldValueNotSupported
          - FieldValueRequired
          - ResourceVersionTooLarge
          - UnexpectedServerResponse
        type: string
        x-kab-description-zh: |-
          对错误原因的一种机器可读的描述。
          如果此字段为空，则表示没有可用的信息。
    type: object
    x-kab-description-zh: StatusCause 为失败的 Status 提供额外的信息，包含出现多项错误的场景。
  io.k8s.apimachinery.pkg.apis.meta.v1.StatusDetails:
    description: |-
      StatusDetails is a set of additional properties that MAY be set by the server to provide additional
      information about a response.
      The `reason` field of a Status object defines what attributes will be set.
      Clients must ignore fields that do not match the defined type of each attribute,
      and should assume that any attribute may be empty, invalid, or under defined.
    properties:
      causes:
        description: |-
          The `causes` array includes more details associated with the status `reason`.
          Not all reasons may provide detailed causes.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.StatusCause'
        type: array
        x-kab-description-zh: |-
          `causes` 数组包含与 Status 的 `reason` 关联的更多细节。
          不是所有的原因都会提供详细的原因说明。
        x-kubernetes-list-type: atomic
      group:
        description: The group attribute of the resource associated with the status
          `reason`.
        type: string
        x-kab-description-zh: 与 Status 的 `reason` 相关联的资源的组属性。
      kind:
        description: |-
          The kind attribute of the resource associated with the status `reason`.
          On some operations may differ from the requested resource `kind`.
        type: string
        x-kab-description-zh: |-
          与 Status 的 `reason` 相关联的资源的类别属性。
          对于某些操作，这里给出的 `kind` 值可能与所请求的资源的 `kind` 不同。
      name:
        description: |-
          The name attribute of the resource associated with the status `reason`
          (when there is a single name which can be described).
        type: string
        x-kab-description-zh: |-
          与 Status 的 `reason` 相关联的资源的名称属性
          （前提是存在一个确定的资源名称）。
      retryAfterSeconds:
        description: |-
          If specified, the time in seconds before the operation should be retried.
          Some errors may indicate the client must take an alternate action - for those errors this field
          may indicate how long to wait before taking the alternate action.
        format: int32
        type: integer
        x-kab-description-zh: |-
          如果设置了此字段，则给出的是重试操作之前的等待时长秒数。
          某些错误可能表明客户端必须采取一种替代操作。
          这时候，此字段可能会给出在执行替代操作之前要等待的时长。
      uid:
        description: UID of the resource. (when there is a single resource which can
          be described).
        type: string
        x-kab-description-zh: 资源的 UID （前提是存在一个确定的资源 ID）。
    type: object
    x-kab-description-zh: |-
      StatusDetails 是一组关于服务器响应的属性信息，可能会被服务器设置。
      Status 对象的 `reason` 字段定义哪些属性会被设置。
      客户端必须忽略与各种属性所定义的类型不相干的字段，并且假定这里所给的任何属性都可能是空的，
      或者是非法的，或者是定义不明确的。
  io.k8s.apimachinery.pkg.apis.meta.v1.Table:
    description: |-
      Table is a tabular representation of a set of API resources.
      The server transforms the object into a set of preferred columns for quickly reviewing the objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - meta.k8s.io
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      columnDefinitions:
        description: |-
          This list describes each column in the returned `rows` array.
          The number of cells per row will always match the number of column definitions.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.TableColumnDefinition'
        minItems: 1
        type: array
        x-kab-description-zh: |-
          此列表描述的是所返回的 `rows` 数组中的各个列。
          每一行的单元格个数需要与列定义的数目一致。
      kind:
        description: A string value representing the REST resource
        enum:
          - Table
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
      rows:
        description: The list items in the table.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.TableRow'
        minItems: 1
        type: array
        x-kab-description-zh: 表格中的列表条目。
    required:
      - apiVersion
      - columnDefinitions
      - kind
      - metadata
      - rows
    type: object
    x-kab-description-zh: |-
      Table 是一组 API 资源的表格化表示形式。
      服务器将对象转换为一组优选的列集合，便于快速检阅这些对象。
  io.k8s.apimachinery.pkg.apis.meta.v1.TableColumnDefinition:
    description: TableColumnDefinition 包含在 Table 中返回的某个列的信息。
    properties:
      description:
        description: A human readable description of this column.
        type: string
        x-kab-description-zh: 关于此列的人类可读描述信息。
      format:
        description: |-
          An optional OpenAPI type modifier for this column.
          A format modifies the `type` and imposes additional rules, like date or time formatting for a string.
          The `name` format is applied to the primary identifier column which has type `"string"` to
          assist in clients identifying column is the resource name.
        type: string
        x-kab-description-zh: |-
          为此列设置的 OpenAPI 类型修饰，字段可选。
          此字段的内容会修改 `type` 的定义并施加额外的规则，例如定义字符串的日期或时间格式等等。
          `name` 格式会并应用的主标识符列（类型为 `"string"`），帮助客户端意识到该列是资源的名称。
      name:
        description: A human readable name for the column.
        type: string
        x-kab-description-zh: 列的名称，人类可读。
      priority:
        description: |-
          An integer defining the relative importance of this column compared to others.
          Lower numbers are considered higher priority. Columns that may be omitted in limited space scenarios
          should be given a higher priority.
        type: integer
        x-kab-description-zh: |-
          定义此列与其他列比较时的相对重要性的整数。数字比较小时意味着优先级较高。
          当输出空间有限时，某些列需要被略掉，这些类应该被赋予较高的优先级值。
      type:
        description: An OpenAPI type definition for this column, such as `"number"`,
          `"integer"`, `"string"`, or `"array"`.
        type: string
        x-kab-description-zh: 用于此列的 OpenAPI 数据类型定义，例如 `"number"`、`"integer"`、`"string"`
          或者 `"array"`。
    required:
      - description
      - format
      - name
      - priority
      - type
    type: object
  io.k8s.apimachinery.pkg.apis.meta.v1.TableRow:
    description: TableRow is an individual row in a Table.
    properties:
      cells:
        description: |-
          `cells` is as wide as the column definitions array and may contain `string`, `number`
          (`float64` or `int64`), `boolean`, `map`, `list`, or `null`.
          See the `type` field of the column definition for a more detailed description.
        items:
          type: object
        type: array
        x-kab-description-zh: |-
          `cells` 中的元素个数应该与列定义（TableColumnDefinition）中元素个数相同，
          可以包含 `string`、`number`（`float64` 或者 `int64`）、`boolean`、`map`、`list` 或 `null` 值。
          参见 TableColumnDefinition 中的 `type` 字段以获取详细描述。
      conditions:
        description: |-
          This describes additional status of a row that are relevant for a human user.
          These conditions apply to the row, not to the object, and will be specific to table output.
          The only defined condition type is `"Completed"`, for a row that indicates a resource that
          has run to completion and can be given less visual priority.
        items:
          $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.TableRowCondition'
        type: array
        x-kab-description-zh: |-
          此字段描述一些对于普通用户而言比较有意义的额外状态。
          这类撞到适用于整个行，而不是对象，并且与表格输出有直接关系。
          目前唯一定义的状况类型为 `"Completed"`，用于标识已经运行至完成的资源的行。
          对应的数据行可以赋予较低的可视化展示优先级。
      object:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: |-
          This field contains the requested additional information about each object based on the
          `includeObject` policy when requesting the Table.
          If `"None"`, this field is empty, if `"Object"` this will be the default serialization of the object
          for the current API version, and if `"Metadata"` (the default) will contain the object metadata.
          Check the returned `kind` and `apiVersion` of the object before parsing.
          The media type of the object will always match the enclosing list.
          If this as a JSON table, these will be JSON encoded objects.
        x-kab-description-zh: |-
          客户端请求 Table 数据时可以设置 `includeObject` 策略，基于这个策略，
          服务器可以在此字段放入与每个对象相关的额外信息。
          如果 `includeObject` 策略为 `"None"`，则此字段为空。
          如果 `includeObject` 策略为 `"Object"`，则此字段包含对象用当前 API 版本序列化后的数据。
          如果 `includeObject` 策略为 `"Metadata"`（默认值），则此字段包含对象的元数据。
          在解析此字段之前，应该先检查返回的对象的 `kind` 和 `apiVersion`。
          此对象的介质类型会与上层列表的一致。
          如果列表是 JSON 表格，则此字段是 JSON 编码的对象。
    required:
      - cells
    type: object
    x-kab-description-zh: TableRow 是表格中的一个独立的列。
  io.k8s.apimachinery.pkg.apis.meta.v1.TableRowCondition:
    description: TableRowCondition allows a row to be marked with additional information.
    properties:
      message:
        description: Human readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 关于上次转换的细节的消息，人类可读。
      reason:
        description: A (brief) machine readable reason for the condition's last transition.
        type: string
        x-kab-description-zh: 关于状况上次转换的原因的信息，机器可读。
      status:
        description: Status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: |-
          Type of row condition. The only defined value is `"Completed"` indicating that the object this row
          represents has reached a completed state and may be given less visual priority than other rows.
          Clients are not required to honor any conditions but should be consistent where possible
          about handling the conditions.
        enum:
          - Completed
        type: string
        x-kab-description-zh: |-
          数据行的状况的类型。目前定义的唯一值是 `"Completed"`，用来表明此行所代表的对象已经进入完成状态，
          因而与其他行相比可以被赋予一个较低的可视化优先级。
          不要求客户端必须处理这里的状况设置，但是在处理状况时应该保持行为一致。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: TableRowCondition 允许为表格的一行提供额外信息。
  io.k8s.apimachinery.pkg.apis.meta.v1.Time:
    description: Time is a wrapper around GoLang `time.Time` which supports correct
      marshaling to YAML and JSON.
    format: date-time
    type: string
    x-kab-description-zh: Time 是对 GoLang `time.Time` 的封装，支持封包转换为 YAML 和 JSON。
  io.k8s.apimachinery.pkg.apis.meta.v1.WatchEvent:
    description: Event represents a single event to a watched resource.
    properties:
      object:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.runtime.RawExtension'
        description: |-
          Object is:
          - new state of the object if `type` is `"ADDED" ` or `"MODIFIED"`
          - the state of the object immediately before deletion if `type` is `"DELETED"`.
          - If `type` is `"ERROR"`, *status* is recommended;
          other types may make sense depending on context.
        x-kab-description-zh: |-
          在不同的语境下，`object` 的内容语义也不同：

          - 如果 `type` 为 `"ADDED"` 或者 `"MODIFIED"`，则 `object` 为对象的新状态；
          - 如果 `type` 为 `"DELETED"`，则 `object` 为对象在被删除之前一刻的状态；
          - 如果 `type` 为 `"ERROR"`，则建议查看其 `status`。
          取决于具体上下文，可能其他的类型更有意义。
      type:
        description: The type of the event.
        enum:
          - ADDED
          - DELETED
          - ERROR
          - MODIFIED
          - WATERMARK
        minLength: 1
        type: string
        x-kab-description-zh: 事件的类型。
    required:
      - type
      - object
    type: object
    x-kab-description-zh: Event 代表的是某个被监测资源的一个事件。
    x-kubernetes-group-version-kind:
      - group: ''
        kind: WatchEvent
        version: v1
      - group: admission.k8s.io
        kind: WatchEvent
        version: v1
      - group: admission.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: admissionregistration.k8s.io
        kind: WatchEvent
        version: v1
      - group: admissionregistration.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: admissionregistration.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: apiextensions.k8s.io
        kind: WatchEvent
        version: v1
      - group: apiextensions.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: apiregistration.k8s.io
        kind: WatchEvent
        version: v1
      - group: apiregistration.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: apps
        kind: WatchEvent
        version: v1
      - group: apps
        kind: WatchEvent
        version: v1beta1
      - group: apps
        kind: WatchEvent
        version: v1beta2
      - group: authentication.k8s.io
        kind: WatchEvent
        version: v1
      - group: authentication.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: authentication.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: authorization.k8s.io
        kind: WatchEvent
        version: v1
      - group: authorization.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: autoscaling
        kind: WatchEvent
        version: v1
      - group: autoscaling
        kind: WatchEvent
        version: v2
      - group: autoscaling
        kind: WatchEvent
        version: v2beta1
      - group: autoscaling
        kind: WatchEvent
        version: v2beta2
      - group: batch
        kind: WatchEvent
        version: v1
      - group: batch
        kind: WatchEvent
        version: v1beta1
      - group: certificates.k8s.io
        kind: WatchEvent
        version: v1
      - group: certificates.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: certificates.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: coordination.k8s.io
        kind: WatchEvent
        version: v1
      - group: coordination.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: discovery.k8s.io
        kind: WatchEvent
        version: v1
      - group: discovery.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: events.k8s.io
        kind: WatchEvent
        version: v1
      - group: events.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: extensions
        kind: WatchEvent
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1beta2
      - group: flowcontrol.apiserver.k8s.io
        kind: WatchEvent
        version: v1beta3
      - group: imagepolicy.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: internal.apiserver.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: networking.k8s.io
        kind: WatchEvent
        version: v1
      - group: networking.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: networking.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: node.k8s.io
        kind: WatchEvent
        version: v1
      - group: node.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: node.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: policy
        kind: WatchEvent
        version: v1
      - group: policy
        kind: WatchEvent
        version: v1beta1
      - group: rbac.authorization.k8s.io
        kind: WatchEvent
        version: v1
      - group: rbac.authorization.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: rbac.authorization.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: resource.k8s.io
        kind: WatchEvent
        version: v1alpha2
      - group: scheduling.k8s.io
        kind: WatchEvent
        version: v1
      - group: scheduling.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: scheduling.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: storage.k8s.io
        kind: WatchEvent
        version: v1
      - group: storage.k8s.io
        kind: WatchEvent
        version: v1alpha1
      - group: storage.k8s.io
        kind: WatchEvent
        version: v1beta1
      - group: storagemigration.k8s.io
        kind: WatchEvent
        version: v1alpha1
  io.k8s.apimachinery.pkg.runtime.RawExtension:
    description: |-
      RawExtension is used to hold extensions in external versions.
      To use this, make a field which has `RawExtension` as its type in your external, versioned struct,
      and `Object` in your internal struct. You also need to register your various plugin types.

      ```
      // Internal package:
      type MyAPIObject struct {
        runtime.TypeMeta `json:",inline"`
        MyPlugin runtime.Object `json:"myPlugin"`
      }

      type PluginA struct {
        AOption string `json:"aOption"`
      }

      // External package:\ntype MyAPIObject
      struct {
        runtime.TypeMeta `json:",inline"`
        MyPlugin runtime.RawExtension `json:"myPlugin"`
      }
      type PluginA struct {
        AOption string `json:"aOption"`
      }
      ```

      On the wire, the JSON will look something like this:

      ```
      {
        "kind": "MyAPIObject",
        "apiVersion": "v1",
        "myPlugin": {
          "kind": "PluginA",
          "aOption": "foo",
        },
      }
      ```

      Decode first uses JSON or YAML to unmarshal the serialized data into your external object.
      That causes the raw JSON to be stored, but not unpacked.
      The next step is to copy (using `pkg/conversion`) into the internal struct.
      The `runtime` package's `DefaultScheme` has conversion functions installed which will unpack the JSON
      stored in `RawExtension`, turning it into the correct object type, and storing it in the `Object`.
    type: object
    x-kab-description-zh: |-
      RawExtension 被用来在外部版本中保存扩展信息。
      要使用 `RawExtension`，先要在你的外部版本化结构中添加一个类型为 `RawExtension` 的字段，
      之后在你的内部结构中添加 `Object`。你还需要注册插件的类型。

      ```
      // 内部包：
      type MyAPIObject struct {
        runtime.TypeMeta `json:",inline"`
        MyPlugin runtime.Object `json:"myPlugin"`
      }

      type PluginA struct {
        AOption string `json:"aOption"`
      }

      // 外部包：
      type MyAPIObject struct {
        runtime.TypeMeta `json:",inline"`
        MyPlugin runtime.RawExtension `json:"myPlugin"`
      }
      type PluginA struct {
        AOption string `json:"aOption"`
      }
      ```

      数据被传输时，JSON 的样子如下：

      ```
      {
        "kind": "MyAPIObject",
        "apiVersion": "v1",
        "myPlugin": {
          "kind": "PluginA",
          "aOption": "foo",
        },
      }
      ```

      解码逻辑会首先使用 JSON 或者 YAML 来将序列化的数据解包到外部对象中。
      解包的结果是原始的 JSON 数据被保存起来，但没有进一步解析。
      下一步是使用 `pkg/converion` 将数据复制到内部结构中。
      `runtime` 包的 `DefaultScheme` 中包含转换函数，可以将 `RawExtension` 中保存的 JSON 数据解析出来，
      并将其转换为正确的对象类型，保存到 `Object` 中。
  io.k8s.apimachinery.pkg.util.intstr.IntOrString:
    description: |-
      IntOrString is a type that can hold an int32 or a string.
      When used in JSON or YAML marshalling and unmarshalling, it produces or consumes the inner type.
      This allows you to have, for example, a JSON field that can accept a name or number.
    format: int-or-string
    type: string
    x-kab-description-zh: |-
      IntOrString 是一个可以保存 32 位整数或字符串的类型。
      当对 JSON 或 YAML 数据进行封包或者解包操作时，会生成或者解析内部数据类型。
      这个数据类型可以允许用户使用一个既能接受名字也能接受数字的 JSON 字段。
  io.k8s.apimachinery.pkg.version.Info:
    description: Info contains versioning information.
    properties:
      buildDate:
        description: Build date in ISO8601 format. It is the output of `date -u +'%Y-%m-%dT%H:%M:%SZ'`
        minLength: 1
        type: string
        x-kab-description-zh: 用 ISO8601 给出的构造日期。字段值是 `date -u +'%Y-%m-%dT%H:%M:%SZ'`
          的输出结果。
      compiler:
        description: The compiler used as reported by GoLang `runtime.Compiler`.
        minLength: 1
        type: string
        x-kab-description-zh: 使用的编译器。数值来源是 GoLang `runtime.Compiler`。
      gitCommit:
        description: Set when building the binary by scripts. The content is the git
          HEAD hash code when build.
        minLength: 1
        type: string
        x-kab-description-zh: 使用脚本来构造可执行文件时设置。数据内容是构造时使用的 GIT HEAD 哈希编码。
      gitTreeState:
        description: State of the git tree. Either `"clean"` or `"dirtry"`.
        minLength: 1
        type: string
        x-kab-description-zh: GIT 代码树的状态。取值为 `"clean"` 或 `"dirty"`。
      gitVersion:
        description: Git tag name used for a release. E.g. `"1.17"`.
        minLength: 1
        type: string
        x-kab-description-zh: 用于发布版本的标签名称。例如 `"1.17"`。
      goVersion:
        description: The GoLang version as returned by `runtime.Version()`.
        minLength: 1
        type: string
        x-kab-description-zh: GoLang 的版本。数值来源是 GoLang `runtime.Version()`。
      major:
        description: Major version. Always numeric.
        minLength: 1
        type: string
        x-kab-description-zh: 主版本号。此字段一定是数值。
      minor:
        description: Minor version. Always numeric.
        minLength: 1
        type: string
        x-kab-description-zh: 次版本号。此字段一定是数值。
      platform:
        description: |-
          Platform for the binary.
          It is of format `"<OS>/<ARCH>"`, where `"<OS>"` is the operating system name as returned by
          `runtime.GOOS` and `"<ARCH>"` is the architecture as returned by `runtime.GOARCH`.
        minLength: 1
        type: string
        x-kab-description-zh: |-
          可执行文件所适用的平台。字段值的形式为 `"<OS>/<ARCH>"`。
          其中 `<OS>` 是 `runtime.GOOS` 所返回的操作系统名称；
          `"ARCH"` 是 `runtime.GOARCH` 所返回的体系结构名称。
    required:
      - buildDate
      - compiler
      - gitVersion
      - gitCommit
      - gitTreeState
      - goVersion
      - major
      - minor
      - platform
    type: object
    x-kab-description-zh: Info 包含版本信息。
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.CREATE:
    description: APIService represents a server for a particular GroupVersion.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - APIService
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.CREATE'
        description: Standard object metadata. The `name` must be `<spec.version>.<spec.group>`.
        x-kab-description-zh: 标准的对象元数据。其中 `name` 必须为 `<spec.version>.<spec.group>`。
      spec:
        $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec'
        description: Information for locating and communicating with a server.
        x-kab-description-zh: 与定位和联系某服务器相关的信息。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
    type: object
    x-kab-description-zh: APIService 代表是特定组版本对应的服务器。
    x-kubernetes-group-version-kind:
      - group: apiregistration.k8s.io
        kind: APIService
        version: v1
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET:
    description: APIService represents a server for a particular GroupVersion.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - APIService
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.GET'
        description: Standard object metadata. The `name` must be `<spec.version>.<spec.group>`.
        x-kab-description-zh: 标准的对象元数据。其中 `name` 必须为 `<spec.version>.<spec.group>`。
      spec:
        $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec'
        description: Information for locating and communicating with a server.
        x-kab-description-zh: 与定位和联系某服务器相关的信息。
      status:
        $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus'
        description: Derived information about an API server.
        x-kab-description-zh: 关于某 API 服务的派生信息。
    required:
      - apiVersion
      - kind
      - metadata
      - spec
      - status
    type: object
    x-kab-description-zh: APIService 代表是特定组版本对应的服务器。
    x-kubernetes-group-version-kind:
      - group: apiregistration.k8s.io
        kind: APIService
        version: v1
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE:
    description: APIService represents a server for a particular GroupVersion.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      kind:
        description: A string value representing the REST resource.
        enum:
          - APIService
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ObjectMeta.UPDATE'
        description: Standard object metadata. The `name` must be `<spec.version>.<spec.group>`.
        x-kab-description-zh: 标准的对象元数据。其中 `name` 必须为 `<spec.version>.<spec.group>`。
      spec:
        $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec'
        description: Information for locating and communicating with a server.
        x-kab-description-zh: 与定位和联系某服务器相关的信息。
    required:
      - apiVersion
      - kind
      - spec
    type: object
    x-kab-description-zh: APIService 代表是特定组版本对应的服务器。
    x-kubernetes-group-version-kind:
      - group: apiregistration.k8s.io
        kind: APIService
        version: v1
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition:
    description: The state of an APIService at a particular point in time.
    properties:
      lastTransitionTime:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Time'
        description: Last time the condition transitioned from one status to another.
        x-kab-description-zh: 状况上次从一种状态转换为另一种状态的时间。
      message:
        description: Human-readable message indicating details about last transition.
        type: string
        x-kab-description-zh: 人类可读的消息，给出状况转换的细节。
      reason:
        description: Unique, one-word, CamelCase reason for the condition's last transition.
        type: string
        x-kab-description-zh: 上次状况转换的原因，字符串通常是唯一的、单个单词的、驼峰书写形式的。
      status:
        description: The status of the condition.
        enum:
          - 'False'
          - 'True'
          - Unknown
        type: string
        x-kab-description-zh: 状况的状态。
      type:
        description: Type is the type of the condition.
        enum:
          - Available
        minLength: 1
        type: string
        x-kab-description-zh: 状况的类型。
    required:
      - status
      - type
    type: object
    x-kab-description-zh: APIService 在某个时间点的状态。
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList:
    description: A list of APIService objects.
    properties:
      apiVersion:
        description: The version of the schema for the object representation.
        enum:
          - apiregistration.k8s.io/v1
        type: string
        x-kab-description-zh: 对象表示模式的版本。
      items:
        description: A list of APIService objects.
        items:
          $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
        type: array
        x-kab-description-zh: 包含 APIService 对象的列表。
      kind:
        description: A string value representing the REST resource.
        enum:
          - APIServiceList
        type: string
        x-kab-description-zh: 代表 REST 资源的字符串值。
      metadata:
        $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.ListMeta'
        description: Standard list metadata.
        x-kab-description-zh: 标准的列表元数据。
    required:
      - apiVersion
      - items
      - kind
      - metadata
    type: object
    x-kab-description-zh: 包含 APIService 对象的列表。
    x-kubernetes-group-version-kind:
      - group: apiregistration.k8s.io
        kind: APIServiceList
        version: v1
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceSpec:
    description: |-
      Information for locating and communicating with a server.
      Only HTTPS is supported, though you can disable certificate verification.
    properties:
      caBundle:
        description: |-
          A PEM encoded CA bundle for validating an API server's serving certificate.
          If unspecified, system trust roots on the apiserver are used.
          This field cannot be specified if `service` is provided because local APIServices
          cannot have a CA bundle.
        format: byte
        type: string
        x-kab-description-zh: |-
          PEM 编码的 CA 证书包，用来验证 API 服务器的服务证书。
          若未设置 `caBundle`，则系统会使用 API 服务器上的信任根。
          如果设置了 `service` 字段则不能设置此字段，因为本地的 APIService 不可以有 CA 证书包。
        x-kubernetes-list-type: atomic
      group:
        description: |-
          The API group name this server hosts. If `group` is empty, `version` must be `"v1"`.
          Value must be a valid DNS subdomain.
        type: string
        x-kab-description-zh: |-
          此服务器所托管的 API 组名称。如果 `group` 为空，则 `version` 必须为 `"v1"`。
          字段值必须是合法的 DNS 子域名。
      groupPriorityMinimum:
        description: |-
          The priority this group should have at least.
          Higher priority means that the group is preferred by clients over lower priority ones.
          Note that other versions of this group might specify even higher `groupPriorityMininum` values
          such that the whole group gets a higher priority.
          The primary sort is based on `groupPriorityMinimum`, ordered highest number to lowest (20 before 10).
          The secondary sort is based on the alphabetical comparison of the name of the object
          (`"v1.bar"` before `"v1.foo"`). We'd recommend something like:
          `"*.k8s.io"` (except extensions) at 18000 and PaaSes (OpenShift, Deis) are recommended to be
          in the 2000s.
        format: int32
        maximum: 20000
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此 API 组所应具有的最低优先级。优先级较高意味着比低优先级者更容易受客户端偏爱。
          注意本 API 组的其他版本可能会设置更高的 `groupPriorityMinimum` 值，因此整个组获得更高的优先级。
          排序的第一步是基于 `groupPriorityMinimum`，从数值最高到最低。
          第二步是基于对象名称的字典序（`"v1.bar"` 先于 `"v1.foo"`）。
          建议的设置值是：为 `"*.k8s.io"` 设置为 18000，将 PaaS 服务设置在 2000 左右。
      insecureSkipTLSVerify:
        description: |-
          This flag disables TLS certificate verification. This is strongly discouraged.
          You should use the `caBundle` instead. If `caBundle` is specified, this field cannot be True.
          If `service` is not specified, this field cannot be specified because local APIServices
          cannot have TLS certificate verification.
        type: boolean
        x-kab-description-zh: |-
          此标志用于禁止 TLS 证书校验操作。这个设置是非常不鼓励的。建议使用 `caBundle` 配置。
          如果设置了 `caBundle`，则此字段不可以为 `true`。
          如果未指定 `service`，则此字段不可设置，因为本地的 APIService 不可以有 TLS 证书校验。
      service:
        $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference'
        description: |-
          A reference to the service for this API server. It must communicate on port 443.
          If the `service` is nil, it means the handling for the API groupversion is handled locally on this server.
          The call will simply delegate to the normal handler chain to be fulfilled.
          In that case, `caBundle` and `insecureSkipTLSVerify` cannot be specified.
        x-kab-description-zh: |-
          此字段为对 API 服务器的服务引用。此服务必须使用端口 443 提供服务。
          如果未设置 `service`，则意味着 API 组版本的处理是由当前服务器在本地处理的。
          服务调用可以直接交给常规的处理程序链完成。
          在这种情况下，`caBundle` 和 `insecureSkipTLSVerify` 都不可以设置。
      version:
        description: The API version this server hosts. Value must be a valid DNS
          label. For example, `"v1"`.
        type: string
        x-kab-description-zh: 服务器所托管的 API 版本。取值必须是合法的 DNS 标签。例如：`"v1"`。
      versionPriority:
        description: |-
          This field controls the ordering of this API version inside of its group.
          The primary sort is based on `versionPriority`, ordered highest to lowest (20 before 10).
          Since it's inside of a group, the number can be small, probably in the 10s.
          In case of equal version priorities, the version string will be used to compute the order
          inside a `group`.
          If the version string is *kube-like*, it will sort above non *kube-like* version strings,
          which are ordered lexicographically.
          *Kube-like* versions start with a `'v'`, then are followed by a number (the major version),
          then optionally the string `\"alpha\"` or `\"beta\"` and another number (the minor version).
          These are sorted first by `GA>"beta">"alpha"` (where GA is a version with no suffix such as
          `"beta"` or `"alpha"`), and then by comparing major version, then minor version.
          An example sorted list of versions,
          `"v10"`, `"v2"`, `"v1"`, `"v11beta2"`, `"v10beta3"`, `"v3beta1"`, `"v12alpha1"`, `"v11alpha2"`,
          `"foo1"`, `"foo10"`.
        format: int32
        maximum: 1000
        minimum: 1
        type: integer
        x-kab-description-zh: |-
          此字段用来控制当前 API 版本在所在的组中的排序顺序。
          排序首先基于 `versionPriority` 进行，从高到低。由于多个版本都在同一个组内，数字可以比较小（几十之内）。
          当版本优先级相同时，会使用版本字符串来决定在 `group` 内的排序关系。
          如果版本字符串是 Kubernetes 风格的，那么该版本会排在非 Kubernetes 风格的版本前面。
          非 Kubernetes 风格的版本会按字母顺序排序。

          Kubernetes 风格的版本字符串以 `'v'` 开头，后接一个数字（主版本号）。在后面可选地可以是字符串
          `"alpha"` 或 `"beta"` 接上另一个数字（次版本号）。
          版本字符串排序时要遵从 `GA>"beta">"alpha"` 规则（其中 `GA` 是不带 `"beta"` 或 `"alpha"` 的版本），
          之后比较主版本号再比较次版本号。版本号排序的示例：
          `"v10"`、`"v2"`、`"v1"`、`"v11beta2"`、`"v10beta3"`、`"v3beta1"`、`"v12alpha1"`、`"v11alpha2"`、
          `"foo1"`、`"foo10"`。
    required:
      - groupPriorityMinimum
      - versionPriority
    type: object
    x-kab-description-zh: 用来定位服务器并与之通信的信息。仅支持 HTTPS，不过你可以禁用证书检查。
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceStatus:
    description: Derived information about an API server.
    properties:
      conditions:
        description: Current service state of APIService.
        items:
          $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceCondition'
        type: array
        x-kab-description-zh: APIService 当前的服务状态。
        x-kubernetes-list-map-keys:
          - type
        x-kubernetes-list-type: map
        x-kubernetes-patch-merge-key: type
        x-kubernetes-patch-strategy: merge
    type: object
    x-kab-description-zh: 关于某 API 服务器的派生信息。
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.ServiceReference:
    description: A reference to Service.
    properties:
      name:
        description: The name of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 的名称。
      namespace:
        description: The namespace of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 所在的名字空间。
      port:
        default: 443
        description: If specified, the port on the server that hosting Service.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 如果设置了，表示托管 Service 的服务器上的一个端口号。
    required:
      - name
      - namespace
    type: object
    x-kab-description-zh: 对某 Service 的引用。
  io.k8s.kube-aggregator.pkg.apis.apiregistration.v1beta1.ServiceReference:
    description: A reference to Service.
    properties:
      name:
        description: The name of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 的名称。
      namespace:
        description: The namespace of the Service.
        minLength: 1
        type: string
        x-kab-description-zh: Service 所在的名字空间。
      port:
        default: 443
        description: If specified, the port on the server that hosting Service.
        format: int32
        maximum: 65535
        minimum: 1
        type: integer
        x-kab-description-zh: 如果设置了，表示托管 Service 的服务器上的一个端口号。
    required:
      - name
      - namespace
    type: object
    x-kab-description-zh: 对某 Service 的引用。
info:
  title: Kubernetes
  version: v1.30.0
parameters:
  allowWatchBookmarks:
    description: |-
      `allowWatchBookmarks` requests watch events with type `BOOKMARK`.
      Servers that do not implement bookmarks may ignore this flag and bookmarks are sent at the server's discretion.
      Clients should not assume bookmarks are returned at any specific interval, nor may they assume
      the server will send any BOOKMARK event during a session.
      If this is not a `watch`, this field is ignored.
    in: query
    name: allowWatchBookmarks
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      `allowWatchBookmarks` 请求接收类型为 `BOOKMARK` 的监视事件。
      未实现书签能力的服务器可能会忽略此标志，并且，是否发送书签由服务器决定。
      客户端不能对书签返回的时间间隔作任何假定，也不能假定服务器一定会在一次会话中发送 `BOOKMARK` 事件。
      如果请求本身不是 `watch` 请求，则此标志会被忽略。
  command:
    description: Command is the remote command to execute. argv array. Not executed
      within a shell.
    in: query
    name: command
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      需要在远程执行的命令。所给的字符串会被当作空格分割的参数数组来解释。
      所给命令不会在一个 Shell 环境中执行。
  container:
    description: |-
      Container in which to execute the command.
      Defaults to only container if there is only one container in the Pod.
    in: query
    name: container
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      此参数给出在哪个容器中执行命令。
      如果 Pod 中只有一个容器，则默认为在该容器中执行。
  continue:
    description: |-
      The `continue` option should be set when retrieving more results from the server.
      Since this value is server defined, clients may only use the `continue` value from a previous query
      result with identical query parameters (except for the value of `continue`) and the server may reject
      a `continue` value it does not recognize.
      If the specified `continue` value is no longer valid whether due to expiration (generally five to
      fifteen minutes) or a configuration change on the server, the server will respond with a
      `"410 ResourceExpired"` error together with a `continue` token.
      If the client needs a consistent list, it must restart their `list` without the `continue` field.
      Otherwise, the client may send another `list` request with the token received with the 410 error,
      the server will respond with a list starting from the next key, but from the latest snapshot,
      which is inconsistent from the previous list results - objects that are created, modified, or
      deleted after the first list request will be included in the response, as long as their keys are
      after the `"next key"`.

      This field is not supported when `watch` is `true`.
      Clients may start a watch from the last `resourceVersion` value returned by the server and
      not miss any modifications.
    in: query
    name: continue
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      在需要从服务器端取回更多的结果时，应该设置 `continue` 选项。
      由于这个参数的合法参数值是服务器端决定的，客户端只能使用来自于之前查询结果中的 `continue` 值，
      并且“之前查询”要与当前查询的参数完全相同（除了 `continue` 选项）。
      服务器可能会拒绝它无法识别的 `continue` 值。

      如果由于超时（通常是 15 分钟）或者服务器端配置变化等原因导致所指定的 `continue` 值不再有效，
      服务器会返回一个 `"410 ResourceExpired"` 错误信息，并附带一个 `continue` 令牌。
      如果客户端需要查看一致性的列表，则必须在不设置 `continue` 字段的前提下重新发起 `list` 操作。
      或者，客户端也可以使用从 410 错误响应中收到的令牌发送 `list` 请求，服务器会返回一个从下一主键开始的列表，
      但列表本身来自于最新的快照，与之前的列表结果之间可能存在不一致：第一次 `list` 操作之后创建的、
      更改的、删除的对象都会反映在响应中，服务器只关心其主键是否在 `"下一主键"` 之后。

      当设置了 `watch` 为 `true` 时，此字段不再有效。
      客户端可以基于服务器所返回的最后一个 `resourceVersion` 值启动 `watch` 操作，而不会错过任何更新。
  dryRun:
    description: |-
      When present, indicates that modifications should not be persisted.
      An invalid or unrecognized `dryRun` directive will result in an error response and no further processing
      of the request. Valid values are:

      - `"All"`: all dry run stages will be processed
    in: query
    name: dryRun
    required: false
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      请求中设置此参数时表明请求所作的变更不可以被持久化存储。
      如果 `dryRun` 所给的参数值非法或者不可识别，服务器会返回错误响应并且停止处理请求。
      合法的取值为：

      - `"All"`：处理“试运行”的所有阶段。
  fieldManager:
    description: |-
      `fieldManager` is a name associated with the actor or entity that is making these changes.
      The value must be less than or 128 characters long, and only contain printable characters,
      as defined by https://golang.org/pkg/unicode/#IsPrint.
      This field is required for apply requests (application/apply-patch) but optional for
      non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    in: query
    name: fieldManager
    required: false
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      `fieldManager` 是一个字符串名称，与执行当前修改的主体或者实体相关联。
      参数字符串值长度不能超过 128 字符，只能包含可打印字符。
      对于 `apply` （`application/apply-patch`）请求而言，此字段是必需的，对于其他的补丁操作类型
      （JsonPatch、MergePatch、StrategicMergePatch 等）是可选的。
  fieldManagerPatch:
    description: |-
      `fieldManager` is a name associated with the actor or entity that is making these changes.
      The value must be less than or 128 characters long, and only contain printable characters,
      as defined by https://golang.org/pkg/unicode/#IsPrint.
      This field is required for apply requests (application/apply-patch) but optional for
      non-apply patch types (JsonPatch, MergePatch, StrategicMergePatch).
    in: query
    name: fieldManager
    required: false
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      `fieldManager` 是一个字符串名称，与执行当前修改的主体或者实体相关联。
      参数字符串值长度不能超过 128 字符，只能包含可打印字符。
      对于 `apply` （`application/apply-patch`）请求而言，此字段是必需的，对于其他的补丁操作类型
      （JsonPatch、MergePatch、StrategicMergePatch 等）是可选的。
  fieldSelector:
    description: A selector to restrict the list of returned objects by their fields.  Defaults
      to everything.
    in: query
    name: fieldSelector
    type: string
    uniqueItems: true
    x-kab-description-zh: 用来根据字段来限制所返回对象的选择算符。默认行为是返回所有字段。
  fieldValidation:
    description: |-
      `fieldValidation` instructs the server on how to handle objects in the request (POST/PUT/PATCH)
      containing unknown or duplicate fields. Valid values are:
      - `"Ignore"`: This will ignore any unknown fields that are silently dropped from the object,
        and will ignore all but the last duplicate field that the decoder encounters.
        This is the default behavior prior to v1.23.
      - `"Warn"`: This will send a warning via the standard warning response header for each unknown
        field that is dropped from the object, and for each duplicate field that is encountered.
        The request will still succeed if there are no other errors, and will only persist the last of
        any duplicate fields. This is the default in v1.23+
      - `"Strict"`: This will fail the request with a BadRequest error if any unknown fields would be
        dropped from the object, or if any duplicate fields are present.
        The error returned from the server will contain all unknown and duplicate fields encountered.
    in: query
    name: fieldValidation
    required: false
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      `fieldValidation` 通知服务器如何处理请求（POST、PUT、PATCH）中对象内的未知或重复字段。合法值有：

      - `"Ignore"`：服务器忽略所有未知字段，以静默方式丢弃这些字段；对于重复字段，解码组件只保留最后一次的设置，
        丢弃所有其他重复字段设置。这是 v1.23 之前的默认行为。
      - `"Warn"`：针对无法识别的每个字段以及遇到的每个重复字段，服务器通过 `warning` 响应头返回警告信息。
        如果请求中没有其它错误，则仍然有可能成功，但只会保存重复字段的最后一份设置值。
        这是 v1.23 之后版本的默认行为。
      - `"Strict"`：如果在对象中发现任何未知字段或者重复字段，服务器会返回 `BadRequest` 错误响应。
        服务器所返回的错误响应中会包含所有未知字段、重复字段的信息。
  follow:
    description: Follow the log stream of the pod. Defaults to `false`.
    in: query
    name: follow
    type: boolean
    uniqueItems: true
    x-kab-description-zh: 追踪 Pod 的日志数据流。默认为 `false`。
  force:
    description: |-
      `force` is going to **force** Apply requests. It means user will re-acquire conflicting fields
      owned by other people. Force flag must be unset for non-apply patch requests.
    in: query
    name: force
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      `force` 参数会**强制**应用请求。对于 `apply` 操作而言，意味着用户会强制重新取得被其他人负责的冲突字段的管理权。
      对于非 `apply` 类型的补丁请求，不可以设置 `force` 字段。
  gracePeriodSeconds:
    description: |-
      The duration in seconds before the object should be deleted. Value must be non-negative integer.
      The value zero indicates delete immediately.
      If this value is nil, the default grace period for the specified type will be used.
      Defaults to a per object value if not specified. zero means delete immediately.
    in: query
    name: gracePeriodSeconds
    type: integer
    uniqueItems: true
    x-kab-description-zh: |-
      对象被删除之前可以存活的时长秒数。参数值不能为负数。取值零意味着立即删除对象。
      如果此值未设置，则服务器会检查特定资源类型的默认宽限期长度。
      如果未在请求中指定，则默认值取决于对象本身的设置。
  insecureSkipTLSVerifyBackend:
    description: |-
      `insecureSkipTLSVerifyBackend` indicates that the apiserver should not confirm the validity of
      the serving certificate of the backend it is connecting to.
      This will make the HTTPS connection between the apiserver and the backend insecure.
      This means the apiserver cannot verify the log data it is receiving came from the real kubelet.
      If the kubelet is configured to verify the apiserver's TLS credentials, it does not mean
      the connection to the real kubelet is vulnerable to a man in the middle attack
      (e.g. an attacker could not intercept the actual log data coming from the real kubelet).
    in: query
    name: insecureSkipTLSVerifyBackend
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      `insecureSkipTLSVerifyBackend` 表明 API 服务器不应去确认它所连接到的后端的服务证书的合法性。
      这一设置会导致 API 服务器与后端之间的 HTTPS 连接不够安全。
      API 服务器无法确认它所收到的日志数据来自真实的 kubelet。
      如果 kubelet 配置为要去检查 API 服务器的 TLS 证书，则即便设置了 `insecureSkipTLSVerifyBackend`
      也不意味着与 kubelet 之间的连接容易受到中间人攻击的威胁（比如，攻击者无法拦截来自 kubelet 的实际日志数据）。
  labelSelector:
    description: |-
      A selector to restrict the list of returned objects by their labels.
      Defaults to everything.
    in: query
    name: labelSelector
    type: string
    uniqueItems: true
    x-kab-description-zh: 选择算符，用来根据标签来限制返回的对象。默认行为是返回所有对象。
  limit:
    description: |-
      `limit` is the maximum number of objects to return for a `list` call.
      If more items exist, the server will set the `continue` field on the list metadata to a value
      that can be used with the same initial query to retrieve the next set of results.
      Setting a limit may return fewer than the requested amount of items (up to zero items)
      in the event all requested objects are filtered out and clients should only use the presence of
      the `continue` field to determine whether more results are available.
      Servers may choose not to support the `limit` argument and will return all of the available results.
      If `limit` is specified and the `continue` field is empty, clients may assume that no more results
      are available. This field is not supported if `watch` is `true`.

      The server guarantees that the objects returned when using `continue` will be identical to
      issuing a single `list` call without a `limit` - that is, no objects created, modified, or deleted
      after the first request is issued will be included in any subsequent `continue` requests.
      This is sometimes referred to as a _consistent snapshot_, and ensures that a client that is using
      limit to receive smaller chunks of a very large result can ensure they see all possible objects.
      If objects are updated during a chunked `list` the version of the object that was present at the time
      the first `list` result was calculated is returned.
    in: query
    name: limit
    type: integer
    uniqueItems: true
    x-kab-description-zh: |-
      `limit` 限制 `list` 请求返回的对象个数。如果存在更多的条目，服务器会设置列表元数据中的 `continue`
      字段，使用所返回的这一字段值重新执行初始查询时，将会返回下一组结果。
      设置了限制时，返回的结果个数可能少于所请求的元素个数（极端情况下是零个元素），
      例如所请求的对象被过滤掉的情况。客户端只能通过 `continue` 字段存在与否来判断是否还有更多的结果待取回。
      服务器端可能不支持 `limit` 参数，因而返回所有结果。
      如果设置了 `limit`，但响应中的 `continue` 字段为空，客户端可以假定没有更多的结果。
      当 `watch` 被设置为 `true` 时，不支持设置此字段。

      服务器端会确保设置了 `continue` 时所返回的对象集合与不带 `limit` 的 `list` 请求所返回的结果完全相同，
      也就是说，在第一个请求发出之后创建的、更改的或者删除的对象都不会影响后续的 `continue` 请求的结果。
      这种能力有时被称作一致性快照（Consistent Snapshot），能够确保使用 `limit` 参数来分批读取较大集合的客户端可以看到所有对象。
      如果某对象在分批列表执行期间被变更，则服务器会计算开始执行 `list` 操作时对象的版本，并返回该版本。
  limitBytes:
    description: |-
      If set, the number of bytes to read from the server before terminating the log output.
      This may not display a complete final line of logging, and may return slightly more or
      slightly less than the specified limit.
    in: query
    name: limitBytes
    type: integer
    uniqueItems: true
    x-kab-description-zh: |-
      如果设置了此参数，可以限制终止日志输出之前可以从服务器上读回的字节数。
      设置此参数可能会导致所返回的日志中最后一行不完整，并且服务器实际返回的字节数可能与所设置的限制有少许的出入。
  logpath:
    description: The path to the log.
    in: path
    minLength: 1
    name: logpath
    required: true
    type: string
    uniqueItems: true
    x-kab-description-zh: 指向日志的路径。
  namespace:
    description: The object name and auth scope, such as for teams and projects.
    in: path
    minLength: 1
    name: namespace
    required: true
    type: string
    uniqueItems: true
    x-kab-description-zh: 对象命名以及操作鉴权的作用域，用来支持多个团队和项目。
  orphanDependents:
    description: |-
      Should the dependent objects be orphaned.
      If true/false, the `"orphan"` finalizer will be added to/removed from the object's
      `finalizers` list. Either this field or `propagationPolicy` may be set, but not both.

      **DEPRECATED**: please use the `ropagationPolicy`, this field is deprecated in 1.7.
    in: query
    name: orphanDependents
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      是否允许依赖对象变成孤儿（Orphaned）对象。
      如果设置为 `true`，则会向对象的 `finalizers` 列表中添加 `"orphan"` 终止器，否则会从 `finalizers`
      列表中移除 `"orphan"` 终止器。客户端可以使用此字段或者 `propagationPolicy` 字段，但不能同时使用二者。
      **已弃用**：请使用 `ropagationPolicy` 参数。`orphanDependents` 这一参数从 1.7 版本已被弃用。
  path:
    description: The path to the resource.
    in: path
    minLength: 1
    name: path
    required: true
    type: string
    uniqueItems: true
    x-kab-description-zh: 指向资源的路径。
  ports:
    description: List of ports to forward Required when using WebSockets.
    in: query
    name: ports
    type: integer
    uniqueItems: true
    x-kab-description-zh: 要转发的端口列表。使用 WebSockets 时必须设置。
  pretty:
    description: |-
      If `true`, then the output is pretty printed.
      Defaults to 'false' unless the user-agent indicates a browser or command-line HTTP tool (`curl` and `wget`).
    in: query
    name: pretty
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      若此字段为 `true`，则对输出结果作美化处理。
      默认值为 `false`，除非 user-agent 表明使用的是浏览器或者命令行 HTTP 工具（`curl` 和 `wget`）。
  previous:
    description: Return previous terminated container logs. Defaults to false.
    in: query
    name: previous
    type: boolean
    uniqueItems: true
    x-kab-description-zh: 返回先前终止的容器的日志。默认值为 `false`。
  propagationPolicy:
    description: |-
      Whether and how garbage collection will be performed.
      Either this field or `orphanDependents` may be set, but not both.
      The default policy is decided by the existing `finalizers` set in the `metadata.finalizers`
      and the resource-specific default policy. Acceptable values are:

      - `"Orphan"` - orphan the dependents;
      - `"Background"` - allow the garbage collector to delete the dependents in the background;
      - `"Foreground"` - a cascading policy that deletes all dependents in the foreground.
    in: query
    name: propagationPolicy
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      是否执行垃圾手机以及如何执行垃圾收集。此字段或者 `orphanDependents` 二者可以设置其一，但不能同时使用。
      默认策略取决于 `metadata.finalizers` 中的现有 `finalizers` 集合，以及特定于资源类型的策略。
      可接受的取值有：

      - `"Orphan"`：令依赖对象成为孤儿对象；
      - `"Background"`：允许垃圾收集器在后台删除依赖对象；
      - `"Foreground"`：在前台删除所有依赖对象的一种级联策略。
  resourceVersion:
    description: |-
      `resourceVersion` sets a constraint on what resource versions a request may be served from.
      See https://kubernetes.io/docs/reference/using-api/api-concepts/#resource-versions
      for details.

      Defaults to unset.
    in: query
    name: resourceVersion
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      `resourceVersion` 设置请求所针对的资源版本约束。
      默认情况下不设置。
  resourceVersionMatch:
    description: |-
      `resourceVersionMatch` determines how `resourceVersion` is applied to `list` calls.
      It is highly recommended that `resourceVersionMatch` be set for `list` calls where `resourceVersion`
      is set.
    enum:
      - Exact
      - NotOlderThan
    in: query
    name: resourceVersionMatch
    type: string
    uniqueItems: true
    x-kab-description-zh: |-
      `resourceVersionMatch` 确定 `list` 请求如何使用 `resourceVersion` 信息。
      强烈建议为 `list` 请求设置了 `resourceVersion` 时也设置 `resourceVersionMatch`。
  sendInitialEvents:
    description: |-
      `sendInitialEvents=true` may be set together with `watch=true`.
      In that case, the watch stream will begin with synthetic events to produce the current state of objects
      in the collection. Once all such events have been sent, a synthetic `BOOKMARK` event  will be sent.
      The BOOKMARK will report the ResourceVersion (RV) corresponding to the set of objects, and be marked with
      `"k8s.io/initial-events-end": "true"` annotation.
      Afterwards, the watch stream will proceed as usual, sending watch events corresponding to changes
      (subsequent to the RV) to objects watched.

      When `sendInitialEvents` option is set, we require `resourceVersionMatch` option to also be set.
      The semantic of the `watch` request is as following:

      - `resourceVersionMatch` = NotOlderThan is interpreted as _data at least as new as the provided `resourceVersion`_
        and the bookmark event is send when the state is synced to a `resourceVersion` at least as fresh as
        the one provided by the ListOptions.
        If `resourceVersion` is unset, this is interpreted as _consistent read_ and the bookmark event
        is send when the state is synced at least to the moment when request started being processed.
      - `resourceVersionMatch` set to any other value or unset. Invalid error is returned.

      Defaults to `true` if `resourceVersion=""` or `resourceVersion="0"`
      (for backward compatibility reasons) and to `false` otherwise.
      This flag requires the `WatchList` feature gate to be enabled.
    in: query
    name: sendInitialEvents
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      对于 watch（监听）请求，`watch=true` 时可以设置 `sendInitialEvents=true`。
      这样设置之后，监听到的数据流的起始部分会包含一些合成的数据，用来表示集合中对象的当前状态。
      服务器发送完所有这类合成事件之后会发送一个合成的 `BOOKMARK` 事件。
      `BOOKMARK` 事件会报告与对象集合相对应的资源版本（ResourceVersion，RV），并且事件会包含
      `"k8s.io/initial-events-end": "true"` 注解。
      从这一事件之后，监视数据流会和以往一样工作，在所监视的对象（RV 版本之后）发生变更时发送监听事件。

      设置 `sendInitialEvents` 选项时，要求同时设置 `resourceVersionMatch` 参数。
      `watch` 请求的语义如下：

      - `resourceVersionMatch=NotOlderThan`：解释为数据至少要与所给的 `resourceVersion` 一样新，
        当状态同步到与请求中所给的 `resourceVersion` 一样新的资源版本时，再发送 BOOKMARK 事件。
        若未设置 `resourceVersion`，则请求被视为“一致性读操作”，当状态被同步到请求开始被处理时刻的状态时，
        发送 BOOKMARK 事件。
      - `resourceVersionMatch` 设置为其他值，或者未设置，返回非法错误。

      如果 `resourceVersion=""` 或者 `resourceVersion="0"`，为默认为 `true`，以实现与老版本兼容。
      其他情况下默认为 `false`。

      使用此参数时要求启用 `WatchList` 特性门控。
  sinceSeconds:
    description: |-
      A relative time in seconds before the current time from which to show logs.
      If this value precedes the time a Pod was started, only logs since the Pod start will be returned.
      If this value is in the future, no logs will be returned.
      Only one of `sinceSeconds` or `sinceTime` may be specified.
    in: query
    name: sinceSeconds
    type: integer
    uniqueItems: true
    x-kab-description-zh: |-
      参数值为相对当前时间点的时长秒数，指示服务器端返回日志的时间段。
      如果参数值早于 Pod 的启动时间，则只返回 Pod 启动之后的日志数据。
      如果参数值是未来的时间点，则不会返回任何日志数据。
      `sinceSeconds` 和 `sinceTime` 只能选择其一。
  stderr:
    description: Redirect the standard error stream of the Pod for this call.
    in: query
    name: stderr
    type: boolean
    uniqueItems: true
    x-kab-description-zh: 对当前请求的 Pod 标准错误数据流进行重定向。
  stdin:
    description: Stdin if `true`, redirects the standard input stream of the pod for
      this call. Defaults to `false`.
    in: query
    name: stdin
    type: boolean
    uniqueItems: true
    x-kab-description-zh: 此参数设置为 `true` 时，对当前请求的 Pod 标准输入数据流进行重定向。默认值为 `false`。
  stdout:
    description: Stdout if true indicates that stdout is to be redirected for the
      attach call. Defaults to true.
    in: query
    name: stdout
    type: boolean
    uniqueItems: true
    x-kab-description-zh: 此参数设置为 `true` 时，对当前请求的 Pod 标准输出数据流进行重定向。默认值为 `false`。
  tailLines:
    description: |-
      If set, the number of lines from the end of the logs to show.
      If not specified, logs are shown from the creation of the container or `sinceSeconds` or `sinceTime`.
    in: query
    name: tailLines
    type: integer
    uniqueItems: true
    x-kab-description-zh: |-
      如果设置了此参数，所表达的是从日志末尾要显示的行数。
      如果没有设置，则日志会从容器创建开始，或者根据 `sinceSeconds` 或 `sinceTime` 开始显示。
  timeoutSeconds:
    description: Timeout for the `list`/`watch` call. This limits the duration of
      the call, regardless of any activity or inactivity.
    in: query
    name: timeoutSeconds
    type: integer
    uniqueItems: true
    x-kab-description-zh: '`list` 或者 `watch` 请求的超时时长秒数。此参数可设置调用的时长，无论是否有活动处于进行状态中。'
  timestamps:
    description: If `true`, add an RFC3339 or RFC3339Nano timestamp at the beginning
      of every line of log output. Defaults to `false`.
    in: query
    name: timestamps
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      若此字段设置为 `true`，则在日志输出的每一行之前添加一个 RFC3339 或 RFC3339Nano 格式的时间戳。
      默认值为 `false`。
  tty:
    description: If `true` indicates that a TTY will be allocated for the `exec` call.
      Defaults to `false`.
    in: query
    name: tty
    type: boolean
    uniqueItems: true
    x-kab-description-zh: 如果此参数设置为 `true`，则需要为 `exec` 请求分配 TTY 终端。默认为 `false`。
  watch:
    description: |-
      Watch for changes to the described resources and return them as a stream of add, update, and
      remove notifications. Specify `resourceVersion`.
    in: query
    name: watch
    type: boolean
    uniqueItems: true
    x-kab-description-zh: |-
      监视所给资源的变化，并将所发生的变化用 ADD、UPDATE、REMOVE 这类通知事件返回给客户端。
      需要设置 `resourceVersion`。
paths:
  /.well-known/openid-configuration/:
    get:
      description: get service account issuer OpenID configuration, also known as
        the 'OIDC discovery doc'
      operationId: getServiceAccountIssuerOpenIDConfiguration
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - WellKnown
      x-kab-description-zh: 读取服务账号发放者 OpenID 配置，也称作 **OIDC 发现文档（Discovery doc）**
  /api/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available API versions for the core API group
      operationId: getCoreAPIVersions
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIVersions'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core
      x-kab-description-zh: 读取关于核心 API 组的信息
  /api/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getCoreV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取核心 API 组 v1 可用的资源
  /api/v1/componentstatuses:
    get:
      consumes:
        - '*/*'
      description: list ComponentStatus objects
      operationId: listCoreV1ComponentStatus
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ComponentStatusList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举 ComponentStatus 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ComponentStatus
        version: v1
  /api/v1/componentstatuses/{name}:
    get:
      consumes:
        - '*/*'
      description: read the specified ComponentStatus
      operationId: readCoreV1ComponentStatus
      parameters:
        - description: name of the ComponentStatus
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ComponentStatus 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ComponentStatus'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ComponentStatus 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ComponentStatus
        version: v1
  /api/v1/configmaps:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ConfigMap
      operationId: listCoreV1ConfigMapForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 ConfigMap 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
  /api/v1/endpoints:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Endpoints
      operationId: listCoreV1EndpointsForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.EndpointsList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Endpoints 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
  /api/v1/events:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Event
      operationId: listCoreV1EventForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.EventList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Event 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
  /api/v1/limitranges:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind LimitRange
      operationId: listCoreV1LimitRangeForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRangeList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 LimitRange 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
  /api/v1/namespaces:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Namespace
      operationId: listCoreV1Namespace
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.NamespaceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Namespace 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Namespace
      operationId: createCoreV1Namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Namespace
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/namespaces/{namespace}/bindings:
    post:
      consumes:
        - '*/*'
      description: create a Binding
      operationId: createCoreV1NamespacedBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.CREATE'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Binding
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Binding
        version: v1
  /api/v1/namespaces/{namespace}/configmaps:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ConfigMap
      operationId: deleteCoreV1CollectionNamespacedConfigMap
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 ConfigMap
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ConfigMap
      operationId: listCoreV1NamespacedConfigMap
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMapList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 ConfigMap 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ConfigMap
      operationId: createCoreV1NamespacedConfigMap
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 ConfigMap
  /api/v1/namespaces/{namespace}/configmaps/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ConfigMap
      operationId: deleteCoreV1NamespacedConfigMap
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ConfigMap
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ConfigMap 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 ConfigMap
    get:
      consumes:
        - '*/*'
      description: read the specified ConfigMap
      operationId: readCoreV1NamespacedConfigMap
      parameters:
        - description: name of the ConfigMap
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ConfigMap 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ConfigMap 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ConfigMap
      operationId: patchCoreV1NamespacedConfigMap
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ConfigMap
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ConfigMap 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
        '403':
          description: Forbidden
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '422':
          description: Unprocessable entity.
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ConfigMap 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ConfigMap
      operationId: replaceCoreV1NamespacedConfigMap
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ConfigMap
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ConfigMap 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ConfigMap.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ConfigMap 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ConfigMap
        version: v1
  /api/v1/namespaces/{namespace}/endpoints:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Endpoints
      operationId: deleteCoreV1CollectionNamespacedEndpoints
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 Endpoints
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Endpoints
      operationId: listCoreV1NamespacedEndpoints
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.EndpointsList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Endpoints 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    post:
      consumes:
        - '*/*'
      description: create Endpoints
      operationId: createCoreV1NamespacedEndpoints
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Endpoints
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
  /api/v1/namespaces/{namespace}/endpoints/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete Endpoints
      operationId: deleteCoreV1NamespacedEndpoints
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Endpoints
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Endpoints 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Endpoints 对象
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Endpoints
      operationId: readCoreV1NamespacedEndpoints
      parameters:
        - description: name of the Endpoints
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Endpoints 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Endpoints 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Endpoints
      operationId: patchCoreV1NamespacedEndpoints
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Endpoints
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Endpoints 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Endpoints 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Endpoints
      operationId: replaceCoreV1NamespacedEndpoints
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Endpoints
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Endpoints 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Endpoints.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Endpoints 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Endpoints
        version: v1
  /api/v1/namespaces/{namespace}/events:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Event
      operationId: deleteCoreV1CollectionNamespacedEvent
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 Event
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Event
      operationId: listCoreV1NamespacedEvent
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.EventList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Event 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    post:
      consumes:
        - '*/*'
      description: create an Event
      operationId: createCoreV1NamespacedEvent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Event
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
  /api/v1/namespaces/{namespace}/events/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an Event
      operationId: deleteCoreV1NamespacedEvent
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Event
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Event
      operationId: readCoreV1NamespacedEvent
      parameters:
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Event 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Event
      operationId: patchCoreV1NamespacedEvent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Event 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Event
      operationId: replaceCoreV1NamespacedEvent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Event.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Event 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Event
        version: v1
  /api/v1/namespaces/{namespace}/limitranges:
    delete:
      consumes:
        - '*/*'
      description: delete collection of LimitRange
      operationId: deleteCoreV1CollectionNamespacedLimitRange
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 LimitRange
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind LimitRange
      operationId: listCoreV1NamespacedLimitRange
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRangeList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 LimitRange 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a LimitRange
      operationId: createCoreV1NamespacedLimitRange
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 LimitRange
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
  /api/v1/namespaces/{namespace}/limitranges/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a LimitRange
      operationId: deleteCoreV1NamespacedLimitRange
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the LimitRange
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: LimitRange 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 LimitRange
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified LimitRange
      operationId: readCoreV1NamespacedLimitRange
      parameters:
        - description: name of the LimitRange
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: LimitRange 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 LimitRange 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified LimitRange
      operationId: patchCoreV1NamespacedLimitRange
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the LimitRange
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: LimitRange 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 LimitRange 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified LimitRange
      operationId: replaceCoreV1NamespacedLimitRange
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the LimitRange
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: LimitRange 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.LimitRange.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 LimitRange 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: LimitRange
        version: v1
  /api/v1/namespaces/{namespace}/persistentvolumeclaims:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PersistentVolumeClaim
      operationId: deleteCoreV1CollectionNamespacedPersistentVolumeClaim
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 PersistentVolumeClaim
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PersistentVolumeClaim
      operationId: listCoreV1NamespacedPersistentVolumeClaim
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 PersistentVolumeClaim 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a PersistentVolumeClaim
      operationId: createCoreV1NamespacedPersistentVolumeClaim
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 PersistentVolumeClaim
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PersistentVolumeClaim
      operationId: deleteCoreV1NamespacedPersistentVolumeClaim
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 PersistentVolumeClaim
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified PersistentVolumeClaim
      operationId: readCoreV1NamespacedPersistentVolumeClaim
      parameters:
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 PersistentVolumeClaim 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PersistentVolumeClaim
      operationId: patchCoreV1NamespacedPersistentVolumeClaim
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 PersistentVolumeClaim 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified PersistentVolumeClaim
      operationId: replaceCoreV1NamespacedPersistentVolumeClaim
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 PersistentVolumeClaim 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/namespaces/{namespace}/persistentvolumeclaims/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified PersistentVolumeClaim
      operationId: readCoreV1NamespacedPersistentVolumeClaimStatus
      parameters:
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 PersistentVolumeClaim 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified PersistentVolumeClaim
      operationId: patchCoreV1NamespacedPersistentVolumeClaimStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 PersistentVolumeClaim 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified PersistentVolumeClaim
      operationId: replaceCoreV1NamespacedPersistentVolumeClaimStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolumeClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolumeClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaim.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 PersistentVolumeClaim 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/namespaces/{namespace}/pods:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Pod
      operationId: deleteCoreV1CollectionNamespacedPod
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 Pod
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Pod
      operationId: listCoreV1NamespacedPod
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Pod 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Pod
      operationId: createCoreV1NamespacedPod
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Pod
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Pod
      operationId: deleteCoreV1NamespacedPod
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Pod
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Pod
      operationId: readCoreV1NamespacedPod
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Pod 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Pod
      operationId: patchCoreV1NamespacedPod
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Pod 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Pod
      operationId: replaceCoreV1NamespacedPod
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Pod 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/attach:
    get:
      consumes:
        - '*/*'
      description: connect GET requests to attach of Pod
      operationId: connectCoreV1GetNamespacedPodAttach
      parameters:
        - $ref: '#/parameters/container'
        - description: Name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/stderr'
        - $ref: '#/parameters/stdin'
        - $ref: '#/parameters/stdout'
        - $ref: '#/parameters/tty'
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 请求连接到 Node 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodAttachOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: connect POST requests to attach of Pod
      operationId: connectCoreV1PostNamespacedPodAttach
      parameters:
        - description: |-
            The container to attach.
            Defaults to the only container if there is only one container in the Pod.
          in: query
          name: container
          type: string
          uniqueItems: true
          x-kab-description-zh: 要挂接的容器。如果 Pod 中只有一个容器，则默认为该容器。
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: This indicates whether the stderr is to be redirected for the
            attach call. Defaults to `true`.
          in: query
          name: stderr
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要将 attach 请求的标准错误输出进行重定向。默认值为 `true`。
        - description: |-
            This inidcates whether the standard input stream of the Pod is to be redirected for this call.
            Defaults to false.
          in: query
          name: stdin
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要将此请求的 Pod 标准输入数据流进行重定向。默认值为 `false`。
        - description: |-
            This indicates whether the stdout is to be redirected for the attach call.
            Defaults to true.
          in: query
          name: stdout
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要将 attach 请求的 Pod 标准输出进行重定向。默认值为 `true`。
        - description: |-
            This indicates whether a TTY will be allocated for the attach call.
            This is passed through the container runtime so the TTY is allocated on the
            worker node by the container runtime. Defaults to false.
          in: query
          name: tty
          type: boolean
          uniqueItems: true
          x-kab-description-zh: |-
            此参数表明是否要为 attach 请求分配 TTY 虚拟设备。此参数会被转交给容器运行时，
            以便后者在工作节点上分配 TTY 设备。默认值为 `false`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 连接 POST 请求到 Pod 的 attach 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodAttachOptions
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/binding:
    post:
      consumes:
        - '*/*'
      description: create binding of a Pod
      operationId: createCoreV1NamespacedPodBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.CREATE'
        - $ref: '#/parameters/dryRun'
        - description: name of the Binding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Binding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 为 Pod 创建绑定关系
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Binding
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/ephemeralcontainers:
    get:
      consumes:
        - '*/*'
      description: read ephemeral containers for the specified Pod
      operationId: readCoreV1NamespacedPodEphemeralcontainers
      parameters:
        - description: Name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Pod 对象的临时容器信息（ephemeralcontainers）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update ephemeral containers of the specified Pod
      operationId: patchCoreV1NamespacedPodEphemeralcontainers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: Name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Pod 对象的临时容器部分
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the ephemeral containers of the specified Pod
      operationId: replaceCoreV1NamespacedPodEphemeralcontainers
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: Name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Pod 对象的临时容器数据（ephemeralcontainers）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/eviction:
    post:
      consumes:
        - '*/*'
      description: create eviction of a Pod
      operationId: createCoreV1NamespacedPodEviction
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.Eviction'
        - $ref: '#/parameters/dryRun'
        - description: name of the Eviction
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.Eviction'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.Eviction'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.Eviction'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 为 Pod 触发驱逐操作
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: policy
        kind: Eviction
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/exec:
    get:
      consumes:
        - '*/*'
      description: send GET requests to exec of Pod
      operationId: connectCoreV1GetNamespacedPodExec
      parameters:
        - $ref: '#/parameters/command'
        - $ref: '#/parameters/container'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/stderr'
        - $ref: '#/parameters/stdin'
        - $ref: '#/parameters/stdout'
        - $ref: '#/parameters/tty'
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 发送到 Pod 的 exec 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodExecOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to exec of Pod
      operationId: connectCoreV1PostNamespacedPodExec
      parameters:
        - description: '`command` is the remote command to execute. argv array. Not
            executed within a shell.'
          in: query
          name: command
          type: string
          uniqueItems: true
          x-kab-description-zh: '`command` 是要执行的远程命令，由字符串数组构成。所给的命令不会在一个 Shell 中执行。'
        - description: |-
            Container in which to execute the command.
            Defaults to only container if there is only one container in the Pod.
          in: query
          name: container
          type: string
          uniqueItems: true
          x-kab-description-zh: 执行命令所使用的容器。如果 Pod 中只有一个容器，则默认为该容器。
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Redirect the standard error stream of the Pod for this call.
            Defaults to `true`.
          in: query
          name: stderr
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要将此请求的标准错误输出进行重定向。默认值为 `true`。
        - description: Redirect the standard input stream of the Pod for this call.
            Defaults to `false`.
          in: query
          name: stdin
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要将此请求的 Pod 标准输入数据流进行重定向。默认值为 `false`。
        - description: Redirect the standard output stream of the Pod for this call.
            Defaults to `true`.
          in: query
          name: stdout
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要将 exec 请求的 Pod 标准输出进行重定向。默认值为 `true`。
        - description: If true indicates that a TTY will be allocated for the exec
            call.  Defaults to `false`.
          in: query
          name: tty
          type: boolean
          uniqueItems: true
          x-kab-description-zh: 此参数表明是否要为 exec 请求分配 TTY 虚拟设备。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 连接 POST 请求到 Pod 的 exec 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodExecOptions
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/log:
    get:
      consumes:
        - '*/*'
      description: read log of the specified Pod
      operationId: readCoreV1NamespacedPodLog
      parameters:
        - description: |-
            The container for which to stream logs.
            Defaults to only container if there is one container in the Pod.
          in: query
          name: container
          type: string
          uniqueItems: true
          x-kab-description-zh: |-
            流式读取日志时使用的容器。
            如果 Pod 中只有一个容器，则默认为该容器。
        - $ref: '#/parameters/follow'
        - $ref: '#/parameters/insecureSkipTLSVerifyBackend'
        - $ref: '#/parameters/limitBytes'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/previous'
        - $ref: '#/parameters/sinceSeconds'
        - description: |-
            RFC3339 timestamp from which to show logs. If this value precedes
            the time a Pod was started, only logs since the Pod start will be returned.
            If this value is in the future, no logs will be returned.
            Only one of `sinceSeconds` or `sinceTime` may be specified.
          in: query
          name: sinceTime
          type: string
          uniqueItems: true
          x-kab-description-zh: |-
            一个 RFC3339 格式的时间戳字符串，日志范围从该时间戳开始。
            如果所给时间早于 Pod 启动时间，则仅返回 Pod 启动以来生成的日志。
            如果时间戳表示的是将来的时间，则不会返回日志数据。
            `sinceSeconds` 和 `sinceTime` 只能指定其一。
        - $ref: '#/parameters/tailLines'
        - $ref: '#/parameters/timestamps'
      produces:
        - text/plain
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Pod 对象的日志（log）数据
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/portforward:
    get:
      consumes:
        - '*/*'
      description: send GET requests to portforward of Pod
      operationId: connectCoreV1GetNamespacedPodPortforward
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/ports'
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 请求发送到 Pod 的 portforward 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodPortForwardOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to portforward of Pod
      operationId: connectCoreV1PostNamespacedPodPortforward
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: List of ports to forward. Required when using WebSockets
          in: query
          name: ports
          type: integer
          uniqueItems: true
          x-kab-description-zh: 要转发的端口集合。使用 WebSocket 时必须指定。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 连接 POST 请求到 Pod 的 portforward 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodPortForwardOptions
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/proxy:
    delete:
      consumes:
        - '*/*'
      description: send DELETE requests to proxy of Pod
      operationId: connectCoreV1DeleteNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Pod 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 DELETE 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    get:
      consumes:
        - '*/*'
      description: send GET requests to proxy of Pod
      operationId: connectCoreV1GetNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Pod 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的代理端点发送 GET 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    head:
      consumes:
        - '*/*'
      description: send HEAD requests to proxy of Pod
      operationId: connectCoreV1HeadNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 HEAD 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    options:
      consumes:
        - '*/*'
      description: send OPTIONS requests to proxy of Pod
      operationId: connectCoreV1OptionsNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Pod 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 OPTIONS 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    patch:
      consumes:
        - '*/*'
      description: send PATCH requests to proxy of Pod
      operationId: connectCoreV1PatchNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 PATCH 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to proxy of Pod
      operationId: connectCoreV1PostNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求要使用的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 POST 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    put:
      consumes:
        - '*/*'
      description: send PUT requests to proxy of Pod
      operationId: connectCoreV1PutNamespacedPodProxy
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求要使用的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 PUT 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/proxy/{path}:
    delete:
      consumes:
        - '*/*'
      description: send DELETE requests to proxy of Pod
      operationId: connectCoreV1DeleteNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Pod 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 DELETE 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    get:
      consumes:
        - '*/*'
      description: send GET requests to proxy of Pod
      operationId: connectCoreV1GetNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Pod 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 请求连接到 Pod 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    head:
      consumes:
        - '*/*'
      description: send HEAD requests to proxy of Pod
      operationId: connectCoreV1HeadNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 HEAD 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    options:
      consumes:
        - '*/*'
      description: send OPTIONS requests to proxy of Pod
      operationId: connectCoreV1OptionsNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Pod 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 OPTIONS 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    patch:
      consumes:
        - '*/*'
      description: send PATCH requests to proxy of Pod
      operationId: connectCoreV1PatchNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 PATCH 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to proxy of Pod
      operationId: connectCoreV1PostNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求要使用的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 POST 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
    put:
      consumes:
        - '*/*'
      description: send PUT requests to proxy of Pod
      operationId: connectCoreV1PutNamespacedPodProxyWithPath
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            pod.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Pod proxy 请求要使用的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Pod 的 proxy 端点发送 PUT 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodProxyOptions
        version: v1
  /api/v1/namespaces/{namespace}/pods/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Pod
      operationId: readCoreV1NamespacedPodStatus
      parameters:
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Pod 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Pod
      operationId: patchCoreV1NamespacedPodStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Pod 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Pod
      operationId: replaceCoreV1NamespacedPodStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Pod
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Pod 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Pod.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Pod 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/namespaces/{namespace}/podtemplates:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PodTemplate
      operationId: deleteCoreV1CollectionNamespacedPodTemplate
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 PodTemplate
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PodTemplate
      operationId: listCoreV1NamespacedPodTemplate
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 PodTemplate 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a PodTemplate
      operationId: createCoreV1NamespacedPodTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 PodTemplate
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
  /api/v1/namespaces/{namespace}/podtemplates/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PodTemplate
      operationId: deleteCoreV1NamespacedPodTemplate
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PodTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 PodTemplate
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified PodTemplate
      operationId: readCoreV1NamespacedPodTemplate
      parameters:
        - description: name of the PodTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 PodTemplate 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PodTemplate
      operationId: patchCoreV1NamespacedPodTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PodTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 PodTemplate 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified PodTemplate
      operationId: replaceCoreV1NamespacedPodTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PodTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplate.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 PodTemplate 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ReplicationController
      operationId: deleteCoreV1CollectionNamespacedReplicationController
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 ReplicationController
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ReplicationController
      operationId: listCoreV1NamespacedReplicationController
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 ReplicationController 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ReplicationController
      operationId: createCoreV1NamespacedReplicationController
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 ReplicationController
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ReplicationController
      operationId: deleteCoreV1NamespacedReplicationController
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 ReplicationController
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationController
      parameters:
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ReplicationController 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationController
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ReplicationController 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationController
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ReplicationController 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/scale:
    get:
      consumes:
        - '*/*'
      description: read scale of the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationControllerScale
      parameters:
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ReplicationController 对象的规模（scale）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update scale of the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationControllerScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ReplicationController 对象的规模（scale）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace scale of the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationControllerScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ReplicationController 对象的规模（scale）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
  /api/v1/namespaces/{namespace}/replicationcontrollers/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ReplicationController
      operationId: readCoreV1NamespacedReplicationControllerStatus
      parameters:
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ReplicationController 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ReplicationController
      operationId: patchCoreV1NamespacedReplicationControllerStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ReplicationController 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ReplicationController
      operationId: replaceCoreV1NamespacedReplicationControllerStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicationController
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicationController 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationController.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ReplicationController 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/namespaces/{namespace}/resourcequotas:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceQuota
      operationId: deleteCoreV1CollectionNamespacedResourceQuota
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 ResourceQuota
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceQuota
      operationId: listCoreV1NamespacedResourceQuota
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuotaList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 ResourceQuota 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ResourceQuota
      operationId: createCoreV1NamespacedResourceQuota
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 ResourceQuota
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/namespaces/{namespace}/resourcequotas/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ResourceQuota
      operationId: deleteCoreV1NamespacedResourceQuota
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 ResourceQuota
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceQuota
      operationId: readCoreV1NamespacedResourceQuota
      parameters:
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ResourceQuota 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceQuota
      operationId: patchCoreV1NamespacedResourceQuota
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ResourceQuota 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceQuota
      operationId: replaceCoreV1NamespacedResourceQuota
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ResourceQuota 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/namespaces/{namespace}/resourcequotas/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ResourceQuota
      operationId: readCoreV1NamespacedResourceQuotaStatus
      parameters:
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ResourceQuota 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ResourceQuota
      operationId: patchCoreV1NamespacedResourceQuotaStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ResourceQuota 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ResourceQuota
      operationId: replaceCoreV1NamespacedResourceQuotaStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceQuota
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceQuota 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuota.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ResourceQuota 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/namespaces/{namespace}/secrets:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Secret
      operationId: deleteCoreV1CollectionNamespacedSecret
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 Secret
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Secret
      operationId: listCoreV1NamespacedSecret
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.SecretList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Secret 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Secret
      operationId: createCoreV1NamespacedSecret
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Secret
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
  /api/v1/namespaces/{namespace}/secrets/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Secret
      operationId: deleteCoreV1NamespacedSecret
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Secret
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Secret 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Secret
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Secret
      operationId: readCoreV1NamespacedSecret
      parameters:
        - description: name of the Secret
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Secret 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Secret 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Secret
      operationId: patchCoreV1NamespacedSecret
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Secret
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Secret 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Secret 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Secret
      operationId: replaceCoreV1NamespacedSecret
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Secret
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Secret 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Secret.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Secret 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
  /api/v1/namespaces/{namespace}/serviceaccounts:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ServiceAccount
      operationId: deleteCoreV1CollectionNamespacedServiceAccount
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 ServiceAccount
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ServiceAccount
      operationId: listCoreV1NamespacedServiceAccount
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccountList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 ServiceAccount 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ServiceAccount
      operationId: createCoreV1NamespacedServiceAccount
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 ServiceAccount
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
  /api/v1/namespaces/{namespace}/serviceaccounts/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ServiceAccount
      operationId: deleteCoreV1NamespacedServiceAccount
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ServiceAccount
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceAccount 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 ServiceAccount
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ServiceAccount
      operationId: readCoreV1NamespacedServiceAccount
      parameters:
        - description: name of the ServiceAccount
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceAccount 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 ServiceAccount 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ServiceAccount
      operationId: patchCoreV1NamespacedServiceAccount
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ServiceAccount
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceAccount 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 ServiceAccount 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ServiceAccount
      operationId: replaceCoreV1NamespacedServiceAccount
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ServiceAccount
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceAccount 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccount.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 ServiceAccount 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
  /api/v1/namespaces/{namespace}/serviceaccounts/{name}/token:
    post:
      consumes:
        - '*/*'
      description: create token of a ServiceAccount
      operationId: createCoreV1NamespacedServiceAccountToken
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequest.CREATE'
        - description: name of the TokenRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenRequest.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 为某个 ServiceAccount 生成令牌
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: TokenRequest
        version: v1
  /api/v1/namespaces/{namespace}/services:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Service
      operationId: deleteCoreV1CollectionNamespacedService
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 Service
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Service
      operationId: listCoreV1NamespacedService
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Service 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Service
      operationId: createCoreV1NamespacedService
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Service
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /api/v1/namespaces/{namespace}/services/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Service
      operationId: deleteCoreV1NamespacedService
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Service
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Service
      operationId: readCoreV1NamespacedService
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Service 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Service
      operationId: patchCoreV1NamespacedService
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Service 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Service
      operationId: replaceCoreV1NamespacedService
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Service 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /api/v1/namespaces/{namespace}/services/{name}/proxy:
    delete:
      consumes:
        - '*/*'
      description: send DELETE requests to proxy of Service
      operationId: connectCoreV1DeleteNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 DELETE 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    get:
      consumes:
        - '*/*'
      description: send GET requests to proxy of Service
      operationId: connectCoreV1GetNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀即参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 请求连接到 Service 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    head:
      consumes:
        - '*/*'
      description: send HEAD requests to proxy of Service
      operationId: connectCoreV1HeadNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 HEAD 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    options:
      consumes:
        - '*/*'
      description: send OPTIONS requests to proxy of Service
      operationId: connectCoreV1OptionsNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 OPTIONS 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    patch:
      consumes:
        - '*/*'
      description: send PATCH requests to proxy of Service
      operationId: connectCoreV1PatchNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 PATCH 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to proxy of Service
      operationId: connectCoreV1PostNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service  的 proxy 端点发送 POST 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    put:
      consumes:
        - '*/*'
      description: send PUT requests to proxy of Service
      operationId: connectCoreV1PutNamespacedServiceProxy
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 PUT 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
  /api/v1/namespaces/{namespace}/services/{name}/proxy/{path}:
    delete:
      consumes:
        - '*/*'
      description: send DELETE requests to proxy of Service
      operationId: connectCoreV1DeleteNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 DELETE 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    get:
      consumes:
        - '*/*'
      description: send GET requests to proxy of Service
      operationId: connectCoreV1GetNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀即参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 请求连接到 Service 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    head:
      consumes:
        - '*/*'
      description: send HEAD requests to proxy of Service
      operationId: connectCoreV1HeadNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 HEAD 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    options:
      consumes:
        - '*/*'
      description: send OPTIONS requests to proxy of Service
      operationId: connectCoreV1OptionsNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 OPTIONS 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    patch:
      consumes:
        - '*/*'
      description: send PATCH requests to proxy of Service
      operationId: connectCoreV1PatchNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 PATCH 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to proxy of Service
      operationId: connectCoreV1PostNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service  的 proxy 端点发送 POST 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
    put:
      consumes:
        - '*/*'
      description: send PUT requests to proxy of Service
      operationId: connectCoreV1PutNamespacedServiceProxyWithPath
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/path'
        - description: |-
            Path is the part of URLs that include service endpoints, suffixes,
            and parameters to use for the current proxy request to service. For example,
            the whole request URL is
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`.
            Path is `_search?q=user:kimchy`.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: |-
            用于当前 Service 代理请求的 URL 路径，包含服务端点、后缀及参数等。例如，完整的请求 URL 为：
            `http://localhost/api/v1/namespaces/kube-system/services/elasticsearch-logging/_search?q=user:kimchy`，
            其中的 path 部分为 `_search?q=user:kimchy`。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Service 的 proxy 端点发送 PUT 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceProxyOptions
        version: v1
  /api/v1/namespaces/{namespace}/services/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Service
      operationId: readCoreV1NamespacedServiceStatus
      parameters:
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Service 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Service
      operationId: patchCoreV1NamespacedServiceStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Service 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Service
      operationId: replaceCoreV1NamespacedServiceStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Service
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Service 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Service.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Service 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /api/v1/namespaces/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Namespace
      operationId: deleteCoreV1Namespace
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Namespace
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Namespace
      operationId: readCoreV1Namespace
      parameters:
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Namespace 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Namespace
      operationId: patchCoreV1Namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Namespace 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Namespace
      operationId: replaceCoreV1Namespace
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Namespace 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/namespaces/{name}/finalize:
    put:
      consumes:
        - '*/*'
      description: replace finalize of the specified Namespace
      operationId: replaceCoreV1NamespaceFinalize
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Namespace 对象的终结器数据
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/namespaces/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Namespace
      operationId: readCoreV1NamespaceStatus
      parameters:
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Namespace 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Namespace
      operationId: patchCoreV1NamespaceStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Namespace 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Namespace
      operationId: replaceCoreV1NamespaceStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Namespace
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Namespace 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Namespace.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Namespace 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Namespace
        version: v1
  /api/v1/nodes:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Node
      operationId: deleteCoreV1CollectionNode
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 Node
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Node
      operationId: listCoreV1Node
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.NodeList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 Node 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Node
      operationId: createCoreV1Node
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 Node
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
  /api/v1/nodes/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Node
      operationId: deleteCoreV1Node
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 Node
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Node
      operationId: readCoreV1Node
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Node 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Node
      operationId: patchCoreV1Node
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '201':
          description: Update
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Node 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Node
      operationId: replaceCoreV1Node
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Node 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
  /api/v1/nodes/{name}/proxy:
    delete:
      consumes:
        - '*/*'
      description: connect DELETE requests to proxy of Node
      operationId: connectCoreV1DeleteNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Ndoe 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 DELETE 请求连接到 Node 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    get:
      consumes:
        - '*/*'
      description: send GET request to proxy of Node
      operationId: connectCoreV1GetNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Node 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 GET 请求连接到 Node 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    head:
      consumes:
        - '*/*'
      description: send HEAD requests to proxy of Node
      operationId: connectCoreV1HeadNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Ndoe 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 HEAD 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    options:
      consumes:
        - '*/*'
      description: send OPTIONS requests to proxy of Node
      operationId: connectCoreV1OptionsNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 OPTIONS 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    patch:
      consumes:
        - '*/*'
      description: send PATCH requests to proxy of Node
      operationId: connectCoreV1PatchNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 PATCH 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to proxy of Node
      operationId: connectCoreV1PostNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 POST 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    put:
      consumes:
        - '*/*'
      description: send PUT requests to proxy of Node
      operationId: connectCoreV1PutNodeProxy
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 PUT 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
  /api/v1/nodes/{name}/proxy/{path}:
    delete:
      consumes:
        - '*/*'
      description: connect DELETE requests to proxy of Node
      operationId: connectCoreV1DeleteNodeProxyWithPath
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Node 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 将 DELETE 请求连接到 Node 的 proxy 端点
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    get:
      consumes:
        - '*/*'
      description: send GET request to proxy of Node
      operationId: connectCoreV1GetNodeProxyWithPath
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/path'
        - description: The URL path to use for the current proxy request to node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 GET 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    head:
      consumes:
        - '*/*'
      description: send HEAD requests to proxy of Node
      operationId: connectCoreV1HeadNodeProxyWithPath
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 用于当前 Ndoe 代理请求的 URL 路径
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 HEAD 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    options:
      consumes:
        - '*/*'
      description: send OPTIONS requests to proxy of Node
      operationId: connectCoreV1OptionsNodeProxyWithPath
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 OPTIONS 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    patch:
      consumes:
        - '*/*'
      description: send PATCH requests to proxy of Node
      operationId: connectCoreV1PatchNodeProxyWithPath
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 PATCH 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    post:
      consumes:
        - '*/*'
      description: send POST requests to proxy of Node
      operationId: connectCoreV1PostNodeProxyWithPath
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 POST 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
    put:
      consumes:
        - '*/*'
      description: send PUT requests to proxy of Node
      operationId: connectCoreV1PutNodeProxyWithPath
      parameters:
        - description: name of the Node
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/path'
        - description: Path is the URL path to use for the current proxy request to
            node.
          in: query
          name: path
          required: false
          type: string
          x-kab-description-zh: 当前 Node proxy 请求的 URL 路径。
      produces:
        - '*/*'
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 向 Node 的 proxy 端点发送 PUT 请求
      x-kubernetes-action: connect
      x-kubernetes-group-version-kind:
        group: ''
        kind: NodeProxyOptions
        version: v1
  /api/v1/nodes/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Node
      operationId: readCoreV1NodeStatus
      parameters:
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 Node 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Node
      operationId: patchCoreV1NodeStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 Node 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Node
      operationId: replaceCoreV1NodeStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Node
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Node 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 成功
        '201':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.Node.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 Node 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: Node
        version: v1
  /api/v1/persistentvolumeclaims:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PersistentVolumeClaim
      operationId: listCoreV1PersistentVolumeClaimForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 PersistentVolumeClaim 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolumeClaim
        version: v1
  /api/v1/persistentvolumes:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PersistentVolume
      operationId: deleteCoreV1CollectionPersistentVolume
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 批量删除 PersistentVolume
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PersistentVolume
      operationId: listCoreV1PersistentVolume
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolumeList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视 PersistentVolume 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a PersistentVolume
      operationId: createCoreV1PersistentVolume
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 创建一个 PersistentVolume
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
  /api/v1/persistentvolumes/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PersistentVolume
      operationId: deleteCoreV1PersistentVolume
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 删除一个 PersistentVolume
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified PersistentVolume
      operationId: readCoreV1PersistentVolume
      parameters:
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 PersistentVolume 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PersistentVolume
      operationId: patchCoreV1PersistentVolume
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 PersistentVolume 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified PersistentVolume
      operationId: replaceCoreV1PersistentVolume
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 PersistentVolume 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
  /api/v1/persistentvolumes/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified PersistentVolume
      operationId: readCoreV1PersistentVolumeStatus
      parameters:
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 读取指定的 PersistentVolume 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified PersistentVolume
      operationId: patchCoreV1PersistentVolumeStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 部分更新指定的 PersistentVolume 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified PersistentVolume
      operationId: replaceCoreV1PersistentVolumeStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PersistentVolume
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PersistentVolume 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PersistentVolume.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 替换指定的 PersistentVolume 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: ''
        kind: PersistentVolume
        version: v1
  /api/v1/pods:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Pod
      operationId: listCoreV1PodForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Pod 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Pod
        version: v1
  /api/v1/podtemplates:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PodTemplate
      operationId: listCoreV1PodTemplateForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.PodTemplateList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 PodTemplate 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: PodTemplate
        version: v1
  /api/v1/replicationcontrollers:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ReplicationController
      operationId: listCoreV1ReplicationControllerForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ReplicationControllerList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 ReplicationController 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ReplicationController
        version: v1
  /api/v1/resourcequotas:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceQuota
      operationId: listCoreV1ResourceQuotaForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ResourceQuotaList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 ResourceQuota 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ResourceQuota
        version: v1
  /api/v1/secrets:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Secret
      operationId: listCoreV1SecretForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.SecretList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Secret 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Secret
        version: v1
  /api/v1/serviceaccounts:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ServiceAccount
      operationId: listCoreV1ServiceAccountForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceAccountList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 ServiceAccount 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: ServiceAccount
        version: v1
  /api/v1/services:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Service
      operationId: listCoreV1ServiceForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.core.v1.ServiceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - core_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Service 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: ''
        kind: Service
        version: v1
  /apis/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available API groups
      operationId: getAPIVersions
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroupList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apis
      x-kab-description-zh: 获得可用的 API 组信息
  /apis/admissionregistration.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the admissionregistration API group
      operationId: getAdmissionregistrationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration
      x-kab-description-zh: 读取关于 admissionregistration.k8s.io API 组的信息
  /apis/admissionregistration.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAdmissionregistrationV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 读取 admissionregistration.k8s.io/v1 API 组可用的资源
  /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations:
    delete:
      consumes:
        - '*/*'
      description: delete collection of MutatingWebhookConfiguration
      operationId: deleteAdmissionregistrationV1CollectionMutatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 批量删除 MutatingWebhookConfiguration
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind MutatingWebhookConfiguration
      operationId: listAdmissionregistrationV1MutatingWebhookConfiguration
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfigurationList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 列举或监视 MutatingWebhookConfiguration 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a MutatingWebhookConfiguration
      operationId: createAdmissionregistrationV1MutatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 创建一个 MutatingWebhookConfiguration
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
  /apis/admissionregistration.k8s.io/v1/mutatingwebhookconfigurations/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a MutatingWebhookConfiguration
      operationId: deleteAdmissionregistrationV1MutatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the MutatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: MutatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 删除一个 MutatingWebhookConfiguration
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified MutatingWebhookConfiguration
      operationId: readAdmissionregistrationV1MutatingWebhookConfiguration
      parameters:
        - description: name of the MutatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: MutatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 读取指定的 MutatingWebhookConfiguration 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified MutatingWebhookConfiguration
      operationId: patchAdmissionregistrationV1MutatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the MutatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: MutatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 部分更新指定的 MutatingWebhookConfiguration 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified MutatingWebhookConfiguration
      operationId: replaceAdmissionregistrationV1MutatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the MutatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: MutatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.MutatingWebhookConfiguration.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 替换指定的 MutatingWebhookConfiguration 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: MutatingWebhookConfiguration
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingAdmissionPolicy
      operationId: deleteAdmissionregistrationV1CollectionValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 批量删除 ValidatingAdmissionPolicy
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingAdmissionPolicy
      operationId: listAdmissionregistrationV1ValidatingAdmissionPolicy
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 列举或监视 ValidatingAdmissionPolicy 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingAdmissionPolicy
      operationId: createAdmissionregistrationV1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 创建一个 ValidatingAdmissionPolicy
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingAdmissionPolicy
      operationId: deleteAdmissionregistrationV1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 删除一个 ValidatingAdmissionPolicy
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingAdmissionPolicy
      operationId: readAdmissionregistrationV1ValidatingAdmissionPolicy
      parameters:
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingAdmissionPolicy
      operationId: patchAdmissionregistrationV1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingAdmissionPolicy
      operationId: replaceAdmissionregistrationV1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingadmissionpolicies/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ValidatingAdmissionPolicy
      operationId: readAdmissionregistrationV1ValidatingAdmissionPolicyStatus
      parameters:
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicy 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ValidatingAdmissionPolicy
      operationId: patchAdmissionregistrationV1ValidatingAdmissionPolicyStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicy 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ValidatingAdmissionPolicy
      operationId: replaceAdmissionregistrationV1ValidatingAdmissionPolicyStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicy 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingAdmissionPolicyBinding
      operationId: deleteAdmissionregistrationV1CollectionValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 批量删除 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingAdmissionPolicyBinding
      operationId: listAdmissionregistrationV1ValidatingAdmissionPolicyBinding
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBindingList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 列举或监视 ValidatingAdmissionPolicyBinding 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingAdmissionPolicyBinding
      operationId: createAdmissionregistrationV1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 创建一个 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingadmissionpolicybindings/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingAdmissionPolicyBinding
      operationId: deleteAdmissionregistrationV1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 删除一个 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingAdmissionPolicyBinding
      operationId: readAdmissionregistrationV1ValidatingAdmissionPolicyBinding
      parameters:
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingAdmissionPolicyBinding
      operationId: patchAdmissionregistrationV1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingAdmissionPolicyBinding
      operationId: replaceAdmissionregistrationV1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingWebhookConfiguration
      operationId: deleteAdmissionregistrationV1CollectionValidatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 批量删除 ValidatingWebhookConfiguration
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingWebhookConfiguration
      operationId: listAdmissionregistrationV1ValidatingWebhookConfiguration
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfigurationList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 列举或监视 ValidatingWebhookConfiguration 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingWebhookConfiguration
      operationId: createAdmissionregistrationV1ValidatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 创建一个 ValidatingWebhookConfiguration
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
  /apis/admissionregistration.k8s.io/v1/validatingwebhookconfigurations/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingWebhookConfiguration
      operationId: deleteAdmissionregistrationV1ValidatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 删除一个 ValidatingWebhookConfiguration
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingWebhookConfiguration
      operationId: readAdmissionregistrationV1ValidatingWebhookConfiguration
      parameters:
        - description: name of the ValidatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 读取指定的 ValidatingWebhookConfiguration 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingWebhookConfiguration
      operationId: patchAdmissionregistrationV1ValidatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 部分更新指定的 ValidatingWebhookConfiguration 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingWebhookConfiguration
      operationId: replaceAdmissionregistrationV1ValidatingWebhookConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingWebhookConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingWebhookConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1.ValidatingWebhookConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1
      x-kab-description-zh: 替换指定的 ValidatingWebhookConfiguration 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingWebhookConfiguration
        version: v1
  /apis/admissionregistration.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAdmissionregistrationV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 读取 admissionregistration.k8s.io/v1alpha1 API 组可用的资源
  /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingAdmissionPolicy
      operationId: deleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 批量删除 ValidatingAdmissionPolicy
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingAdmissionPolicy
      operationId: listAdmissionregistrationV1alpha1ValidatingAdmissionPolicy
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 列举或监视 ValidatingAdmissionPolicy 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingAdmissionPolicy
      operationId: createAdmissionregistrationV1alpha1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 创建一个 ValidatingAdmissionPolicy
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
  /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingAdmissionPolicy
      operationId: deleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 删除一个 ValidatingAdmissionPolicy
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingAdmissionPolicy
      operationId: readAdmissionregistrationV1alpha1ValidatingAdmissionPolicy
      parameters:
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingAdmissionPolicy
      operationId: patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingAdmissionPolicy
      operationId: replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
  /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicies/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ValidatingAdmissionPolicy
      operationId: readAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus
      parameters:
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicy 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ValidatingAdmissionPolicy
      operationId: patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ValidatingAdmissionPolicy
      operationId: replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicy 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1alpha1
  /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingAdmissionPolicyBinding
      operationId: deleteAdmissionregistrationV1alpha1CollectionValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 批量删除 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingAdmissionPolicyBinding
      operationId: listAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBindingList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 列举或监视 ValidatingAdmissionPolicyBinding 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingAdmissionPolicyBinding
      operationId: createAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 创建一个 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
  /apis/admissionregistration.k8s.io/v1alpha1/validatingadmissionpolicybindings/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingAdmissionPolicyBinding
      operationId: deleteAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 删除一个 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingAdmissionPolicyBinding
      operationId: readAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding
      parameters:
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingAdmissionPolicyBinding
      operationId: patchAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingAdmissionPolicyBinding
      operationId: replaceAdmissionregistrationV1alpha1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1alpha1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1alpha1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1alpha1
  /apis/admissionregistration.k8s.io/v1beta1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAdmissionregistrationV1beta1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 读取 admissionregistration.k8s.io/v1beta1 API 组可用的资源
  /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingAdmissionPolicy
      operationId: deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 批量删除 ValidatingAdmissionPolicy
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingAdmissionPolicy
      operationId: listAdmissionregistrationV1beta1ValidatingAdmissionPolicy
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 列举或监视 ValidatingAdmissionPolicy 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingAdmissionPolicy
      operationId: createAdmissionregistrationV1beta1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 创建一个 ValidatingAdmissionPolicy
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
  /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingAdmissionPolicy
      operationId: deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 删除一个 ValidatingAdmissionPolicy
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingAdmissionPolicy
      operationId: readAdmissionregistrationV1beta1ValidatingAdmissionPolicy
      parameters:
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingAdmissionPolicy
      operationId: patchAdmissionregistrationV1beta1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingAdmissionPolicy
      operationId: replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicy 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
  /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicies/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ValidatingAdmissionPolicy
      operationId: readAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus
      parameters:
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicy 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ValidatingAdmissionPolicy
      operationId: patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicy 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ValidatingAdmissionPolicy
      operationId: replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicy 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicy 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicy
        version: v1beta1
  /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ValidatingAdmissionPolicyBinding
      operationId: deleteAdmissionregistrationV1beta1CollectionValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 批量删除 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ValidatingAdmissionPolicyBinding
      operationId: listAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBindingList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 列举或监视 ValidatingAdmissionPolicyBinding 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
    post:
      consumes:
        - '*/*'
      description: create a ValidatingAdmissionPolicyBinding
      operationId: createAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 创建一个 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
  /apis/admissionregistration.k8s.io/v1beta1/validatingadmissionpolicybindings/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ValidatingAdmissionPolicyBinding
      operationId: deleteAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 删除一个 ValidatingAdmissionPolicyBinding
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
    get:
      consumes:
        - '*/*'
      description: read the specified ValidatingAdmissionPolicyBinding
      operationId: readAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding
      parameters:
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 读取指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ValidatingAdmissionPolicyBinding
      operationId: patchAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 部分更新指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
    put:
      consumes:
        - '*/*'
      description: replace the specified ValidatingAdmissionPolicyBinding
      operationId: replaceAdmissionregistrationV1beta1ValidatingAdmissionPolicyBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ValidatingAdmissionPolicyBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ValidatingAdmissionPolicyBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.admissionregistration.v1beta1.ValidatingAdmissionPolicyBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - admissionregistration_v1beta1
      x-kab-description-zh: 替换指定的 ValidatingAdmissionPolicyBinding 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: admissionregistration.k8s.io
        kind: ValidatingAdmissionPolicyBinding
        version: v1beta1
  /apis/apiextensions.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the apiextensions API group
      operationId: getApiextensionsAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions
      x-kab-description-zh: 读取关于 apiextensions.k8s.io API 组的信息
  /apis/apiextensions.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getApiextensionsV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 读取 apiextensions.k8s.io/v1 API 组可用的资源
  /apis/apiextensions.k8s.io/v1/customresourcedefinitions:
    delete:
      consumes:
        - '*/*'
      description: delete collection of CustomResourceDefinition
      operationId: deleteApiextensionsV1CollectionCustomResourceDefinition
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 批量删除 CustomResourceDefinition
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CustomResourceDefinition
      operationId: listApiextensionsV1CustomResourceDefinition
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 列举或监视 CustomResourceDefinition 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a CustomResourceDefinition
      operationId: createApiextensionsV1CustomResourceDefinition
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 创建一个 CustomResourceDefinition
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
  /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a CustomResourceDefinition
      operationId: deleteApiextensionsV1CustomResourceDefinition
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 删除一个 CustomResourceDefinition
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified CustomResourceDefinition
      operationId: readApiextensionsV1CustomResourceDefinition
      parameters:
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 读取指定的 CustomResourceDefinition 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified CustomResourceDefinition
      operationId: patchApiextensionsV1CustomResourceDefinition
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 部分更新指定的 CustomResourceDefinition 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified CustomResourceDefinition
      operationId: replaceApiextensionsV1CustomResourceDefinition
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 替换指定的 CustomResourceDefinition 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
  /apis/apiextensions.k8s.io/v1/customresourcedefinitions/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified CustomResourceDefinition
      operationId: readApiextensionsV1CustomResourceDefinitionStatus
      parameters:
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 读取指定的 CustomResourceDefinition 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified CustomResourceDefinition
      operationId: patchApiextensionsV1CustomResourceDefinitionStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 部分更新指定的 CustomResourceDefinition 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified CustomResourceDefinition
      operationId: replaceApiextensionsV1CustomResourceDefinitionStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CustomResourceDefinition
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CustomResourceDefinition 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinition.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiextensions_v1
      x-kab-description-zh: 替换指定的 CustomResourceDefinition 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apiextensions.k8s.io
        kind: CustomResourceDefinition
        version: v1
  /apis/apiregistration.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the apiregistration API group
      operationId: getApiregistrationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration
      x-kab-description-zh: 读取关于 apiregistration.k8s.io API 组的信息
  /apis/apiregistration.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getApiregistrationV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 读取 apiregistration.k8s.io/v1 API 组可用的资源
  /apis/apiregistration.k8s.io/v1/apiservices:
    delete:
      consumes:
        - '*/*'
      description: delete collection of APIService
      operationId: deleteApiregistrationV1CollectionAPIService
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 批量删除 APIService
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind APIService
      operationId: listApiregistrationV1APIService
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIServiceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 列举或监视 APIService 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    post:
      consumes:
        - '*/*'
      description: create an APIService
      operationId: createApiregistrationV1APIService
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 创建一个 APIService
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
  /apis/apiregistration.k8s.io/v1/apiservices/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an APIService
      operationId: deleteApiregistrationV1APIService
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 删除一个 APIService
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified APIService
      operationId: readApiregistrationV1APIService
      parameters:
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 读取指定的 APIService 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified APIService
      operationId: patchApiregistrationV1APIService
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 部分更新指定的 APIService 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified APIService
      operationId: replaceApiregistrationV1APIService
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 替换指定的 APIService 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
  /apis/apiregistration.k8s.io/v1/apiservices/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified APIService
      operationId: readApiregistrationV1APIServiceStatus
      parameters:
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 读取指定的 APIService 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified APIService
      operationId: patchApiregistrationV1APIServiceStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 部分更新指定的 APIService 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified APIService
      operationId: replaceApiregistrationV1APIServiceStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the APIService
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: APIService 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.kube-aggregator.pkg.apis.apiregistration.v1.APIService.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apiregistration_v1
      x-kab-description-zh: 替换指定的 APIService 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apiregistration.k8s.io
        kind: APIService
        version: v1
  /apis/apps/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the apps API group
      operationId: getAppsAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps
      x-kab-description-zh: 读取关于 apps API 组的信息
  /apis/apps/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAppsV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取 apps/v1 API 组可用的资源
  /apis/apps/v1/controllerrevisions:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ControllerRevision
      operationId: listAppsV1ControllerRevisionForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevisionList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视所有名字空间下 ControllerRevision 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
  /apis/apps/v1/daemonsets:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind DaemonSet
      operationId: listAppsV1DaemonSetForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视所有名字空间下 DaemonSet 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
  /apis/apps/v1/deployments:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Deployment
      operationId: listAppsV1DeploymentForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视所有名字空间下 Deployment 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
  /apis/apps/v1/namespaces/{namespace}/controllerrevisions:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ControllerRevision
      operationId: deleteAppsV1CollectionNamespacedControllerRevision
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 批量删除 ControllerRevision
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ControllerRevision
      operationId: listAppsV1NamespacedControllerRevision
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevisionList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视 ControllerRevision 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ControllerRevision
      operationId: createAppsV1NamespacedControllerRevision
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 创建一个 ControllerRevision
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
  /apis/apps/v1/namespaces/{namespace}/controllerrevisions/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ControllerRevision
      operationId: deleteAppsV1NamespacedControllerRevision
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ControllerRevision
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ControllerRevision 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 删除一个 ControllerRevision
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ControllerRevision
      operationId: readAppsV1NamespacedControllerRevision
      parameters:
        - description: name of the ControllerRevision
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ControllerRevision 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 ControllerRevision 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ControllerRevision
      operationId: patchAppsV1NamespacedControllerRevision
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ControllerRevision
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ControllerRevision 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 ControllerRevision 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ControllerRevision
      operationId: replaceAppsV1NamespacedControllerRevision
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ControllerRevision
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ControllerRevision 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ControllerRevision.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 ControllerRevision 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: ControllerRevision
        version: v1
  /apis/apps/v1/namespaces/{namespace}/daemonsets:
    delete:
      consumes:
        - '*/*'
      description: delete collection of DaemonSet
      operationId: deleteAppsV1CollectionNamespacedDaemonSet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 批量删除 DaemonSet
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind DaemonSet
      operationId: listAppsV1NamespacedDaemonSet
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视 DaemonSet 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a DaemonSet
      operationId: createAppsV1NamespacedDaemonSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 创建一个 DaemonSet
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a DaemonSet
      operationId: deleteAppsV1NamespacedDaemonSet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 删除一个 DaemonSet
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified DaemonSet
      operationId: readAppsV1NamespacedDaemonSet
      parameters:
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 DaemonSet 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified DaemonSet
      operationId: patchAppsV1NamespacedDaemonSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 DaemonSet 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified DaemonSet
      operationId: replaceAppsV1NamespacedDaemonSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 DaemonSet 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/daemonsets/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified DaemonSet
      operationId: readAppsV1NamespacedDaemonSetStatus
      parameters:
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 DaemonSet 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified DaemonSet
      operationId: patchAppsV1NamespacedDaemonSetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 DaemonSet 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified DaemonSet
      operationId: replaceAppsV1NamespacedDaemonSetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the DaemonSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: DaemonSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DaemonSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 DaemonSet 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: DaemonSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/deployments:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Deployment
      operationId: deleteAppsV1CollectionNamespacedDeployment
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 批量删除 Deployment
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Deployment
      operationId: listAppsV1NamespacedDeployment
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.DeploymentList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视 Deployment 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Deployment
      operationId: createAppsV1NamespacedDeployment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 创建一个 Deployment
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
  /apis/apps/v1/namespaces/{namespace}/deployments/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Deployment
      operationId: deleteAppsV1NamespacedDeployment
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 删除一个 Deployment
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Deployment
      operationId: readAppsV1NamespacedDeployment
      parameters:
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 Deployment 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Deployment
      operationId: patchAppsV1NamespacedDeployment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 Deployment 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Deployment
      operationId: replaceAppsV1NamespacedDeployment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 Deployment 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
  /apis/apps/v1/namespaces/{namespace}/deployments/{name}/scale:
    get:
      consumes:
        - '*/*'
      description: read scale of the specified Deployment
      operationId: readAppsV1NamespacedDeploymentScale
      parameters:
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 Deployment 对象的规模（scale）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update scale of the specified Deployment
      operationId: patchAppsV1NamespacedDeploymentScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 Deployment 对象的规模（scale）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace scale of the specified Deployment
      operationId: replaceAppsV1NamespacedDeploymentScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 Deployment 对象的规模（scale）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
  /apis/apps/v1/namespaces/{namespace}/deployments/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Deployment
      operationId: readAppsV1NamespacedDeploymentStatus
      parameters:
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 Deployment 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Deployment
      operationId: patchAppsV1NamespacedDeploymentStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 Deployment 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Deployment
      operationId: replaceAppsV1NamespacedDeploymentStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Deployment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Deployment 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.Deployment.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 Deployment 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: Deployment
        version: v1
  /apis/apps/v1/namespaces/{namespace}/replicasets:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ReplicaSet
      operationId: deleteAppsV1CollectionNamespacedReplicaSet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 批量删除 ReplicaSet
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ReplicaSet
      operationId: listAppsV1NamespacedReplicaSet
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视 ReplicaSet 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ReplicaSet
      operationId: createAppsV1NamespacedReplicaSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 创建一个 ReplicaSet
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/replicasets/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ReplicaSet
      operationId: deleteAppsV1NamespacedReplicaSet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 删除一个 ReplicaSet
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ReplicaSet
      operationId: readAppsV1NamespacedReplicaSet
      parameters:
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 ReplicaSet 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ReplicaSet
      operationId: patchAppsV1NamespacedReplicaSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 ReplicaSet 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ReplicaSet
      operationId: replaceAppsV1NamespacedReplicaSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 ReplicaSet 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/scale:
    get:
      consumes:
        - '*/*'
      description: read scale of the specified ReplicaSet
      operationId: readAppsV1NamespacedReplicaSetScale
      parameters:
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 ReplicaSet 对象的规模（scale）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update scale of the specified ReplicaSet
      operationId: patchAppsV1NamespacedReplicaSetScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 ReplicaSet 对象的规模（scale）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace scale of the specified ReplicaSet
      operationId: replaceAppsV1NamespacedReplicaSetScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 ReplicaSet 对象的规模（scale）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
  /apis/apps/v1/namespaces/{namespace}/replicasets/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ReplicaSet
      operationId: readAppsV1NamespacedReplicaSetStatus
      parameters:
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 ReplicaSet 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ReplicaSet
      operationId: patchAppsV1NamespacedReplicaSetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 ReplicaSet 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ReplicaSet
      operationId: replaceAppsV1NamespacedReplicaSetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ReplicaSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ReplicaSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 ReplicaSet 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/statefulsets:
    delete:
      consumes:
        - '*/*'
      description: delete collection of StatefulSet
      operationId: deleteAppsV1CollectionNamespacedStatefulSet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 批量删除 StatefulSet
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind StatefulSet
      operationId: listAppsV1NamespacedStatefulSet
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视 StatefulSet 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a StatefulSet
      operationId: createAppsV1NamespacedStatefulSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 创建一个 StatefulSet
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a StatefulSet
      operationId: deleteAppsV1NamespacedStatefulSet
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 删除一个 StatefulSet
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified StatefulSet
      operationId: readAppsV1NamespacedStatefulSet
      parameters:
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 StatefulSet 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified StatefulSet
      operationId: patchAppsV1NamespacedStatefulSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Update
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 StatefulSet 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified StatefulSet
      operationId: replaceAppsV1NamespacedStatefulSet
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 StatefulSet 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
  /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/scale:
    get:
      consumes:
        - '*/*'
      description: read scale of the specified StatefulSet
      operationId: readAppsV1NamespacedStatefulSetScale
      parameters:
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 StatefulSet 对象的规模（scale）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update scale of the specified StatefulSet
      operationId: patchAppsV1NamespacedStatefulSetScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 StatefulSet 对象的规模（scale）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace scale of the specified StatefulSet
      operationId: replaceAppsV1NamespacedStatefulSetScale
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.Scale.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 StatefulSet 对象的规模（scale）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: Scale
        version: v1
  /apis/apps/v1/namespaces/{namespace}/statefulsets/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified StatefulSet
      operationId: readAppsV1NamespacedStatefulSetStatus
      parameters:
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 读取指定的 StatefulSet 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified StatefulSet
      operationId: patchAppsV1NamespacedStatefulSetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 部分更新指定的 StatefulSet 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified StatefulSet
      operationId: replaceAppsV1NamespacedStatefulSetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StatefulSet
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StatefulSet 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSet.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 替换指定的 StatefulSet 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
  /apis/apps/v1/replicasets:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ReplicaSet
      operationId: listAppsV1ReplicaSetForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.ReplicaSetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 ReplicaSet 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: ReplicaSet
        version: v1
  /apis/apps/v1/statefulsets:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind StatefulSet
      operationId: listAppsV1StatefulSetForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apps.v1.StatefulSetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - apps_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 StatefulSet 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: apps
        kind: StatefulSet
        version: v1
  /apis/authentication.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the authentication API group
      operationId: getAuthenticationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication
      x-kab-description-zh: 读取关于 authentication.k8s.io API 组的信息
  /apis/authentication.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAuthenticationV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1
      x-kab-description-zh: 读取 authentication.k8s.io/v1 API 组可用的资源
  /apis/authentication.k8s.io/v1/selfsubjectreviews:
    post:
      consumes:
        - '*/*'
      description: create a SelfSubjectReview
      operationId: createAuthenticationV1SelfSubjectReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.SelfSubjectReview.CREATE'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.SelfSubjectReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.SelfSubjectReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.SelfSubjectReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1
      x-kab-description-zh: 创建一个 SelfSubjectReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1
  /apis/authentication.k8s.io/v1/tokenreviews:
    post:
      consumes:
        - '*/*'
      description: create a TokenReview
      operationId: createAuthenticationV1TokenReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReview.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1.TokenReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1
      x-kab-description-zh: 创建一个 TokenReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: TokenReview
        version: v1
  /apis/authentication.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAuthenticationV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1alpha1
      x-kab-description-zh: 读取 authentication.k8s.io/v1alpha1 API 组可用的资源
  /apis/authentication.k8s.io/v1alpha1/selfsubjectreviews:
    post:
      consumes:
        - '*/*'
      description: create a SelfSubjectReview
      operationId: createAuthenticationV1alpha1SelfSubjectReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1alpha1.SelfSubjectReview.CREATE'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1alpha1.SelfSubjectReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1alpha1.SelfSubjectReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1alpha1.SelfSubjectReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1alpha1
      x-kab-description-zh: 创建一个 SelfSubjectReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1alpha1
  /apis/authentication.k8s.io/v1beta1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAuthenticationV1beta1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1beta1
      x-kab-description-zh: 读取 authentication.k8s.io/v1beta1 API 组可用的资源
  /apis/authentication.k8s.io/v1beta1/selfsubjectreviews:
    post:
      consumes:
        - '*/*'
      description: create a SelfSubjectReview
      operationId: createAuthenticationV1beta1SelfSubjectReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1beta1.SelfSubjectReview.CREATE'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1beta1.SelfSubjectReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1beta1.SelfSubjectReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authentication.v1beta1.SelfSubjectReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authentication_v1beta1
      x-kab-description-zh: 创建一个 SelfSubjectReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authentication.k8s.io
        kind: SelfSubjectReview
        version: v1beta1
  /apis/authorization.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the authorization API group
      operationId: getAuthorizationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authorization
      x-kab-description-zh: 读取关于 authorization.k8s.io API 组的信息
  /apis/authorization.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAuthorizationV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authorization_v1
      x-kab-description-zh: 读取 authorization.k8s.io/v1 API 组可用的资源
  /apis/authorization.k8s.io/v1/namespaces/{namespace}/localsubjectaccessreviews:
    post:
      consumes:
        - '*/*'
      description: create a LocalSubjectAccessReview
      operationId: createAuthorizationV1NamespacedLocalSubjectAccessReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.LocalSubjectAccessReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authorization_v1
      x-kab-description-zh: 创建一个 LocalSubjectReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: LocalSubjectAccessReview
        version: v1
  /apis/authorization.k8s.io/v1/selfsubjectaccessreviews:
    post:
      consumes:
        - '*/*'
      description: create a SelfSubjectAccessReview
      operationId: createAuthorizationV1SelfSubjectAccessReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectAccessReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authorization_v1
      x-kab-description-zh: 创建一个 SelfSubjectReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: SelfSubjectAccessReview
        version: v1
  /apis/authorization.k8s.io/v1/selfsubjectrulesreviews:
    post:
      consumes:
        - '*/*'
      description: create a SelfSubjectRulesReview
      operationId: createAuthorizationV1SelfSubjectRulesReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SelfSubjectRulesReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authorization_v1
      x-kab-description-zh: 创建一个 SelfSubjectRulesReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: SelfSubjectRulesReview
        version: v1
  /apis/authorization.k8s.io/v1/subjectaccessreviews:
    post:
      consumes:
        - '*/*'
      description: create a SubjectAccessReview
      operationId: createAuthorizationV1SubjectAccessReview
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.authorization.v1.SubjectAccessReview.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - authorization_v1
      x-kab-description-zh: 创建一个 SubjectAccessReview 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: authorization.k8s.io
        kind: SubjectAccessReview
        version: v1
  /apis/autoscaling/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the autoscaling API group
      operationId: getAutoscalingAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling
      x-kab-description-zh: 读取关于 autoscaling API 组的信息
  /apis/autoscaling/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAutoscalingV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 读取 autoscaling/v1 API 组可用的资源
  /apis/autoscaling/v1/horizontalpodautoscalers:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind HorizontalPodAutoscaler
      operationId: listAutoscalingV1HorizontalPodAutoscalerForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers:
    delete:
      consumes:
        - '*/*'
      description: delete collection of HorizontalPodAutoscaler
      operationId: deleteAutoscalingV1CollectionNamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 批量删除 HorizontalPodAutoscaler
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind HorizontalPodAutoscaler
      operationId: listAutoscalingV1NamespacedHorizontalPodAutoscaler
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscalerList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 列举或监视 HorizontalPodAutoscaler 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a HorizontalPodAutoscaler
      operationId: createAutoscalingV1NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 创建一个 HorizontalPodAutoscaler
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a HorizontalPodAutoscaler
      operationId: deleteAutoscalingV1NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 删除一个 HorizontalPodAutoscaler
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified HorizontalPodAutoscaler
      operationId: readAutoscalingV1NamespacedHorizontalPodAutoscaler
      parameters:
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 读取指定的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified HorizontalPodAutoscaler
      operationId: patchAutoscalingV1NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 部分更新指定的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified HorizontalPodAutoscaler
      operationId: replaceAutoscalingV1NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 替换指定的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  /apis/autoscaling/v1/namespaces/{namespace}/horizontalpodautoscalers/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified HorizontalPodAutoscaler
      operationId: readAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
      parameters:
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 读取指定的 HorizontalPodAutoscaler 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified HorizontalPodAutoscaler
      operationId: patchAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 部分更新指定的 HorizontalPodAutoscaler 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified HorizontalPodAutoscaler
      operationId: replaceAutoscalingV1NamespacedHorizontalPodAutoscalerStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v1.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v1
      x-kab-description-zh: 替换指定的 HorizontalPodAutoscaler 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v1
  /apis/autoscaling/v2/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getAutoscalingV2APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 读取 autoscaling/v2 API 组可用的资源
  /apis/autoscaling/v2/horizontalpodautoscalers:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind HorizontalPodAutoscaler
      operationId: listAutoscalingV2HorizontalPodAutoscalerForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 列举或监视所有名字空间下的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers:
    delete:
      consumes:
        - '*/*'
      description: delete collection of HorizontalPodAutoscaler
      operationId: deleteAutoscalingV2CollectionNamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 批量删除 HorizontalPodAutoscaler
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind HorizontalPodAutoscaler
      operationId: listAutoscalingV2NamespacedHorizontalPodAutoscaler
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscalerList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 列举或监视 HorizontalPodAutoscaler 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    post:
      consumes:
        - '*/*'
      description: create a HorizontalPodAutoscaler
      operationId: createAutoscalingV2NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 创建一个 HorizontalPodAutoscaler
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a HorizontalPodAutoscaler
      operationId: deleteAutoscalingV2NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 删除一个 HorizontalPodAutoscaler
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    get:
      consumes:
        - '*/*'
      description: read the specified HorizontalPodAutoscaler
      operationId: readAutoscalingV2NamespacedHorizontalPodAutoscaler
      parameters:
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 读取指定的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified HorizontalPodAutoscaler
      operationId: patchAutoscalingV2NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 部分更新指定的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    put:
      consumes:
        - '*/*'
      description: replace the specified HorizontalPodAutoscaler
      operationId: replaceAutoscalingV2NamespacedHorizontalPodAutoscaler
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 替换指定的 HorizontalPodAutoscaler 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  /apis/autoscaling/v2/namespaces/{namespace}/horizontalpodautoscalers/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified HorizontalPodAutoscaler
      operationId: readAutoscalingV2NamespacedHorizontalPodAutoscalerStatus
      parameters:
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 读取指定的 HorizontalPodAutoscaler 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified HorizontalPodAutoscaler
      operationId: patchAutoscalingV2NamespacedHorizontalPodAutoscalerStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 部分更新指定的 HorizontalPodAutoscaler 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
    put:
      consumes:
        - '*/*'
      description: replace status of the specified HorizontalPodAutoscaler
      operationId: replaceAutoscalingV2NamespacedHorizontalPodAutoscalerStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the HorizontalPodAutoscaler
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: HorizontalPodAutoscaler 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.autoscaling.v2.HorizontalPodAutoscaler.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - autoscaling_v2
      x-kab-description-zh: 替换指定的 HorizontalPodAutoscaler 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: autoscaling
        kind: HorizontalPodAutoscaler
        version: v2
  /apis/batch/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the batch API group
      operationId: getBatchAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch
      x-kab-description-zh: 读取关于 batch API 组的信息
  /apis/batch/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getBatchV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 读取 batch/v1 API 组可用的资源
  /apis/batch/v1/cronjobs:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CronJob
      operationId: listBatchV1CronJobForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJobList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 CronJob 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
  /apis/batch/v1/jobs:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Job
      operationId: listBatchV1JobForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.JobList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Job 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
  /apis/batch/v1/namespaces/{namespace}/cronjobs:
    delete:
      consumes:
        - '*/*'
      description: delete collection of CronJob
      operationId: deleteBatchV1CollectionNamespacedCronJob
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 批量删除 CronJob
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CronJob
      operationId: listBatchV1NamespacedCronJob
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJobList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 列举或监视 CronJob 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a CronJob
      operationId: createBatchV1NamespacedCronJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 创建一个 CronJob
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
  /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a CronJob
      operationId: deleteBatchV1NamespacedCronJob
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 删除一个 CronJob
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified CronJob
      operationId: readBatchV1NamespacedCronJob
      parameters:
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 读取指定的 CronJob 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified CronJob
      operationId: patchBatchV1NamespacedCronJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 部分更新指定的 CronJob 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified CronJob
      operationId: replaceBatchV1NamespacedCronJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 替换指定的 CronJob 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
  /apis/batch/v1/namespaces/{namespace}/cronjobs/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified CronJob
      operationId: readBatchV1NamespacedCronJobStatus
      parameters:
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 读取指定的 CronJob 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified CronJob
      operationId: patchBatchV1NamespacedCronJobStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 部分更新指定的 CronJob 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified CronJob
      operationId: replaceBatchV1NamespacedCronJobStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CronJob
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CronJob 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.CronJob.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 替换指定的 CronJob 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: batch
        kind: CronJob
        version: v1
  /apis/batch/v1/namespaces/{namespace}/jobs:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Job
      operationId: deleteBatchV1CollectionNamespacedJob
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 批量删除 Job
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Job
      operationId: listBatchV1NamespacedJob
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.JobList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 列举或监视 Job 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Job
      operationId: createBatchV1NamespacedJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 创建一个 Job
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
  /apis/batch/v1/namespaces/{namespace}/jobs/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Job
      operationId: deleteBatchV1NamespacedJob
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 删除一个 Job
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Job
      operationId: readBatchV1NamespacedJob
      parameters:
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 读取指定的 Job 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Job
      operationId: patchBatchV1NamespacedJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 部分更新指定的 Job 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Job
      operationId: replaceBatchV1NamespacedJob
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 替换指定的 Job 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
  /apis/batch/v1/namespaces/{namespace}/jobs/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Job
      operationId: readBatchV1NamespacedJobStatus
      parameters:
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 读取指定的 Job 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Job
      operationId: patchBatchV1NamespacedJobStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 部分更新指定的 Job 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Job
      operationId: replaceBatchV1NamespacedJobStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Job
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Job 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.batch.v1.Job.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - batch_v1
      x-kab-description-zh: 替换指定的 Job 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: batch
        kind: Job
        version: v1
  /apis/certificates.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the certificates API group
      operationId: getCertificatesAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates
      x-kab-description-zh: 读取关于 certificates.k8s.io API 组的信息
  /apis/certificates.k8s.io/v1/certificatesigningrequests:
    delete:
      consumes:
        - '*/*'
      description: delete collection of CertificateSigningRequest
      operationId: deleteCertificatesV1CollectionCertificateSigningRequest
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 批量删除 CertificateSigningRequest
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CertificateSigningRequest
      operationId: listCertificatesV1CertificateSigningRequest
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequestList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 列举或监视 CertificateSigningRequest 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a CertificateSigningRequest
      operationId: createCertificatesV1CertificateSigningRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 创建一个 CertificateSigningRequest
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a CertificateSigningRequest
      operationId: deleteCertificatesV1CertificateSigningRequest
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 删除一个 CertificateSigningRequest
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified CertificateSigningRequest
      operationId: readCertificatesV1CertificateSigningRequest
      parameters:
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 读取指定的 CertificateSigningRequest 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified CertificateSigningRequest
      operationId: patchCertificatesV1CertificateSigningRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 部分更新指定的 CertificateSigningRequest 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified CertificateSigningRequest
      operationId: replaceCertificatesV1CertificateSigningRequest
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 替换指定的 CertificateSigningRequest 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/approval:
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update approval of the specified CertificateSigningRequest
      operationId: patchCertificatesV1CertificateSigningRequestApproval
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 部分更新指定的 CertificateSigningRequest 对象的批准状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace approval of the specified CertificateSigningRequest
      operationId: replaceCertificatesV1CertificateSigningRequestApproval
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 替换指定的 CertificateSigningRequest 对象的批准状态（approval）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  /apis/certificates.k8s.io/v1/certificatesigningrequests/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified CertificateSigningRequest
      operationId: readCertificatesV1CertificateSigningRequestStatus
      parameters:
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 读取指定的 CertificateSigningRequest 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified CertificateSigningRequest
      operationId: patchCertificatesV1CertificateSigningRequestStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 部分更新指定的 CertificateSigningRequest 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified CertificateSigningRequest
      operationId: replaceCertificatesV1CertificateSigningRequestStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CertificateSigningRequest
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CertificateSigningRequest 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1.CertificateSigningRequest.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1
      x-kab-description-zh: 替换指定的 CertificateSigningRequest 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: CertificateSigningRequest
        version: v1
  /apis/certificates.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getCertificatesV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 读取 certificates.k8s.io/v1alpha1 API 组可用的资源
  /apis/certificates.k8s.io/v1alpha1/clustertrustbundles:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ClusterTrustBundle
      operationId: deleteCertificatesV1alpha1CollectionClusterTrustBundle
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 批量删除 ClusterTrustBundle
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ClusterTrustBundle
      operationId: listCertificatesV1alpha1ClusterTrustBundle
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundleList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 列举或监视 ClusterTrustBundle 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a ClusterTrustBundle
      operationId: createCertificatesV1alpha1ClusterTrustBundle
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 创建一个 ClusterTrustBundle
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
  /apis/certificates.k8s.io/v1alpha1/clustertrustbundles/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ClusterTrustBundle
      operationId: deleteCertificatesV1alpha1ClusterTrustBundle
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ClusterTrustBundle
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterTrustBundle 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 删除一个 ClusterTrustBundle
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified ClusterTrustBundle
      operationId: readCertificatesV1alpha1ClusterTrustBundle
      parameters:
        - description: name of the ClusterTrustBundle
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterTrustBundle 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 读取指定的 ClusterTrustBundle 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ClusterTrustBundle
      operationId: patchCertificatesV1alpha1ClusterTrustBundle
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ClusterTrustBundle
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterTrustBundle 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 部分更新指定的 ClusterTrustBundle 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified ClusterTrustBundle
      operationId: replaceCertificatesV1alpha1ClusterTrustBundle
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ClusterTrustBundle
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterTrustBundle 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.certificates.v1alpha1.ClusterTrustBundle.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - certificates_v1alpha1
      x-kab-description-zh: 替换指定的 ClusterTrustBundle 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: certificates.k8s.io
        kind: ClusterTrustBundle
        version: v1alpha1
  /apis/coordination.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the coordination API group
      operationId: getCoordinationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination
      x-kab-description-zh: 读取关于 coordination.k8s.io API 组的信息
  /apis/coordination.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getCoordinationV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 读取 coordination.k8s.io/v1 API 组可用的资源
  /apis/coordination.k8s.io/v1/leases:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Lease
      operationId: listCoordinationV1LeaseForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.LeaseList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Lease 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
  /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Lease
      operationId: deleteCoordinationV1CollectionNamespacedLease
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 批量删除 Lease
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Lease
      operationId: listCoordinationV1NamespacedLease
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.LeaseList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 列举或监视 Lease 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Lease
      operationId: createCoordinationV1NamespacedLease
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 创建一个 Lease
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
  /apis/coordination.k8s.io/v1/namespaces/{namespace}/leases/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Lease
      operationId: deleteCoordinationV1NamespacedLease
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Lease
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Lease 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 删除一个 Lease
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Lease
      operationId: readCoordinationV1NamespacedLease
      parameters:
        - description: name of the Lease
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Lease 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 读取指定的 Lease 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Lease
      operationId: patchCoordinationV1NamespacedLease
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/force'
        - description: name of the Lease
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Lease 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 部分更新指定的 Lease 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Lease
      operationId: replaceCoordinationV1NamespacedLease
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Lease
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Lease 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.coordination.v1.Lease.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - coordination_v1
      x-kab-description-zh: 替换指定的 Lease 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: coordination.k8s.io
        kind: Lease
        version: v1
  /apis/discovery.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of a group
      operationId: getDiscoveryAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery
      x-kab-description-zh: 读取关于 discovery.k8s.io API 组的信息
  /apis/discovery.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getDiscoveryV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 读取 discovery.k8s.io/v1 API 组可用的资源
  /apis/discovery.k8s.io/v1/endpointslices:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind EndpointSlice
      operationId: listDiscoveryV1EndpointSliceForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSliceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 EndpointSlice 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
  /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices:
    delete:
      consumes:
        - '*/*'
      description: delete collection of EndpointSlice
      operationId: deleteDiscoveryV1CollectionNamespacedEndpointSlice
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 批量删除 EndpointSlice
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind EndpointSlice
      operationId: listDiscoveryV1NamespacedEndpointSlice
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSliceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 列举或监视 EndpointSlice 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
    post:
      consumes:
        - '*/*'
      description: create an EndpointSlice
      operationId: createDiscoveryV1NamespacedEndpointSlice
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 创建一个 EndpointSlice
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
  /apis/discovery.k8s.io/v1/namespaces/{namespace}/endpointslices/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an EndpointSlice
      operationId: deleteDiscoveryV1NamespacedEndpointSlice
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the EndpointSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: EndpointSlice 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 删除一个 EndpointSlice
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified EndpointSlice
      operationId: readDiscoveryV1NamespacedEndpointSlice
      parameters:
        - description: name of the EndpointSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: EndpointSlice 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 读取指定的 EndpointSlice 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified EndpointSlice
      operationId: patchDiscoveryV1NamespacedEndpointSlice
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the EndpointSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: EndpointSlice 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 部分更新指定的 EndpointSlice 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified EndpointSlice
      operationId: replaceDiscoveryV1NamespacedEndpointSlice
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the EndpointSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: EndpointSlice 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.discovery.v1.EndpointSlice.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - discovery_v1
      x-kab-description-zh: 替换指定的 EndpointSlice 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: discovery.k8s.io
        kind: EndpointSlice
        version: v1
  /apis/events.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the events API group
      operationId: getEventsAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events
      x-kab-description-zh: 读取关于 events.k8s.io API 组的信息
  /apis/events.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getEventsV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 读取 events.k8s.io/v1 API 组可用的资源
  /apis/events.k8s.io/v1/events:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Event
      operationId: listEventsV1EventForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.EventList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Event 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
  /apis/events.k8s.io/v1/namespaces/{namespace}/events:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Event
      operationId: deleteEventsV1CollectionNamespacedEvent
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 批量删除 Event
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Event
      operationId: listEventsV1NamespacedEvent
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.EventList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 列举或监视 Event 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
    post:
      consumes:
        - '*/*'
      description: create an Event
      operationId: createEventsV1NamespacedEvent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 创建一个 Event
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
  /apis/events.k8s.io/v1/namespaces/{namespace}/events/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an Event
      operationId: deleteEventsV1NamespacedEvent
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 删除一个 Event
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Event
      operationId: readEventsV1NamespacedEvent
      parameters:
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 读取指定的 Event 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Event
      operationId: patchEventsV1NamespacedEvent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 部分更新指定的 Event 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Event
      operationId: replaceEventsV1NamespacedEvent
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Event
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Event 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.events.v1.Event.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - events_v1
      x-kab-description-zh: 替换指定的 Event 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: events.k8s.io
        kind: Event
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of a group
      operationId: getFlowcontrolApiserverAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver
      x-kab-description-zh: 读取关于 flowcontrol.apiserver.k8s.io API 组的信息
  /apis/flowcontrol.apiserver.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getFlowcontrolApiserverV1beta2APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 读取 flowcontrol.apiserver.k8s.io/v1 API 组可用的资源
  /apis/flowcontrol.apiserver.k8s.io/v1/flowschemas:
    delete:
      consumes:
        - '*/*'
      description: delete collection of FlowSchema
      operationId: deleteFlowcontrolApiserverV1beta2CollectionFlowSchema
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 批量删除 FlowSchema
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind FlowSchema
      operationId: listFlowcontrolApiserverV1beta2FlowSchema
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchemaList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 列举或监视 FlowSchema 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a FlowSchema
      operationId: createFlowcontrolApiserverV1beta2FlowSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 创建一个 FlowSchema
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a FlowSchema
      operationId: deleteFlowcontrolApiserverV1beta2FlowSchema
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 删除一个 FlowSchema
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified FlowSchema
      operationId: readFlowcontrolApiserverV1beta2FlowSchema
      parameters:
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 读取指定的 FlowSchema 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified FlowSchema
      operationId: patchFlowcontrolApiserverV1beta2FlowSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 部分更新指定的 FlowSchema 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified FlowSchema
      operationId: replaceFlowcontrolApiserverV1beta2FlowSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 替换指定的 FlowSchema 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/v1/flowschemas/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified FlowSchema
      operationId: readFlowcontrolApiserverV1beta2FlowSchemaStatus
      parameters:
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 读取指定的 FlowSchema 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified FlowSchema
      operationId: patchFlowcontrolApiserverV1beta2FlowSchemaStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 部分更新指定的 FlowSchema 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified FlowSchema
      operationId: replaceFlowcontrolApiserverV1beta2FlowSchemaStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 替换指定的 FlowSchema 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PriorityLevelConfiguration
      operationId: deleteFlowcontrolApiserverV1beta2CollectionPriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 批量删除 PriorityLevelConfiguration
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PriorityLevelConfiguration
      operationId: listFlowcontrolApiserverV1beta2PriorityLevelConfiguration
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfigurationList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 列举或监视 PriorityLevelConfiguration 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a PriorityLevelConfiguration
      operationId: createFlowcontrolApiserverV1beta2PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 创建一个 PriorityLevelConfiguration
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PriorityLevelConfiguration
      operationId: deleteFlowcontrolApiserverV1beta2PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 删除一个 PriorityLevelConfiguration
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified PriorityLevelConfiguration
      operationId: readFlowcontrolApiserverV1beta2PriorityLevelConfiguration
      parameters:
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 读取指定的 PriorityLevelConfiguration 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PriorityLevelConfiguration
      operationId: patchFlowcontrolApiserverV1beta2PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 部分更新指定的 PriorityLevelConfiguration 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified PriorityLevelConfiguration
      operationId: replaceFlowcontrolApiserverV1beta2PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 替换指定的 PriorityLevelConfiguration 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/v1/prioritylevelconfigurations/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified PriorityLevelConfiguration
      operationId: readFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
      parameters:
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 读取指定的 PriorityLevelConfiguration 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified PriorityLevelConfiguration
      operationId: patchFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 部分更新指定的 PriorityLevelConfiguration 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified PriorityLevelConfiguration
      operationId: replaceFlowcontrolApiserverV1beta2PriorityLevelConfigurationStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1
      x-kab-description-zh: 替换指定的 PriorityLevelConfiguration 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getFlowcontrolApiserverV1beta3APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 读取 flowcontrol.apiserver.k8s.io/v1beta3 API 组可用的资源
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas:
    delete:
      consumes:
        - '*/*'
      description: delete collection of FlowSchema
      operationId: deleteFlowcontrolApiserverV1beta3CollectionFlowSchema
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 批量删除 FlowSchema
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind FlowSchema
      operationId: listFlowcontrolApiserverV1beta3FlowSchema
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchemaList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 列举或监视 FlowSchema 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    post:
      consumes:
        - '*/*'
      description: create a FlowSchema
      operationId: createFlowcontrolApiserverV1beta3FlowSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 创建一个 FlowSchema
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a FlowSchema
      operationId: deleteFlowcontrolApiserverV1beta3FlowSchema
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 删除一个 FlowSchema
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    get:
      consumes:
        - '*/*'
      description: read the specified FlowSchema
      operationId: readFlowcontrolApiserverV1beta3FlowSchema
      parameters:
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 读取指定的 FlowSchema 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified FlowSchema
      operationId: patchFlowcontrolApiserverV1beta3FlowSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 部分更新指定的 FlowSchema 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    put:
      consumes:
        - '*/*'
      description: replace the specified FlowSchema
      operationId: replaceFlowcontrolApiserverV1beta3FlowSchema
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 替换指定的 FlowSchema 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/flowschemas/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified FlowSchema
      operationId: readFlowcontrolApiserverV1beta3FlowSchemaStatus
      parameters:
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 读取指定的 FlowSchema 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified FlowSchema
      operationId: patchFlowcontrolApiserverV1beta3FlowSchemaStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 部分更新指定的 FlowSchema 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
    put:
      consumes:
        - '*/*'
      description: replace status of the specified FlowSchema
      operationId: replaceFlowcontrolApiserverV1beta3FlowSchemaStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the FlowSchema
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: FlowSchema 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.FlowSchema.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 替换指定的 FlowSchema 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: FlowSchema
        version: v1beta3
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PriorityLevelConfiguration
      operationId: deleteFlowcontrolApiserverV1beta3CollectionPriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 批量删除 PriorityLevelConfiguration
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PriorityLevelConfiguration
      operationId: listFlowcontrolApiserverV1beta3PriorityLevelConfiguration
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfigurationList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 列举或监视 PriorityLevelConfiguration 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    post:
      consumes:
        - '*/*'
      description: create a PriorityLevelConfiguration
      operationId: createFlowcontrolApiserverV1beta3PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 创建一个 PriorityLevelConfiguration
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PriorityLevelConfiguration
      operationId: deleteFlowcontrolApiserverV1beta3PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 删除一个 PriorityLevelConfiguration
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    get:
      consumes:
        - '*/*'
      description: read the specified PriorityLevelConfiguration
      operationId: readFlowcontrolApiserverV1beta3PriorityLevelConfiguration
      parameters:
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 读取指定的 PriorityLevelConfiguration 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PriorityLevelConfiguration
      operationId: patchFlowcontrolApiserverV1beta3PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 部分更新指定的 PriorityLevelConfiguration 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    put:
      consumes:
        - '*/*'
      description: replace the specified PriorityLevelConfiguration
      operationId: replaceFlowcontrolApiserverV1beta3PriorityLevelConfiguration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 替换指定的 PriorityLevelConfiguration 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
  /apis/flowcontrol.apiserver.k8s.io/v1beta3/prioritylevelconfigurations/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified PriorityLevelConfiguration
      operationId: readFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus
      parameters:
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 读取指定的 PriorityLevelConfiguration 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified PriorityLevelConfiguration
      operationId: patchFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 部分更新指定的 PriorityLevelConfiguration 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
    put:
      consumes:
        - '*/*'
      description: replace status of the specified PriorityLevelConfiguration
      operationId: replaceFlowcontrolApiserverV1beta3PriorityLevelConfigurationStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PriorityLevelConfiguration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityLevelConfiguration 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.flowcontrol.v1beta3.PriorityLevelConfiguration.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - flowcontrolApiserver_v1beta3
      x-kab-description-zh: 替换指定的 PriorityLevelConfiguration 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: flowcontrol.apiserver.k8s.io
        kind: PriorityLevelConfiguration
        version: v1beta3
  /apis/internal.apiserver.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of a group
      operationId: getInternalApiserverAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver
      x-kab-description-zh: 读取关于 internal.apiserver.k8s.io API 组的信息
  /apis/internal.apiserver.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getInternalApiserverV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 读取 internal.apiserver.k8s.io/v1alpha1 API 组可用的资源
  /apis/internal.apiserver.k8s.io/v1alpha1/storageversions:
    delete:
      consumes:
        - '*/*'
      description: delete collection of StorageVersion
      operationId: deleteInternalApiserverV1alpha1CollectionStorageVersion
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 批量删除 StorageVersion
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind StorageVersion
      operationId: listInternalApiserverV1alpha1StorageVersion
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersionList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 列举或监视 StorageVersion 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a StorageVersion
      operationId: createInternalApiserverV1alpha1StorageVersion
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 创建一个 StorageVersion
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
  /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a StorageVersion
      operationId: deleteInternalApiserverV1alpha1StorageVersion
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 删除一个 StorageVersion
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified StorageVersion
      operationId: readInternalApiserverV1alpha1StorageVersion
      parameters:
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 读取指定的 StorageVersion 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified StorageVersion
      operationId: patchInternalApiserverV1alpha1StorageVersion
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 部分更新指定的 StorageVersion 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified StorageVersion
      operationId: replaceInternalApiserverV1alpha1StorageVersion
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 替换指定的 StorageVersion 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
  /apis/internal.apiserver.k8s.io/v1alpha1/storageversions/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified StorageVersion
      operationId: readInternalApiserverV1alpha1StorageVersionStatus
      parameters:
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 读取指定的 StorageVersion 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified StorageVersion
      operationId: patchInternalApiserverV1alpha1StorageVersionStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 部分更新指定的 StorageVersion 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified StorageVersion
      operationId: replaceInternalApiserverV1alpha1StorageVersionStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StorageVersion
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersion 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.apiserverinternal.v1alpha1.StorageVersion.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - internalApiserver_v1alpha1
      x-kab-description-zh: 替换指定的 StorageVersion 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: internal.apiserver.k8s.io
        kind: StorageVersion
        version: v1alpha1
  /apis/networking.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the networking API group
      operationId: getNetworkingAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking
      x-kab-description-zh: 读取关于 networking.k8s.io API 组的信息
  /apis/networking.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getNetworkingV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 读取 networking.k8s.io/v1 API 组可用的资源
  /apis/networking.k8s.io/v1/ingressclasses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of IngressClass
      operationId: deleteNetworkingV1CollectionIngressClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 批量删除 IngressClass
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind IngressClass
      operationId: listNetworkingV1IngressClass
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClassList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 列举或监视 IngressClass 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
    post:
      consumes:
        - '*/*'
      description: create an IngressClass
      operationId: createNetworkingV1IngressClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 创建一个 IngressClass
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
  /apis/networking.k8s.io/v1/ingressclasses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an IngressClass
      operationId: deleteNetworkingV1IngressClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the IngressClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IngressClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 删除一个 IngressClass
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified IngressClass
      operationId: readNetworkingV1IngressClass
      parameters:
        - description: name of the IngressClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IngressClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 读取指定的 IngressClass 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified IngressClass
      operationId: patchNetworkingV1IngressClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the IngressClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IngressClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 部分更新指定的 IngressClass 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified IngressClass
      operationId: replaceNetworkingV1IngressClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the IngressClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IngressClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressClass.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 替换指定的 IngressClass 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IngressClass
        version: v1
  /apis/networking.k8s.io/v1/ingresses:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Ingress
      operationId: listNetworkingV1IngressForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Ingress 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
  /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Ingress
      operationId: deleteNetworkingV1CollectionNamespacedIngress
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 批量删除 Ingress
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Ingress
      operationId: listNetworkingV1NamespacedIngress
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.IngressList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 列举或监视 Ingress 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    post:
      consumes:
        - '*/*'
      description: create an Ingress
      operationId: createNetworkingV1NamespacedIngress
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 创建一个 Ingress
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
  /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an Ingress
      operationId: deleteNetworkingV1NamespacedIngress
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 删除一个 Ingress
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Ingress
      operationId: readNetworkingV1NamespacedIngress
      parameters:
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 读取指定的 Ingress 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Ingress
      operationId: patchNetworkingV1NamespacedIngress
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 部分更新指定的 Ingress 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Ingress
      operationId: replaceNetworkingV1NamespacedIngress
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 替换指定的 Ingress 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
  /apis/networking.k8s.io/v1/namespaces/{namespace}/ingresses/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified Ingress
      operationId: readNetworkingV1NamespacedIngressStatus
      parameters:
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 读取指定的 Ingress 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified Ingress
      operationId: patchNetworkingV1NamespacedIngressStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 部分更新指定的 Ingress 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified Ingress
      operationId: replaceNetworkingV1NamespacedIngressStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Ingress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Ingress 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.Ingress.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 替换指定的 Ingress 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: Ingress
        version: v1
  /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies:
    delete:
      consumes:
        - '*/*'
      description: delete collection of NetworkPolicy
      operationId: deleteNetworkingV1CollectionNamespacedNetworkPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 批量删除 NetworkPolicy
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind NetworkPolicy
      operationId: listNetworkingV1NamespacedNetworkPolicy
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 列举或监视 NetworkPolicy 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a NetworkPolicy
      operationId: createNetworkingV1NamespacedNetworkPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 创建一个 NetworkPolicy
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
  /apis/networking.k8s.io/v1/namespaces/{namespace}/networkpolicies/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a NetworkPolicy
      operationId: deleteNetworkingV1NamespacedNetworkPolicy
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the NetworkPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: NetworkPolicy 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 删除一个 NetworkPolicy
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified NetworkPolicy
      operationId: readNetworkingV1NamespacedNetworkPolicy
      parameters:
        - description: name of the NetworkPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: NetworkPolicy 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 读取指定的 NetworkPolicy 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified NetworkPolicy
      operationId: patchNetworkingV1NamespacedNetworkPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the NetworkPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: NetworkPolicy 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 部分更新指定的 NetworkPolicy 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified NetworkPolicy
      operationId: replaceNetworkingV1NamespacedNetworkPolicy
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the NetworkPolicy
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: NetworkPolicy 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicy.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 替换指定的 NetworkPolicy 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
  /apis/networking.k8s.io/v1/networkpolicies:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind NetworkPolicy
      operationId: listNetworkingV1NetworkPolicyForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1.NetworkPolicyList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 NetworkPolicy 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: NetworkPolicy
        version: v1
  /apis/networking.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getNetworkingV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 读取 networking.k8s.io/v1alpha1 API 组可用的资源
  /apis/networking.k8s.io/v1alpha1/ipaddresses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of IPAddress
      operationId: deleteNetworkingV1alpha1CollectionIPAddress
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 批量删除 IPAddress
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind IPAddress
      operationId: listNetworkingV1alpha1IPAddress
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddressList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 列举或监视 IPAddress 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create an IPAddress
      operationId: createNetworkingV1alpha1IPAddress
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 创建一个 IPAddress
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
  /apis/networking.k8s.io/v1alpha1/ipaddresses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete an IPAddress
      operationId: deleteNetworkingV1alpha1IPAddress
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the IPAddress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IPAddress 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 删除一个 IPAddress
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified IPAddress
      operationId: readNetworkingV1alpha1IPAddress
      parameters:
        - description: name of the IPAddress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IPAddress 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 读取指定的 IPAddress 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified IPAddress
      operationId: patchNetworkingV1alpha1IPAddress
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the IPAddress
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: IPAddress 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 部分更新指定的 IPAddress 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified IPAddress
      operationId: replaceNetworkingV1alpha1IPAddress
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the IPAddress
          in: path
          name: name
          required: true
          type: string
          x-kab-description-zh: IPAddress 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.IPAddress.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 替换指定的 IPAddress 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: IPAddress
        version: v1alpha1
  /apis/networking.k8s.io/v1alpha1/servicecidrs:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ServiceCIDR
      operationId: deleteNetworkingV1alpha1CollectionServiceCIDR
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 批量删除 ServiceCIDR
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ServiceCIDR
      operationId: listNetworkingV1alpha1ServiceCIDR
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDRList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 列举或监视 ServiceCIDR 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a ServiceCIDR
      operationId: createNetworkingV1alpha1ServiceCIDR
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 创建一个 ServiceCIDR
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
  /apis/networking.k8s.io/v1alpha1/servicecidrs/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ServiceCIDR
      operationId: deleteNetworkingV1alpha1ServiceCIDR
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 删除一个 ServiceCIDR
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified ServiceCIDR
      operationId: readNetworkingV1alpha1ServiceCIDR
      parameters:
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 读取指定的 ServiceCIDR 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ServiceCIDR
      operationId: patchNetworkingV1alpha1ServiceCIDR
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 部分更新指定的 ServiceCIDR 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified ServiceCIDR
      operationId: replaceNetworkingV1alpha1ServiceCIDR
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 替换指定的 ServiceCIDR 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
  /apis/networking.k8s.io/v1alpha1/servicecidrs/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ServiceCIDR
      operationId: readNetworkingV1alpha1ServiceCIDRStatus
      parameters:
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 读取指定的 ServiceCIDR 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ServiceCIDR
      operationId: patchNetworkingV1alpha1ServiceCIDRStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 部分更新指定的 ServiceCIDR 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ServiceCIDR
      operationId: replaceNetworkingV1alpha1ServiceCIDRStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ServiceCIDR
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ServiceCIDR 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.networking.v1alpha1.ServiceCIDR.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - networking_v1alpha1
      x-kab-description-zh: 替换指定的 ServiceCIDR 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: networking.k8s.io
        kind: ServiceCIDR
        version: v1alpha1
  /apis/node.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of a group
      operationId: getNodeAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node
      x-kab-description-zh: 读取关于 node.k8s.io API 组的信息
  /apis/node.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getNodeV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 读取 node.k8s.io/v1 API 组可用的资源
  /apis/node.k8s.io/v1/runtimeclasses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of RuntimeClass
      operationId: deleteNodeV1CollectionRuntimeClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 批量删除 RuntimeClass
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind RuntimeClass
      operationId: listNodeV1RuntimeClass
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClassList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 列举或监视 RuntimeClass 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a RuntimeClass
      operationId: createNodeV1RuntimeClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 创建一个 RuntimeClass
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
  /apis/node.k8s.io/v1/runtimeclasses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a RuntimeClass
      operationId: deleteNodeV1RuntimeClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the RuntimeClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RuntimeClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 删除一个 RuntimeClass
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified RuntimeClass
      operationId: readNodeV1RuntimeClass
      parameters:
        - description: name of the RuntimeClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RuntimeClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 读取指定的 RuntimeClass 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified RuntimeClass
      operationId: patchNodeV1RuntimeClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the RuntimeClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RuntimeClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 部分更新指定的 RuntimeClass 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified RuntimeClass
      operationId: replaceNodeV1RuntimeClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the RuntimeClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RuntimeClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.node.v1.RuntimeClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - node_v1
      x-kab-description-zh: 替换指定的 RuntimeClass 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: node.k8s.io
        kind: RuntimeClass
        version: v1
  /apis/policy/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the policy group
      operationId: getPolicyAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy
      x-kab-description-zh: 读取关于 policy API 组的信息
  /apis/policy/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getPolicyV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 读取 policy/v1 API 组可用的资源
  /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PodDisruptionBudget
      operationId: deletePolicyV1CollectionNamespacedPodDisruptionBudget
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 批量删除 PodDisruptionBudget
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PodDisruptionBudget
      operationId: listPolicyV1NamespacedPodDisruptionBudget
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 列举或监视 PodDisruptionBudget 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a PodDisruptionBudget
      operationId: createPolicyV1NamespacedPodDisruptionBudget
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 创建一个 PodDisruptionBudget
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
  /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PodDisruptionBudget
      operationId: deletePolicyV1NamespacedPodDisruptionBudget
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 删除一个 PodDisruptionBudget
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified PodDisruptionBudget
      operationId: readPolicyV1NamespacedPodDisruptionBudget
      parameters:
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 读取指定的 PodDisruptionBudget 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PodDisruptionBudget
      operationId: patchPolicyV1NamespacedPodDisruptionBudget
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 部分更新指定的 PodDisruptionBudget 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified PodDisruptionBudget
      operationId: replacePolicyV1NamespacedPodDisruptionBudget
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 替换指定的 PodDisruptionBudget 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
  /apis/policy/v1/namespaces/{namespace}/poddisruptionbudgets/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified PodDisruptionBudget
      operationId: readPolicyV1NamespacedPodDisruptionBudgetStatus
      parameters:
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 读取指定的 PodDisruptionBudget 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified PodDisruptionBudget
      operationId: patchPolicyV1NamespacedPodDisruptionBudgetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 部分更新指定的 PodDisruptionBudget 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified PodDisruptionBudget
      operationId: replacePolicyV1NamespacedPodDisruptionBudgetStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PodDisruptionBudget
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodDisruptionBudget 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudget.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 替换指定的 PodDisruptionBudget 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
  /apis/policy/v1/poddisruptionbudgets:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PodDisruptionBudget
      operationId: listPolicyV1PodDisruptionBudgetForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.policy.v1.PodDisruptionBudgetList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - policy_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 PodDisruptionBudget 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: policy
        kind: PodDisruptionBudget
        version: v1
  /apis/rbac.authorization.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the rbac.authorization.k8s.io API group
      operationId: getRbacAuthorizationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization
      x-kab-description-zh: 读取关于 rbac.authorization.k8s.io API 组的信息
  /apis/rbac.authorization.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getRbacAuthorizationV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 读取 rbac.authorization.k8s.io/v1 API 组可用的资源
  /apis/rbac.authorization.k8s.io/v1/clusterrolebindings:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ClusterRoleBinding
      operationId: deleteRbacAuthorizationV1CollectionClusterRoleBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 批量删除 ClusterRoleBinding
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ClusterRoleBinding
      operationId: listRbacAuthorizationV1ClusterRoleBinding
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBindingList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 列举或监视 ClusterRoleBinding 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ClusterRoleBinding
      operationId: createRbacAuthorizationV1ClusterRoleBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 创建一个 ClusterRoleBinding
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
  /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ClusterRoleBinding
      operationId: deleteRbacAuthorizationV1ClusterRoleBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ClusterRoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRoleBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 删除一个 ClusterRoleBinding
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ClusterRoleBinding
      operationId: readRbacAuthorizationV1ClusterRoleBinding
      parameters:
        - description: name of the ClusterRoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRoleBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 读取指定的 ClusterRoleBinding 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ClusterRoleBinding
      operationId: patchRbacAuthorizationV1ClusterRoleBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ClusterRoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRoleBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 部分更新指定的 ClusterRoleBinding 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ClusterRoleBinding
      operationId: replaceRbacAuthorizationV1ClusterRoleBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ClusterRoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRoleBinding 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 替换指定的 ClusterRoleBinding 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRoleBinding
        version: v1
  /apis/rbac.authorization.k8s.io/v1/clusterroles:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ClusterRole
      operationId: deleteRbacAuthorizationV1CollectionClusterRole
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 批量删除 ClusterRole
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ClusterRole
      operationId: listRbacAuthorizationV1ClusterRole
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRoleList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 列举或监视 ClusterRole 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a ClusterRole
      operationId: createRbacAuthorizationV1ClusterRole
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 创建一个 ClusterRole
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
  /apis/rbac.authorization.k8s.io/v1/clusterroles/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ClusterRole
      operationId: deleteRbacAuthorizationV1ClusterRole
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ClusterRole
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRole 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 删除一个 ClusterRole
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified ClusterRole
      operationId: readRbacAuthorizationV1ClusterRole
      parameters:
        - description: name of the ClusterRole
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRole 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 读取指定的 ClusterRole 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ClusterRole
      operationId: patchRbacAuthorizationV1ClusterRole
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ClusterRole
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRole 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 部分更新指定的 ClusterRole 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified ClusterRole
      operationId: replaceRbacAuthorizationV1ClusterRole
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ClusterRole
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ClusterRole 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.ClusterRole.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 替换指定的 ClusterRole 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: ClusterRole
        version: v1
  /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings:
    delete:
      consumes:
        - '*/*'
      description: delete collection of RoleBinding
      operationId: deleteRbacAuthorizationV1CollectionNamespacedRoleBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 批量删除 RoleBinding
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind RoleBinding
      operationId: listRbacAuthorizationV1NamespacedRoleBinding
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBindingList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 列举或监视 RoleBinding 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a RoleBinding
      operationId: createRbacAuthorizationV1NamespacedRoleBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 创建一个 RoleBinding
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
  /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/rolebindings/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a RoleBinding
      operationId: deleteRbacAuthorizationV1NamespacedRoleBinding
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the RoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RoleBinding 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 删除一个 RoleBinding
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified RoleBinding
      operationId: readRbacAuthorizationV1NamespacedRoleBinding
      parameters:
        - description: name of the RoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RoleBinding 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 读取指定的 RoleBinding 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified RoleBinding
      operationId: patchRbacAuthorizationV1NamespacedRoleBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the RoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RoleBinding 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 部分更新指定的 RoleBinding 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified RoleBinding
      operationId: replaceRbacAuthorizationV1NamespacedRoleBinding
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the RoleBinding
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: RoleBinding 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBinding.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 替换指定的 RoleBinding 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
  /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles:
    delete:
      consumes:
        - '*/*'
      description: delete collection of Role
      operationId: deleteRbacAuthorizationV1CollectionNamespacedRole
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 批量删除 Role
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Role
      operationId: listRbacAuthorizationV1NamespacedRole
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 列举或监视 Role 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a Role
      operationId: createRbacAuthorizationV1NamespacedRole
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 创建一个 Role
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
  /apis/rbac.authorization.k8s.io/v1/namespaces/{namespace}/roles/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a Role
      operationId: deleteRbacAuthorizationV1NamespacedRole
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the Role
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Role 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 删除一个 Role
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified Role
      operationId: readRbacAuthorizationV1NamespacedRole
      parameters:
        - description: name of the Role
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Role 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 读取指定的 Role 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified Role
      operationId: patchRbacAuthorizationV1NamespacedRole
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Role
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Role 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 部分更新指定的 Role 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified Role
      operationId: replaceRbacAuthorizationV1NamespacedRole
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the Role
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: Role 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.Role.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 替换指定的 Role 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
  /apis/rbac.authorization.k8s.io/v1/rolebindings:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind RoleBinding
      operationId: listRbacAuthorizationV1RoleBindingForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleBindingList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 RoleBinding 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: RoleBinding
        version: v1
  /apis/rbac.authorization.k8s.io/v1/roles:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind Role
      operationId: listRbacAuthorizationV1RoleForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.rbac.v1.RoleList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - rbacAuthorization_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 Role 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: rbac.authorization.k8s.io
        kind: Role
        version: v1
  /apis/resource.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of a group
      operationId: getResourceAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource
      x-kab-description-zh: 读取关于 resource.k8s.io API 组的信息
  /apis/resource.k8s.io/v1alpha2/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getResourceV1alpha2APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取 resource.k8s.io/v1alpha2 API 组可用的资源
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PodSchedulingContext
      operationId: deleteResourceV1alpha2CollectionNamespacedPodSchedulingContext
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 PodSchedulingContext
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PodSchedulingContext
      operationId: listResourceV1alpha2NamespacedPodSchedulingContext
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 PodSchedulingContext 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create a PodSchedulingContext
      operationId: createResourceV1alpha2NamespacedPodSchedulingContext
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 创建一个 PodSchedulingContext
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PodSchedulingContext
      operationId: deleteResourceV1alpha2NamespacedPodSchedulingContext
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除一个 PodSchedulingContext
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified PodSchedulingContext
      operationId: readResourceV1alpha2NamespacedPodSchedulingContext
      parameters:
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 PodSchedulingContext 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PodSchedulingContext
      operationId: patchResourceV1alpha2NamespacedPodSchedulingContext
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分更新指定的 PodSchedulingContext 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified PodSchedulingContext
      operationId: replaceResourceV1alpha2NamespacedPodSchedulingContext
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 PodSchedulingContext 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/podschedulingcontexts/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified PodSchedulingContext
      operationId: readResourceV1alpha2NamespacedPodSchedulingContextStatus
      parameters:
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 PodSchedulingContext 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified PodSchedulingContext
      operationId: patchResourceV1alpha2NamespacedPodSchedulingContextStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分更新指定的 PodSchedulingContext 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace status of the specified PodSchedulingContext
      operationId: replaceResourceV1alpha2NamespacedPodSchedulingContextStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PodSchedulingContext
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PodSchedulingContext 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContext.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 PodSchedulingContext 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceClaimParameters
      operationId: deleteResourceV1alpha2CollectionNamespacedResourceClaimParameters
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 ResourceClaimParameters
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClaimParameters
      operationId: listResourceV1alpha2NamespacedResourceClaimParameters
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParametersList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 ResourceClaimParameters 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create ResourceClaimParameters
      operationId: createResourceV1alpha2NamespacedResourceClaimParameters
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 创建 ResourceClaimParameters
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimparameters/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete ResourceClaimParameters
      operationId: deleteResourceV1alpha2NamespacedResourceClaimParameters
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceClaimParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除 ResourceClaimParameters
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceClaimParameters
      operationId: readResourceV1alpha2NamespacedResourceClaimParameters
      parameters:
        - description: name of the ResourceClaimParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description: ResourceClaimParameters 对象的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceClaimParameters 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceClaimParameters
      operationId: patchResourceV1alpha2NamespacedResourceClaimParameters
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceClaimParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaimParameters 对象的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分变更指定的 ResourceClaimParameters
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceClaimParameters
      operationId: replaceResourceV1alpha2NamespacedResourceClaimParameters
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceClaimParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaimParameters 对象的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceClaimParameters 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceClaim
      operationId: deleteResourceV1alpha2CollectionNamespacedResourceClaim
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 ResourceClaim
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClaim
      operationId: listResourceV1alpha2NamespacedResourceClaim
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 ResourceClaim 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create a ResourceClaim
      operationId: createResourceV1alpha2NamespacedResourceClaim
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 创建一个 ResourceClaim
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ResourceClaim
      operationId: deleteResourceV1alpha2NamespacedResourceClaim
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除一个 ResourceClaim
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceClaim
      operationId: readResourceV1alpha2NamespacedResourceClaim
      parameters:
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceClaim 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceClaim
      operationId: patchResourceV1alpha2NamespacedResourceClaim
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分更新指定的 ResourceClaim 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceClaim
      operationId: replaceResourceV1alpha2NamespacedResourceClaim
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceClaim 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaims/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified ResourceClaim
      operationId: readResourceV1alpha2NamespacedResourceClaimStatus
      parameters:
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceClaim 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified ResourceClaim
      operationId: patchResourceV1alpha2NamespacedResourceClaimStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分更新指定的 ResourceClaim 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace status of the specified ResourceClaim
      operationId: replaceResourceV1alpha2NamespacedResourceClaimStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceClaim
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaim 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaim.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceClaim 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceClaimTemplate
      operationId: deleteResourceV1alpha2CollectionNamespacedResourceClaimTemplate
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 ResourceClaimTemplate
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClaimTemplate
      operationId: listResourceV1alpha2NamespacedResourceClaimTemplate
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplateList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 ResourceClaimTemplate 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create a ResourceClaimTemplate
      operationId: createResourceV1alpha2NamespacedResourceClaimTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 创建一个 ResourceClaimTemplate
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclaimtemplates/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ResourceClaimTemplate
      operationId: deleteResourceV1alpha2NamespacedResourceClaimTemplate
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceClaimTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaimTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除一个 ResourceClaimTemplate
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceClaimTemplate
      operationId: readResourceV1alpha2NamespacedResourceClaimTemplate
      parameters:
        - description: name of the ResourceClaimTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaimTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceClaimTemplate 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceClaimTemplate
      operationId: patchResourceV1alpha2NamespacedResourceClaimTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceClaimTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaimTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分更新指定的 ResourceClaimTemplate 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceClaimTemplate
      operationId: replaceResourceV1alpha2NamespacedResourceClaimTemplate
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceClaimTemplate
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClaimTemplate 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplate.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceClaimTemplate 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclassparameters:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceClassParameters
      operationId: deleteResourceV1alpha2CollectionNamespacedResourceClassParameters
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 ResourceClassParameters
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClassParameters
      operationId: listResourceV1alpha2NamespacedResourceClassParameters
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 ResourceClassParameters 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create ResourceClassParameters
      operationId: createResourceV1alpha2NamespacedResourceClassParameters
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description: 创建 ResourceClassParameters
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/namespaces/{namespace}/resourceclassparameters/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete ResourceClassParameters
      operationId: deleteResourceV1alpha2NamespacedResourceClassParameters
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceClassParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除 ResourceClassParameters
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceClassParameters
      operationId: readResourceV1alpha2NamespacedResourceClassParameters
      parameters:
        - description: name of the ResourceClassParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClassParameters 对象的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceClassParameters 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceClassParameters
      operationId: patchResourceV1alpha2NamespacedResourceClassParameters
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceClassParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClassParameters 对象的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分变更指定的 ResourceClassParameters 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceClassParameters
      operationId: replaceResourceV1alpha2NamespacedResourceClassParameters
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceClassParameters
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClassParameters 对象的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParameters.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceClassParameters 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/podschedulingcontexts:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PodSchedulingContext
      operationId: listResourceV1alpha2PodSchedulingContextForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.PodSchedulingContextList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视所有名字空间下的 PodSchedulingContext 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: PodSchedulingContext
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceclaimparameters:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClaimParameters
      operationId: listResourceV1alpha2ResourceClaimParametersForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimParametersList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视所有名字空间中 ResourceClaimParameters 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimParameters
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceclaims:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClaim
      operationId: listResourceV1alpha2ResourceClaimForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视所有名字空间下的 ResourceClaim 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaim
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceclaimtemplates:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClaimTemplate
      operationId: listResourceV1alpha2ResourceClaimTemplateForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClaimTemplateList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视所有名字空间下的 ResourceClaimTemplate 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClaimTemplate
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceclasses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceClass
      operationId: deleteResourceV1alpha2CollectionResourceClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 ResourceClass
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClass
      operationId: listResourceV1alpha2ResourceClass
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 ResourceClass 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create a ResourceClass
      operationId: createResourceV1alpha2ResourceClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 创建一个 ResourceClass
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceclasses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ResourceClass
      operationId: deleteResourceV1alpha2ResourceClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除一个 ResourceClass
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceClass
      operationId: readResourceV1alpha2ResourceClass
      parameters:
        - description: name of the ResourceClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceClass 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceClass
      operationId: patchResourceV1alpha2ResourceClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分更新指定的 ResourceClass 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceClass
      operationId: replaceResourceV1alpha2ResourceClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceClass 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClass
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceclassparameters:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceClassParameters
      operationId: listResourceV1alpha2ResourceClassParametersForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceClassParametersList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视所有名字空间下 ResourceClassParameters 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceClassParameters
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceslices:
    delete:
      consumes:
        - '*/*'
      description: delete collection of ResourceSlice
      operationId: deleteResourceV1alpha2CollectionResourceSlice
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 批量删除 ResourceSlice
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind ResourceSlice
      operationId: listResourceV1alpha2ResourceSlice
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSliceList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 列举或监视 ResourceSlice 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
    post:
      consumes:
        - '*/*'
      description: create a ResourceSlice
      operationId: createResourceV1alpha2ResourceSlice
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description: 创建 ResourceSlice
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
  /apis/resource.k8s.io/v1alpha2/resourceslices/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a ResourceSlice
      operationId: deleteResourceV1alpha2ResourceSlice
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the ResourceSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 删除 ResourceSlice
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
    get:
      consumes:
        - '*/*'
      description: read the specified ResourceSlice
      operationId: readResourceV1alpha2ResourceSlice
      parameters:
        - description: name of the ResourceSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceSlice 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 读取指定的 ResourceSlice 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified ResourceSlice
      operationId: patchResourceV1alpha2ResourceSlice
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the ResourceSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceSlice 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 部分变更指定的 ResourceSlice 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
    put:
      consumes:
        - '*/*'
      description: replace the specified ResourceSlice
      operationId: replaceResourceV1alpha2ResourceSlice
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the ResourceSlice
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: ResourceSlice 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.resource.v1alpha2.ResourceSlice.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - resource_v1alpha2
      x-kab-description-zh: 替换指定的 ResourceSlice 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: resource.k8s.io
        kind: ResourceSlice
        version: v1alpha2
  /apis/scheduling.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the scheduling.k8s.io API group
      operationId: getSchedulingAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling
      x-kab-description-zh: 读取关于 scheduling.k8s.io API 组的信息
  /apis/scheduling.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getSchedulingV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 读取 scheduling.k8s.io/v1 API 组可用的资源
  /apis/scheduling.k8s.io/v1/priorityclasses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of PriorityClass
      operationId: deleteSchedulingV1CollectionPriorityClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 批量删除 PriorityClass
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind PriorityClass
      operationId: listSchedulingV1PriorityClass
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClassList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 列举或监视 PriorityClass 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a PriorityClass
      operationId: createSchedulingV1PriorityClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 创建一个 PriorityClass
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
  /apis/scheduling.k8s.io/v1/priorityclasses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a PriorityClass
      operationId: deleteSchedulingV1PriorityClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the PriorityClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 删除一个 PriorityClass
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified PriorityClass
      operationId: readSchedulingV1PriorityClass
      parameters:
        - description: name of the PriorityClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 读取指定的 PriorityClass 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified PriorityClass
      operationId: patchSchedulingV1PriorityClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the PriorityClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 部分更新指定的 PriorityClass 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified PriorityClass
      operationId: replaceSchedulingV1PriorityClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the PriorityClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: PriorityClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.scheduling.v1.PriorityClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - scheduling_v1
      x-kab-description-zh: 替换指定的 PriorityClass 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: scheduling.k8s.io
        kind: PriorityClass
        version: v1
  /apis/storage.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of the storage.k8s.io API group
      operationId: getStorageAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage
      x-kab-description-zh: 读取关于 storage.k8s.io API 组的信息
  /apis/storage.k8s.io/v1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getStorageV1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取 storage.k8s.io/v1 API 组可用的资源
  /apis/storage.k8s.io/v1/csidrivers:
    delete:
      consumes:
        - '*/*'
      description: delete collection of CSIDriver
      operationId: deleteStorageV1CollectionCSIDriver
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 批量删除 CSIDriver
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CSIDriver
      operationId: listStorageV1CSIDriver
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriverList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 列举或监视 CSIDriver 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a CSIDriver
      operationId: createStorageV1CSIDriver
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 创建一个 CSIDriver
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
  /apis/storage.k8s.io/v1/csidrivers/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a CSIDriver
      operationId: deleteStorageV1CSIDriver
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the CSIDriver
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIDriver 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 删除一个 CSIDriver
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified CSIDriver
      operationId: readStorageV1CSIDriver
      parameters:
        - description: name of the CSIDriver
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIDriver 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取指定的 CSIDriver 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified CSIDriver
      operationId: patchStorageV1CSIDriver
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CSIDriver
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIDriver 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 部分更新指定的 CSIDriver 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified CSIDriver
      operationId: replaceStorageV1CSIDriver
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CSIDriver
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIDriver 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIDriver.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 替换指定的 CSIDriver 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIDriver
        version: v1
  /apis/storage.k8s.io/v1/csinodes:
    delete:
      consumes:
        - '*/*'
      description: delete collection of CSINode
      operationId: deleteStorageV1CollectionCSINode
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 批量删除 CSINode
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CSINode
      operationId: listStorageV1CSINode
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINodeList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 列举或监视 CSINode 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a CSINode
      operationId: createStorageV1CSINode
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 创建一个 CSINode
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
  /apis/storage.k8s.io/v1/csinodes/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a CSINode
      operationId: deleteStorageV1CSINode
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the CSINode
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSINode 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 删除一个 CSINode
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified CSINode
      operationId: readStorageV1CSINode
      parameters:
        - description: name of the CSINode
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSINode 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取指定的 CSINode 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified CSINode
      operationId: patchStorageV1CSINode
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CSINode
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSINode 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 部分更新指定的 CSINode 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified CSINode
      operationId: replaceStorageV1CSINode
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CSINode
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSINode 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSINode.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 替换指定的 CSINode 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSINode
        version: v1
  /apis/storage.k8s.io/v1/csistoragecapacities:
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CSIStorageCapacity
      operationId: listStorageV1CSIStorageCapacityForAllNamespaces
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/pretty'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacityList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 列举或监视所有名字空间下的 CSIStorageCapacity 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
  /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities:
    delete:
      consumes:
        - '*/*'
      description: delete collection of CSIStorageCapacity
      operationId: deleteStorageV1CollectionNamespacedCSIStorageCapacity
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 批量删除 CSIStorageCapacity
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind CSIStorageCapacity
      operationId: listStorageV1NamespacedCSIStorageCapacity
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacityList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 列举或监视 CSIStorageCapacity 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a CSIStorageCapacity
      operationId: createStorageV1NamespacedCSIStorageCapacity
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/namespace'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 创建一个 CSIStorageCapacity 对象
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
  /apis/storage.k8s.io/v1/namespaces/{namespace}/csistoragecapacities/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a CSIStorageCapacity
      operationId: deleteStorageV1NamespacedCSIStorageCapacity
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the CSIStorageCapacity
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIStorageCapacity 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 删除一个 CSIStorageCapacity
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified CSIStorageCapacity
      operationId: readStorageV1NamespacedCSIStorageCapacity
      parameters:
        - description: name of the CSIStorageCapacity
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIStorageCapacity 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取指定的 CSIStorageCapacity 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified CSIStorageCapacity
      operationId: patchStorageV1NamespacedCSIStorageCapacity
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the CSIStorageCapacity
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIStorageCapacity 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 部分更新指定的 CSIStorageCapacity 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified CSIStorageCapacity
      operationId: replaceStorageV1NamespacedCSIStorageCapacity
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the CSIStorageCapacity
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: CSIStorageCapacity 的名称
        - $ref: '#/parameters/namespace'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.CSIStorageCapacity.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 替换指定的 CSIStorageCapacity 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: CSIStorageCapacity
        version: v1
  /apis/storage.k8s.io/v1/storageclasses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of StorageClass
      operationId: deleteStorageV1CollectionStorageClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 批量删除 StorageClass
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind StorageClass
      operationId: listStorageV1StorageClass
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClassList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 列举或监视 StorageClass 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a StorageClass
      operationId: createStorageV1StorageClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 创建一个 StorageClass
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
  /apis/storage.k8s.io/v1/storageclasses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a StorageClass
      operationId: deleteStorageV1StorageClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the StorageClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 删除一个 StorageClass
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified StorageClass
      operationId: readStorageV1StorageClass
      parameters:
        - description: name of the StorageClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取指定的 StorageClass 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified StorageClass
      operationId: patchStorageV1StorageClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StorageClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 部分更新指定的 StorageClass 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified StorageClass
      operationId: replaceStorageV1StorageClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StorageClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.StorageClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 替换指定的 StorageClass 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: StorageClass
        version: v1
  /apis/storage.k8s.io/v1/volumeattachments:
    delete:
      consumes:
        - '*/*'
      description: delete collection of VolumeAttachment
      operationId: deleteStorageV1CollectionVolumeAttachment
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 批量删除 VolumeAttachment
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind VolumeAttachment
      operationId: listStorageV1VolumeAttachment
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachmentList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 列举或监视 VolumeAttachment 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    post:
      consumes:
        - '*/*'
      description: create a VolumeAttachment
      operationId: createStorageV1VolumeAttachment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 创建一个 VolumeAttachment
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
  /apis/storage.k8s.io/v1/volumeattachments/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a VolumeAttachment
      operationId: deleteStorageV1VolumeAttachment
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 删除一个 VolumeAttachment
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    get:
      consumes:
        - '*/*'
      description: read the specified VolumeAttachment
      operationId: readStorageV1VolumeAttachment
      parameters:
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取指定的 VolumeAttachment 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified VolumeAttachment
      operationId: patchStorageV1VolumeAttachment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 部分更新指定的 VolumeAttachment 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace the specified VolumeAttachment
      operationId: replaceStorageV1VolumeAttachment
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 替换指定的 VolumeAttachment 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
  /apis/storage.k8s.io/v1/volumeattachments/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified VolumeAttachment
      operationId: readStorageV1VolumeAttachmentStatus
      parameters:
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 读取指定的 VolumeAttachment 对象的状态（status）
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified VolumeAttachment
      operationId: patchStorageV1VolumeAttachmentStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 部分更新指定的 VolumeAttachment 对象的状态（status）
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified VolumeAttachment
      operationId: replaceStorageV1VolumeAttachmentStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the VolumeAttachment
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttachment 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1.VolumeAttachment.GET'
          x-kab-description-zh: 创建成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1
      x-kab-description-zh: 替换指定的 VolumeAttachment 对象的状态（status）
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttachment
        version: v1
  /apis/storage.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getStorageV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 读取 storage.k8s.io/v1alpha1 API 组可用的资源
  /apis/storage.k8s.io/v1alpha1/volumeattributesclasses:
    delete:
      consumes:
        - '*/*'
      description: delete collection of VolumeAttributesClass
      operationId: deleteStorageV1alpha1CollectionVolumeAttributesClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 批量删除 VolumeAttributesClass
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind VolumeAttributesClass
      operationId: listStorageV1alpha1VolumeAttributesClass
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClassList'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 列举或监视 VolumeAttributesClass 对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a VolumeAttributesClass
      operationId: createStorageV1alpha1VolumeAttributesClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 创建成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 创建一个 VolumeAttributesClass
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
  /apis/storage.k8s.io/v1alpha1/volumeattributesclasses/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a VolumeAttributesClass
      operationId: deleteStorageV1alpha1VolumeAttributesClass
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the VolumeAttributesClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttributesClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 成功
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 操作已接受
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 删除一个 VolumeAttributesClass
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified VolumeAttributesClass
      operationId: readStorageV1alpha1VolumeAttributesClass
      parameters:
        - description: name of the VolumeAttributesClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttributesClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 读取指定的 VolumeAttributesClass 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified VolumeAttributesClass
      operationId: patchStorageV1alpha1VolumeAttributesClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the VolumeAttributesClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttributesClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 部分更新指定的 VolumeAttributesClass 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified VolumeAttributesClass
      operationId: replaceStorageV1alpha1VolumeAttributesClass
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the VolumeAttributesClass
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: VolumeAttributesClass 的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 成功
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storage.v1alpha1.VolumeAttributesClass.GET'
          x-kab-description-zh: 已更新
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - storage_v1alpha1
      x-kab-description-zh: 替换指定的 VolumeAttributesClass 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storage.k8s.io
        kind: VolumeAttributesClass
        version: v1alpha1
  /apis/storagemigration.k8s.io/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get information of a group
      operationId: getStoragemigrationAPIGroup
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIGroup'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration
      x-kab-description-zh: 读取 API 组的信息
  /apis/storagemigration.k8s.io/v1alpha1/:
    get:
      consumes:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      description: get available resources
      operationId: getStoragemigrationV1alpha1APIResources
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.APIResourceList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 读取 API 组下可用的资源类别
  /apis/storagemigration.k8s.io/v1alpha1/storageversionmigrations:
    delete:
      consumes:
        - '*/*'
      description: delete collection of StorageVersionMigration
      operationId: deleteStoragemigrationV1alpha1CollectionStorageVersionMigration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 批量删除 StorageVersionMigration 对象
      x-kubernetes-action: deletecollection
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: list or watch objects of kind StorageVersionMigration
      operationId: listStoragemigrationV1alpha1StorageVersionMigration
      parameters:
        - $ref: '#/parameters/allowWatchBookmarks'
        - $ref: '#/parameters/continue'
        - $ref: '#/parameters/fieldSelector'
        - $ref: '#/parameters/labelSelector'
        - $ref: '#/parameters/limit'
        - $ref: '#/parameters/resourceVersion'
        - $ref: '#/parameters/resourceVersionMatch'
        - $ref: '#/parameters/sendInitialEvents'
        - $ref: '#/parameters/timeoutSeconds'
        - $ref: '#/parameters/watch'
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
        - application/json;stream=watch
        - application/vnd.kubernetes.protobuf;stream=watch
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigrationList'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 列举或监视 StorageVersionMigration 类别的对象
      x-kubernetes-action: list
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    post:
      consumes:
        - '*/*'
      description: create a StorageVersionMigration
      operationId: createStoragemigrationV1alpha1StorageVersionMigration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.CREATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '201':
          description: Created
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 创建 StorageVersionMigration
      x-kubernetes-action: post
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
  /apis/storagemigration.k8s.io/v1alpha1/storageversionmigrations/{name}:
    delete:
      consumes:
        - '*/*'
      description: delete a StorageVersionMigration
      operationId: deleteStoragemigrationV1alpha1StorageVersionMigration
      parameters:
        - in: body
          name: body
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.DeleteOptions'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/gracePeriodSeconds'
        - $ref: '#/parameters/orphanDependents'
        - $ref: '#/parameters/propagationPolicy'
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '202':
          description: Accepted
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Status'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 删除指定的 StorageVersionMigration 对象
      x-kubernetes-action: delete
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    get:
      consumes:
        - '*/*'
      description: read the specified StorageVersionMigration
      operationId: readStoragemigrationV1alpha1StorageVersionMigration
      parameters:
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 读取指定的 StorageVersionMigration 对象
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update the specified StorageVersionMigration
      operationId: patchStoragemigrationV1alpha1StorageVersionMigration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 部分变更指定的 StorageVersionMigration 对象
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace the specified StorageVersionMigration
      operationId: replaceStoragemigrationV1alpha1StorageVersionMigration
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 替换指定的 StorageVersionMigration 对象
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
  /apis/storagemigration.k8s.io/v1alpha1/storageversionmigrations/{name}/status:
    get:
      consumes:
        - '*/*'
      description: read status of the specified StorageVersionMigration
      operationId: readStoragemigrationV1alpha1StorageVersionMigrationStatus
      parameters:
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 读取指定的 StorageVersionMigration 对象的状态
      x-kubernetes-action: get
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    patch:
      consumes:
        - application/json-patch+json
        - application/merge-patch+json
        - application/strategic-merge-patch+json
        - application/apply-patch+yaml
      description: partially update status of the specified StorageVersionMigration
      operationId: patchStoragemigrationV1alpha1StorageVersionMigrationStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.Patch'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManagerPatch'
        - $ref: '#/parameters/fieldValidation'
        - $ref: '#/parameters/force'
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 部分更新指定 StorageVersionMigration 对象的状态
      x-kubernetes-action: patch
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
    put:
      consumes:
        - '*/*'
      description: replace status of the specified StorageVersionMigration
      operationId: replaceStoragemigrationV1alpha1StorageVersionMigrationStatus
      parameters:
        - in: body
          name: body
          required: true
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.UPDATE'
        - $ref: '#/parameters/dryRun'
        - $ref: '#/parameters/fieldManager'
        - $ref: '#/parameters/fieldValidation'
        - description: name of the StorageVersionMigration
          in: path
          name: name
          required: true
          type: string
          uniqueItems: true
          x-kab-description-zh: StorageVersionMigration 对象的名称
        - $ref: '#/parameters/pretty'
      produces:
        - application/json
        - application/yaml
        - application/vnd.kubernetes.protobuf
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '201':
          description: Updated
          schema:
            $ref: '#/definitions/io.k8s.api.storagemigration.v1alpha1.StorageVersionMigration.GET'
        '401':
          description: Unauthorized
      schemes:
        - https
      tags:
        - storagemigration_v1alpha1
      x-kab-description-zh: 替换指定的 StorageVersionMigration 的状态
      x-kubernetes-action: put
      x-kubernetes-group-version-kind:
        group: storagemigration.k8s.io
        kind: StorageVersionMigration
        version: v1alpha1
  /logs/:
    get:
      description: list log files that are exposed for client to examine
      operationId: logFileListHandler
      responses:
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - logs
      x-kab-description-zh: 列举公开给客户端来查看的日志文件
  /logs/{logpath}:
    get:
      description: retrieve a log file at the specified log path
      operationId: logFileHandler
      parameters:
        - $ref: '#/parameters/logpath'
      responses:
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - logs
      x-kab-description-zh: 读取位于指定日志路径的日志文件
  /openid/v1/jwks/:
    get:
      description: get service account issuer OpenID JSON Web Key Set (contains public
        token verification keys)
      operationId: getServiceAccountIssuerOpenIDKeyset
      produces:
        - application/jwk-set+json
      responses:
        '200':
          description: OK
          schema:
            type: string
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - openid
      x-kab-description-zh: 读取服务账号发放者 OpenID JSON Web 秘钥集合，其中包含公开令牌检查秘钥。
  /version/:
    get:
      consumes:
        - application/json
      description: get the version information about the API server
      operationId: getCodeVersion
      produces:
        - application/json
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/io.k8s.apimachinery.pkg.version.Info'
          x-kab-description-zh: 成功
        '401':
          description: Unauthorized
          x-kab-description-zh: 未授权操作
      schemes:
        - https
      tags:
        - version
      x-kab-description-zh: 读 API 服务器相关的版本信息
security:
  - BearerToken: []
securityDefinitions:
  BearerToken:
    description: Bearer Token authentication.
    in: header
    name: authorization
    type: apiKey
    x-kab-description-zh: 持有者令牌（Bearer Token）方式的身份认证。
swagger: '2.0'

