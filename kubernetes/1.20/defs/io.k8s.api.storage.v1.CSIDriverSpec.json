{
  "description": "The specification of a CSIDriver. The whole spec is immutable.",
  "properties": {
    "attachRequired": {
      "default": true,
      "description": "This indicates this CSI volume driver requires an `attach` operation (because it implements the CSI `ControllerPublishVolume()` method), and that the Kubernetes attach detach controller should call the `attach` volume interface which checks the `volumeattachment` status and waits until the volume is attached before proceeding to mounting. The CSI 'external-attacher' coordinates with CSI volume driver and updates the `volumeattachment` status when the `attach` operation is complete. If the `CSIDriverRegistry` feature gate is enabled and the value is specified to `false`, the `attach` operation will be skipped. Otherwise the `attach` operation will be called.",
      "type": "boolean"
    },
    "fsGroupPolicy": {
      "description": "Defines if the underlying volume supports changing ownership and permission of the volume before being mounted. Refer to the specific `fsGroupPolicy` values for additional details. This field is alpha-level, and is only honored by servers that enable the `CSIVolumeFSGroupPolicy` feature gate.",
      "type": "string"
    },
    "podInfoOnMount": {
      "default": false,
      "description": "If set to true, `podInfoOnMount` indicates this CSI volume driver requires additional Pod information (like `podName`, `podUID`, etc.) during `mount` operations. If set to false, Pod information will not be passed on `mount`. The CSI driver specifies `podInfoOnMount` as part of the driver deployment. If true, Kubelet will pass Pod information as `VolumeContext` in the CSI `NodePublishVolume()` calls. The CSI driver is responsible for parsing and validating the information passed in as `VolumeContext`. The following `VolumeConext` will be passed if `podInfoOnMount` is set to `true`. This list might grow, but the prefix will be used.\n\n- \"`csi.storage.k8s.io/pod.name`\": `pod.Name`\n- \"`csi.storage.k8s.io/pod.namespace`\": `pod.Namespace`\n- \"`csi.storage.k8s.io/pod.uid`\": `string(pod.UID)`\n- \"`csi.storage.k8s.io/ephemeral`\": `true` iff the volume is an ephemeral inline volume defined by a `CSIVolumeSource`, otherwise `false`\n- \"`csi.storage.k8s.io/ephemeral`\" is a new feature in Kubernetes 1.16. It is only required for drivers which support both the "Persistent" and "Ephemeral" `volumeLifecycleMode`. Other drivers can leave Pod info disabled and/or ignore this field. As Kubernetes 1.15 doesn't support this field, drivers can only support one mode when deployed on such a cluster and the deployment determines which mode that is, for example via a command line parameter of the driver.\n\n",
      "type": "boolean"
    },
    "requiresRepublish": {
      "description": "This indicates the CSI driver wants `NodePublishVolume` being periodically called to reflect any possible change in the mounted volume. This field defaults to false.\n\nNote: After a successful initial `NodePublishVolume` call, subsequent calls to `NodePublishVolume` should only update the contents of the volume. New mount points will not be seen by a running container.\n\nThis is an alpha feature and only available when the `CSIServiceAccountToken` feature is enabled.",
      "type": "boolean"
    },

    "storageCapacity": {
      "default": false,
      "description": "If set to true, `storageCapacity` indicates that the CSI volume driver wants Pod scheduling to consider the storage capacity that the driver deployment will report by creating `CSIStorageCapacity` objects with capacity information.\n\nThe check can be enabled immediately when deploying a driver. In that case, provisioning new volumes with late binding will pause until the driver deployment has published some suitable `CSIStorageCapacity` object.\n\nAlternatively, the driver can be deployed with the field unset or `false` and it can be flipped later when storage capacity information has been published.\n\nThis is an alpha field and only available when the `CSIStorageCapacity` feature is enabled.",
      "type": "boolean"
    },
    "tokenRequests": {
      "description": "This indicates the CSI driver needs pods' service account tokens it is mounting volume for to do necessary authentication. Kubelet will pass the tokens in `VolumeContext` in the CSI `NodePublishVolume` calls. The CSI driver should parse and validate the following `VolumeContext`:\n\n```json\n\"csi.storage.k8s.io/serviceAccount.tokens\": {\n  \"<audience>\": {\n    \"token\": \"<token>\",\n    \"expirationTimestamp\": \"<expiration timestamp in RFC3339>\",\n  },\n  ...\n}\n```\n\nNote: Audience in each `TokenRequest` should be different and at most one token is empty string. To receive a new token after expiry, `requiresRepublish` can be used to trigger `NodePublishVolume` periodically.\n\nThis is an alpha feature and only available when the `CSIServiceAccountToken` feature is enabled.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.storage.v1.TokenRequest"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "volumeLifecycleModes": {
      "default": [
        "Persistent"
      ],
      "description": "This defines what kind of volumes this CSI volume driver supports. The default if the list is empty is '`Persistent`', which is the usage defined by the CSI specification and implemented in Kubernetes via the usual PV/PVC mechanism. The other mode is '`Ephemeral`'. In this mode, volumes are defined inline inside the Pod spec with `CSIVolumeSource` and their lifecycle is tied to the lifecycle of that Pod. A driver has to be aware of this because it is only going to get a `NodePublishVolume()` call for such a volume. For more information about implementing this mode, see [CSI doc](https://kubernetes-csi.github.io/docs/ephemeral-local-volumes.html). A driver can support one or more of these modes and more modes may be added in the future. This field is beta.",
      "items": {
        "type": "string",
        "enum": [
          "Persistent",
          "Ephemeral"
        ]
      },
      "type": "array",
      "x-kubernetes-list-type": "set"
    }
  },
  "type": "object"
}
