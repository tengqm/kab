{
  "description": "A container that may be added temporarily to an existing Pod for user-initiated activities such as debugging. Ephemeral containers have no resource or scheduling guarantees, and they will not be restarted when they exit or when a Pod is removed or restarted. If an ephemeral container causes a Pod to exceed its resource allocation, the Pod may be evicted. Ephemeral containers may not be added by directly updating the Pod spec. They must be added via the Pod's `ephemeralcontainers` subresource, and they will appear in the Pod `spec` once added. This is an Alpha feature enabled by the `EphemeralContainers` feature gate.",
  "properties": {
    "args": {
      "description": "Arguments to the `command`. The docker image's `CMD` is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, ie: '`$$(VAR_NAME)`'. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "command": {
      "description": "Entrypoint array. Not executed within a shell. The docker image's `ENTRYPOINT` is used if this is not provided. Variable references `$(VAR_NAME)` are expanded using the container's environment. If a variable cannot be resolved, the reference in the input string will be unchanged. The `$(VAR_NAME)` syntax can be escaped with a double `$$`, ie: `$$(VAR_NAME)`. Escaped references will never be expanded, regardless of whether the variable exists or not. Cannot be updated.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "env": {
      "description": "List of environment variables to set in the container. Cannot be updated.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.EnvVar"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "envFrom": {
      "description": "List of sources to populate environment variables in the container. The keys defined within a source must be a valid DNS subdomain name. They must consist of alphanumeric characters, `'.'`, `'-'`, or `'_'`. They cannot start with `\"..\"` or a digit. They cannot be `\".\"` or `\"..\"`. All invalid keys will be reported as an event when the container is starting. When a key exists in multiple sources, the value associated with the last source will take precedence. Values defined by an `env` with a duplicate key will take precedence. Cannot be updated.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.EnvFromSource"
      },
      "type": "array"
    },
    "image": {
      "description": "Container image name. The image string cannot contain leading or tracing whitespaces.",
      "type": "string"
    },
    "imagePullPolicy": {
      "description": "Image pull policy. Defaults to `\"Always\"` if the `\":latest\"` tag is specified, or `\"IfNotPresent\"` otherwise. Cannot be updated.",
      "enum": [
        "Always",
        "Never",
        "IfNotPresent"
      ],
      "minLength": 1,
      "type": "string"
    },
    "name": {
      "description": "Name of the ephemeral container specified as a DNS label. This name must be unique among all containers, init containers and ephemeral containers.",
      "minLength": 1,
      "type": "string"
    },
    "stdin": {
      "default": false,
      "description": "Whether this container should allocate a buffer for stdin in the container runtime. If this is not set, reads from stdin in the container will always result in EOF.",
      "type": "boolean"
    },
    "stdinOnce": {
      "default": false,
      "description": "Whether the container runtime should close the stdin channel after it has been opened by a single `attach`. When `stdin` is true the stdin stream will remain open across multiple `attach` sessions. If `stdinOnce` is set to `true`, stdin is opened on container start, is empty until the first client attaches to stdin, and then remains open and accepts data until the client disconnects, at which time stdin is closed and remains closed until the container is restarted. If this flag is false, a container processes that reads from stdin will never receive an EOF.",
      "type": "boolean"
    },
    "targetContainerName": {
      "description": "If set, the name of the Container from the containing Pod that this ephemeral container targets. The ephemeral container will be run in the namespaces (IPC, PID, etc) of the target Container. If not set then the ephemeral container is run in whatever namespaces that are shared for the Pod. Note that the container runtime must support this feature.",
      "type": "string"
    },
    "terminationMessagePath": {
      "default": "/dev/termination-log",
      "description": "File path to which the container's termination message will be written. Message written is intended to be brief final status, such as an assertion failure message. Will be truncated by the node if greater than 4096 bytes. The total message length across all containers will be limited to 12kb. Cannot be updated.",
      "type": "string"
    },
    "terminationMessagePolicy": {
      "default": "File",
      "description": "This attribute indicates how the termination message should be populated.\n\n- `\"File\"`: use the contents of `terminationMessagePath` file to populate the container status message on both success and failure.\n- `\"FallbackToLogsOnError\"`: use the last chunk of container log output if the termination message file is empty and the container exited with an error.\n\nThe log output is limited to 2048 bytes or 80 lines, whichever is smaller. Cannot be updated.",
      "enum": [
        "File",
        "FallbackToLogsOnError"
      ],
      "type": "string"
    },
    "tty": {
      "default": false,
      "description": "Whether this container should allocate a TTY for itself, also requires `stdin` to be true.",
      "type": "boolean"
    },
    "volumeDevices": {
      "description": "The list of block devices to be used by the container.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeDevice"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "devicePath",
      "x-kubernetes-patch-strategy": "merge"
    },
    "volumeMounts": {
      "description": "Pod volumes to mount into the container's filesystem. Cannot be updated.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.VolumeMount"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "mountPath",
      "x-kubernetes-patch-strategy": "merge"
    },
    "workingDir": {
      "description": "Container's working directory. If not specified, the container runtime's default will be used, which might be configured in the container image. Cannot be updated.",
      "type": "string"
    }
  },
  "required": [
    "name"
  ],
  "type": "object"
}
