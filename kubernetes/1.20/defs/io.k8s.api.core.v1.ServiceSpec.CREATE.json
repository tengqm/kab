{
  "description": "The attributes that a user creates on a service.",
  "properties": {
    "clusterIP": {
      "description": "The IP address of the service and is usually assigned randomly. If an IP address is specified manually and the IP is not in use by others, it will be allocated to the service; otherwise, creation of the service will fail. This field cannot be changed through updates. Valid values are '`None`', empty string (''), or a valid IP address. '`None`' can be specified for headless services when proxying is not required. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. The value must be empty string if `type` is '`ExternalName`'. The value cannot be '`None`' for  `LoadBalancer` or `NodePort` type of services.",
      "type": "string"
    },
    "externalIPs": {
      "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. The IP address provided cannot be '`0.0.0.0`' or loopback addresses ('`127.0.0.0/8`') or link-local addresses ('`169.254.0.0/16`' or '`244.0.0.0/24`').",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "externalName": {
      "description": "The external reference that kubedns or equivalent will return as a CNAME record for this service. No proxying will be involved. Must be a valid RFC-1123 hostname (https://tools.ietf.org/html/rfc1123), a valid DNS subdomain and requires `type` to be '`ExternalName`'. Having a trailing dot is acceptable.",
      "type": "string"
    },
    "externalTrafficPolicy": {
      "description": "This denotes if this service desires to route external traffic to node-local or cluster-wide endpoints. '`Local`' preserves the client source IP and avoids a second hop for `LoadBalancer` and `Nodeport` type of services, but risks potentially imbalanced traffic spreading. '`Cluster`' obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
      "enum": [
        "Cluster",
        "Local"
      ],
      "type": "string"
    },
    "healthCheckNodePort": {
      "description": "The healthcheck node port for the service. If not specified, it is created by the service API backend with the allocated nodePort. Will use user-specified nodePort value if specified by the client. Only effects when `type` is set to '`LoadBalancer`' and `externalTrafficPolicy` is set to '`Local`'.",
      "format": "int32",
      "minimum": 0,
      "type": "integer"
    },
    "ipFamily": {
      "description": "This specifies whether this Service has a preference for a particular IP family (e.g. 'IPv4' vs. 'IPv6') when the `IPv6DualStack` feature gate is enabled. In a dual-stack cluster, you can specify `ipFamily` when creating a 'ClusterIP' Service to determine whether the controller will allocate an IPv4 or IPv6 IP for it, and you can specify `ipFamily` when creating a headless Service to determine whether it will have IPv4 or IPv6 Endpoints. In either case, if you do not specify an `ipFamily` explicitly, it will default to the cluster's primary IP family. This field is part of an alpha feature, and you should not make any assumptions about its semantics other than those described above. In particular, you should not assume that it can (or cannot) be changed after creation time; that it can only have the values \"IPv4\" and \"IPv6\"; or that its current value on a given Service correctly reflects the current state of that Service. (For ClusterIP Services, look at `clusterIP` to see if the Service is IPv4 or IPv6. For headless Services, look at the `endpoints`, which may be dual-stack in the future. For ExternalName Services, `ipFamily` has no meaning, but it may be set to an irrelevant value anyway.)",
      "enum": [
        "IPv4",
        "IPv6"
      ],
      "type": "string"
    },
    "loadBalancerIP": {
      "description": "Only applies to `LoadBalancer` type of services. A load balancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
      "type": "string"
    },
    "loadBalancerSourceRanges": {
      "description": "Only applies to `LoadBalancer` type of services. If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. Every entry must be a valid CIDR expression. This field will be ignored if the cloud-provider does not support the feature.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "ports": {
      "description": "The list of ports that are exposed by this service. Required when service is not headless service and it is not of type `ExternalName`. The combination of `protocol` and `nodePort` must be unique among all port records and the combination of `protocol` and `port` must be unique as well.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
      },
      "type": "array",
      "x-kubernetes-list-map-keys": [
        "port",
        "protocol"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "port",
      "x-kubernetes-patch-strategy": "merge"
    },
    "publishNotReadyAddresses": {
      "default": false,
      "description": "This indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
      "type": "boolean"
    },
    "selector": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Service traffic will be routed to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. Ignored if `type` is '`ExternalName`'.",
      "type": "object"
    },
    "sessionAffinity": {
      "default": "None",
      "description": "Used to maintain session affinity. Setting this to '`ClientIP`' enables client IP based session affinity.",
      "enum": [
        "ClientIP",
        "None"
      ],
      "type": "string"
    },
    "sessionAffinityConfig": {
      "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
      "description": "The configurations of session affinity. It is required when `sessionAffinity` is set to '`ClientIP`' and it cannot be set when `sessionAffinity` is set to '`None`'."
    },
    "topologyKeys": {
      "description": "A preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service. It cannot be used at the same time as `externalTrafficPolicy=Local`. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value '`*`' may be used to mean 'any topology'. This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "type": {
      "default": "ClusterIP",
      "description": "This field determines how the service is exposed. '`ExternalName`' maps to the specified `externalName`. '`ClusterIP`' allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the selector or if that is not specified, by manual construction of an Endpoints object. If `clusterIP` is '`None`', no virtual IP is allocated and the endpoints are published as a set of endpoints rather than a stable IP. '`NodePort`' builds on '`ClusterIP`' and allocates a port on every node which routes to the cluster IP. '`LoadBalancer`' builds on '`NodePort`' and creates an external load-balancer (if supported in the current cloud) which routes to the cluster IP.",
      "enum": [
        "ClusterIP",
        "ExternalName",
        "LoadBalancer",
        "NodePort"
      ],
      "type": "string"
    }
  },
  "type": "object"
}
