{
  "description": "The attributes that a user creates on a service.",
  "properties": {
    "allocateLoadBalancerNodePorts": {
      "description": "This defines if NodePorts will be automatically allocated for Services with type \"LoadBalancer\". Default is \"true\". It may be set to \"false\" if the cluster load-balancer does not rely on NodePorts. `allocateLoadBalancerNodePorts` may only be set for Services with type \"LoadBalancer\" and will be cleared if the type is changed to any other type. This field is alpha-level and is only honored by servers that enable the `ServiceLBNodePortControl` feature.",
      "type": "boolean"
    },
    "clusterIP": {
      "description": "The IP address of the Service and is usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the Service; otherwise creation of the Service will fail. This field may not be changed through updates unless the `type` field is also being changed to \"ExternalName\" (which requires this field to be blank) or the `type` field is being changed from \"ExternalName\" (in which case this field may optionally be specified, as describe above). Valid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types \"ClusterIP\", \"NodePort\", and \"LoadBalancer\". If this field is specified when creating a Service of type \"ExternalName\", creation will fail. This field will be wiped when updating a Service to type \"ExternalName\". More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
      "type": "string"
    },
    "clusterIPs": {
      "description": "A list of IP addresses assigned to this Service, and are usually assigned randomly. If an address is specified manually, is in-range (as per system configuration), and is not in use, it will be allocated to the Service; otherwise creation of the Service will fail. This field may not be changed through updates unless the `type` field is also being changed to \"ExternalName\" (which requires this field to be empty) or the `type` field is being changed from \"ExternalName\" (in which case this field may optionally be specified, as describe above).\n\nValid values are \"None\", empty string (\"\"), or a valid IP address. Setting this to \"None\" makes a \"headless service\" (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types \"ClusterIP\", \"NodePort\", and \"LoadBalancer\". If this field is specified when creating a Service of type \"ExternalName\", creation will fail. This field will be wiped when updating a Service to type \"ExternalName\". If this field is not specified, it will be initialized from the `clusterIP` field.\nIf this field is specified, clients must ensure that `clusterIPs[0]` and `clusterIP` have the same value.\n\nUnless the \"IPv6DualStack\" feature gate is enabled, this field is limited to one value, which must be the same as the `clusterIP` field. If the feature gate is enabled, this field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the `ipFamilies` field. Both `clusterIPs` and `ipFamilies` are governed by the `ipFamilyPolicy` field. More info: https://kubernetes.io/docs/concepts/services-networking/service/#virtual-ips-and-service-proxies",
      "items": {
        "type": "string"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "externalIPs": {
      "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. The IP address provided cannot be '`0.0.0.0`' or loopback addresses ('`127.0.0.0/8`') or link-local addresses ('`169.254.0.0/16`' or '`244.0.0.0/24`').",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "externalName": {
      "description": "The external reference that discovery mechanisms will return as an alias for this service (e.g. a DNS CNAME record). No proxying will be involved. Must be a lowercase [RFC-1123 hostname](https://tools.ietf.org/html/rfc1123) and requires `type` to be \"ExternalName\". Having a trailing dot is acceptable.",
      "type": "string"
    },
    "externalTrafficPolicy": {
      "description": "This denotes if this service desires to route external traffic to node-local or cluster-wide endpoints. '`Local`' preserves the client source IP and avoids a second hop for `LoadBalancer` and `Nodeport` type of services, but risks potentially imbalanced traffic spreading. '`Cluster`' obscures the client source IP and may cause a second hop to another node, but should have good overall load-spreading.",
      "enum": [
        "Cluster",
        "Local"
      ],
      "type": "string"
    },
    "healthCheckNodePort": {
      "description": "The healthcheck node port for the Service. This only applies when type is set to \"LoadBalancer\" and `externalTrafficPolicy` is set to \"Local\". If a value is specified, is in-range, and is not in use, it will be used. If not specified, a value will be automatically allocated. External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this service or not. If this field is specified when creating a Service which does not need it, creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing type).",
      "format": "int32",
      "minimum": 0,
      "type": "integer"
    },
    "ipFamilies": {
      "description": "A list of IP families (e.g. \"IPv4\", \"IPv6\") assigned to this Service, and is gated by the `IPv6DualStack` feature gate. This field is usually assigned automatically based on cluster configuration and the `ipFamilyPolicy` field. If this field is specified manually, the requested family is available in the cluster, and `ipFamilyPolicy` allows it, it will be used; otherwise creation of the Service will fail. This field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. Valid values are \"IPv4\" and \"IPv6\". This field only applies to Services of types \"ClusterIP\", \"NodePort\", and \"LoadBalancer\", and does apply to *headless Services*. This field will be wiped when updating a Service to type \"ExternalName\".\n\nThis field may hold a maximum of two entries (dual-stack families, in either order). These families must correspond to the values of the `clusterIPs` field, if specified. Both `clusterIPs` and `ipFamilies` are governed by the `ipFamilyPolicy` field.",
      "items": {
        "enum": [
          "IPV4",
          "IPv6"
        ],
        "minLength": 1,
        "type": "string"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "ipFamilyPolicy": {
      "description": "The dual-stack-ness requested or required by this Service, and is gated by the `IPv6DualStack` feature gate. If there is no value provided, then this field will be set to \"SingleStack\". Services can be one of:\n\n- \"SingleStack\" - a single IP family\n- \"PreferDualStack\" - two IP families on dual-stack configured clusters or a single IP family on single-stack clusters\n- \"RequireDualStack\" - two IP families on dual-stack configured clusters, otherwise fail\n\nThe `ipFamilies` and `clusterIPs` fields depend on the value of this field. This field will be wiped when updating a Service to type \"ExternalName\".",
      "enum": [
        "SingleStack",
        "PreferDualStack",
        "RequireDualStack"
      ],
      "type": "string"
    },
    "loadBalancerIP": {
      "description": "Only applies to `LoadBalancer` type of services. A load balancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the load balancer IP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.",
      "type": "string"
    },
    "loadBalancerSourceRanges": {
      "description": "Only applies to `LoadBalancer` type of services. If specified and supported by the platform, traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. Every entry must be a valid CIDR expression. This field will be ignored if the cloud-provider does not support the feature.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "ports": {
      "description": "The list of ports that are exposed by this service. Required when service is not headless service and it is not of type `ExternalName`. The combination of `protocol` and `nodePort` must be unique among all port records and the combination of `protocol` and `port` must be unique as well.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
      },
      "type": "array",
      "x-kubernetes-list-map-keys": [
        "port",
        "protocol"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "port",
      "x-kubernetes-patch-strategy": "merge"
    },
    "publishNotReadyAddresses": {
      "default": false,
      "description": "This indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's Headless Service to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered \"ready\" even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
      "type": "boolean"
    },
    "selector": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Service traffic will be routed to pods with label keys and values matching this selector. If empty or not present, the service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. Only applies to types '`ClusterIP`', '`NodePort`', and '`LoadBalancer`'. Ignored if `type` is '`ExternalName`'.",
      "type": "object"
    },
    "sessionAffinity": {
      "default": "None",
      "description": "Used to maintain session affinity. Setting this to '`ClientIP`' enables client IP based session affinity.",
      "enum": [
        "ClientIP",
        "None"
      ],
      "type": "string"
    },
    "sessionAffinityConfig": {
      "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
      "description": "The configurations of session affinity. It is required when `sessionAffinity` is set to '`ClientIP`' and it cannot be set when `sessionAffinity` is set to '`None`'."
    },
    "topologyKeys": {
      "description": "A preference-order list of topology keys which implementations of services should use to preferentially sort endpoints when accessing this Service. It cannot be used at the same time as `externalTrafficPolicy=Local`. Topology keys must be valid label keys and at most 16 keys may be specified. Endpoints are chosen based on the first topology key with available backends. If this field is specified and all entries have no backends that match the topology of the client, the service has no backends for that client and connections should fail. The special value \"*\" may be used to mean *any topology*. This catch-all value, if used, only makes sense as the last value in the list. If this is not specified or empty, no topology constraints will be applied. This field is alpha-level and is only honored by servers that enable the `ServiceTopology` feature.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "type": {
      "default": "ClusterIP",
      "description": "This field determines how the Service is exposed.\n\n- \"ClusterIP\" - allocates a cluster-internal IP address for load-balancing to endpoints. Endpoints are determined by the `selector` or if that is not specified, by manual construction of an Endpoints object or EndpointSlice ojbects. If `clusterIP` is \"None\", no virtual IP is allocated and the endpoints are published as a set of Endpoints rather than a virtual IP.\n- \"NodePort\" - builds on \"ClusterIP\" and allocates a port on every node which routes to the same endpoints as the `clusterIP`.\n- \"LoadBalancer\" - builds on \"NodePort\" and creates an external load-balancer (if supported in the current cloud) which routes to the same endpoints as the `clusterIP`.\n- \"ExternalName\" - aliases this Service to the specified `externalName`. Several other fields do not apply to \"ExternalName\" Services.\n",
      "enum": [
        "ClusterIP",
        "ExternalName",
        "LoadBalancer",
        "NodePort"
      ],
      "type": "string"
    }
  },
  "type": "object"
}
