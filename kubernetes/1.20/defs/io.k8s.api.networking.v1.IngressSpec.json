{
  "description": "IngressSpec describes the Ingress the user wishes to exist. Either `rules` or `defaultBackend` should be specified.",
  "properties": {
    "defaultBackend": {
      "$ref": "#/definitions/io.k8s.api.networking.v1.IngressBackend",
      "description": "A default backend that should handle requests that don't match any rule. If `defaultBackend` is not set, the handling of requests that do not match any of the `rules` will be up to the Ingress controller."
    },
    "ingressClassName": {
      "description": "The name of the `IngressClass` cluster resource. The name must be a valid DNS subdomain if specified. The associated `IngressClass` defines which controller will implement the resource. This replaces the deprecated `kubernetes.io/ingress.class` annotation. For backwards compatibility, when that annotation is set, it must be given precedence over this field and the `ingressClassName` cannot be set. Implementations of this API should ignore `Ingress`es without a class specified. An `IngressClass` resource may be marked as default, which can be used to set a default value for this field. For more information, refer to the `IngressClass` documentation.",
      "type": "string"
    },
    "rules": {
      "description": "A list of host rules used to configure the Ingress. If unspecified, or no rule matches, all traffic is sent to the default backend.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressRule"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "tls": {
      "description": "TLS configuration. Currently the Ingress only supports a single TLS port, 443. If multiple members of this list specify different hosts, they will be multiplexed on the same port according to the hostname specified through the SNI TLS extension, if the ingress controller fulfilling the ingress supports SNI.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.networking.v1.IngressTLS"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    }
  },
  "type": "object"
}
