{
  "description": "The detailed status of a Container.",
  "properties": {
    "allocatedResources": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
      },
      "description": "This is the compute resources allocated for this container by the node. Kubelet sets this value to `container[*].resources.requests` upon successful Pod admission and after successfully admitting desired Pod resize.",
      "type": "object"
    },
    "containerID": {
      "description": "Container's ID in the format `\"<type>://<container_id>\"`, where `<type>` is the container runtime identifier, returned from `Version` call of CRI API (for example, `\"containerd\"`).",
      "type": "string"
    },
    "image": {
      "description": "The name of the image the container is running. The container image may not match the `image` used in the Pod `spec`, as it may have been resolved by the runtime.",
      "type": "string"
    },
    "imageID": {
      "description": "ID of the container's image. The image ID may not match the image ID of the `image` used in the Pod `spec`, as it may have been resolved by the runtime.",
      "type": "string"
    },
    "lastState": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
      "description": "The last termination state of the container to help debug container crashes and restarts. This field is not populated if the container is still running and `restartCount` is 0."
    },
    "name": {
      "description": "A DNS_LABEL representing the unique name of the container. Each container in a Pod must have a unique name across all container types. Cannot be updated.",
      "type": "string"
    },
    "ready": {
      "description": "This specifies whether the container is currently passing its readiness check. The value will change as readiness probes keep executing. If no readiness probes are specified, this field defaults to true once the container is fully started (see `started` field).\n\nThe value is typically used to determine whether a container is ready to accept traffic.",
      "type": "boolean"
    },
    "resources": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
      "description": "This represents the compute resource requests and limits that have been successfully enacted on the running container after it has been started or has been successfully resized."
    },
    "restartCount": {
      "description": "This holds the number of times the container has been restarted. Kubelet makes an effort to always increment the value, but there are cases when the state may be lost due to node restarts and then the value may be reset to 0. The value is never negative.",
      "format": "int32",
      "type": "integer"
    },
    "started": {
      "description": "This indicates whether the container has finished its `postStart` lifecycle hook and passed its startup probe. Initialized as `false`, becomes `true` after `startupProbe` is considered successful. Resets to `false` when the container is restarted, or if kubelet loses state temporarily. In both cases, startup probes will run again. Is always true when no `startupProbe` is defined and container is running and has passed the `postStart` lifecycle hook. The null value must be treated the same as false.",
      "type": "boolean"
    },
    "state": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ContainerState",
      "description": "Details about the container's current condition."
    }
  },
  "required": [
    "containerID",
    "image",
    "imageID",
    "lastState",
    "name",
    "ready",
    "restartCount",
    "started",
    "state"
  ],
  "type": "object"
}
