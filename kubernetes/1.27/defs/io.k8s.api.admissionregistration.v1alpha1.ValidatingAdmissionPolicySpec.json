{
  "description": "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.",
  "properties": {
    "failurePolicy": {
      "default": "Fail",
      "description": "`failurePolicy` defines how to handle failures for the admission policy. Failures can occur from invalid or mis-configured policy definitions or bindings. A policy is invalid if its `spec.paramKind` refers to a non-existent `kind`. A binding is invalid if `spec.paramRef.name` refers to a non-existent resource. Allowed values are `Ignore` or `Fail`.",
      "enum": [
        "Fail",
        "Ignore"
      ],
      "type": "string"
    },
    "matchConstraints": {
      "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources",
      "description": "`matchConstraints` specifies what resources this policy is designed to validate. The admission policy cares about a request if it matches _all_ constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API, The ValidatingAdmissionPolicy cannot match the ValidatingAdmissionPolicyBinding. The `resourceRules` must be specified."
    },
    "paramKind": {
      "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamKind",
      "description": "`paramKind` specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If `paramKind` refers to a non-existent kind, this policy definition is mis-configured and the `failurePolicy` is applied. If `paramKind` is specified but `paramRef` is unset in the ValidatingAdmissionPolicyBinding, the params variable will be null."
    },
    "validations": {
      "description": "`validations` contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.Validation"
      },
      "minItems": 1,
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    }
  },
  "required": [
    "failurePolicy",
    "matchConstraints",
    "validations"
  ],
  "type": "object"
}
