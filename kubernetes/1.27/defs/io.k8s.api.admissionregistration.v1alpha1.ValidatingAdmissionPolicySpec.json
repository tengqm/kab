{
  "description": "ValidatingAdmissionPolicySpec is the specification of the desired behavior of the AdmissionPolicy.",
  "properties": {
    "auditAnnotations": {
      "description": "`auditAnnotations` contains CEL expressions which are used to produce audit annotations for the audit event of the API request. `validations` and `auditAnnotations` may not both be empty; a least one of `validations` or `auditAnnotations` is required. The keys in the items must be unique in the array.",
      "maxItems": 20,
      "items": {
        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.AuditAnnotation"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "failurePolicy": {
      "default": "Fail",
      "description": "`failurePolicy` defines how to handle failures for the admission policy. Failures can occur from CEL expression parse errors, type check errors, runtime errors and invalid or mis-configured policy definitions or bindings.\n\nA policy is invalid if `spec.paramKind` refers to a non-existent kind. A binding is invalid if `spec.paramRef.name` refers to a non-existent resource.\n\n`failurePolicy` does not define how validations that evaluate to false are handled.\n\nWhen `failurePolicy` is set to \"Fail\", ValidatingAdmissionPolicyBinding `validationActions` define how failures are enforced.",
      "enum": [
        "Fail",
        "Ignore"
      ],
      "type": "string"
    },
    "matchConditions": {
      "description": "`matchConditions` is a list of conditions that must be met for a request to be validated. Match conditions filter requests that have already been matched by the `rules`, `namespaceSelector`, and `objectSelector`. An empty list of `matchConditions` matches all requests.\n\nIf a parameter object is provided, it can be accessed via the `params` handle in the same manner as validation expressions.\n\nThe `name` of the match conditions must be unique across the list.\n\nThe exact matching logic is (in order):\n1. If ANY `matchCondition` evaluates to False, the policy is skipped.\n1. If ALL `matchConditions` evaluate to True, the policy is evaluated.\n1. If any `matchCondition` evaluates to an error (but none are False):\n   - If `failurePolicy=Fail`, reject the request;\n   - If `failurePolicy=Ignore`, the policy is skipped.\n\n",
      "maxItems": 64,
      "items": {
        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchCondition"
      },
      "type": "array",
      "x-kubernetes-list-map-keys": [
        "name"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "matchConstraints": {
      "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources",
      "description": "`matchConstraints` specifies what resources this policy is designed to validate. The admission policy cares about a request if it matches _all_ constraints. However, in order to prevent clusters from being put into an unstable state that cannot be recovered from via the API, The ValidatingAdmissionPolicy cannot match the ValidatingAdmissionPolicyBinding. The `resourceRules` must be specified."
    },
    "paramKind": {
      "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamKind",
      "description": "`paramKind` specifies the kind of resources used to parameterize this policy. If absent, there are no parameters for this policy and the param CEL variable will not be provided to validation expressions. If `paramKind` refers to a non-existent kind, this policy definition is mis-configured and the `failurePolicy` is applied. If `paramKind` is specified but `paramRef` is unset in the ValidatingAdmissionPolicyBinding, the params variable will be null."
    },
    "validations": {
      "description": "`validations` contain CEL expressions which is used to apply the validation. A minimum of one validation is required for a policy definition. `validations` and `auditAnnotations` may not both be empty; a least one of `validations` or `auditAnnotations` is required.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.Validation"
      },
      "minItems": 1,
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    }
  },
  "required": [
    "failurePolicy",
    "matchConstraints"
  ],
  "type": "object"
}
