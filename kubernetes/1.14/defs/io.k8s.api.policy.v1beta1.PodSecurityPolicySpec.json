{
  "description": "The policy to enforce.",
  "properties": {
    "allowPrivilegeEscalation": {
      "default": true,
      "description": "Flag indicating whether a Pod can request privilege escalation. This must be set to `true` if `defaultAllowPrivilegeEscalation` is set to `true`.",
      "type": "boolean"
    },
    "allowedCSIDrivers": {
      "description": "A whitelist of inline CSI drivers that must be explicitly set to be embedded within a Pod spec. An empty value means no CSI drivers can run inline within a Pod spec.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedCSIDriver"
      },
      "type": "array"
    },
    "allowedCapabilities": {
      "description": "A list of capabilities that can be requested to add to a container. Capabilities in this field may be added at the Pod author's discretion. You must not list a capability in both `allowedCapabilities` and `requiredDropCapabilities`. If \"`*`\" is in the list, then `requiredDropCapabilities` must be empty.",
      "items": {
        "minLength": 1,
        "type": "string"
      },
      "type": "array"
    },
    "allowedFlexVolumes": {
      "description": "A whitelist of allowed FlexVolumes. Empty or nil indicates that all FlexVolumes may be used. This parameter is effective only when the usage of the FlexVolumes is allowed in the `volumes` field.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedFlexVolume"
      },
      "type": "array"
    },
    "allowedHostPaths": {
      "description": "A white list of allowed host paths. Empty indicates that all host paths may be used.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.policy.v1beta1.AllowedHostPath"
      },
      "type": "array"
    },
    "allowedProcMountTypes": {
      "description": "A whitelist of allowed proc mount types. Empty or nil indicates that only the \"`Default`\" may be used. This requires the `ProcMountType` feature flag to be enabled.",
      "items": {
        "description": "The type of proc mount to use for containers. The '`Default`' value means to use the container runtime defaults for read-only paths and masked paths.",
        "enum": [
          "Default",
          "Unmasked"
        ],
        "minLength": 1,
        "type": "string"
      },
      "type": "array"
    },
    "allowedUnsafeSysctls": {
      "description": "A list of explicitly allowed unsafe sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"`*`\" in which case it is considered as a prefix of allowed sysctls. Single \"`*`\" means all unsafe sysctls are allowed. Kubelet has to whitelist all allowed unsafe sysctls explicitly to avoid rejection. This field cannot conflict with the value of `forbiddenSysctls`.",
      "items": {
        "description": "The name of sysctl must start with lower case character or digit and end with lower case character or digit. It can have dots ('`.`'), '`_`' and '`-`' in it.",
        "maxLength": 253,
        "minLength": 1,
        "pattern": "([a-z0-9]([-_a-z0-9]*[a-z0-9])?.)*[a-z0-9]([-_a-z0-9]*[a-z0-9])?",
        "type": "string"
      },
      "type": "array"
    },
    "defaultAddCapabilities": {
      "description": "The default set of capabilities that will be added to a container unless the Pod spec specifically drops the capability. You may not list a capability in both `defaultAddCapabilities` and `requiredDropCapabilities`. Capabilities added here are implicitly allowed, and need not be included in the `allowedCapabilities` list.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "defaultAllowPrivilegeEscalation": {
      "description": "The default setting for whether a process can gain more privileges than its parent process. If this is set to `true`, `allowPrivilegeEscalation` must be set to `true` as well.",
      "type": "boolean"
    },
    "forbiddenSysctls": {
      "description": "A list of explicitly forbidden sysctls, defaults to none. Each entry is either a plain sysctl name or ends in \"`*`\" in which case it is considered as a prefix of forbidden sysctls. Single \"`*`\" means all sysctls are forbidden. This field cannot conflict with `allowedUnsafeSysctls`.",
      "items": {
        "description": "The name of sysctl must start with lower case character or digit and end with lower case character or digit. It can have dots ('`.`'), '`_`' and '`-`' in it.",
        "maxLength": 253,
        "minLength": 1,
        "pattern": "([a-z0-9]([-_a-z0-9]*[a-z0-9])?.)*[a-z0-9]([-_a-z0-9]*[a-z0-9])?",
        "type": "string"
      },
      "type": "array"
    },
    "fsGroup": {
      "$ref": "#/definitions/io.k8s.api.policy.v1beta1.FSGroupStrategyOptions",
      "description": "The strategy that will dictate what `fsGroup` is used by the security context."
    },
    "hostIPC": {
      "description": "Whether the use of `hostIPC` in the Pod spec is allowed.",
      "type": "boolean"
    },
    "hostNetwork": {
      "description": "Whether the use of `hostNetwork` in the Pod spec is allowed.",
      "type": "boolean"
    },
    "hostPID": {
      "description": "Whether the use of `hostPID` in the Pod spec is allowed.",
      "type": "boolean"
    },
    "hostPorts": {
      "description": "Which host port ranges are allowed to be exposed.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.policy.v1beta1.HostPortRange"
      },
      "type": "array"
    },
    "privileged": {
      "description": "Whether a Pod can request to be run as privileged.",
      "type": "boolean"
    },
    "readOnlyRootFilesystem": {
      "description": "Whether kubelet will force containers to run with a read-only root file system. If the container specifically requests to run with a non-read only root file system the PSP should deny the Pod. If set to `false` the container may run with a read-only root file system if it wishes but it will not be forced to.",
      "type": "boolean"
    },
    "requiredDropCapabilities": {
      "description": "The capabilities to drop from a container. These are required to be dropped and cannot be added.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "runAsGroup": {
      "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsGroupStrategyOptions",
      "description": "The strategy that dictates the valid `runAsGroup` values that may be set. If this field is omitted, the Pod's `runAsGroup` can take any value. This field requires the `RunAsGroup` feature gate to be enabled."
    },
    "runAsUser": {
      "$ref": "#/definitions/io.k8s.api.policy.v1beta1.RunAsUserStrategyOptions",
      "description": "The strategy that dictates the valid `runAsUser` values that may be set."
    },
    "seLinux": {
      "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SELinuxStrategyOptions",
      "description": "The strategy that dictates the allowable labels that may be set."
    },
    "supplementalGroups": {
      "$ref": "#/definitions/io.k8s.api.policy.v1beta1.SupplementalGroupsStrategyOptions",
      "description": "The strategy that dictates what supplemental groups are used by the `securityContext`."
    },
    "volumes": {
      "description": "A white list of allowed volume plugins. Empty list indicates that no volumes may be used. To allow all volumes you may use \"`*`\".",
      "items": {
        "type": "string"
      },
      "type": "array"
    }
  },
  "required": [
    "fsGroup",
    "runAsUser",
    "seLinux",
    "supplementalGroups"
  ],
  "type": "object"
}
