{
  "description": "ValidatingAdmissionPolicyBindingSpec is the specification of the ValidatingAdmissionPolicyBinding.",
  "properties": {
    "matchResources": {
      "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.MatchResources",
      "description": "`matchResources` declares what resources match this binding and will be validated by it. Note that this is intersected with the policy's `matchConstraints`, so only requests that are matched by the policy can be selected by this. If this is unset, all resources matched by the policy are validated by this binding. When `resourceRules` is unset, it does not constrain resource matching. If a resource is matched by the other fields of this object, it will be validated. Note that this is differs from ValidatingAdmissionPolicy `matchConstraints`, where `resourceRules` are required."
    },
    "paramRef": {
      "$ref": "#/definitions/io.k8s.api.admissionregistration.v1alpha1.ParamRef",
      "description": "`paramRef` specifies the parameter resource used to configure the admission control policy. It should point to a resource of the type specified in `paramKind` of the bound ValidatingAdmissionPolicy. If the policy specifies a `paramKind` and the resource referred to by `paramRef` does not exist, this binding is considered mis-configured and the `failurePolicy` of the ValidatingAdmissionPolicy is applied."
    },
    "policyName": {
      "description": "`policyName` references a ValidatingAdmissionPolicy name which the ValidatingAdmissionPolicyBinding binds to. If the referenced resource does not exist, this binding is considered invalid and will be ignored. This string must be a valid DNS subdomain name.",
      "type": "string"
    },
    "validationActions": {
      "description": "This declares how validations of the referenced ValidatingAdmissionPolicy are enforced. If a validation evaluates to False, it is always enforced according to these actions.\n\nFailures defined by the ValidatingAdmissionPolicy's `failurePolicy` are enforced according to these actions only if the `failurePolicy` is set to `\"Fail\"`, otherwise the failures are ignored. This includes compilation errors, runtime errors and misconfigurations of the policy.\n\nThe `validationActions` is declared as a set of action values. Order does not matter. The `validationActions` may not contain duplicates of the same action.\n\nThe supported actions values are:\n\n- `\"Deny\"` specifies that a validation failure results in a denied request.\n- `\"Warn\"` specifies that a validation failure is reported to the request client in HTTP Warning headers, with a warning code of 299. Warnings can be sent both for allowed or denied admission responses.\n- `\"Audit\"` specifies that a validation failure is included in the published audit event for the request. The audit event will contain a `validation.policy.admission.k8s.io/validation_failure` audit annotation with a value containing the details of the validation failures, formatted as a JSON list of objects, each with the following fields:\n  - `message`: The validation failure message string\n  - `policy`: The resource name of the ValidatingAdmissionPolicy\n  - `binding`: The resource name of the ValidatingAdmissionPolicyBinding\n - `expressionIndex`: The index of the failed validations in the ValidatingAdmissionPolicy\n - `validationActions`: The enforcement actions enacted for the validation failure.\n\nExample audit annotation: `\"validation.policy.admission.k8s.io/validation_failure\": \"[{\"message\": \"Invalid value\", {\"policy\": \"policy.example.com\", {\"binding\": \"policybinding.example.com\", {\"expressionIndex\": \"1\", {\"validationActions\": [\"Audit\"]}]\"`\n\nClients should expect to handle additional values by ignoring any values not recognized.\n\n`\"Deny\"` and `\"Warn\"` may not be used together since this combination needlessly duplicates the validation failure both in the API response body and the HTTP warning headers.",
      "maxItems": 2,
      "minItems": 1,
      "items": {
        "enum": [
            "Audit",
            "Deny",
            "Warn"
        ],
        "type": "string"
      },
      "type": "array",
      "uniqueItems": true,
      "x-kubernetes-list-type": "set"
    }
  },
  "required": [
    "policyName",
    "validationActions"
  ],
  "type": "object"
}
