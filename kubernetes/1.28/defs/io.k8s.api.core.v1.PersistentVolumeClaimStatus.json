{
  "description": "The current status of a PersistentVolumeClaim.",
  "properties": {
    "accessModes": {
      "description": "The actual access modes of the volume backing the PVC.",
      "items": {
        "enum": [
          "ReadOnlyMany",
          "ReadWriteMany",
          "ReadWriteOnce"
        ],
        "type": "string"
      },
      "type": "array"
    },
    "allocatedResourceStatuses": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "This stores status of resource being resized for the given PVC. Key names follow standard Kubernetes label syntax. Valid values are:\n\n- Un-prefixed keys:\n  - `storage` - the capacity of the volume.\n- Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\"\n\nApart from above values - keys that are unprefixed or have \"kubernetes.io\" prefix are considered reserved and hence may not be used.\n\nThe status of a claim resource can be in any of following states:\n- `ControllerResizeInProgress`: State set when the resize controller starts resizing the volume in control-plane.\n- `ControllerResizeFailed`: State set when a resize has failed in the resize controller with a terminal error.\n- `NodeResizePending`: State set when the resize controller has finished resizing the volume but further resizing of the volume is needed on the node.\n- `NodeResizeInProgress`: State set when kubelet starts resizing the volume.\n- `NodeResizeFailed`: State set when resizing has failed in kubelet with a terminal error. Transient errors don't set `NodeResizeFailed`.\n\nWhen this field is not set, no resize operation is in progress for the given PVC.\n\nA controller that receives PVC update with previously unknown `resourceName` or claim resource status should ignore the update for the purpose it was designed. For example, a controller that only is responsible for resizing capacity of the volume, should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an Alpha field and requires enabling `RecoverVolumeExpansionFailure` feature.",
      "type": "object",
      "x-kubernetes-map-type": "granular"
    },
    "allocatedResources": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
      },
      "description": "This tracks the resources allocated to a PVC including its capacity. Key names follow standard Kubernetes label syntax. Valid values are either:\n\n- Un-prefixed keys:\n  - `storage`: the capacity of the volume.\n- Custom resources must use implementation-defined prefixed names such as \"example.com/my-custom-resource\".\n\nApart from above values, keys that are unprefixed or have kubernetes.io prefix are considered reserved and hence may not be used.\n\nCapacity reported here may be larger than the actual capacity when a volume expansion operation is requested.\nFor storage quota, the larger value from `allocatedResources` and `PVC.spec.resources` is used. If `allocatedResources` is not set, `PVC.spec.resources` alone is used for quota calculation.\n\nIf a volume expansion capacity request is lowered, `allocatedResources` is only lowered if there are no expansion operations in progress and if the actual volume capacity is equal or lower than the requested capacity.\n\nA controller that receives PVC update with previously unknown `resourceName` should ignore the update for the purpose it was designed. For example, a controller that only is responsible for resizing capacity of the volume should ignore PVC updates that change other valid resources associated with PVC.\n\nThis is an Alpha field and requires enabling the `RecoverVolumeExpansionFailure` feature.",
      "type": "object"
    },
    "capacity": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
      },
      "description": "The actual resource capacity of the underlying volume.",
      "type": "object"
    },
    "conditions": {
      "description": "Current condition of the PVC. If the underlying PV is being resized then the `condition` will be set to `\"ResizeStarted\"`.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.PersistentVolumeClaimCondition"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "type",
      "x-kubernetes-patch-strategy": "merge"
    },
    "phase": {
      "description": "The current phase of PersistentVolumeClaim.\n\n- `\"Bound\"`: The PVC is already bound;\n- `\"Pending\"`: The PVC is not yet bound;\n- `\"Lost\"`: The PVC has lost its underlying PersistentVolume. The claim was bound to a PersistentVolume and the volume does not exist any longer and all data on it was lost.",
      "enum": [
        "Bound",
        "Lost",
        "Pending"
      ],
      "type": "string"
    }
  },
  "type": "object"
}
