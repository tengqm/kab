#!/usr/bin/env python3

import copy
import json
import jsonref
import os
import shutil
import sys
import yaml

try:
    from yaml import CLoader as Loader, CDumper as Dumper
except ImportError:
    from yaml import Loader, Dumper

basedir = "."
filetype = "yaml"

# Hack the dumper for list indentation
class Dumper(yaml.Dumper):
    def increase_indent(self, flow=False, *args, **kwargs):
        return super().increase_indent(flow=flow, indentless=False)

# configures yaml for dumping multiline strings
def str_presenter(dumper, data):
    data = "\n".join([line.rstrip() for line in data.splitlines()])
    if data.count('\n') > 0:
        # Remove any trailing spaces, then put it back together again
        data = "\n".join([line.rstrip() for line in data.splitlines()])
        return dumper.represent_scalar('tag:yaml.org,2002:str', data, style='|')
    return dumper.represent_scalar('tag:yaml.org,2002:str', data)

yaml.add_representer(str, str_presenter)
yaml.representer.SafeRepresenter.add_representer(str, str_presenter)


def process_basic():
    global basedir

    fn = os.path.join(basedir, "basic", "basic." + filetype)
    with open(fn, "r") as f:
        if filetype == "json":
            data = json.load(f)
        else:
            data = yaml.load(f, Loader=Loader)

    return data


def process_definitions(data):
    """Gather definitions.

    Gather definitions from the /defs/ subdirectory with definition key as the
    file name.
    """
    global basedir

    defdir = os.path.join(basedir, "defs")
    files = sorted(os.listdir(defdir))
    defs = {}
    for fn in files:
        basename, ext = os.path.splitext(fn)
        fullname = os.path.join(defdir, fn)
        try:
            with open(fullname, "r") as f:
                if ext == "json":
                    defs[basename] = json.loads(f.read())
                else:
                    defs[basename] = yaml.load(f, Loader=Loader)
        except Exception as ex:
            print("\033[31mFailed file: %s, %s\033[0m" % (fullname, str(ex)))

    data["definitions"] = defs
    return


def validate_definition(needle, hack):
    """Validate if referenced definition can be found."""
    res = True
    for k, v in needle.items():
        if k != "$ref":
            if isinstance(v, list) and not isinstance(v, str):
                for item in v:
                    if isinstance(item, dict):
                        r = validate_definition(item, hack)
                        if not r:
                            res = False
            elif isinstance(v, dict):
                r = validate_definition(v, hack)
                if not r:
                    res = False
        elif v is None:
            print("\033[31m  value not found for %s in %s \033[0m" % (k, needle))
            res = False
        else:
            if "/parameters/" in v:
                pos = v.index("/parameters/")
                param = v[pos+12:]
                if param not in hack["parameters"]:
                    print("\033[31m  Missing parameter %s \033[0m" % param)
                    res = False
            elif "/definitions/" in v:
                pos = v.index("/definitions/")
                defn = v[pos+13:]
                if defn not in hack["definitions"]:
                    print("\033[31m  Missing definition %s \033[0m" % defn)
                    res = False
            elif isinstance(v, str):
                print("\033[31m  Invalid reference %s \033[0m" % v)
                res = False

    return res


def process_operations(data):
    """Gather operations.

    Gather operations from the /ops/ subdirectory.
    """
    global basedir

    opdir = os.path.join(basedir, "ops")
    files = sorted(os.listdir(opdir))
    paths = {}
    res = True
    for fn in files:
        op_id, ext = os.path.splitext(fn)
        fullname = os.path.join(opdir, fn)
        with open(fullname, "r") as f:
            if ext == "json": 
                opdata = json.loads(f.read())
            else:
                opdata = yaml.load(f, Loader=Loader)

        path = opdata.pop("path", None)
        verb = opdata.pop("verb", None)
        if not path or not verb:
            print("\033[31m  Failed reading op %s \033[0m" % op_id)
            res = False
            continue

        res1 = validate_definition(opdata, data)
        if not res1:
            print("\033[31m  Failed validating %s \033[0m" % op_id)
            res = False

        if path not in paths:
            paths[path] = {}
        if verb not in paths[path]:
            paths[path][verb] = opdata

    data["paths"] = paths
    return res


def process_security(data):
    """Gather security and securityDefinitions"""
    global basedir

    securitydir = os.path.join(basedir, "security")
    fullname = os.path.join(securitydir, "security." + filetype)
    with open(fullname, "r") as f:
        if filetype == 'json':
            data["security"] = json.loads(f.read())
        else:
            data["security"] = yaml.load(f, Loader=Loader)

    fullname = os.path.join(securitydir, "securityDefinitions." + filetype)
    with open(fullname, "r") as f:
        if filetype == "json":
            data["securityDefinitions"] = json.loads(f.read())
        else:
            data["securityDefinitions"] = yaml.load(f, Loader=Loader)


def process_parameters(data):
    """Gather parameters definitions"""
    global basedir

    fn = os.path.join(basedir, "parameters", "parameters." + filetype)
    with open(fn, "r") as f:
        if filetype == "json":
            data["parameters"] = json.loads(f.read())
        else:
            data["parameters"] = yaml.load(f, Loader=Loader)

def main():
    global basedir, filetype

    if len(sys.argv) < 2:
        print("Usage: compose <dir> [json|yaml]\n")
        sys.exit(-1)

    if not os.path.isdir(sys.argv[1]):
        print("The specified directory is invalid.\n")
        print("Usage: compose <dir> [json|yaml]\n")
        sys.exit(-1)

    if len(sys.argv) == 3:
        ftype = sys.argv[2].lower()
        if ftype not in ['json', 'yaml']:
            printf("The specified file type '%s' is invalid, must be 'json' "
                   "or 'yaml'\n", ftype);
            os.exit(-2)
        filetype = ftype

    basedir = sys.argv[1]

    data = process_basic()
    process_definitions(data)
    process_parameters(data)

    OK = False
    OK = process_operations(data)
    if not OK:
        sys.exit(-1)
    
    process_security(data)

    for k, v in data["definitions"].items():
        if not validate_definition(v, data):
            print("\033[31m  -- from definition %s \033[0m" % k)
            OK = False

    if not OK:
        sys.exit(-1)

    if filetype == "json":
        print(json.dumps(data, indent=2, sort_keys=True))
    else:
        print(yaml.dump(data, Dumper=Dumper, allow_unicode=True))

    sys.exit(0)


if __name__ == "__main__":
    main()
