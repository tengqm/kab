{
  "description": "The status of the config assigned by node.spec.configSource.",
  "properties": {
    "active": {
      "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
      "description": "The checkpointed config the node is actively using. This represents either the current version of the `assigned` config, or the current `lastKnownGood` config, depending on whether attempting to use the `assigned` config results in an `error`."
    },
    "assigned": {
      "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
      "description": "This reports the checkpointed config the node will try to use. When `node.spec.configSource` is updated, the node checkpoints the associated config payload to local disk, along with a record indicating intended config. The node refers to this record to choose its config checkpoint, and reports this record in `assigned`. The `assigned` only updates in the status after the record has been checkpointed to disk. When the Kubelet is restarted, it tries to make the `assigned` config the `active` config by loading and validating the checkpointed payload identified by `assigned`."
    },
    "error": {
      "description": "This describes any problems in reconciling the `spec.configSource` to the `active` config. Errors may occur, for example, attempting to checkpoint `spec.configSource` to the local `assigned` record, attempting to checkpoint the payload associated with `spec.configSource`, attempting to load or validate the `assigned` config, etc. Errors may occur at different points while syncing config. Earlier errors (e.g. download or checkpointing errors) will not result in a rollback to `lastKnownGood`, and may resolve across Kubelet retries. Later errors (e.g. loading or validating a checkpointed config) will result in a rollback to `lastKnownGood`. In the latter case, it is usually possible to resolve the error by fixing the config assigned in `spec.configSource`. You can find additional information for debugging by searching the error message in the Kubelet log. `error` is a human-readable description of the error state; machines can check whether or not `error` is empty, but should not rely on the stability of the `error` text across Kubelet versions.",
      "type": "string"
    },
    "lastKnownGood": {
      "$ref": "#/definitions/io.k8s.api.core.v1.NodeConfigSource",
      "description": "This reports the checkpointed config the node will fall back to when it encounters an error attempting to use the `assigned` config. The `assigned` config becomes the `lastKnownGood` config when the node determines that the `assigned` config is stable and correct. This is currently implemented as a 10-minute soak period starting when the local record of `assigned` config is updated. If the `assigned` config is `active` at the end of this period, it becomes the `lastKnownGood`. Note that if `spec.configSource` is reset to nil (use local defaults), the `lastKnownGood` is also immediately reset to nil, because the local default config is always assumed good. You should not make assumptions about the node's method of determining config stability and correctness, as this may change or become configurable in the future."
    }
  },
  "type": "object"
}
