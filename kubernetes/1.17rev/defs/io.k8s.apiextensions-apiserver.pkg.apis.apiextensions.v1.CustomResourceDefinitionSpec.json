{
  "description": "This describes how a user wants their resource to appear",
  "properties": {
    "conversion": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceConversion",
      "description": "The conversion settings for the CRD."
    },
    "group": {
      "description": "The API group of the defined custom resource. The custom resources are served under '`/apis/<group>/...`'. Must match the name of the CustomResourceDefinition (in the form '`<names.plural>.<group>`'). The value must be a valid DNS subdomain and it must contain at least one dot.",
      "minLength": 1,
      "type": "string"
    },
    "names": {
      "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionNames",
      "description": "The resource and kind names for the custom resource."
    },
    "preserveUnknownFields": {
      "description": "This flag indicates that object fields which are not specified in the OpenAPI schema should be preserved when persisting to storage. `apiVersion`, `kind`, `metadata` and known fields inside `metadata` are always preserved. This field is deprecated in favor of setting `x-preserve-unknown-fields` to true in `spec.versions[*].schema.openAPIV3Schema`.",
      "type": "boolean"
    },
    "scope": {
      "description": "This indicates whether the defined custom resource is cluster- or namespace-scoped.",
      "enum": [
        "Cluster",
        "Namespaced"
      ],
      "type": "string"
    },
    "versions": {
      "description": "The list of all API versions of the defined custom resource. Version names are used to compute the order in which served versions are listed in API discovery. If the version string is 'kube-like', it will sort above non 'kube-like' version strings, which are ordered lexicographically. A 'Kube-like' version starts with a '`v`', then are followed by a number (the major version), then optionally the string '`alpha`' or '`beta`' and another number (the minor version). These are sorted first by `GA > beta > alpha` (where `GA` is a version with no suffix such as '`beta`' or '`alpha`'), and then by comparing major version, then minor version. An example sorted list of versions: '`v10, v2, v1, v11beta2, v10beta3, v3beta1, v12alpha1, v11alpha2, foo1, foo10`'.",
      "items": {
        "$ref": "#/definitions/io.k8s.apiextensions-apiserver.pkg.apis.apiextensions.v1.CustomResourceDefinitionVersion"
      },
      "minItems": 1,
      "type": "array"
    }
  },
  "required": [
    "group",
    "names",
    "scope",
    "versions"
  ],
  "type": "object"
}
