{
  "description": "The description of a pod.",
  "properties": {
    "activeDeadlineSeconds": {
      "description": "Duration in seconds the pod may be active on the node relative to startTime before the system will actively try to mark it failed and kill associated containers. Value must be a positive 32-bit integer. This is not supported in `Deployment`/`ReplicaSet`/`DaemonSet`/`StatefulSet`.",
      "format": "int64",
      "minimum": 1,
      "type": "integer"
    },
    "affinity": {
      "$ref": "#/definitions/io.k8s.api.core.v1.Affinity",
      "description": "If specified, the pod's scheduling constraints"
    },
    "automountServiceAccountToken": {
      "description": "Flag indicating whether a service account token should be automatically mounted.",
      "type": "boolean"
    },
    "containers": {
      "description": "List of containers belonging to the pod. Containers cannot currently be added or removed. There must be at least one container in a Pod. Cannot be updated.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
      },
      "minItems": 1,
      "type": "array",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "dnsConfig": {
      "$ref": "#/definitions/io.k8s.api.core.v1.PodDNSConfig",
      "description": "Specifies the DNS parameters of a pod. Parameters specified here will be merged to the generated DNS configuration based on dnsPolicy. If `dnsPolicy` is set to '`None`', this must be provided."
    },
    "dnsPolicy": {
      "default": "ClusterFirst",
      "description": "Set DNS policy for the pod. DNS parameters given in dnsConfig will be merged with the policy selected with `dnsPolicy`. To have DNS options set along with hostNetwork, you have to specify DNS policy explicitly to '`ClusterFirstWithHostNet`'. If `dnsPolicy` is set to '`None`', `dnsConfig` must be specified.",
      "enum": [
        "ClusterFirst",
        "ClusterFirstWithHostNet",
        "Default",
        "None"
      ],
      "type": "string"
    },
    "enableServiceLinks": {
      "default": true,
      "description": "This flag indicates whether information about services should be injected into pod's environment variables, matching the syntax of Docker links.",
      "type": "boolean"
    },
    "hostAliases": {
      "description": "A list of hosts and IPs that will be injected into the pod's hosts file. This is only valid for non-hostNetwork pods.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.HostAlias"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "ip",
      "x-kubernetes-patch-strategy": "merge"
    },
    "hostIPC": {
      "default": false,
      "description": "Use the host's ipc namespace.",
      "type": "boolean"
    },
    "hostNetwork": {
      "default": false,
      "description": "Host networking requested for this pod. Use the host's network namespace. If this option is set, the ports that will be used must be specified.",
      "type": "boolean"
    },
    "hostPID": {
      "default": false,
      "description": "Use the host's pid namespace.",
      "type": "boolean"
    },
    "hostname": {
      "description": "The hostname of the Pod. The value must be a valid DNS label. If not specified, the pod's hostname will be set to a system-defined value.",
      "type": "string"
    },
    "imagePullSecrets": {
      "description": "A list of references to secrets in the same namespace for pulling container images used by this Pod. If specified, these secrets will be passed to individual puller implementations. For example, in the case of docker, only DockerConfig type secrets are honored.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.LocalObjectReference"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "initContainers": {
      "description": "List of initialization containers belonging to the pod. Init containers are executed in order prior to containers being started. If any init container fails, the pod is considered to have failed and is handled according to its `restartPolicy`. Init containers may not have Lifecycle actions, Readiness probes, Liveness probes or Startup probes. The resource requirements of an init container are taken into account during scheduling by finding the highest request/limit for each resource type, and then using the max of of that value or the sum of the normal containers. Limits are applied to init containers in a similar fashion. The name of an init container cannot conflict with other init containers, ephemeral containers or regular containers. Init containers cannot currently be added or removed. Cannot be updated.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.Container"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge"
    },
    "nodeName": {
      "description": "If it is non-empty, the scheduler simply schedules this pod onto that node, assuming that it fits resource requirements. The value must be a valid DNS subdomain name.",
      "type": "string"
    },
    "nodeSelector": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "A selector which must match a node's labels for the pod to be scheduled on that node.",
      "type": "object"
    },
    "overhead": {
      "additionalProperties": {
        "$ref": "#/definitions/io.k8s.apimachinery.pkg.api.resource.Quantity"
      },
      "description": "The resource overhead associated with running a `Pod` for a given `RuntimeClass`. This field will be auto-populated at admission time by the `RuntimeClass` admission controller. If the `RuntimeClass` admission controller is enabled, `overhead` must not be set in Pod create requests. The `RuntimeClass` admission controller will reject Pod create requests which have the `overhead` already set. If `RuntimeClass` is configured and selected in the Pod spec, `overhead` will be set to the value defined in the corresponding `RuntimeClass`, otherwise it will remain unset and treated as zero. This field is alpha-level as of Kubernetes v1.16, and is only honored by servers that enable the `PodOverhead` feature.",
      "type": "object"
    },
    "preemptionPolicy": {
      "default": "PreemptLowerPriority",
      "description": "The policy for preempting Pods with lower priority. This field is alpha-level and is only honored by servers that enable the `NonPreemptingPriority` feature.",
      "enum": [
        "Never",
        "PreemptLowerPriority"
      ],
      "type": "string"
    },
    "priority": {
      "description": "The priority value. Various system components use this field to find the priority of the pod. When the 'Priority' Admission Controller is enabled, it prevents users from setting this field. The admission controller populates this field from PriorityClassName. The higher the value, the higher the priority.",
      "format": "int32",
      "type": "integer"
    },
    "priorityClassName": {
      "description": "The pod's priority class. The value must be a valid DNS subdomain. The value '`system-node-critical`' and '`system-cluster-critical`' are two special keywords which indicate the highest priorities with the former being the highest priority. Any other values must match the name of a PriorityClass object. If not specified, the pod priority will be default or zero if there is no default.",
      "type": "string"
    },
    "readinessGates": {
      "description": "If specified, all readiness gates will be evaluated for pod readiness. A pod is ready when all its containers are ready AND all conditions specified in the readiness gates have status equal to 'True'.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.PodReadinessGate"
      },
      "type": "array"
    },
    "restartPolicy": {
      "default": "Always",
      "description": "Restart policy for all containers within the pod. For Deployment, DaemonSet, ReplicaSet and StatefulSet, the `restartPolicy` must be '`Always`'. For Job, the `restartPolicy` must be '`OnFailure`' or '`Never`'.",
      "enum": [
        "Always",
        "Never",
        "OnFailure"
      ],
      "type": "string"
    },
    "runtimeClassName": {
      "description": "This refers to a RuntimeClass object in the 'node.k8s.io' group, which should be used to run this pod.  If no RuntimeClass resource matches the named class, the pod will not be run. If unset or empty, the 'legacy' RuntimeClass will be used, which is an implicit class with an empty definition that uses the default runtime handler. The value must be a valid DNS subdomain. This is a beta feature as of Kubernetes v1.14.",
      "type": "string"
    },
    "schedulerName": {
      "description": "If specified, the pod will be dispatched by specified scheduler. If not specified, the pod will be dispatched by default scheduler.",
      "type": "string"
    },
    "securityContext": {
      "$ref": "#/definitions/io.k8s.api.core.v1.PodSecurityContext",
      "description": "SecurityContext holds pod-level security attributes and common container settings. Optional: Defaults to empty.  See type description for default values of each field."
    },
    "serviceAccountName": {
      "description": "The name of the ServiceAccount to use to run this pod. The value must be a valid DNS subdomain name.",
      "type": "string"
    },
    "shareProcessNamespace": {
      "default": false,
      "description": "Share a single process namespace between all of the containers in a pod. When this is set containers will be able to view and signal processes from other containers in the same pod, and the first process in each container will not be assigned PID 1. `hostPID` and `shareProcessNamespace` cannot both be set.",
      "type": "boolean"
    },
    "subdomain": {
      "description": "If specified, the value must be a valid DNS label. The fully qualified Pod hostname will be `<hostname>.<subdomain>.<pod namespace>.svc.<cluster domain>`. If not specified, the pod will not have a domain name at all.",
      "type": "string"
    },
    "terminationGracePeriodSeconds": {
      "default": 30,
      "description": "Optional duration in seconds the pod needs to terminate gracefully. May be decreased in delete request. Value must be non-negative integer. The value zero indicates delete immediately. If this value is nil, the default grace period will be used instead. The grace period is the duration in seconds after the processes running in the pod are sent a termination signal and the time when the processes are forcibly halted with a kill signal. Set this value longer than the expected cleanup time for your process.",
      "format": "int64",
      "type": "integer"
    },
    "tolerations": {
      "description": "The pod's tolerations.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.Toleration"
      },
      "type": "array"
    },
    "topologySpreadConstraints": {
      "description": "This describes how a group of Pods are to spread across topology domains. Scheduler will schedule Pods in a way which abides by the constraints. This field is only honored by clusters that enables the `EvenPodsSpread` feature. All items in the list are AND'ed.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.TopologySpreadConstraint"
      },
      "type": "array",
      "x-kubernetes-list-map-keys": [
        "topologyKey",
        "whenUnsatisfiable"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "topologyKey",
      "x-kubernetes-patch-strategy": "merge"
    },
    "volumes": {
      "description": "List of volumes that can be mounted by containers belonging to the pod.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.Volume"
      },
      "type": "array",
      "x-kubernetes-patch-merge-key": "name",
      "x-kubernetes-patch-strategy": "merge,retainKeys"
    }
  },
  "required": [
    "containers"
  ],
  "type": "object"
}
