{
  "description": "How to spread matching Pods among the given topology.",
  "properties": {
    "labelSelector": {
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
      "description": "Label selector used to find matching Pods. Pods that match this label selector are counted to determine the number of Pods in their corresponding topology domain."
    },
    "maxSkew": {
      "default": 1,
      "description": "The degree to which Pods may be unevenly distributed. When `whenUnsatisfiable=\"DoNotSchedule\"`, It's the maximum permitted difference between the number of matching Pods in the target topology and the global minimum. For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as '1/1/0'.\n\n```\n+-------+--------+--------+\n| zone1 | zone2 | zone3 |\n+------+------+------+\n|   P   |   P   |       |\n+-------+--------+--------+\n```\n\n- If `maxSkew` is 1, incoming Pod can only be scheduled to zone3 to become 1/1/1; scheduling it onto zone1 would make the actual skew (2-0) on zone1(zone2) violate `maxSkew(1)`.\n- If `maxSkew` is 2, incoming Pod can be scheduled onto any zone.\n\nWhen `whenUnsatisfiable=\"ScheduleAnyway\"`, it is used to give higher precedence to topologies that satisfy it.",
      "format": "int32",
      "minimum": 1,
      "type": "integer"
    },
    "topologyKey": {
      "description": "The key of node labels. Nodes that have a label with this key and identical values are considered to be in the same topology. We consider each `(key, value)` as a bucket, and try to put balanced number of Pods into each bucket.",
      "type": "string"
    },
    "whenUnsatisfiable": {
      "default": "DoNotSchedule",
      "description": "This indicates how to deal with a Pod if it doesn't satisfy the spread constraint.\n\n- `\"DoNotSchedule\"` (default) tells the scheduler not to schedule it.\n- `\"ScheduleAnyway\"` tells the scheduler to schedule the Pod in any location, but giving higher precedence to topologies that would help reduce the skew.\n\nA constraint is considered \"Unsatisfiable\" for an incoming Pod if and only if every possible node assigment for that Pod would violate `maxSkew` on some topology. For example, in a 3-zone cluster, `maxSkew` is set to 1, and Pods with the same `labelSelector` spread as 3/1/1:\n\n```\n+-------+--------+--------+\n| zone1 | zone2 | zone3 |\n| P P P |   P   |   P   |\n+-------+--------+--------+\n```\n\n If `whenUnsatisfiable` is set to `\"DoNotSchedule\"`, incoming Pod can only be scheduled to zone2(zone3) to become 3/2/1(3/1/2) as actualSkew(2-1) on zone2(zone3) satisfies maxSkew(1). In other words, the cluster can still be imbalanced, but scheduler won't make it **more** imbalanced.\n\nPossible enum values:\n\n- `\"DoNotSchedule\"` instructs the scheduler not to schedule the Pod when constraints are not satisfied.\n- `\"ScheduleAnyway\"` instructs the scheduler to schedule the Pod even if constraints are not satisfied.",
      "enum": [
        "DoNotSchedule",
        "ScheduleAnyway"
      ],
      "type": "string"
    }
  },
  "required": [
    "maxSkew",
    "topologyKey",
    "whenUnsatisfiable"
  ],
  "type": "object"
}
