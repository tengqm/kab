{
  "description": "The common attributes and the provider-specific attributes of storage devices",
  "properties": {
    "accessModes": {
      "description": "The desired access modes of the volume",
      "items": {
        "enum": [
          "ReadOnlyMany",
          "ReadWriteMany",
          "ReadWriteOnce"
        ],
        "type": "string"
      },
      "minItems": 1,
      "type": "array"
    },
    "dataSource": {
      "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
      "description": "This field can be used to specify either:\n\n- An existing `VolumeSnapshot` object (`\"snapshot.storage.k8s.io/VolumeSnapshot\"` - beta)\n- An existing PVC (`PersistentVolumeClaim`): If the provisioner or an external controller can support the specified data source, it will create a new volume based on the contents of the specified data source. When the `AnyVolumeDataSource` feature gate is enabled, the `dataSource` contents will be copied to `dataSourceRef`, and `dataSourceRef` contents will be copied to `dataSource` when `dataSourceRef.namespace` is not specified. If the namespace is specified, then `dataSourceRef` will not be copied to `dataSource`."
    },
    "dataSourceRef": {
      "$ref": "#/definitions/io.k8s.api.core.v1.TypedLocalObjectReference",
      "description": "Specifies the object from which to populate the volume with data, if a non-empty volume is desired. This may be any object from a non-empty API group (non core object) or a PersistentVolumeClaim object. When this field is specified, volume binding will only succeed if the type of the specified object matches some installed volume populator or dynamic provisioner. This field will replace the functionality of the `dataSource` field and as such if both fields are non-empty, they must have the same value. For backwards compatibility, when namespace isn't specified in `dataSourceRef`, both fields (`dataSource` and `dataSourceRef`) will be set to the same value automatically if one of them is empty and the other is non-empty. When namespace is specified in `dataSourceRef`, `dataSource` isn't set to the same value and must be empty. There are three important differences between `dataSource` and `dataSourceRef`:\n\n* While `dataSource` only allows two specific types of objects, `dataSourceRef` allows any non-core object, as well as PersistentVolumeClaim objects.\n* While `dataSource` ignores disallowed values (dropping them), `dataSourceRef` preserves all values, and generates an error if a disallowed value is specified.\n* While `dataSource` only allows local objects, `dataSourceRef` allows objects in any namespaces.\n\n(Beta) Using this field requires the `AnyVolumeDataSource` feature gate to be enabled. (Alpha) Using the namespace field of `dataSourceRef` requires the `CrossNamespaceVolumeDataSource` feature gate to be enabled."
    },
    "resources": {
      "$ref": "#/definitions/io.k8s.api.core.v1.ResourceRequirements",
      "description": "The minimum resources the volume should have. The `requests.storage` must be specified as a positive quantity value. If the `RecoverVolumeExpansionFailure` feature is enabled users are allowed to specify resource requirements that are lower than previous value but must still be higher than capacity recorded in the status field of the claim."
    },
    "selector": {
      "$ref": "#/definitions/io.k8s.apimachinery.pkg.apis.meta.v1.LabelSelector",
      "description": "A label query over volumes to be considered for binding."
    },
    "storageClassName": {
      "description": "Name of the StorageClass required by the claim. The name must be a valid DNS subdomain, if specified.",
      "type": "string"
    },
    "volumeMode": {
      "default": "Filesystem",
      "description": "Type of volume required by the claim.",
      "enum": [
        "Block",
        "Filesystem"
      ],
      "type": "string"
    },
    "volumeName": {
      "description": "The binding reference to the PersistentVolume backing this claim.",
      "type": "string"
    }
  },
  "required": [
    "accessModes",
    "resources"
  ],
  "type": "object"
}
