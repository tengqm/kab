{
  "description": "The specification of a Service.",
  "properties": {
    "allocateLoadBalancerNodePorts": {
      "default": true,
      "description": "This defines if node ports will be automatically allocated for services with type `LoadBalancer`. It may be set to `false` if the cluster load-balancer does not rely on node ports. If the caller requests specific node ports (by specifying a value), those requests will be respected, regardless of this field. This field may only be set for Services with type `LoadBalancer` and will be cleared if the type is changed to any other type.",
      "type": "boolean"
    },
    "clusterIP": {
      "description": "The IP address of the Service. It is usually assigned randomly by the system. If an address is manually specified, is in-range (as per system configuration), and is not in use, it will be allocated to the Service; otherwise creation of the Service will fail.\n\nThis field may not be changed through updates unless the `type` field is also being changed to `\"ExternalName\"` (which requires this field to be blank) or the `type` field is being changed from `\"ExternalName\"` (in which case this field may optionally be specified, as describe above).\n\nValid values are `\"None\"`, empty string (`\"\"`), or a valid IP address. Setting this to `\"None\"` makes a *headless service* (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. Only applies to types `\"ClusterIP\"`, `\"NodePort\"`, and `\"LoadBalancer\"`. This field cannot be set to `\"None\"` if Service type is `\"NodePort\"` or `\"LoadBalancer\"`. If this field is specified when creating a Service of type `\"ExternalName\"`, the Service creation will fail. This field will be wiped when updating a Service to type `\"ExternalName\"`.",
      "type": "string"
    },
    "clusterIPs": {
      "description": "A list of IP addresses assigned to this Service. The values are usually assigned randomly. If an address is manually specified, is in-range (as per system configuration), and is not in use, it will be allocated to the Service; otherwise the Service creation will fail. This field may not be changed through updates unless the `type` field is also being changed to `\"ExternalName\"` (which requires this field to be empty) or the `type` field is being changed from `\"ExternalName\"` (in which case this field may optionally be specified, as describe above).\n\nValid values are `\"None\"`, empty string (`\"\"`), or a valid IP address. Setting this to `[\"None\"]` makes a *headless service* (no virtual IP), which is useful when direct endpoint connections are preferred and proxying is not required. When `\"None\"` is in the list, there cannot be other items in the list. Only applies to types `\"ClusterIP\"`, `\"NodePort\"`, and `\"LoadBalancer\"`. If this field is specified when creating a Service of type `\"ExternalName\"`, the Service creation will fail. This field will be wiped when updating a Service to type `\"ExternalName\"`. If this field is not specified, it will be initialized from the `clusterIP` field. If this field is specified, clients must ensure that `clusterIPs[0]` and `clusterIP` have the same value.\n\nThis field may hold a maximum of two entries (dual-stack IPs, in either order). These IPs must correspond to the values of the `ipFamilies` field. Both `clusterIPs` and `ipFamilies` are governed by the `ipFamilyPolicy` field.",
      "items": {
        "type": "string"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "externalIPs": {
      "description": "A list of IP addresses for which nodes in the cluster will also accept traffic for this service. These IPs are not managed by Kubernetes. The user is responsible for ensuring that traffic arrives at a node with this IP. A common example is external load-balancers that are not part of the Kubernetes system. The IP address provided cannot be `\"0.0.0.0\"` or loopback addresses (`\"127.0.0.0/8\"`) or link-local addresses (`\"169.254.0.0/16\"`) or link-local multicast addresses (`\"244.0.0.0/24\"`).",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "externalName": {
      "description": "The external reference that discovery mechanisms will return as an alias for this Service (e.g. a DNS CNAME record). No proxying will be involved. Must be a lowercase [RFC-1123 hostname](https://tools.ietf.org/html/rfc1123) and requires `type` to be `\"ExternalName\"`. Having a trailing dot is acceptable.",
      "type": "string"
    },
    "externalTrafficPolicy": {
      "default": "Cluster",
      "description": "externalTrafficPolicy describes how nodes distribute service traffic they receive on one of the Service's \"externally-facing\" addresses (NodePorts, ExternalIPs, and LoadBalancer IPs). If set to \"Local\", the proxy will configure the Service in a way that assumes that external load balancers will take care of balancing the service traffic between nodes, and so each node will deliver traffic only to the node-local endpoints of the Service, without masquerading the client source IP. (Traffic mistakenly sent to a node with no endpoints will be dropped.) The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features). Note that traffic sent to an external IP or LoadBalancer IP from within the cluster will always get \"Cluster\" semantics, but clients sending to a NodePort from within the cluster may need to take traffic policy into account when picking a node.\n",
      "enum": [
        "Cluster",
        "Local"
      ],
      "type": "string"
    },
    "healthCheckNodePort": {
      "description": "The health-check node port for the Service. This only applies when `type` is set to `\"LoadBalancer\"` and `externalTrafficPolicy` is set to `\"Local\"`. If a value is specified, is in-range, and is not in use, it will be used. If not specified, a value will be automatically allocated. External systems (e.g. load-balancers) can use this port to determine if a given node holds endpoints for this Service or not. If this field is specified when creating a Service which does not need it, the Service creation will fail. This field will be wiped when updating a Service to no longer need it (e.g. changing `type`). This field cannot be updated once set.",
      "format": "int32",
      "minimum": 0,
      "type": "integer"
    },
    "internalTrafficPolicy": {
      "default": "Cluster",
      "description": "This describes how nodes distribute service traffic they receive on the ClusterIP. If set to \"Local\", the proxy will assume that pods only want to talk to endpoints of the service on the same node as the pod, dropping the traffic if there are no local endpoints. The default value, \"Cluster\", uses the standard behavior of routing to all endpoints evenly (possibly modified by topology and other features).",
      "enum": [
          "Cluster",
          "Local"
      ],
      "type": "string"
    },
    "ipFamilies": {
      "description": "A list of IP families assigned to this Service. This field is usually assigned automatically based on the cluster configuration and the `ipFamilyPolicy` field. If this field is specified manually, the requested family is available in the cluster, and `ipFamilyPolicy` allows it, it will be used; otherwise the creation of the Service will fail.\n\nThis field is conditionally mutable: it allows for adding or removing a secondary IP family, but it does not allow changing the primary IP family of the Service. This field only applies to Services of types `\"ClusterIP\"`, `\"NodePort\"`, and `\"LoadBalancer\"`, and does apply to *headless Services* or `\"ExternalName\"` Services. This field will be wiped when updating the Service type to `\"ExternalName\"`.\n\nThis field may hold a maximum of two entries (dual-stack families, in either order). These families must correspond to the values of the `clusterIPs` field, if specified. Both `clusterIPs` and `ipFamilies` are governed by the `ipFamilyPolicy` field.",
      "items": {
        "enum": [
          "IPV4",
          "IPv6"
        ],
        "minLength": 1,
        "type": "string"
      },
      "type": "array",
      "x-kubernetes-list-type": "atomic"
    },
    "ipFamilyPolicy": {
      "description": "The dual-stack-ness requested or required by this Service. If there is no value provided, then this field will be set to `\"SingleStack\"`. The valid value can be one of:\n\n- `\"SingleStack\"`: a single IP family\n- `\"PreferDualStack\"`: two IP families on dual-stack configured clusters or a single IP family on single-stack clusters\n- `\"RequireDualStack\"`: two IP families on dual-stack configured clusters, otherwise fail\n\nThe `ipFamilies` and `clusterIPs` fields depend on the value of this field. This field cannot be specified for `\"ExternalName\"` Services, and it will be wiped when updating the Service type to `\"ExternalName\"`.",
      "enum": [
        "PreferDualStack",
        "RequireDualStack",
        "SingleStack"
      ],
      "type": "string"
    },
    "loadBalancerClass": {
      "description": "The class of the load balancer implementation this Service belongs to. If specified, the value of this field must be a label-style identifier, with an optional prefix, e.g. \"internal-vip\" or \"example.com/internal-vip\". Unprefixed names are reserved for end-users. This field can only be set when the Service type is `\"LoadBalancer\"`. If not set, the default load balancer implementation is used, today this is typically done through the cloud provider integration, but should apply for any default implementation. If set, it is assumed that a load balancer implementation is watching for Services with a matching class. Any default load balancer implementation (e.g. cloud providers) should ignore Services that set this field. This field can only be set when creating or updating a Service to type `\"LoadBalancer\"`. Once set, it can not be changed. This field will be wiped when a Service is updated to a non `\"LoadBalancer\"` type.",
      "type": "string"
    },
    "loadBalancerIP": {
      "description": "Only applies to Service type: \"`LoadBalancer`\". This feature depends on whether the underlying cloud-provider supports specifying the `loadBalancerIP` when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature. DEPRECATED: This field was under-specified and its meaning varies across implementations, and it cannot support dual-stack. As of Kubernetes v1.24, users are encouraged to use implementation-specific annotations when available. This field may be removed in a future API version.",
      "type": "string"
    },
    "loadBalancerSourceRanges": {
      "description": "If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.",
      "items": {
        "type": "string"
      },
      "type": "array"
    },
    "ports": {
      "description": "The list of ports that are exposed by this Service. Required when the Service is not a *headless service* and it is not of type `\"ExternalName\"`. The tuple of (`protocol`, `nodePort`) must be unique among all port records and the tuple of (`protocol`, `port`) must be unique as well.",
      "items": {
        "$ref": "#/definitions/io.k8s.api.core.v1.ServicePort"
      },
      "type": "array",
      "x-kubernetes-list-map-keys": [
        "port",
        "protocol"
      ],
      "x-kubernetes-list-type": "map",
      "x-kubernetes-patch-merge-key": "port",
      "x-kubernetes-patch-strategy": "merge"
    },
    "publishNotReadyAddresses": {
      "default": false,
      "description": "This indicates that any agent which deals with endpoints for this Service should disregard any indications of ready/not-ready. The primary use case for setting this field is for a StatefulSet's *headless Service* to propagate SRV DNS records for its Pods for the purpose of peer discovery. The Kubernetes controllers that generate Endpoints and EndpointSlice resources for Services interpret this to mean that all endpoints are considered **ready** even if the Pods themselves are not. Agents which consume only Kubernetes generated endpoints through the Endpoints or EndpointSlice resources can safely assume this behavior.",
      "type": "boolean"
    },
    "selector": {
      "additionalProperties": {
        "type": "string"
      },
      "description": "Service traffic will be routed to Pods with label keys and values matching this selector. If empty or not present, the Service is assumed to have an external process managing its endpoints, which Kubernetes will not modify. This field is ignored if Service `type` is `\"ExternalName\"`.",
      "type": "object",
      "x-kubernetes-map-type": "atomic"
    },
    "sessionAffinity": {
      "default": "None",
      "description": "Used to maintain session affinity. Setting this to `\"ClientIP\"` enables client IP based session affinity.",
      "enum": [
        "ClientIP",
        "None"
      ],
      "minLength": 1,
      "type": "string"
    },
    "sessionAffinityConfig": {
      "$ref": "#/definitions/io.k8s.api.core.v1.SessionAffinityConfig",
      "description": "The configurations of session affinity. It is required when `sessionAffinity` is set to `\"ClientIP\"` and it cannot be set when `sessionAffinity` is set to `\"None\"`."
    },
    "type": {
      "default": "ClusterIP",
      "description": "This field determines how the Service is exposed.\n\n- `\"ClusterIP\"`: allocates a cluster internal IP address for load-balancing to endpoints. Endpoints are determined by the `selector` or if that is not specified, by manual construction of an Endpoints object or EndpointSlice ojbects. If `clusterIP` is `\"None\"`, no virtual IP is allocated and the endpoints are published as a set of Endpoints rather than a virtual IP.\n- `\"NodePort\"`: builds on `\"ClusterIP\"` and allocates a port on every node which routes to the same Endpoints as the `clusterIP`.\n- `\"LoadBalancer\"`: builds on `\"NodePort\"` and creates an external load-balancer (if supported in the current cloud) which routes to the same Endpoints as the `clusterIP`.\n- `\"ExternalName\"` - aliases this Service to the specified `externalName`. The service consists of only a ference to an external name that DNS will return as a CNAME record, without exposing or proxying of any Pods involved. Several other fields do not apply to `\"ExternalName\"` Services.\n",
      "enum": [
        "ClusterIP",
        "ExternalName",
        "LoadBalancer",
        "NodePort"
      ],
      "type": "string"
    }
  },
  "type": "object"
}
