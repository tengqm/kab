{
  "description": "Validation specifies the CEL expression which is used to apply the validation.",
  "properties": {
    "expression": {
      "description": "`expression` represents the expression which will be evaluated by [CEL](https://github.com/google/cel-spec). CEL expressions have access to the contents of the admission request/response, organized into CEL variables as well as some other useful variables:\n\n- 'object' - The object from the incoming request. The value is null for DELETE requests.\n- 'oldObject' - The existing object. The value is null for CREATE requests.\n- 'request' - Attributes of the admission request.\n- 'params' - Parameter resource referred to by the policy binding being evaluated. Only populated if the policy has a `paramKind`.\n\nThe `apiVersion`, `kind`, `metadata.name` and `metadata.generateName` are always accessible from the root of the object. No other metadata properties are accessible.\n\nOnly property names of the form `[a-zA-Z_.-/][a-zA-Z0-9_.-/]*` are accessible. Accessible property names are escaped according to the following rules when accessed in the expression:\n\n- '__' escapes to '__underscores__'\n- '.' escapes to '__dot__'\n- '-' escapes to '__dash__'\n- '/' escapes to '__slash__'\n- Property names that exactly match a CEL RESERVED keyword escape to '__{keyword}__'.\n\nThe keywords are:\n\n\"`true`\", \"`false`\", \"`null`\", \"`in`\", \"`as`\", \"`break`\", \"`const`\", \"`continue`\", \"`else`\", \"`for`\", \"`function`\", \"`if`\", \"`import`\", \"`let`\", \"`loop`\", \"`package`\", \"`namespace`\", \"`return`\".\n\nExamples:\n\n- Expression accessing a property named \"`namespace`\": `{\"expression\": \"object.__namespace__ > 0\"}`\n- Expression accessing a property named \"`x-prop`\": `{\"expression\": \"object.x__dash__prop > 0\"}`\n- Expression accessing a property named \"`redact__d`\": `{\"expression\": \"object.redact__underscores__d > 0\"}`\n\nEquality on arrays with list type of '`set`' or '`map`' ignores element order, i.e. `[1, 2] == [2, 1]`. Concatenation on arrays with `x-kubernetes-list-type` use the semantics of the list type:\n\n- '`set`': `X + Y` performs a union where the array positions of all elements in `X` are preserved and non-intersecting elements in `Y` are appended, retaining their partial order.\n- '`map`': `X + Y` performs a merge where the array positions of all keys in `X` are preserved but the values are overwritten by values in `Y` when the key sets of `X` and `Y` intersect. Elements in `Y` with non-intersecting keys are appended, retaining their partial order.\n",
      "type": "string"
    },
    "message": {
      "description": "`message` represents the message displayed when validation fails. The message is required if the `expression` contains line breaks. The message must not contain line breaks. If unset, the message is \"failed rule: {rule}\". e.g. \"must be a URL with the host matching spec.host\". If the `expression` contains line breaks, `message` is required. If unset, the message is \"failed expression: {expression}\". The string, when trimmed, cannot be empty string.",
      "minLength": 1,
      "type": "string"
    },
    "reason": {
      "description": "`reason` represents a machine-readable description of why this validation failed. If this is the first validation in the list to fail, this reason, as well as the corresponding HTTP response code, are used in the HTTP response to the client. The currently supported reasons are: \"Unauthorized\", \"Forbidden\", \"Invalid\", \"RequestEntityTooLarge\". If not set, \"Invalid\" is used in the response to the client.",
      "enum": [
        "Forbidden",
        "Invalid",
        "RequestEntityTooLarge",
        "Unauthorized"
      ],
      "type": "string"
    }
  },
  "required": [
    "expression"
  ],
  "type": "object"
}
